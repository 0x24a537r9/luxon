{"version":3,"file":"luxon.js","sources":["node_modules/core-js/modules/_global.js","node_modules/core-js/modules/_has.js","node_modules/core-js/modules/_fails.js","node_modules/core-js/modules/_descriptors.js","node_modules/core-js/modules/_core.js","node_modules/core-js/modules/_is-object.js","node_modules/core-js/modules/_an-object.js","node_modules/core-js/modules/_dom-create.js","node_modules/core-js/modules/_ie8-dom-define.js","node_modules/core-js/modules/_to-primitive.js","node_modules/core-js/modules/_object-dp.js","node_modules/core-js/modules/_property-desc.js","node_modules/core-js/modules/_hide.js","node_modules/core-js/modules/_uid.js","node_modules/core-js/modules/_redefine.js","node_modules/core-js/modules/_a-function.js","node_modules/core-js/modules/_ctx.js","node_modules/core-js/modules/_export.js","node_modules/core-js/modules/_meta.js","node_modules/core-js/modules/_shared.js","node_modules/core-js/modules/_wks.js","node_modules/core-js/modules/_set-to-string-tag.js","node_modules/core-js/modules/_wks-ext.js","node_modules/core-js/modules/_library.js","node_modules/core-js/modules/_wks-define.js","node_modules/core-js/modules/_cof.js","node_modules/core-js/modules/_iobject.js","node_modules/core-js/modules/_defined.js","node_modules/core-js/modules/_to-iobject.js","node_modules/core-js/modules/_to-integer.js","node_modules/core-js/modules/_to-length.js","node_modules/core-js/modules/_to-absolute-index.js","node_modules/core-js/modules/_array-includes.js","node_modules/core-js/modules/_shared-key.js","node_modules/core-js/modules/_object-keys-internal.js","node_modules/core-js/modules/_enum-bug-keys.js","node_modules/core-js/modules/_object-keys.js","node_modules/core-js/modules/_object-gops.js","node_modules/core-js/modules/_object-pie.js","node_modules/core-js/modules/_enum-keys.js","node_modules/core-js/modules/_is-array.js","node_modules/core-js/modules/_object-dps.js","node_modules/core-js/modules/_html.js","node_modules/core-js/modules/_object-create.js","node_modules/core-js/modules/_object-gopn.js","node_modules/core-js/modules/_object-gopn-ext.js","node_modules/core-js/modules/_object-gopd.js","node_modules/core-js/modules/es6.symbol.js","node_modules/core-js/modules/_classof.js","node_modules/core-js/modules/es6.object.to-string.js","node_modules/core-js/modules/es6.object.create.js","node_modules/core-js/modules/es6.object.define-property.js","node_modules/core-js/modules/es6.object.define-properties.js","node_modules/core-js/modules/_object-sap.js","node_modules/core-js/modules/es6.object.get-own-property-descriptor.js","node_modules/core-js/modules/_to-object.js","node_modules/core-js/modules/_object-gpo.js","node_modules/core-js/modules/es6.object.get-prototype-of.js","node_modules/core-js/modules/es6.object.keys.js","node_modules/core-js/modules/es6.object.get-own-property-names.js","node_modules/core-js/modules/es6.object.freeze.js","node_modules/core-js/modules/es6.object.seal.js","node_modules/core-js/modules/es6.object.prevent-extensions.js","node_modules/core-js/modules/es6.object.is-frozen.js","node_modules/core-js/modules/es6.object.is-sealed.js","node_modules/core-js/modules/es6.object.is-extensible.js","node_modules/core-js/modules/_object-assign.js","node_modules/core-js/modules/es6.object.assign.js","node_modules/core-js/modules/_same-value.js","node_modules/core-js/modules/es6.object.is.js","node_modules/core-js/modules/_set-proto.js","node_modules/core-js/modules/es6.object.set-prototype-of.js","node_modules/core-js/modules/_string-at.js","node_modules/core-js/modules/_iterators.js","node_modules/core-js/modules/_iter-create.js","node_modules/core-js/modules/_iter-define.js","node_modules/core-js/modules/es6.string.iterator.js","node_modules/core-js/modules/_add-to-unscopables.js","node_modules/core-js/modules/_iter-step.js","node_modules/core-js/modules/es6.array.iterator.js","node_modules/core-js/modules/web.dom.iterable.js","node_modules/core-js/fn/symbol/iterator.js","node_modules/core-js/modules/es6.number.is-nan.js","node_modules/core-js/modules/es6.array.is-array.js","node_modules/core-js/modules/_iter-call.js","node_modules/core-js/modules/_is-array-iter.js","node_modules/core-js/modules/_create-property.js","node_modules/core-js/modules/core.get-iterator-method.js","node_modules/core-js/modules/_iter-detect.js","node_modules/core-js/modules/es6.array.from.js","node_modules/core-js/modules/es6.array.of.js","node_modules/core-js/modules/_strict-method.js","node_modules/core-js/modules/es6.array.join.js","node_modules/core-js/modules/es6.array.slice.js","node_modules/core-js/modules/es6.array.sort.js","node_modules/core-js/modules/_array-species-constructor.js","node_modules/core-js/modules/_array-species-create.js","node_modules/core-js/modules/_array-methods.js","node_modules/core-js/modules/es6.array.for-each.js","node_modules/core-js/modules/es6.array.map.js","node_modules/core-js/modules/es6.array.filter.js","node_modules/core-js/modules/es6.array.some.js","node_modules/core-js/modules/es6.array.every.js","node_modules/core-js/modules/_array-reduce.js","node_modules/core-js/modules/es6.array.reduce.js","node_modules/core-js/modules/es6.array.reduce-right.js","node_modules/core-js/modules/es6.array.index-of.js","node_modules/core-js/modules/es6.array.last-index-of.js","node_modules/core-js/modules/_array-copy-within.js","node_modules/core-js/modules/es6.array.copy-within.js","node_modules/core-js/modules/_array-fill.js","node_modules/core-js/modules/es6.array.fill.js","node_modules/core-js/modules/es6.array.find.js","node_modules/core-js/modules/es6.array.find-index.js","node_modules/core-js/modules/_set-species.js","node_modules/core-js/modules/es6.array.species.js","node_modules/core-js/modules/_is-regexp.js","node_modules/core-js/modules/_string-context.js","node_modules/core-js/modules/_fails-is-regexp.js","node_modules/core-js/modules/es6.string.starts-with.js","node_modules/core-js/modules/_entry-virtual.js","node_modules/core-js/fn/string/virtual/starts-with.js","node_modules/core-js/modules/_string-repeat.js","node_modules/core-js/modules/_string-pad.js","node_modules/core-js/modules/es7.string.pad-start.js","node_modules/core-js/fn/string/virtual/pad-start.js","src/errors.js","src/zone.js","src/settings.js","src/zones/localZone.js","src/zones/IANAZone.js","src/zones/fixedOffsetZone.js","src/impl/util.js","src/impl/english.js","src/impl/locale.js","src/impl/formatter.js","src/impl/regexParser.js","src/duration.js","src/interval.js","src/impl/tokenParser.js","src/impl/conversions.js","src/datetime.js","src/info.js"],"sourcesContent":["// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","var core = module.exports = { version: '2.5.1' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","var global = require('./_global');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar SRC = require('./_uid')('src');\nvar TO_STRING = 'toString';\nvar $toString = Function[TO_STRING];\nvar TPL = ('' + $toString).split(TO_STRING);\n\nrequire('./_core').inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar hide = require('./_hide');\nvar redefine = require('./_redefine');\nvar ctx = require('./_ctx');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","var META = require('./_uid')('meta');\nvar isObject = require('./_is-object');\nvar has = require('./_has');\nvar setDesc = require('./_object-dp').f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !require('./_fails')(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n","var global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function (key) {\n  return store[key] || (store[key] = {});\n};\n","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n","exports.f = require('./_wks');\n","module.exports = false;\n","var global = require('./_global');\nvar core = require('./_core');\nvar LIBRARY = require('./_library');\nvar wksExt = require('./_wks-ext');\nvar defineProperty = require('./_object-dp').f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n","exports.f = Object.getOwnPropertySymbols;\n","exports.f = {}.propertyIsEnumerable;\n","// all enumerable object keys, includes symbols\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = require('./_object-keys-internal');\nvar hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require('./_to-iobject');\nvar gOPN = require('./_object-gopn').f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n","var pIE = require('./_object-pie');\nvar createDesc = require('./_property-desc');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar has = require('./_has');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n","'use strict';\n// ECMAScript 6 symbols shim\nvar global = require('./_global');\nvar has = require('./_has');\nvar DESCRIPTORS = require('./_descriptors');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar META = require('./_meta').KEY;\nvar $fails = require('./_fails');\nvar shared = require('./_shared');\nvar setToStringTag = require('./_set-to-string-tag');\nvar uid = require('./_uid');\nvar wks = require('./_wks');\nvar wksExt = require('./_wks-ext');\nvar wksDefine = require('./_wks-define');\nvar enumKeys = require('./_enum-keys');\nvar isArray = require('./_is-array');\nvar anObject = require('./_an-object');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar createDesc = require('./_property-desc');\nvar _create = require('./_object-create');\nvar gOPNExt = require('./_object-gopn-ext');\nvar $GOPD = require('./_object-gopd');\nvar $DP = require('./_object-dp');\nvar $keys = require('./_object-keys');\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function';\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;\n  require('./_object-pie').f = $propertyIsEnumerable;\n  require('./_object-gops').f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !require('./_library')) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    replacer = args[1];\n    if (typeof replacer == 'function') $replacer = replacer;\n    if ($replacer || !isArray(replacer)) replacer = function (key, value) {\n      if ($replacer) value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n","// getting tag from 19.1.3.6 Object.prototype.toString()\nvar cof = require('./_cof');\nvar TAG = require('./_wks')('toStringTag');\n// ES3 wrong here\nvar ARG = cof(function () { return arguments; }()) == 'Arguments';\n\n// fallback for IE11 Script Access Denied error\nvar tryGet = function (it, key) {\n  try {\n    return it[key];\n  } catch (e) { /* empty */ }\n};\n\nmodule.exports = function (it) {\n  var O, T, B;\n  return it === undefined ? 'Undefined' : it === null ? 'Null'\n    // @@toStringTag case\n    : typeof (T = tryGet(O = Object(it), TAG)) == 'string' ? T\n    // builtinTag case\n    : ARG ? cof(O)\n    // ES3 arguments fallback\n    : (B = cof(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : B;\n};\n","'use strict';\n// 19.1.3.6 Object.prototype.toString()\nvar classof = require('./_classof');\nvar test = {};\ntest[require('./_wks')('toStringTag')] = 'z';\nif (test + '' != '[object z]') {\n  require('./_redefine')(Object.prototype, 'toString', function toString() {\n    return '[object ' + classof(this) + ']';\n  }, true);\n}\n","var $export = require('./_export');\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n$export($export.S, 'Object', { create: require('./_object-create') });\n","var $export = require('./_export');\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });\n","var $export = require('./_export');\n// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperties: require('./_object-dps') });\n","// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n","// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\nvar toIObject = require('./_to-iobject');\nvar $getOwnPropertyDescriptor = require('./_object-gopd').f;\n\nrequire('./_object-sap')('getOwnPropertyDescriptor', function () {\n  return function getOwnPropertyDescriptor(it, key) {\n    return $getOwnPropertyDescriptor(toIObject(it), key);\n  };\n});\n","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n","// 19.1.2.9 Object.getPrototypeOf(O)\nvar toObject = require('./_to-object');\nvar $getPrototypeOf = require('./_object-gpo');\n\nrequire('./_object-sap')('getPrototypeOf', function () {\n  return function getPrototypeOf(it) {\n    return $getPrototypeOf(toObject(it));\n  };\n});\n","// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n","// 19.1.2.7 Object.getOwnPropertyNames(O)\nrequire('./_object-sap')('getOwnPropertyNames', function () {\n  return require('./_object-gopn-ext').f;\n});\n","// 19.1.2.5 Object.freeze(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('freeze', function ($freeze) {\n  return function freeze(it) {\n    return $freeze && isObject(it) ? $freeze(meta(it)) : it;\n  };\n});\n","// 19.1.2.17 Object.seal(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('seal', function ($seal) {\n  return function seal(it) {\n    return $seal && isObject(it) ? $seal(meta(it)) : it;\n  };\n});\n","// 19.1.2.15 Object.preventExtensions(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('preventExtensions', function ($preventExtensions) {\n  return function preventExtensions(it) {\n    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;\n  };\n});\n","// 19.1.2.12 Object.isFrozen(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isFrozen', function ($isFrozen) {\n  return function isFrozen(it) {\n    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;\n  };\n});\n","// 19.1.2.13 Object.isSealed(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isSealed', function ($isSealed) {\n  return function isSealed(it) {\n    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;\n  };\n});\n","// 19.1.2.11 Object.isExtensible(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isExtensible', function ($isExtensible) {\n  return function isExtensible(it) {\n    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;\n  };\n});\n","'use strict';\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || require('./_fails')(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n","// 19.1.3.1 Object.assign(target, source)\nvar $export = require('./_export');\n\n$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });\n","// 7.2.9 SameValue(x, y)\nmodule.exports = Object.is || function is(x, y) {\n  // eslint-disable-next-line no-self-compare\n  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;\n};\n","// 19.1.3.10 Object.is(value1, value2)\nvar $export = require('./_export');\n$export($export.S, 'Object', { is: require('./_same-value') });\n","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n","// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = require('./_export');\n$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });\n","var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n","module.exports = {};\n","'use strict';\nvar create = require('./_object-create');\nvar descriptor = require('./_property-desc');\nvar setToStringTag = require('./_set-to-string-tag');\nvar IteratorPrototype = {};\n\n// 25.1.2.1.1 %IteratorPrototype%[@@iterator]()\nrequire('./_hide')(IteratorPrototype, require('./_wks')('iterator'), function () { return this; });\n\nmodule.exports = function (Constructor, NAME, next) {\n  Constructor.prototype = create(IteratorPrototype, { next: descriptor(1, next) });\n  setToStringTag(Constructor, NAME + ' Iterator');\n};\n","'use strict';\nvar LIBRARY = require('./_library');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar Iterators = require('./_iterators');\nvar $iterCreate = require('./_iter-create');\nvar setToStringTag = require('./_set-to-string-tag');\nvar getPrototypeOf = require('./_object-gpo');\nvar ITERATOR = require('./_wks')('iterator');\nvar BUGGY = !([].keys && 'next' in [].keys()); // Safari has buggy iterators w/o `next`\nvar FF_ITERATOR = '@@iterator';\nvar KEYS = 'keys';\nvar VALUES = 'values';\n\nvar returnThis = function () { return this; };\n\nmodule.exports = function (Base, NAME, Constructor, next, DEFAULT, IS_SET, FORCED) {\n  $iterCreate(Constructor, NAME, next);\n  var getMethod = function (kind) {\n    if (!BUGGY && kind in proto) return proto[kind];\n    switch (kind) {\n      case KEYS: return function keys() { return new Constructor(this, kind); };\n      case VALUES: return function values() { return new Constructor(this, kind); };\n    } return function entries() { return new Constructor(this, kind); };\n  };\n  var TAG = NAME + ' Iterator';\n  var DEF_VALUES = DEFAULT == VALUES;\n  var VALUES_BUG = false;\n  var proto = Base.prototype;\n  var $native = proto[ITERATOR] || proto[FF_ITERATOR] || DEFAULT && proto[DEFAULT];\n  var $default = $native || getMethod(DEFAULT);\n  var $entries = DEFAULT ? !DEF_VALUES ? $default : getMethod('entries') : undefined;\n  var $anyNative = NAME == 'Array' ? proto.entries || $native : $native;\n  var methods, key, IteratorPrototype;\n  // Fix native\n  if ($anyNative) {\n    IteratorPrototype = getPrototypeOf($anyNative.call(new Base()));\n    if (IteratorPrototype !== Object.prototype && IteratorPrototype.next) {\n      // Set @@toStringTag to native iterators\n      setToStringTag(IteratorPrototype, TAG, true);\n      // fix for some old engines\n      if (!LIBRARY && !has(IteratorPrototype, ITERATOR)) hide(IteratorPrototype, ITERATOR, returnThis);\n    }\n  }\n  // fix Array#{values, @@iterator}.name in V8 / FF\n  if (DEF_VALUES && $native && $native.name !== VALUES) {\n    VALUES_BUG = true;\n    $default = function values() { return $native.call(this); };\n  }\n  // Define iterator\n  if ((!LIBRARY || FORCED) && (BUGGY || VALUES_BUG || !proto[ITERATOR])) {\n    hide(proto, ITERATOR, $default);\n  }\n  // Plug for library\n  Iterators[NAME] = $default;\n  Iterators[TAG] = returnThis;\n  if (DEFAULT) {\n    methods = {\n      values: DEF_VALUES ? $default : getMethod(VALUES),\n      keys: IS_SET ? $default : getMethod(KEYS),\n      entries: $entries\n    };\n    if (FORCED) for (key in methods) {\n      if (!(key in proto)) redefine(proto, key, methods[key]);\n    } else $export($export.P + $export.F * (BUGGY || VALUES_BUG), NAME, methods);\n  }\n  return methods;\n};\n","'use strict';\nvar $at = require('./_string-at')(true);\n\n// 21.1.3.27 String.prototype[@@iterator]()\nrequire('./_iter-define')(String, 'String', function (iterated) {\n  this._t = String(iterated); // target\n  this._i = 0;                // next index\n// 21.1.5.2.1 %StringIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var index = this._i;\n  var point;\n  if (index >= O.length) return { value: undefined, done: true };\n  point = $at(O, index);\n  this._i += point.length;\n  return { value: point, done: false };\n});\n","// 22.1.3.31 Array.prototype[@@unscopables]\nvar UNSCOPABLES = require('./_wks')('unscopables');\nvar ArrayProto = Array.prototype;\nif (ArrayProto[UNSCOPABLES] == undefined) require('./_hide')(ArrayProto, UNSCOPABLES, {});\nmodule.exports = function (key) {\n  ArrayProto[UNSCOPABLES][key] = true;\n};\n","module.exports = function (done, value) {\n  return { value: value, done: !!done };\n};\n","'use strict';\nvar addToUnscopables = require('./_add-to-unscopables');\nvar step = require('./_iter-step');\nvar Iterators = require('./_iterators');\nvar toIObject = require('./_to-iobject');\n\n// 22.1.3.4 Array.prototype.entries()\n// 22.1.3.13 Array.prototype.keys()\n// 22.1.3.29 Array.prototype.values()\n// 22.1.3.30 Array.prototype[@@iterator]()\nmodule.exports = require('./_iter-define')(Array, 'Array', function (iterated, kind) {\n  this._t = toIObject(iterated); // target\n  this._i = 0;                   // next index\n  this._k = kind;                // kind\n// 22.1.5.2.1 %ArrayIteratorPrototype%.next()\n}, function () {\n  var O = this._t;\n  var kind = this._k;\n  var index = this._i++;\n  if (!O || index >= O.length) {\n    this._t = undefined;\n    return step(1);\n  }\n  if (kind == 'keys') return step(0, index);\n  if (kind == 'values') return step(0, O[index]);\n  return step(0, [index, O[index]]);\n}, 'values');\n\n// argumentsList[@@iterator] is %ArrayProto_values% (9.4.4.6, 9.4.4.7)\nIterators.Arguments = Iterators.Array;\n\naddToUnscopables('keys');\naddToUnscopables('values');\naddToUnscopables('entries');\n","var $iterators = require('./es6.array.iterator');\nvar getKeys = require('./_object-keys');\nvar redefine = require('./_redefine');\nvar global = require('./_global');\nvar hide = require('./_hide');\nvar Iterators = require('./_iterators');\nvar wks = require('./_wks');\nvar ITERATOR = wks('iterator');\nvar TO_STRING_TAG = wks('toStringTag');\nvar ArrayValues = Iterators.Array;\n\nvar DOMIterables = {\n  CSSRuleList: true, // TODO: Not spec compliant, should be false.\n  CSSStyleDeclaration: false,\n  CSSValueList: false,\n  ClientRectList: false,\n  DOMRectList: false,\n  DOMStringList: false,\n  DOMTokenList: true,\n  DataTransferItemList: false,\n  FileList: false,\n  HTMLAllCollection: false,\n  HTMLCollection: false,\n  HTMLFormElement: false,\n  HTMLSelectElement: false,\n  MediaList: true, // TODO: Not spec compliant, should be false.\n  MimeTypeArray: false,\n  NamedNodeMap: false,\n  NodeList: true,\n  PaintRequestList: false,\n  Plugin: false,\n  PluginArray: false,\n  SVGLengthList: false,\n  SVGNumberList: false,\n  SVGPathSegList: false,\n  SVGPointList: false,\n  SVGStringList: false,\n  SVGTransformList: false,\n  SourceBufferList: false,\n  StyleSheetList: true, // TODO: Not spec compliant, should be false.\n  TextTrackCueList: false,\n  TextTrackList: false,\n  TouchList: false\n};\n\nfor (var collections = getKeys(DOMIterables), i = 0; i < collections.length; i++) {\n  var NAME = collections[i];\n  var explicit = DOMIterables[NAME];\n  var Collection = global[NAME];\n  var proto = Collection && Collection.prototype;\n  var key;\n  if (proto) {\n    if (!proto[ITERATOR]) hide(proto, ITERATOR, ArrayValues);\n    if (!proto[TO_STRING_TAG]) hide(proto, TO_STRING_TAG, NAME);\n    Iterators[NAME] = ArrayValues;\n    if (explicit) for (key in $iterators) if (!proto[key]) redefine(proto, key, $iterators[key], true);\n  }\n}\n","require('../../modules/es6.string.iterator');\nrequire('../../modules/web.dom.iterable');\nmodule.exports = require('../../modules/_wks-ext').f('iterator');\n","// 20.1.2.4 Number.isNaN(number)\nvar $export = require('./_export');\n\n$export($export.S, 'Number', {\n  isNaN: function isNaN(number) {\n    // eslint-disable-next-line no-self-compare\n    return number != number;\n  }\n});\n","// 22.1.2.2 / 15.4.3.2 Array.isArray(arg)\nvar $export = require('./_export');\n\n$export($export.S, 'Array', { isArray: require('./_is-array') });\n","// call something on iterator step with safe closing on error\nvar anObject = require('./_an-object');\nmodule.exports = function (iterator, fn, value, entries) {\n  try {\n    return entries ? fn(anObject(value)[0], value[1]) : fn(value);\n  // 7.4.6 IteratorClose(iterator, completion)\n  } catch (e) {\n    var ret = iterator['return'];\n    if (ret !== undefined) anObject(ret.call(iterator));\n    throw e;\n  }\n};\n","// check on default Array iterator\nvar Iterators = require('./_iterators');\nvar ITERATOR = require('./_wks')('iterator');\nvar ArrayProto = Array.prototype;\n\nmodule.exports = function (it) {\n  return it !== undefined && (Iterators.Array === it || ArrayProto[ITERATOR] === it);\n};\n","'use strict';\nvar $defineProperty = require('./_object-dp');\nvar createDesc = require('./_property-desc');\n\nmodule.exports = function (object, index, value) {\n  if (index in object) $defineProperty.f(object, index, createDesc(0, value));\n  else object[index] = value;\n};\n","var classof = require('./_classof');\nvar ITERATOR = require('./_wks')('iterator');\nvar Iterators = require('./_iterators');\nmodule.exports = require('./_core').getIteratorMethod = function (it) {\n  if (it != undefined) return it[ITERATOR]\n    || it['@@iterator']\n    || Iterators[classof(it)];\n};\n","var ITERATOR = require('./_wks')('iterator');\nvar SAFE_CLOSING = false;\n\ntry {\n  var riter = [7][ITERATOR]();\n  riter['return'] = function () { SAFE_CLOSING = true; };\n  // eslint-disable-next-line no-throw-literal\n  Array.from(riter, function () { throw 2; });\n} catch (e) { /* empty */ }\n\nmodule.exports = function (exec, skipClosing) {\n  if (!skipClosing && !SAFE_CLOSING) return false;\n  var safe = false;\n  try {\n    var arr = [7];\n    var iter = arr[ITERATOR]();\n    iter.next = function () { return { done: safe = true }; };\n    arr[ITERATOR] = function () { return iter; };\n    exec(arr);\n  } catch (e) { /* empty */ }\n  return safe;\n};\n","'use strict';\nvar ctx = require('./_ctx');\nvar $export = require('./_export');\nvar toObject = require('./_to-object');\nvar call = require('./_iter-call');\nvar isArrayIter = require('./_is-array-iter');\nvar toLength = require('./_to-length');\nvar createProperty = require('./_create-property');\nvar getIterFn = require('./core.get-iterator-method');\n\n$export($export.S + $export.F * !require('./_iter-detect')(function (iter) { Array.from(iter); }), 'Array', {\n  // 22.1.2.1 Array.from(arrayLike, mapfn = undefined, thisArg = undefined)\n  from: function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {\n    var O = toObject(arrayLike);\n    var C = typeof this == 'function' ? this : Array;\n    var aLen = arguments.length;\n    var mapfn = aLen > 1 ? arguments[1] : undefined;\n    var mapping = mapfn !== undefined;\n    var index = 0;\n    var iterFn = getIterFn(O);\n    var length, result, step, iterator;\n    if (mapping) mapfn = ctx(mapfn, aLen > 2 ? arguments[2] : undefined, 2);\n    // if object isn't iterable or it's array with default iterator - use simple case\n    if (iterFn != undefined && !(C == Array && isArrayIter(iterFn))) {\n      for (iterator = iterFn.call(O), result = new C(); !(step = iterator.next()).done; index++) {\n        createProperty(result, index, mapping ? call(iterator, mapfn, [step.value, index], true) : step.value);\n      }\n    } else {\n      length = toLength(O.length);\n      for (result = new C(length); length > index; index++) {\n        createProperty(result, index, mapping ? mapfn(O[index], index) : O[index]);\n      }\n    }\n    result.length = index;\n    return result;\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar createProperty = require('./_create-property');\n\n// WebKit Array.of isn't generic\n$export($export.S + $export.F * require('./_fails')(function () {\n  function F() { /* empty */ }\n  return !(Array.of.call(F) instanceof F);\n}), 'Array', {\n  // 22.1.2.3 Array.of( ...items)\n  of: function of(/* ...args */) {\n    var index = 0;\n    var aLen = arguments.length;\n    var result = new (typeof this == 'function' ? this : Array)(aLen);\n    while (aLen > index) createProperty(result, index, arguments[index++]);\n    result.length = aLen;\n    return result;\n  }\n});\n","'use strict';\nvar fails = require('./_fails');\n\nmodule.exports = function (method, arg) {\n  return !!method && fails(function () {\n    // eslint-disable-next-line no-useless-call\n    arg ? method.call(null, function () { /* empty */ }, 1) : method.call(null);\n  });\n};\n","'use strict';\n// 22.1.3.13 Array.prototype.join(separator)\nvar $export = require('./_export');\nvar toIObject = require('./_to-iobject');\nvar arrayJoin = [].join;\n\n// fallback for not array-like strings\n$export($export.P + $export.F * (require('./_iobject') != Object || !require('./_strict-method')(arrayJoin)), 'Array', {\n  join: function join(separator) {\n    return arrayJoin.call(toIObject(this), separator === undefined ? ',' : separator);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar html = require('./_html');\nvar cof = require('./_cof');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nvar arraySlice = [].slice;\n\n// fallback for not array-like ES3 strings and DOM objects\n$export($export.P + $export.F * require('./_fails')(function () {\n  if (html) arraySlice.call(html);\n}), 'Array', {\n  slice: function slice(begin, end) {\n    var len = toLength(this.length);\n    var klass = cof(this);\n    end = end === undefined ? len : end;\n    if (klass == 'Array') return arraySlice.call(this, begin, end);\n    var start = toAbsoluteIndex(begin, len);\n    var upTo = toAbsoluteIndex(end, len);\n    var size = toLength(upTo - start);\n    var cloned = Array(size);\n    var i = 0;\n    for (; i < size; i++) cloned[i] = klass == 'String'\n      ? this.charAt(start + i)\n      : this[start + i];\n    return cloned;\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar aFunction = require('./_a-function');\nvar toObject = require('./_to-object');\nvar fails = require('./_fails');\nvar $sort = [].sort;\nvar test = [1, 2, 3];\n\n$export($export.P + $export.F * (fails(function () {\n  // IE8-\n  test.sort(undefined);\n}) || !fails(function () {\n  // V8 bug\n  test.sort(null);\n  // Old WebKit\n}) || !require('./_strict-method')($sort)), 'Array', {\n  // 22.1.3.25 Array.prototype.sort(comparefn)\n  sort: function sort(comparefn) {\n    return comparefn === undefined\n      ? $sort.call(toObject(this))\n      : $sort.call(toObject(this), aFunction(comparefn));\n  }\n});\n","var isObject = require('./_is-object');\nvar isArray = require('./_is-array');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (original) {\n  var C;\n  if (isArray(original)) {\n    C = original.constructor;\n    // cross-realm fallback\n    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;\n    if (isObject(C)) {\n      C = C[SPECIES];\n      if (C === null) C = undefined;\n    }\n  } return C === undefined ? Array : C;\n};\n","// 9.4.2.3 ArraySpeciesCreate(originalArray, length)\nvar speciesConstructor = require('./_array-species-constructor');\n\nmodule.exports = function (original, length) {\n  return new (speciesConstructor(original))(length);\n};\n","// 0 -> Array#forEach\n// 1 -> Array#map\n// 2 -> Array#filter\n// 3 -> Array#some\n// 4 -> Array#every\n// 5 -> Array#find\n// 6 -> Array#findIndex\nvar ctx = require('./_ctx');\nvar IObject = require('./_iobject');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar asc = require('./_array-species-create');\nmodule.exports = function (TYPE, $create) {\n  var IS_MAP = TYPE == 1;\n  var IS_FILTER = TYPE == 2;\n  var IS_SOME = TYPE == 3;\n  var IS_EVERY = TYPE == 4;\n  var IS_FIND_INDEX = TYPE == 6;\n  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;\n  var create = $create || asc;\n  return function ($this, callbackfn, that) {\n    var O = toObject($this);\n    var self = IObject(O);\n    var f = ctx(callbackfn, that, 3);\n    var length = toLength(self.length);\n    var index = 0;\n    var result = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;\n    var val, res;\n    for (;length > index; index++) if (NO_HOLES || index in self) {\n      val = self[index];\n      res = f(val, index, O);\n      if (TYPE) {\n        if (IS_MAP) result[index] = res;   // map\n        else if (res) switch (TYPE) {\n          case 3: return true;             // some\n          case 5: return val;              // find\n          case 6: return index;            // findIndex\n          case 2: result.push(val);        // filter\n        } else if (IS_EVERY) return false; // every\n      }\n    }\n    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : result;\n  };\n};\n","'use strict';\nvar $export = require('./_export');\nvar $forEach = require('./_array-methods')(0);\nvar STRICT = require('./_strict-method')([].forEach, true);\n\n$export($export.P + $export.F * !STRICT, 'Array', {\n  // 22.1.3.10 / 15.4.4.18 Array.prototype.forEach(callbackfn [, thisArg])\n  forEach: function forEach(callbackfn /* , thisArg */) {\n    return $forEach(this, callbackfn, arguments[1]);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $map = require('./_array-methods')(1);\n\n$export($export.P + $export.F * !require('./_strict-method')([].map, true), 'Array', {\n  // 22.1.3.15 / 15.4.4.19 Array.prototype.map(callbackfn [, thisArg])\n  map: function map(callbackfn /* , thisArg */) {\n    return $map(this, callbackfn, arguments[1]);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $filter = require('./_array-methods')(2);\n\n$export($export.P + $export.F * !require('./_strict-method')([].filter, true), 'Array', {\n  // 22.1.3.7 / 15.4.4.20 Array.prototype.filter(callbackfn [, thisArg])\n  filter: function filter(callbackfn /* , thisArg */) {\n    return $filter(this, callbackfn, arguments[1]);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $some = require('./_array-methods')(3);\n\n$export($export.P + $export.F * !require('./_strict-method')([].some, true), 'Array', {\n  // 22.1.3.23 / 15.4.4.17 Array.prototype.some(callbackfn [, thisArg])\n  some: function some(callbackfn /* , thisArg */) {\n    return $some(this, callbackfn, arguments[1]);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $every = require('./_array-methods')(4);\n\n$export($export.P + $export.F * !require('./_strict-method')([].every, true), 'Array', {\n  // 22.1.3.5 / 15.4.4.16 Array.prototype.every(callbackfn [, thisArg])\n  every: function every(callbackfn /* , thisArg */) {\n    return $every(this, callbackfn, arguments[1]);\n  }\n});\n","var aFunction = require('./_a-function');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar toLength = require('./_to-length');\n\nmodule.exports = function (that, callbackfn, aLen, memo, isRight) {\n  aFunction(callbackfn);\n  var O = toObject(that);\n  var self = IObject(O);\n  var length = toLength(O.length);\n  var index = isRight ? length - 1 : 0;\n  var i = isRight ? -1 : 1;\n  if (aLen < 2) for (;;) {\n    if (index in self) {\n      memo = self[index];\n      index += i;\n      break;\n    }\n    index += i;\n    if (isRight ? index < 0 : length <= index) {\n      throw TypeError('Reduce of empty array with no initial value');\n    }\n  }\n  for (;isRight ? index >= 0 : length > index; index += i) if (index in self) {\n    memo = callbackfn(memo, self[index], index, O);\n  }\n  return memo;\n};\n","'use strict';\nvar $export = require('./_export');\nvar $reduce = require('./_array-reduce');\n\n$export($export.P + $export.F * !require('./_strict-method')([].reduce, true), 'Array', {\n  // 22.1.3.18 / 15.4.4.21 Array.prototype.reduce(callbackfn [, initialValue])\n  reduce: function reduce(callbackfn /* , initialValue */) {\n    return $reduce(this, callbackfn, arguments.length, arguments[1], false);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $reduce = require('./_array-reduce');\n\n$export($export.P + $export.F * !require('./_strict-method')([].reduceRight, true), 'Array', {\n  // 22.1.3.19 / 15.4.4.22 Array.prototype.reduceRight(callbackfn [, initialValue])\n  reduceRight: function reduceRight(callbackfn /* , initialValue */) {\n    return $reduce(this, callbackfn, arguments.length, arguments[1], true);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar $indexOf = require('./_array-includes')(false);\nvar $native = [].indexOf;\nvar NEGATIVE_ZERO = !!$native && 1 / [1].indexOf(1, -0) < 0;\n\n$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {\n  // 22.1.3.11 / 15.4.4.14 Array.prototype.indexOf(searchElement [, fromIndex])\n  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {\n    return NEGATIVE_ZERO\n      // convert -0 to +0\n      ? $native.apply(this, arguments) || 0\n      : $indexOf(this, searchElement, arguments[1]);\n  }\n});\n","'use strict';\nvar $export = require('./_export');\nvar toIObject = require('./_to-iobject');\nvar toInteger = require('./_to-integer');\nvar toLength = require('./_to-length');\nvar $native = [].lastIndexOf;\nvar NEGATIVE_ZERO = !!$native && 1 / [1].lastIndexOf(1, -0) < 0;\n\n$export($export.P + $export.F * (NEGATIVE_ZERO || !require('./_strict-method')($native)), 'Array', {\n  // 22.1.3.14 / 15.4.4.15 Array.prototype.lastIndexOf(searchElement [, fromIndex])\n  lastIndexOf: function lastIndexOf(searchElement /* , fromIndex = @[*-1] */) {\n    // convert -0 to +0\n    if (NEGATIVE_ZERO) return $native.apply(this, arguments) || 0;\n    var O = toIObject(this);\n    var length = toLength(O.length);\n    var index = length - 1;\n    if (arguments.length > 1) index = Math.min(index, toInteger(arguments[1]));\n    if (index < 0) index = length + index;\n    for (;index >= 0; index--) if (index in O) if (O[index] === searchElement) return index || 0;\n    return -1;\n  }\n});\n","// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\n\nmodule.exports = [].copyWithin || function copyWithin(target /* = 0 */, start /* = 0, end = @length */) {\n  var O = toObject(this);\n  var len = toLength(O.length);\n  var to = toAbsoluteIndex(target, len);\n  var from = toAbsoluteIndex(start, len);\n  var end = arguments.length > 2 ? arguments[2] : undefined;\n  var count = Math.min((end === undefined ? len : toAbsoluteIndex(end, len)) - from, len - to);\n  var inc = 1;\n  if (from < to && to < from + count) {\n    inc = -1;\n    from += count - 1;\n    to += count - 1;\n  }\n  while (count-- > 0) {\n    if (from in O) O[to] = O[from];\n    else delete O[to];\n    to += inc;\n    from += inc;\n  } return O;\n};\n","// 22.1.3.3 Array.prototype.copyWithin(target, start, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', { copyWithin: require('./_array-copy-within') });\n\nrequire('./_add-to-unscopables')('copyWithin');\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\n'use strict';\nvar toObject = require('./_to-object');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nvar toLength = require('./_to-length');\nmodule.exports = function fill(value /* , start = 0, end = @length */) {\n  var O = toObject(this);\n  var length = toLength(O.length);\n  var aLen = arguments.length;\n  var index = toAbsoluteIndex(aLen > 1 ? arguments[1] : undefined, length);\n  var end = aLen > 2 ? arguments[2] : undefined;\n  var endPos = end === undefined ? length : toAbsoluteIndex(end, length);\n  while (endPos > index) O[index++] = value;\n  return O;\n};\n","// 22.1.3.6 Array.prototype.fill(value, start = 0, end = this.length)\nvar $export = require('./_export');\n\n$export($export.P, 'Array', { fill: require('./_array-fill') });\n\nrequire('./_add-to-unscopables')('fill');\n","'use strict';\n// 22.1.3.8 Array.prototype.find(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(5);\nvar KEY = 'find';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  find: function find(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","'use strict';\n// 22.1.3.9 Array.prototype.findIndex(predicate, thisArg = undefined)\nvar $export = require('./_export');\nvar $find = require('./_array-methods')(6);\nvar KEY = 'findIndex';\nvar forced = true;\n// Shouldn't skip holes\nif (KEY in []) Array(1)[KEY](function () { forced = false; });\n$export($export.P + $export.F * forced, 'Array', {\n  findIndex: function findIndex(callbackfn /* , that = undefined */) {\n    return $find(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\nrequire('./_add-to-unscopables')(KEY);\n","'use strict';\nvar global = require('./_global');\nvar dP = require('./_object-dp');\nvar DESCRIPTORS = require('./_descriptors');\nvar SPECIES = require('./_wks')('species');\n\nmodule.exports = function (KEY) {\n  var C = global[KEY];\n  if (DESCRIPTORS && C && !C[SPECIES]) dP.f(C, SPECIES, {\n    configurable: true,\n    get: function () { return this; }\n  });\n};\n","require('./_set-species')('Array');\n","// 7.2.8 IsRegExp(argument)\nvar isObject = require('./_is-object');\nvar cof = require('./_cof');\nvar MATCH = require('./_wks')('match');\nmodule.exports = function (it) {\n  var isRegExp;\n  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : cof(it) == 'RegExp');\n};\n","// helper for String#{startsWith, endsWith, includes}\nvar isRegExp = require('./_is-regexp');\nvar defined = require('./_defined');\n\nmodule.exports = function (that, searchString, NAME) {\n  if (isRegExp(searchString)) throw TypeError('String#' + NAME + \" doesn't accept regex!\");\n  return String(defined(that));\n};\n","var MATCH = require('./_wks')('match');\nmodule.exports = function (KEY) {\n  var re = /./;\n  try {\n    '/./'[KEY](re);\n  } catch (e) {\n    try {\n      re[MATCH] = false;\n      return !'/./'[KEY](re);\n    } catch (f) { /* empty */ }\n  } return true;\n};\n","// 21.1.3.18 String.prototype.startsWith(searchString [, position ])\n'use strict';\nvar $export = require('./_export');\nvar toLength = require('./_to-length');\nvar context = require('./_string-context');\nvar STARTS_WITH = 'startsWith';\nvar $startsWith = ''[STARTS_WITH];\n\n$export($export.P + $export.F * require('./_fails-is-regexp')(STARTS_WITH), 'String', {\n  startsWith: function startsWith(searchString /* , position = 0 */) {\n    var that = context(this, searchString, STARTS_WITH);\n    var index = toLength(Math.min(arguments.length > 1 ? arguments[1] : undefined, that.length));\n    var search = String(searchString);\n    return $startsWith\n      ? $startsWith.call(that, search, index)\n      : that.slice(index, index + search.length) === search;\n  }\n});\n","var core = require('./_core');\nmodule.exports = function (CONSTRUCTOR) {\n  var C = core[CONSTRUCTOR];\n  return (C.virtual || C.prototype);\n};\n","require('../../../modules/es6.string.starts-with');\nmodule.exports = require('../../../modules/_entry-virtual')('String').startsWith;\n","'use strict';\nvar toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n\nmodule.exports = function repeat(count) {\n  var str = String(defined(this));\n  var res = '';\n  var n = toInteger(count);\n  if (n < 0 || n == Infinity) throw RangeError(\"Count can't be negative\");\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) res += str;\n  return res;\n};\n","// https://github.com/tc39/proposal-string-pad-start-end\nvar toLength = require('./_to-length');\nvar repeat = require('./_string-repeat');\nvar defined = require('./_defined');\n\nmodule.exports = function (that, maxLength, fillString, left) {\n  var S = String(defined(that));\n  var stringLength = S.length;\n  var fillStr = fillString === undefined ? ' ' : String(fillString);\n  var intMaxLength = toLength(maxLength);\n  if (intMaxLength <= stringLength || fillStr == '') return S;\n  var fillLen = intMaxLength - stringLength;\n  var stringFiller = repeat.call(fillStr, Math.ceil(fillLen / fillStr.length));\n  if (stringFiller.length > fillLen) stringFiller = stringFiller.slice(0, fillLen);\n  return left ? stringFiller + S : S + stringFiller;\n};\n","'use strict';\n// https://github.com/tc39/proposal-string-pad-start-end\nvar $export = require('./_export');\nvar $pad = require('./_string-pad');\n\n$export($export.P, 'String', {\n  padStart: function padStart(maxLength /* , fillString = ' ' */) {\n    return $pad(this, maxLength, arguments.length > 1 ? arguments[1] : undefined, true);\n  }\n});\n","require('../../../modules/es7.string.pad-start');\nmodule.exports = require('../../../modules/_entry-virtual')('String').padStart;\n","// these aren't really private, but nor are they really useful to document\n\n/**\n * @private\n */\nclass LuxonError extends Error {}\n\n/**\n * @private\n */\nexport class InvalidDateTimeError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid DateTime: ${reason}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidIntervalError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Interval: ${reason}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidDurationError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Duration: ${reason}`);\n  }\n}\n\n/**\n * @private\n */\nexport class ConflictingSpecificationError extends LuxonError {}\n\n/**\n * @private\n */\nexport class InvalidUnitError extends LuxonError {\n  constructor(unit) {\n    super(`Invalid unit ${unit}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidArgumentError extends LuxonError {}\n\n/**\n * @private\n */\nexport class ZoneIsAbstractError extends LuxonError {\n  constructor() {\n    super('Zone is an abstract class');\n  }\n}\n","/* eslint no-unused-vars: \"off\" */\nimport { ZoneIsAbstractError } from './errors';\n\n/**\n * @interface\n*/\nexport class Zone {\n  /**\n   * The type of zone\n   * @abstract\n   * @return {string}\n   */\n  get type() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * The name of this zone.\n   * @abstract\n   * @return {string}\n   */\n  get name() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns whether the offset is known to be fixed for the whole year.\n   * @abstract\n   * @return {boolean}\n   */\n  get universal() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset's common name (such as EST) at the specified timestamp\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the name\n   * @param {Object} opts - Options to affect the format\n   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.\n   * @param {string} opts.localeCode - What locale to return the offset name in. Defaults to us-en\n   * @return {string}\n   */\n  static offsetName(ts, opts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\n   * @return {number}\n   */\n  offset(ts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is equal to another zoner\n   * @abstract\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */\n  equals(otherZone) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is valid.\n   * @abstract\n   * @return {boolean}\n   */\n  get isValid() {\n    throw new ZoneIsAbstractError();\n  }\n}\n","import { LocalZone } from './zones/localZone';\nimport { Util } from './impl/util';\n\nlet now = () => new Date().valueOf(),\n  defaultZone = null, // not setting this directly to LocalZone.instance bc loading order issues\n  throwOnInvalid = false,\n  defaultLocale = 'en-US';\n\n/**\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\n */\nexport class Settings {\n  /**\n   * Get the callback for returning the current timestamp.\n   * @type {function}\n   */\n  static get now() {\n    return now;\n  }\n\n  /**\n   * Set the callback for returning the current timestamp.\n   * @type {function}\n   */\n  static set now(n) {\n    now = n;\n  }\n\n  /**\n   * Set the default time zone to create DateTimes in.\n   * @type {string}\n   */\n  static get defaultZoneName() {\n    return (defaultZone || LocalZone.instance).name;\n  }\n\n  /**\n   * Set the default time zone to create DateTimes in. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultZoneName(z) {\n    defaultZone = Util.normalizeZone(z);\n  }\n\n  /**\n   * Get the default time zone object to create DateTimes in. Does not affect existing instances.\n   * @type {Zone}\n   */\n  static get defaultZone() {\n    return defaultZone || LocalZone.instance;\n  }\n\n  /**\n   * Get the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultLocale() {\n    return defaultLocale;\n  }\n\n  /**\n   * Set the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultLocale(locale) {\n    defaultLocale = locale;\n  }\n\n  /**\n   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {Zone}\n   */\n  static get throwOnInvalid() {\n    return throwOnInvalid;\n  }\n\n  /**\n   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {Zone}\n   */\n  static set throwOnInvalid(t) {\n    throwOnInvalid = t;\n  }\n}\n","import { Util } from '../impl/util';\nimport { Zone } from '../zone';\nimport { Settings } from '../settings';\n\nlet singleton = null;\n\n/**\n * @private\n */\n\nexport class LocalZone extends Zone {\n  static get instance() {\n    if (singleton === null) {\n      singleton = new LocalZone();\n    }\n    return singleton;\n  }\n\n  get type() {\n    return 'local';\n  }\n\n  get name() {\n    if (!Util.isUndefined(Intl) && !Util.isUndefined(Intl.DateTimeFormat)) {\n      return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n    } else return 'local';\n  }\n\n  get universal() {\n    return false;\n  }\n\n  offsetName(ts, { format = 'long', locale = Settings.defaultLocale } = {}) {\n    return Util.parseZoneInfo(ts, format, locale);\n  }\n\n  offset(ts) {\n    return -new Date(ts).getTimezoneOffset();\n  }\n\n  equals(otherZone) {\n    return otherZone.type === 'local';\n  }\n\n  get isValid() {\n    return true;\n  }\n}\n","import { Util } from '../impl/util';\nimport { Zone } from '../zone';\nimport { Settings } from '../settings';\n\nconst typeToPos = {\n  year: 0,\n  month: 1,\n  day: 2,\n  hour: 3,\n  minute: 4,\n  second: 5\n};\n\nfunction hackyOffset(dtf, date) {\n  const formatted = dtf.format(date),\n    parsed = /(\\d+)\\/(\\d+)\\/(\\d+), (\\d+):(\\d+):(\\d+)/.exec(formatted),\n    [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed;\n  return [fYear, fMonth, fDay, fHour, fMinute, fSecond];\n}\n\nfunction partsOffset(dtf, date) {\n  const formatted = dtf.formatToParts(date),\n    filled = [];\n  for (let i = 0; i < formatted.length; i++) {\n    const { type, value } = formatted[i],\n      pos = typeToPos[type];\n\n    if (!Util.isUndefined(pos)) {\n      filled[pos] = parseInt(value, 10);\n    }\n  }\n  return filled;\n}\n\nfunction isValid(zone) {\n  try {\n    new Intl.DateTimeFormat('en-US', { timeZone: zone }).format();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * @private\n */\n\nexport class IANAZone extends Zone {\n  static isValidSpecier(s) {\n    return s && s.match(/[a-z_]+\\/[a-z_]+/i);\n  }\n\n  constructor(name) {\n    super();\n    this.zoneName = name;\n    this.valid = isValid(name);\n  }\n\n  get type() {\n    return 'iana';\n  }\n\n  get name() {\n    return this.zoneName;\n  }\n\n  get universal() {\n    return false;\n  }\n\n  offsetName(ts, { format = 'long', locale = Settings.defaultLocale } = {}) {\n    return Util.parseZoneInfo(ts, format, locale, this.zoneName);\n  }\n\n  offset(ts) {\n    const date = new Date(ts),\n      dtf = new Intl.DateTimeFormat('en-US', {\n        hour12: false,\n        timeZone: this.zoneName,\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      }),\n      [fYear, fMonth, fDay, fHour, fMinute, fSecond] = dtf.formatToParts\n        ? partsOffset(dtf, date)\n        : hackyOffset(dtf, date),\n      asUTC = Date.UTC(fYear, fMonth - 1, fDay, fHour, fMinute, fSecond);\n    let asTS = date.valueOf();\n    asTS -= asTS % 1000;\n    return (asUTC - asTS) / (60 * 1000);\n  }\n\n  equals(otherZone) {\n    return otherZone.type === 'iana' && otherZone.zoneName === this.zoneName;\n  }\n\n  get isValid() {\n    return this.valid;\n  }\n}\n","import { Util } from '../impl/util';\nimport { Zone } from '../zone';\n\nlet singleton = null;\n\n/**\n * @private\n */\n\nexport class FixedOffsetZone extends Zone {\n  static get utcInstance() {\n    if (singleton === null) {\n      singleton = new FixedOffsetZone(0);\n    }\n    return singleton;\n  }\n\n  static instance(offset) {\n    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);\n  }\n\n  static parseSpecifier(s) {\n    if (s) {\n      const r = s.match(/^utc(?:([+-]\\d{1,2})(?::(\\d{2}))?)?$/i);\n      if (r) {\n        return new FixedOffsetZone(Util.signedOffset(r[1], r[2]));\n      }\n    }\n    return null;\n  }\n\n  constructor(offset) {\n    super();\n    this.fixed = offset;\n  }\n\n  get type() {\n    return 'fixed';\n  }\n\n  get name() {\n    const hours = this.fixed / 60,\n      minutes = Math.abs(this.fixed % 60),\n      sign = hours > 0 ? '+' : '-',\n      base = sign + Math.abs(hours),\n      number = minutes > 0 ? `${base}:${Util.pad(minutes, 2)}` : base;\n\n    return this.fixed === 0 ? 'UTC' : `UTC${number}`;\n  }\n\n  offsetName() {\n    return this.name();\n  }\n\n  get universal() {\n    return true;\n  }\n\n  offset() {\n    return this.fixed;\n  }\n\n  equals(otherZone) {\n    return otherZone.type === 'fixed' && otherZone.fixed === this.fixed;\n  }\n\n  get isValid() {\n    return true;\n  }\n}\n","import { Duration } from '../duration';\nimport { DateTime } from '../datetime';\nimport { Zone } from '../zone';\nimport { LocalZone } from '../zones/localZone';\nimport { IANAZone } from '../zones/IANAZone';\nimport { FixedOffsetZone } from '../zones/fixedOffsetZone';\nimport { Settings } from '../settings';\nimport { InvalidArgumentError } from '../errors';\n\n/**\n * @private\n */\n\nexport class Util {\n  static friendlyDuration(duration) {\n    if (Util.isNumber(duration)) {\n      return Duration.fromMillis(duration);\n    } else if (duration instanceof Duration) {\n      return duration;\n    } else if (duration instanceof Object) {\n      return Duration.fromObject(duration);\n    } else {\n      throw new InvalidArgumentError('Unknown duration argument');\n    }\n  }\n\n  static friendlyDateTime(dateTimeish) {\n    if (dateTimeish instanceof DateTime) {\n      return dateTimeish;\n    } else if (dateTimeish.valueOf && Util.isNumber(dateTimeish.valueOf())) {\n      return DateTime.fromJSDate(dateTimeish);\n    } else if (dateTimeish instanceof Object) {\n      return DateTime.fromObject(dateTimeish);\n    } else {\n      throw new InvalidArgumentError('Unknown datetime argument');\n    }\n  }\n\n  static maybeArray(thing) {\n    return Array.isArray(thing) ? thing : [thing];\n  }\n\n  static isUndefined(o) {\n    return typeof o === 'undefined';\n  }\n\n  static isNumber(o) {\n    return typeof o === 'number';\n  }\n\n  static isString(o) {\n    return typeof o === 'string';\n  }\n\n  static isDate(o) {\n    return Object.prototype.toString.call(o) === '[object Date]';\n  }\n\n  static numberBetween(thing, bottom, top) {\n    return Util.isNumber(thing) && thing >= bottom && thing <= top;\n  }\n\n  static pad(input, n = 2) {\n    return ('0'.repeat(n) + input).slice(-n);\n  }\n\n  static towardZero(input) {\n    return input < 0 ? Math.ceil(input) : Math.floor(input);\n  }\n\n  // DateTime -> JS date such that the date's UTC time is the datetimes's local time\n  static asIfUTC(dt) {\n    const ts = dt.ts - dt.offset;\n    return new Date(ts);\n  }\n\n  // http://stackoverflow.com/a/15030117\n  static flatten(arr) {\n    return arr.reduce(\n      (flat, toFlatten) =>\n        flat.concat(Array.isArray(toFlatten) ? Util.flatten(toFlatten) : toFlatten),\n      []\n    );\n  }\n\n  static bestBy(arr, by, compare) {\n    return arr.reduce((best, next) => {\n      const pair = [by(next), next];\n      if (!best) {\n        return pair;\n      } else if (compare.apply(null, [best[0], pair[0]]) === best[0]) {\n        return best;\n      } else {\n        return pair;\n      }\n    }, null)[1];\n  }\n\n  static pick(obj, keys) {\n    return keys.reduce((a, k) => {\n      a[k] = obj[k];\n      return a;\n    }, {});\n  }\n\n  static isLeapYear(year) {\n    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n  }\n\n  static daysInYear(year) {\n    return Util.isLeapYear(year) ? 366 : 365;\n  }\n\n  static daysInMonth(year, month) {\n    if (month === 2) {\n      return Util.isLeapYear(year) ? 29 : 28;\n    } else {\n      return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month - 1];\n    }\n  }\n\n  static parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {\n    const date = new Date(ts),\n      intl = {\n        hour12: false,\n        // avoid AM/PM\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      };\n\n    if (timeZone) {\n      intl.timeZone = timeZone;\n    }\n\n    const modified = Object.assign({ timeZoneName: offsetFormat }, intl);\n\n    if (Intl.DateTimeFormat.prototype.formatToParts) {\n      const parsed = new Intl.DateTimeFormat(locale, modified)\n        .formatToParts(date)\n        .find(m => m.type.toLowerCase() === 'timezonename');\n      return parsed ? parsed.value : null;\n    } else {\n      // this probably doesn't work for all locales\n      const without = new Intl.DateTimeFormat(locale, intl).format(date),\n        included = new Intl.DateTimeFormat(locale, modified).format(date),\n        diffed = included.substring(without.length),\n        trimmed = diffed.replace(/^[, ]+/, '');\n\n      return trimmed;\n    }\n  }\n\n  static normalizeZone(input) {\n    if (input === null) {\n      return LocalZone.instance;\n    } else if (input instanceof Zone) {\n      return input;\n    } else if (Util.isString(input)) {\n      const lowered = input.toLowerCase();\n      if (lowered === 'local') return LocalZone.instance;\n      else if (lowered === 'utc') return FixedOffsetZone.utcInstance;\n      else if (IANAZone.isValidSpecier(lowered)) return new IANAZone(input);\n      else return FixedOffsetZone.parseSpecifier(lowered) || Settings.defaultZone;\n    } else if (Util.isNumber(input)) {\n      return FixedOffsetZone.instance(input);\n    } else if (typeof input === 'object' && input.offset) {\n      // This is dumb, but the instanceof check above doesn't seem to really work\n      // so we're duck checking it\n      return input;\n    } else {\n      return Settings.defaultZone;\n    }\n  }\n\n  static normalizeObject(obj, normalizer, ignoreUnknown = false) {\n    const normalized = {};\n    for (const u in obj) {\n      if (obj.hasOwnProperty(u)) {\n        const v = obj[u];\n        if (v !== null && !Util.isUndefined(v) && !Number.isNaN(v)) {\n          const mapped = normalizer(u, ignoreUnknown);\n          if (mapped) {\n            normalized[mapped] = v;\n          }\n        }\n      }\n    }\n    return normalized;\n  }\n\n  static timeObject(obj) {\n    return Util.pick(obj, ['hour', 'minute', 'second', 'millisecond']);\n  }\n\n  static untruncateYear(year) {\n    if (year > 99) {\n      return year;\n    } else return year > 60 ? 1900 + year : 2000 + year;\n  }\n\n  // signedOffset('-5', '30') -> -330\n  static signedOffset(offHourStr, offMinuteStr) {\n    const offHour = parseInt(offHourStr, 10) || 0,\n      offMin = parseInt(offMinuteStr, 10) || 0,\n      offMinSigned = offHour < 0 ? -offMin : offMin;\n    return offHour * 60 + offMinSigned;\n  }\n}\n","/**\n * @private\n */\n\nexport class English {\n  static get monthsLong() {\n    return [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ];\n  }\n\n  static get monthsShort() {\n    return ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  }\n\n  static get monthsNarrow() {\n    return ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'];\n  }\n\n  static months(length) {\n    switch (length) {\n      case 'narrow':\n        return English.monthsNarrow;\n      case 'short':\n        return English.monthsShort;\n      case 'long':\n        return English.monthsLong;\n      case 'numeric':\n        return ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];\n      case '2-digit':\n        return ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];\n      default:\n        return null;\n    }\n  }\n\n  static get weekdaysLong() {\n    return ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n  }\n\n  static get weekdaysShort() {\n    return ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n  }\n\n  static get weekdaysNarrow() {\n    return ['M', 'T', 'W', 'T', 'F', 'S', 'S'];\n  }\n\n  static weekdays(length) {\n    switch (length) {\n      case 'narrow':\n        return English.weekdaysNarrow;\n      case 'short':\n        return English.weekdaysShort;\n      case 'long':\n        return English.weekdaysLong;\n      case 'numeric':\n        return ['1', '2', '3', '4', '5', '6', '7'];\n      default:\n        return null;\n    }\n  }\n\n  static get meridiems() {\n    return ['AM', 'PM'];\n  }\n\n  static get erasLong() {\n    return ['Before Christ', 'Anno Domini'];\n  }\n\n  static get erasShort() {\n    return ['BC', 'AD'];\n  }\n\n  static get erasNarrow() {\n    return ['B', 'A'];\n  }\n\n  static eras(length) {\n    switch (length) {\n      case 'narrow':\n        return English.erasNarrow;\n      case 'short':\n        return English.erasShort;\n      case 'long':\n        return English.erasLong;\n      default:\n        return null;\n    }\n  }\n\n  static meridiemForDateTime(dt) {\n    return English.meridiems[dt.hour < 12 ? 0 : 1];\n  }\n\n  static weekdayForDateTime(dt, length) {\n    return English.weekdays(length)[dt.weekday - 1];\n  }\n\n  static monthForDateTime(dt, length) {\n    return English.months(length)[dt.month - 1];\n  }\n\n  static eraForDateTime(dt, length) {\n    return English.eras(length)[dt.year < 0 ? 0 : 1];\n  }\n}\n","import { Util } from './util';\nimport { English } from './english';\nimport { Settings } from '../settings';\nimport { DateTime } from '../datetime';\n\nconst localeCache = {};\n\nfunction intlConfigString(locale, numberingSystem, outputCalendar) {\n  let loc = locale || new Intl.DateTimeFormat().resolvedOptions().locale;\n  loc = Array.isArray(locale) ? locale : [locale];\n\n  if (outputCalendar || numberingSystem) {\n    loc = loc.map(l => {\n      l += '-u';\n\n      if (outputCalendar) {\n        l += '-ca-' + outputCalendar;\n      }\n\n      if (numberingSystem) {\n        l += '-nu-' + numberingSystem;\n      }\n      return l;\n    });\n  }\n  return loc;\n}\n\nfunction mapMonths(f) {\n  const ms = [];\n  for (let i = 1; i <= 12; i++) {\n    const dt = DateTime.utc(2016, i, 1);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction mapWeekdays(f) {\n  const ms = [];\n  for (let i = 1; i <= 7; i++) {\n    const dt = DateTime.utc(2016, 11, 13 + i);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction listStuff(loc, length, defaultOK, englishFn, intlFn) {\n  const mode = loc.listingMode(defaultOK);\n\n  if (mode === 'error') {\n    return null;\n  } else if (mode === 'en') {\n    return englishFn(length);\n  } else {\n    return intlFn(length);\n  }\n}\n\n/**\n * @private\n */\n\nclass PolyNumberFormatter {\n  constructor(opts) {\n    this.padTo = opts.padTo || 0;\n    this.round = opts.round || false;\n  }\n\n  format(i) {\n    const maybeRounded = this.round ? Math.round(i) : i;\n    return maybeRounded.toString().padStart(this.padTo, '0');\n  }\n}\n\nclass PolyDateFormatter {\n  format(d) {\n    return d.toString();\n  }\n\n  resolvedOptions() {\n    return {\n      locale: 'en-US',\n      numberingSystem: 'latn',\n      outputCalendar: 'gregory'\n    };\n  }\n}\n\n/**\n * @private\n */\n\nexport class Locale {\n  static fromOpts(opts) {\n    return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar);\n  }\n\n  static create(locale, numberingSystem, outputCalendar) {\n    const localeR = locale || Settings.defaultLocale,\n      numberingSystemR = numberingSystem || null,\n      outputCalendarR = outputCalendar || null,\n      cacheKey = `${localeR}|${numberingSystemR}|${outputCalendarR}`,\n      cached = localeCache[cacheKey];\n\n    if (cached) {\n      return cached;\n    } else {\n      const fresh = new Locale(localeR, numberingSystemR, outputCalendarR);\n      localeCache[cacheKey] = fresh;\n      return fresh;\n    }\n  }\n\n  static fromObject({ locale, numberingSystem, outputCalendar } = {}) {\n    return Locale.create(locale, numberingSystem, outputCalendar);\n  }\n\n  constructor(locale, numbering, outputCalendar) {\n    Object.defineProperty(this, 'locale', { value: locale, enumerable: true });\n    Object.defineProperty(this, 'numberingSystem', {\n      value: numbering || null,\n      enumerable: true\n    });\n    Object.defineProperty(this, 'outputCalendar', {\n      value: outputCalendar || null,\n      enumerable: true\n    });\n    Object.defineProperty(this, 'intl', {\n      value: intlConfigString(this.locale, this.numberingSystem, this.outputCalendar),\n      enumerable: false\n    });\n\n    // cached usefulness\n    Object.defineProperty(this, 'weekdaysCache', {\n      value: { format: {}, standalone: {} },\n      enumerable: false\n    });\n    Object.defineProperty(this, 'monthsCache', {\n      value: { format: {}, standalone: {} },\n      enumerable: false\n    });\n    Object.defineProperty(this, 'meridiemCache', {\n      value: null,\n      enumerable: false,\n      writable: true\n    });\n    Object.defineProperty(this, 'eraCache', {\n      value: {},\n      enumerable: false,\n      writable: true\n    });\n  }\n\n  // todo: cache me\n  listingMode(defaultOk = true) {\n    const hasIntl = Intl && Intl.DateTimeFormat,\n      hasFTP = hasIntl && Intl.DateTimeFormat.prototype.formatToParts,\n      isActuallyEn =\n        this.locale === 'en' ||\n        this.locale.toLowerCase() === 'en-us' ||\n        (hasIntl &&\n          Intl.DateTimeFormat(this.intl)\n            .resolvedOptions()\n            .locale.startsWith('en-US')),\n      hasNoWeirdness =\n        (this.numberingSystem === null || this.numberingSystem === 'latn') &&\n        (this.outputCalendar === null || this.outputCalendar === 'gregory');\n\n    if (!hasFTP && !(isActuallyEn && hasNoWeirdness) && !defaultOk) {\n      return 'error';\n    } else if (!hasFTP || (isActuallyEn && hasNoWeirdness)) {\n      return 'en';\n    } else {\n      return 'intl';\n    }\n  }\n\n  clone(alts) {\n    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {\n      return this;\n    } else {\n      return Locale.create(\n        alts.locale || this.locale,\n        alts.numberingSystem || this.numberingSystem,\n        alts.outputCalendar || this.outputCalendar\n      );\n    }\n  }\n\n  months(length, format = false, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.months, () => {\n      const intl = format ? { month: length, day: 'numeric' } : { month: length },\n        formatStr = format ? 'format' : 'standalone';\n      if (!this.monthsCache[formatStr][length]) {\n        this.monthsCache[formatStr][length] = mapMonths(dt => this.extract(dt, intl, 'month'));\n      }\n      return this.monthsCache[formatStr][length];\n    });\n  }\n\n  weekdays(length, format = false, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.weekdays, () => {\n      const intl = format\n          ? { weekday: length, year: 'numeric', month: 'long', day: 'numeric' }\n          : { weekday: length },\n        formatStr = format ? 'format' : 'standalone';\n      if (!this.weekdaysCache[formatStr][length]) {\n        this.weekdaysCache[formatStr][length] = mapWeekdays(dt =>\n          this.extract(dt, intl, 'weekday')\n        );\n      }\n      return this.weekdaysCache[formatStr][length];\n    });\n  }\n\n  meridiems(defaultOK = true) {\n    return listStuff(\n      this,\n      undefined,\n      defaultOK,\n      () => English.meridiems,\n      () => {\n        // In theory there could be aribitrary day periods. We're gonna assume there are exactly two\n        // for AM and PM. This is probably wrong, but it's makes parsing way easier.\n        if (!this.meridiemCache) {\n          const intl = { hour: 'numeric', hour12: true };\n          this.meridiemCache = [\n            DateTime.utc(2016, 11, 13, 9),\n            DateTime.utc(2016, 11, 13, 19)\n          ].map(dt => this.extract(dt, intl, 'dayperiod'));\n        }\n\n        return this.meridiemCache;\n      }\n    );\n  }\n\n  eras(length, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.eras, () => {\n      const intl = { era: length };\n\n      // This is utter bullshit. Different calendars are going to define eras totally differently. What I need is the minimum set of dates\n      // to definitely enumerate them.\n      if (!this.eraCache[length]) {\n        this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(dt =>\n          this.extract(dt, intl, 'era')\n        );\n      }\n\n      return this.eraCache[length];\n    });\n  }\n\n  extract(dt, intlOpts, field) {\n    const [df, d] = this.dtFormatter(dt, intlOpts),\n      results = df.formatToParts(d),\n      matching = results.find(m => m.type.toLowerCase() === field);\n\n    return matching ? matching.value : null;\n  }\n\n  numberFormatter(opts = {}, intlOpts = {}) {\n    if (Intl && Intl.NumberFormat) {\n      const realIntlOpts = Object.assign({ useGrouping: false }, intlOpts);\n\n      if (opts.padTo > 0) {\n        realIntlOpts.minimumIntegerDigits = opts.padTo;\n      }\n\n      if (opts.round) {\n        realIntlOpts.maximumFractionDigits = 0;\n      }\n\n      return new Intl.NumberFormat(this.intl, realIntlOpts);\n    } else {\n      return new PolyNumberFormatter(opts);\n    }\n  }\n\n  dtFormatter(dt, intlOpts = {}) {\n    let d, z;\n\n    if (dt.zone.universal) {\n      // if we have a fixed-offset zone that isn't actually UTC,\n      // (like UTC+8), we need to make do with just displaying\n      // the time in UTC; the formatter doesn't know how to handle UTC+8\n      d = Util.asIfUTC(dt);\n      z = 'UTC';\n    } else if (dt.zone.type === 'local') {\n      d = dt.toJSDate();\n    } else {\n      d = dt.toJSDate();\n      z = dt.zone.name;\n    }\n\n    if (Intl && Intl.DateTimeFormat) {\n      const realIntlOpts = Object.assign({}, intlOpts);\n      if (z) {\n        realIntlOpts.timeZone = z;\n      }\n      return [new Intl.DateTimeFormat(this.intl, realIntlOpts), d];\n    } else {\n      return [new PolyDateFormatter(), d];\n    }\n  }\n\n  equals(other) {\n    return (\n      this.locale === other.locale &&\n      this.numberingSystem === other.numberingSystem &&\n      this.outputCalendar === other.outputCalendar\n    );\n  }\n}\n","import { Util } from './util';\nimport { DateTime } from '../datetime';\nimport { English } from './english';\n\nfunction stringifyTokens(splits, tokenToString) {\n  let s = '';\n  for (const token of splits) {\n    if (token.literal) {\n      s += token.val;\n    } else {\n      s += tokenToString(token.val);\n    }\n  }\n  return s;\n}\n\n/**\n * @private\n */\n\nexport class Formatter {\n  static create(locale, opts = {}) {\n    const formatOpts = Object.assign({}, { round: true }, opts);\n    return new Formatter(locale, formatOpts);\n  }\n\n  static parseFormat(fmt) {\n    let current = null,\n      currentFull = '',\n      bracketed = false;\n    const splits = [];\n    for (let i = 0; i < fmt.length; i++) {\n      const c = fmt.charAt(i);\n      if (c === \"'\") {\n        if (currentFull.length > 0) {\n          splits.push({ literal: bracketed, val: currentFull });\n        }\n        current = null;\n        currentFull = '';\n        bracketed = !bracketed;\n      } else if (bracketed) {\n        currentFull += c;\n      } else if (c === current) {\n        currentFull += c;\n      } else {\n        if (currentFull.length > 0) {\n          splits.push({ literal: false, val: currentFull });\n        }\n        currentFull = c;\n        current = c;\n      }\n    }\n\n    if (currentFull.length > 0) {\n      splits.push({ literal: bracketed, val: currentFull });\n    }\n\n    return splits;\n  }\n\n  constructor(locale, formatOpts) {\n    this.opts = formatOpts;\n    this.loc = locale;\n  }\n\n  formatDateTime(dt, opts = {}) {\n    const [df, d] = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));\n    return df.format(d);\n  }\n\n  formatDateTimeParts(dt, opts = {}) {\n    const [df, d] = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));\n    return df.formatToParts(d);\n  }\n\n  resolvedOptions(dt, opts = {}) {\n    const [df, d] = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));\n    return df.resolvedOptions(d);\n  }\n\n  num(n, p = 0) {\n    const opts = Object.assign({}, this.opts);\n\n    if (p > 0) {\n      opts.padTo = p;\n    }\n\n    return this.loc.numberFormatter(opts).format(n);\n  }\n\n  formatDateTimeFromString(dt, fmt) {\n    const knownEnglish = this.loc.listingMode() === 'en';\n    const string = (opts, extract) => this.loc.extract(dt, opts, extract),\n      formatOffset = opts => {\n        if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {\n          return 'Z';\n        }\n\n        const hours = Util.towardZero(dt.offset / 60),\n          minutes = Math.abs(dt.offset % 60),\n          sign = hours >= 0 ? '+' : '-',\n          base = `${sign}${Math.abs(hours)}`;\n\n        switch (opts.format) {\n          case 'short':\n            return `${sign}${this.num(Math.abs(hours), 2)}:${this.num(minutes, 2)}`;\n          case 'narrow':\n            return minutes > 0 ? `${base}:${minutes}` : base;\n          case 'techie':\n            return `${sign}${this.num(Math.abs(hours), 2)}${this.num(minutes, 2)}`;\n          default:\n            throw new RangeError(`Value format ${opts.format} is out of range for property format`);\n        }\n      },\n      meridiem = () =>\n        knownEnglish\n          ? English.meridiemForDateTime(dt)\n          : string({ hour: 'numeric', hour12: true }, 'dayperiod'),\n      month = (length, standalone) =>\n        knownEnglish\n          ? English.monthForDateTime(dt, length)\n          : string(standalone ? { month: length } : { month: length, day: 'numeric' }, 'month'),\n      weekday = (length, standalone) =>\n        knownEnglish\n          ? English.weekdayForDateTime(dt, length)\n          : string(\n              standalone ? { weekday: length } : { weekday: length, month: 'long', day: 'numeric' },\n              'weekday'\n            ),\n      era = length =>\n        knownEnglish ? English.eraForDateTime(dt, length) : string({ era: length }, 'era'),\n      tokenToString = token => {\n        const outputCal = this.loc.outputCalendar;\n\n        // Where possible: http://cldr.unicode.org/translation/date-time#TOC-Stand-Alone-vs.-Format-Styles\n        switch (token) {\n          // ms\n          case 'S':\n            return this.num(dt.millisecond);\n          case 'SSS':\n            return this.num(dt.millisecond, 3);\n          // seconds\n          case 's':\n            return this.num(dt.second);\n          case 'ss':\n            return this.num(dt.second, 2);\n          // minutes\n          case 'm':\n            return this.num(dt.minute);\n          case 'mm':\n            return this.num(dt.minute, 2);\n          // hours\n          case 'h':\n            return this.num(dt.hour === 12 ? 12 : dt.hour % 12);\n          case 'hh':\n            return this.num(dt.hour === 12 ? 12 : dt.hour % 12, 2);\n          case 'H':\n            return this.num(dt.hour);\n          case 'HH':\n            return this.num(dt.hour, 2);\n          // offset\n          case 'Z':\n            // like +6\n            return formatOffset({ format: 'narrow', allowZ: true });\n          case 'ZZ':\n            // like +06:00\n            return formatOffset({ format: 'short', allowZ: true });\n          case 'ZZZ':\n            // like +0600\n            return formatOffset({ format: 'techie', allowZ: false });\n          case 'ZZZZ':\n            // like EST\n            return dt.offsetNameShort;\n          case 'ZZZZZ':\n            // like Eastern Standard Time\n            return dt.offsetNameLong;\n          // zone\n          case 'z':\n            return dt.zoneName;\n          // like America/New_York\n          // meridiems\n          case 'a':\n            return meridiem();\n          // dates\n          case 'd':\n            return outputCal ? string({ day: 'numeric' }, 'day') : this.num(dt.day);\n          case 'dd':\n            return outputCal ? string({ day: '2-digit' }, 'day') : this.num(dt.day, 2);\n          // weekdays - standalone\n          case 'c':\n            // like 1\n            return this.num(dt.weekday);\n          case 'ccc':\n            // like 'Tues'\n            return weekday('short', true);\n          case 'cccc':\n            // like 'Tuesday'\n            return weekday('long', true);\n          case 'ccccc':\n            // like 'T'\n            return weekday('narrow', true);\n          // weekdays - format\n          case 'E':\n            // like 1\n            return this.num(dt.weekday);\n          case 'EEE':\n            // like 'Tues'\n            return weekday('short', false);\n          case 'EEEE':\n            // like 'Tuesday'\n            return weekday('long', false);\n          case 'EEEEE':\n            // like 'T'\n            return weekday('narrow', false);\n          // months - standalone\n          case 'L':\n            // like 1\n            return outputCal\n              ? string({ month: 'numeric', day: 'numeric' }, 'month')\n              : this.num(dt.month);\n          case 'LL':\n            // like 01, doesn't seem to work\n            return outputCal\n              ? string({ month: '2-digit', day: 'numeric' }, 'month')\n              : this.num(dt.month, 2);\n          case 'LLL':\n            // like Jan\n            return month('short', true);\n          case 'LLLL':\n            // like January\n            return month('long', true);\n          case 'LLLLL':\n            // like J\n            return month('narrow', true);\n          // months - format\n          case 'M':\n            // like 1\n            return outputCal ? string({ month: 'numeric' }, 'month') : this.num(dt.month);\n          case 'MM':\n            // like 01\n            return outputCal ? string({ month: '2-digit' }, 'month') : this.num(dt.month, 2);\n          case 'MMM':\n            // like Jan\n            return month('short', false);\n          case 'MMMM':\n            // like January\n            return month('long', false);\n          case 'MMMMM':\n            // like J\n            return month('narrow', false);\n          // years\n          case 'y':\n            // like 2014\n            return outputCal ? string({ year: 'numeric' }, 'year') : this.num(dt.year);\n          case 'yy':\n            // like 14\n            return outputCal\n              ? string({ year: '2-digit' }, 'year')\n              : this.num(dt.year.toString().slice(-2), 2);\n          case 'yyyy':\n            // like 0012\n            return outputCal ? string({ year: 'numeric' }, 'year') : this.num(dt.year, 4);\n          // eras\n          case 'G':\n            // like AD\n            return era('short');\n          case 'GG':\n            // like Anno Domini\n            return era('long');\n          case 'GGGGG':\n            return era('narrow');\n          case 'kk':\n            return this.num(dt.weekYear.toString().slice(-2), 2);\n          case 'kkkk':\n            return this.num(dt.weekYear, 4);\n          case 'W':\n            return this.num(dt.weekNumber);\n          case 'WW':\n            return this.num(dt.weekNumber, 2);\n          case 'o':\n            return this.num(dt.ordinal);\n          case 'ooo':\n            return this.num(dt.ordinal, 3);\n          // macros\n          case 'D':\n            return this.formatDateTime(dt, DateTime.DATE_SHORT);\n          case 'DD':\n            return this.formatDateTime(dt, DateTime.DATE_MED);\n          case 'DDD':\n            return this.formatDateTime(dt, DateTime.DATE_FULL);\n          case 'DDDD':\n            return this.formatDateTime(dt, DateTime.DATE_HUGE);\n          case 't':\n            return this.formatDateTime(dt, DateTime.TIME_SIMPLE);\n          case 'tt':\n            return this.formatDateTime(dt, DateTime.TIME_WITH_SECONDS);\n          case 'ttt':\n            return this.formatDateTime(dt, DateTime.TIME_WITH_SHORT_OFFSET);\n          case 'tttt':\n            return this.formatDateTime(dt, DateTime.TIME_WITH_LONG_OFFSET);\n          case 'T':\n            return this.formatDateTime(dt, DateTime.TIME_24_SIMPLE);\n          case 'TT':\n            return this.formatDateTime(dt, DateTime.TIME_24_WITH_SECONDS);\n          case 'TTT':\n            return this.formatDateTime(dt, DateTime.TIME_24_WITH_SHORT_OFFSET);\n          case 'TTTT':\n            return this.formatDateTime(dt, DateTime.TIME_24_WITH_LONG_OFFSET);\n          case 'f':\n            return this.formatDateTime(dt, DateTime.DATETIME_SHORT);\n          case 'ff':\n            return this.formatDateTime(dt, DateTime.DATETIME_MED);\n          case 'fff':\n            return this.formatDateTime(dt, DateTime.DATETIME_FULL);\n          case 'ffff':\n            return this.formatDateTime(dt, DateTime.DATETIME_HUGE);\n          case 'F':\n            return this.formatDateTime(dt, DateTime.DATETIME_SHORT_WITH_SECONDS);\n          case 'FF':\n            return this.formatDateTime(dt, DateTime.DATETIME_MED_WITH_SECONDS);\n          case 'FFF':\n            return this.formatDateTime(dt, DateTime.DATETIME_FULL_WITH_SECONDS);\n          case 'FFFF':\n            return this.formatDateTime(dt, DateTime.DATETIME_HUGE_WITH_SECONDS);\n\n          default:\n            return token;\n        }\n      };\n\n    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);\n  }\n\n  formatDuration() {}\n\n  formatDurationFromString(dur, fmt) {\n    const tokenToField = token => {\n        switch (token[0]) {\n          case 'S':\n            return 'millisecond';\n          case 's':\n            return 'second';\n          case 'm':\n            return 'minute';\n          case 'h':\n            return 'hour';\n          case 'd':\n            return 'day';\n          case 'M':\n            return 'month';\n          case 'y':\n            return 'year';\n          default:\n            return null;\n        }\n      },\n      tokenToString = lildur => token => {\n        const mapped = tokenToField(token);\n        if (mapped) {\n          return this.num(lildur.get(mapped), token.length);\n        } else {\n          return token;\n        }\n      },\n      tokens = Formatter.parseFormat(fmt),\n      realTokens = tokens.reduce(\n        (found, { literal, val }) => (literal ? found : found.concat(val)),\n        []\n      ),\n      collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter(t => t));\n    return stringifyTokens(tokens, tokenToString(collapsed));\n  }\n}\n","import { Util } from './util';\nimport { English } from './english';\nimport { FixedOffsetZone } from '../zones/fixedOffsetZone';\n\nfunction combineRegexes(...regexes) {\n  const full = regexes.reduce((f, r) => f + r.source, '');\n  return RegExp(full);\n}\n\nfunction combineExtractors(...extractors) {\n  return m =>\n    extractors\n      .reduce(\n        ([mergedVals, mergedZone, cursor], ex) => {\n          const [val, zone, next] = ex(m, cursor);\n          return [Object.assign(mergedVals, val), mergedZone || zone, next];\n        },\n        [{}, null, 1]\n      )\n      .slice(0, 2);\n}\n\nfunction parse(s, ...patterns) {\n  if (s == null) {\n    return [null, null];\n  }\n  for (const [regex, extractor] of patterns) {\n    const m = regex.exec(s);\n    if (m) {\n      return extractor(m);\n    }\n  }\n  return [null, null];\n}\n\nfunction simpleParse(...keys) {\n  return (match, cursor) => {\n    const ret = {};\n    let i;\n\n    for (i = 0; i < keys.length; i++) {\n      ret[keys[i]] = parseInt(match[cursor + i]);\n    }\n    return [ret, null, cursor + i];\n  };\n}\n\n// ISO parsing\nconst isoTimeRegex = /(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d\\d\\d))?)?)?(?:(Z)|([+-]\\d\\d)(?::?(\\d\\d))?)?)?$/,\n  isoYmdRegex = /^([+-]\\d{6}|\\d{4})(?:-?(\\d\\d)(?:-?(\\d\\d))?)?/,\n  isoWeekRegex = /^(\\d{4})-?W(\\d\\d)-?(\\d)/,\n  isoOrdinalRegex = /^(\\d{4})-?(\\d{3})/,\n  extractISOWeekData = simpleParse('weekYear', 'weekNumber', 'weekDay'),\n  extractISOOrdinalData = simpleParse('year', 'ordinal');\n\nfunction extractISOYmd(match, cursor) {\n  const item = {\n    year: parseInt(match[cursor]),\n    month: parseInt(match[cursor + 1]) || 1,\n    day: parseInt(match[cursor + 2]) || 1\n  };\n\n  return [item, null, cursor + 3];\n}\n\nfunction extractISOTime(match, cursor) {\n  const local = !match[cursor + 4] && !match[cursor + 5],\n    fullOffset = Util.signedOffset(match[cursor + 5], match[cursor + 6]),\n    item = {\n      hour: parseInt(match[cursor]) || 0,\n      minute: parseInt(match[cursor + 1]) || 0,\n      second: parseInt(match[cursor + 2]) || 0,\n      millisecond: parseInt(match[cursor + 3]) || 0\n    },\n    zone = local ? null : new FixedOffsetZone(fullOffset);\n\n  return [item, zone, cursor + 7];\n}\n\n// ISO duration parsing\n\nconst isoDuration = /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?)?$/;\n\nfunction extractISODuration(match) {\n  const [, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr] = match;\n\n  return {\n    year: parseInt(yearStr),\n    month: parseInt(monthStr),\n    day: parseInt(dayStr),\n    hour: parseInt(hourStr),\n    minute: parseInt(minuteStr),\n    second: parseInt(secondStr)\n  };\n}\n\n// These are a little braindead. EDT *should* tell us that we're in, say, America/New_York\n// and not just that we're in -240 *right now*. But since I don't think these are used that often\n// I'm just going to ignore that\nconst obsOffsets = {\n  GMT: 0,\n  EDT: -4 * 60,\n  EST: -5 * 60,\n  CDT: -5 * 60,\n  CST: -6 * 60,\n  MDT: -6 * 60,\n  MST: -7 * 60,\n  PDT: -7 * 60,\n  PST: -8 * 60\n};\n\nfunction fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n  const result = {\n    year: yearStr.length === 2 ? Util.untruncateYear(parseInt(yearStr)) : parseInt(yearStr),\n    month: English.monthsShort.indexOf(monthStr) + 1,\n    day: parseInt(dayStr),\n    hour: parseInt(hourStr),\n    minute: parseInt(minuteStr)\n  };\n\n  if (secondStr) result.second = parseInt(secondStr);\n  if (weekdayStr) {\n    result.weekday =\n      weekdayStr.length > 3\n        ? English.weekdaysLong.indexOf(weekdayStr) + 1\n        : English.weekdaysShort.indexOf(weekdayStr) + 1;\n  }\n\n  return result;\n}\n\n// RFC 2822/5322\nconst rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\\d\\d)(\\d\\d)))$/;\n\nfunction extractRFC2822(match) {\n  const [\n      ,\n      weekdayStr,\n      dayStr,\n      monthStr,\n      yearStr,\n      hourStr,\n      minuteStr,\n      secondStr,\n      obsOffset,\n      milOffset,\n      offHourStr,\n      offMinuteStr\n    ] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n\n  let offset;\n  if (obsOffset) {\n    offset = obsOffsets[obsOffset];\n  } else if (milOffset) {\n    offset = 0;\n  } else {\n    offset = Util.signedOffset(offHourStr, offMinuteStr);\n  }\n\n  return [result, new FixedOffsetZone(offset)];\n}\n\nfunction preprocessRFC2822(s) {\n  // Remove comments and folding whitespace and replace multiple-spaces with a single space\n  return s\n    .replace(/\\([^)]*\\)|[\\n\\t]/g, ' ')\n    .replace(/(\\s\\s+)/g, ' ')\n    .trim();\n}\n\n// http date\n\nconst rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d\\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  rfc850 = /^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\\d\\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \\d|\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) (\\d{4})$/;\n\nfunction extractRFC1123Or850(match) {\n  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\nfunction extractASCII(match) {\n  const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\n/**\n * @private\n */\n\nexport class RegexParser {\n  static parseISODate(s) {\n    return parse(\n      s,\n      [combineRegexes(isoYmdRegex, isoTimeRegex), combineExtractors(extractISOYmd, extractISOTime)],\n      [\n        combineRegexes(isoWeekRegex, isoTimeRegex),\n        combineExtractors(extractISOWeekData, extractISOTime)\n      ],\n      [\n        combineRegexes(isoOrdinalRegex, isoTimeRegex),\n        combineExtractors(extractISOOrdinalData, extractISOTime)\n      ]\n    );\n  }\n\n  static parseRFC2822Date(s) {\n    return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);\n  }\n\n  static parseHTTPDate(s) {\n    return parse(\n      s,\n      [rfc1123, extractRFC1123Or850],\n      [rfc850, extractRFC1123Or850],\n      [ascii, extractASCII]\n    );\n  }\n\n  static parseISODuration(s) {\n    return parse(s, [isoDuration, extractISODuration]);\n  }\n}\n","import { Util } from './impl/util';\nimport { Locale } from './impl/locale';\nimport { Formatter } from './impl/formatter';\nimport { RegexParser } from './impl/regexParser';\nimport { Settings } from './settings';\nimport { InvalidArgumentError, InvalidDurationError, InvalidUnitError } from './errors';\n\nconst INVALID = 'Invalid Duration';\n\nconst lowOrderMatrix = {\n    weeks: {\n      days: 7,\n      hours: 7 * 24,\n      minutes: 7 * 24 * 60,\n      seconds: 7 * 24 * 60 * 60,\n      milliseconds: 7 * 24 * 60 * 60 * 1000\n    },\n    days: {\n      hours: 24,\n      minutes: 24 * 60,\n      seconds: 24 * 60 * 60,\n      milliseconds: 24 * 60 * 60 * 1000\n    },\n    hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1000 },\n    minutes: { seconds: 60, milliseconds: 60 * 1000 },\n    seconds: { milliseconds: 1000 }\n  },\n  casualMatrix = Object.assign(\n    {\n      years: {\n        months: 12,\n        weeks: 52,\n        days: 365,\n        hours: 365 * 24,\n        minutes: 365 * 24 * 60,\n        seconds: 365 * 24 * 60 * 60,\n        milliseconds: 365 * 24 * 60 * 60 * 1000\n      },\n      months: {\n        weeks: 4,\n        days: 30,\n        hours: 30 * 24,\n        minutes: 30 * 24 * 60,\n        seconds: 30 * 24 * 60 * 60,\n        milliseconds: 30 * 24 * 60 * 60 * 1000\n      }\n    },\n    lowOrderMatrix\n  ),\n  daysInYearAccurate = 146097.0 / 400,\n  daysInMonthAccurate = 146097.0 / 4800,\n  accurateMatrix = Object.assign(\n    {\n      years: {\n        months: 12,\n        weeks: daysInYearAccurate / 7,\n        days: daysInYearAccurate,\n        hours: daysInYearAccurate * 24,\n        minutes: daysInYearAccurate * 24 * 60,\n        seconds: daysInYearAccurate * 24 * 60 * 60,\n        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000\n      },\n      months: {\n        weeks: daysInMonthAccurate / 7,\n        days: daysInMonthAccurate,\n        hours: daysInYearAccurate * 24,\n        minutes: daysInYearAccurate * 24 * 60,\n        seconds: daysInYearAccurate * 24 * 60 * 60,\n        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000\n      }\n    },\n    lowOrderMatrix\n  );\n\nconst orderedUnits = [\n  'years',\n  'months',\n  'weeks',\n  'days',\n  'hours',\n  'minutes',\n  'seconds',\n  'milliseconds'\n];\n\nfunction clone(dur, alts, clear = false) {\n  // deep merge for vals\n  const conf = {\n    values: clear ? alts.values : Object.assign(dur.values, alts.values || {}),\n    loc: dur.loc.clone(alts.loc),\n    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy\n  };\n  return new Duration(conf);\n}\n\nfunction isHighOrderNegative(obj) {\n  // only rule is that the highest-order part must be non-negative\n  for (const k of orderedUnits) {\n    if (obj[k]) return obj[k] < 0;\n  }\n  return false;\n}\n\n/**\n * A Duration object represents a period of time, like \"2 months\" or \"1 day, 1 hour\". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime.plus} to add a Duration object to a DateTime, producing another DateTime.\n *\n * Here is a brief overview of commonly used methods and getters in Duration:\n *\n * * **Creation** To create a Duration, use {@link fromMillis}, {@link fromObject}, or {@link fromISO}.\n * * **Unit values** See the {@link years}, {@link months}, {@link weeks}, {@link days}, {@link hours}, {@link minutes}, {@link seconds}, {@link milliseconds} accessors.\n * * **Configuration** See  {@link locale} and {@link numberingSystem} accessors.\n * * **Transformation** To create new Durations out of old ones use {@link plus}, {@link minus}, {@link normalize}, {@link set}, {@link reconfigure}, {@link shiftTo}, and {@link negate}.\n * * **Output** To convert the Duration into other representations, see {@link as}, {@link toISO}, {@link toFormat}, and {@link toJSON}\n *\n * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.\n */\nexport class Duration {\n  /**\n   * @private\n   */\n  constructor(config) {\n    const accurate = config.conversionAccuracy === 'longterm' || false;\n\n    Object.defineProperty(this, 'values', {\n      value: config.values,\n      enumerable: true\n    });\n    Object.defineProperty(this, 'loc', {\n      value: config.loc || Locale.create(),\n      enumerable: true\n    });\n    Object.defineProperty(this, 'conversionAccuracy', {\n      value: accurate ? 'longterm' : 'casual',\n      enumerable: true\n    });\n    Object.defineProperty(this, 'invalidReason', {\n      value: config.invalidReason || null,\n      enumerable: false\n    });\n    Object.defineProperty(this, 'matrix', {\n      value: accurate ? accurateMatrix : casualMatrix,\n      enumerable: false\n    });\n  }\n\n  /**\n   * Create Duration from a number of milliseconds.\n   * @param {number} count of milliseconds\n   * @param {Object} opts - options for parsing\n   * @param {string} [obj.locale='en-US'] - the locale to use\n   * @param {string} obj.numberingSystem - the numbering system to use\n   * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  static fromMillis(count, opts) {\n    return Duration.fromObject(Object.assign({ milliseconds: count }, opts));\n  }\n\n  /**\n   * Create an DateTime from a Javascript object with keys like 'years' and 'hours'.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.years\n   * @param {number} obj.months\n   * @param {number} obj.weeks\n   * @param {number} obj.days\n   * @param {number} obj.hours\n   * @param {number} obj.minutes\n   * @param {number} obj.seconds\n   * @param {number} obj.milliseconds\n   * @param {string} [obj.locale='en-US'] - the locale to use\n   * @param {string} obj.numberingSystem - the numbering system to use\n   * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  static fromObject(obj) {\n    return new Duration({\n      values: Util.normalizeObject(obj, Duration.normalizeUnit, true),\n      loc: Locale.fromObject(obj),\n      conversionAccuracy: obj.conversionAccuracy\n    });\n  }\n\n  /**\n   * Create a DateTime from an ISO 8601 duration string.\n   * @param {string} text - text to parse\n   * @param {Object} opts - options for parsing\n   * @param {string} [obj.locale='en-US'] - the locale to use\n   * @param {string} obj.numberingSystem - the numbering system to use\n   * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromISO('P3Y6M4DT12H30M5S').toObject() //=> { years: 3, months: 6, day: 4, hours: 12, minutes: 30, seconds: 5 }\n   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }\n   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }\n   * @return {Duration}\n   */\n  static fromISO(text, opts) {\n    const obj = Object.assign(RegexParser.parseISODuration(text), opts);\n    return Duration.fromObject(obj);\n  }\n\n  /**\n   * Create an invalid Duration.\n   * @param {string} reason - reason this is invalid\n   * @return {Duration}\n   */\n  static invalid(reason) {\n    if (!reason) {\n      throw new InvalidArgumentError('need to specify a reason the DateTime is invalid');\n    }\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDurationError(reason);\n    } else {\n      return new Duration({ invalidReason: reason });\n    }\n  }\n\n  /**\n   * @private\n   */\n  static normalizeUnit(unit, ignoreUnknown = false) {\n    const normalized = {\n      year: 'years',\n      years: 'years',\n      month: 'months',\n      months: 'months',\n      week: 'weeks',\n      weeks: 'weeks',\n      day: 'days',\n      days: 'days',\n      hour: 'hours',\n      hours: 'hours',\n      minute: 'minutes',\n      minutes: 'minutes',\n      second: 'seconds',\n      seconds: 'seconds',\n      millisecond: 'milliseconds',\n      milliseconds: 'milliseconds'\n    }[unit ? unit.toLowerCase() : unit];\n\n    if (!ignoreUnknown && !normalized) throw new InvalidUnitError(unit);\n\n    return normalized;\n  }\n\n  /**\n   * Get  the locale of a Duration, such 'en-GB'\n   * @return {string}\n   */\n  get locale() {\n    return this.loc.locale;\n  }\n\n  /**\n   * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration\n   *\n   * @return {string}\n   */\n  get numberingSystem() {\n    return this.loc.numberingSystem;\n  }\n\n  /**\n   * Returns a string representation of this Duration formatted according to the specified format string.\n   * @param {string} fmt - the format string\n   * @param {object} opts - options\n   * @param {boolean} opts.round - round numerical values\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc, opts).formatDurationFromString(this, fmt)\n      : INVALID;\n  }\n\n  /**\n   * Returns a Javascript object with this Duration's values.\n   * @param opts - options for generating the object\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }\n   * @return {object}\n   */\n  toObject(opts = {}) {\n    if (!this.isValid) return {};\n\n    const base = Object.assign({}, this.values);\n\n    if (opts.includeConfig) {\n      base.conversionAccuracy = this.conversionAccuracy;\n      base.numberingSystem = this.loc.numberingSystem;\n      base.locale = this.loc.locale;\n    }\n    return base;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Duration.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'\n   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'\n   * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'\n   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'\n   * @return {string}\n   */\n  toISO() {\n    // we could use the formatter, but this is an easier way to get the minimum string\n    if (!this.isValid) return null;\n\n    let s = 'P',\n      norm = this.normalize();\n\n    // ISO durations are always positive, so take the absolute value\n    norm = isHighOrderNegative(norm.values) ? norm.negate() : norm;\n\n    if (norm.years > 0) s += norm.years + 'Y';\n    if (norm.months > 0) s += norm.months + 'M';\n    if (norm.days > 0 || norm.weeks > 0) s += norm.days + norm.weeks * 7 + 'D';\n    if (norm.hours > 0 || norm.minutes > 0 || norm.seconds > 0 || norm.milliseconds > 0) s += 'T';\n    if (norm.hours > 0) s += norm.hours + 'H';\n    if (norm.minutes > 0) s += norm.minutes + 'M';\n    if (norm.seconds > 0) s += norm.seconds + 'S';\n    return s;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.\n   * @return {string}\n   */\n  toString() {\n    return this.toISO();\n  }\n\n  /**\n   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|number|object} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = Util.friendlyDuration(duration),\n      result = {};\n\n    for (const k of orderedUnits) {\n      const val = dur.get(k) + this.get(k);\n      if (val !== 0) {\n        result[k] = val;\n      }\n    }\n\n    return clone(this, { values: result }, true);\n  }\n\n  /**\n   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|number|object} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  minus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = Util.friendlyDuration(duration);\n    return this.plus(dur.negate());\n  }\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example Duration.fromObject({years: 2, days: 3}).years //=> 2\n   * @example Duration.fromObject({years: 2, days: 3}).months //=> 0\n   * @example Duration.fromObject({years: 2, days: 3}).days //=> 3\n   * @return {number}\n   */\n  get(unit) {\n    return this[Duration.normalizeUnit(unit)];\n  }\n\n  /**\n   * \"Set\" the values of specified units. Return a newly-constructed Duration.\n   * @param {object} values - a mapping of units to numbers\n   * @example dur.set({ years: 2017 })\n   * @example dur.set({ hours: 8, minutes: 30 })\n   * @return {Duration}\n   */\n  set(values) {\n    const mixed = Object.assign(this.values, Util.normalizeObject(values, Duration.normalizeUnit));\n    return clone(this, { values: mixed });\n  }\n\n  /**\n   * \"Set\" the locale and/or numberingSystem.  Returns a newly-constructed Duration.\n   * @example dur.reconfigure({ locale: 'en-GB' })\n   * @return {Duration}\n   */\n  reconfigure({ locale, numberingSystem, conversionAccuracy } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem }),\n      opts = { loc };\n\n    if (conversionAccuracy) {\n      opts.conversionAccuracy = conversionAccuracy;\n    }\n\n    return clone(this, opts);\n  }\n\n  /**\n   * Return the length of the duration in the specified unit.\n   * @param {string} unit - a unit such as 'minutes' or 'days'\n   * @example Duration.fromObject({years: 1}).as('days') //=> 365\n   * @example Duration.fromObject({years: 1}).as('months') //=> 12\n   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5\n   * @return {number}\n   */\n  as(unit) {\n    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;\n  }\n\n  /**\n   * Reduce this Duration to its canonical representation in its current units.\n   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }\n   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }\n   * @return {Duration}\n   */\n  normalize() {\n    if (!this.isValid) return this;\n\n    const neg = isHighOrderNegative(this.values),\n      dur = neg ? this.negate() : this,\n      shifted = dur.shiftTo(...Object.keys(this.values));\n    return neg ? shifted.negate() : shifted;\n  }\n\n  /**\n   * Convert this Duration into its representation in a different set of units.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }\n   * @return {Duration}\n   */\n  shiftTo(...units) {\n    if (!this.isValid) return this;\n\n    if (units.length === 0) {\n      return this;\n    }\n\n    units = units.map(Duration.normalizeUnit);\n\n    const built = {},\n      accumulated = {},\n      vals = this.toObject();\n    let lastUnit;\n\n    for (const k of orderedUnits) {\n      if (units.indexOf(k) >= 0) {\n        built[k] = 0;\n        lastUnit = k;\n\n        // anything we haven't boiled down yet should get boiled to this unit\n        for (const ak in accumulated) {\n          if (accumulated.hasOwnProperty(ak)) {\n            built[k] += this.matrix[ak][k] * accumulated[ak];\n          }\n          delete accumulated[ak];\n        }\n\n        // plus anything that's already in this unit\n        if (Util.isNumber(vals[k])) {\n          built[k] += vals[k];\n        }\n\n        // plus anything further down the chain that should be rolled up in to this\n        for (const down in vals) {\n          if (orderedUnits.indexOf(down) > orderedUnits.indexOf(k)) {\n            const conv = this.matrix[k][down],\n              added = Math.floor(vals[down] / conv);\n            built[k] += added;\n            vals[down] -= added * conv;\n          }\n        }\n        // otherwise, keep it in the wings to boil it later\n      } else if (Util.isNumber(vals[k])) {\n        accumulated[k] = vals[k];\n      }\n    }\n\n    // anything leftover becomes the decimal for the last unit\n    if (lastUnit) {\n      for (const key in accumulated) {\n        if (accumulated.hasOwnProperty(key)) {\n          built[lastUnit] += accumulated[key] / this.matrix[lastUnit][key];\n        }\n      }\n    }\n\n    return clone(this, { values: built }, true);\n  }\n\n  /**\n   * Return the negative of this Duration.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }\n   * @return {Duration}\n   */\n  negate() {\n    if (!this.isValid) return this;\n    const negated = {};\n    for (const k of Object.keys(this.values)) {\n      negated[k] = -this.values[k];\n    }\n    return Duration.fromObject(negated);\n  }\n\n  /**\n   * Get the years.\n   * @return {number}\n   */\n  get years() {\n    return this.isValid ? this.values.years || 0 : NaN;\n  }\n\n  /**\n   * Get the months.\n   * @return {number}\n   */\n  get months() {\n    return this.isValid ? this.values.months || 0 : NaN;\n  }\n\n  /**\n   * Get the weeks\n   * @return {number}\n   */\n  get weeks() {\n    return this.isValid ? this.values.weeks || 0 : NaN;\n  }\n\n  /**\n   * Get the days.\n   * @return {number\n   */\n  get days() {\n    return this.isValid ? this.values.days || 0 : NaN;\n  }\n\n  /**\n   * Get the hours.\n   * @return {number}\n   */\n  get hours() {\n    return this.isValid ? this.values.hours || 0 : NaN;\n  }\n\n  /**\n   * Get the minutes.\n   * @return {number}\n   */\n  get minutes() {\n    return this.isValid ? this.values.minutes || 0 : NaN;\n  }\n\n  /**\n   * Get the seconds.\n   * @return {number}\n   */\n  get seconds() {\n    return this.isValid ? this.values.seconds || 0 : NaN;\n  }\n\n  /**\n   * Get the milliseconds.\n   * @return {number}\n   */\n  get milliseconds() {\n    return this.isValid ? this.values.milliseconds || 0 : NaN;\n  }\n\n  /**\n   * Returns whether the Duration is invalid. Invalid durations are returned by diff operations\n   * on invalid DateTimes or Intervals.\n   * @return {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an explanation of why this Duration became invalid, or null if the Duration is valid\n   * @return {string}\n   */\n  get invalidReason() {\n    return this.invalidReason;\n  }\n\n  /**\n   * Equality check\n   * Two Durations are equal iff they have the same units and the same values for each unit.\n   * @param {Duration} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    for (const u of orderedUnits) {\n      if (this.values[u] !== other.values[u]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { Util } from './impl/util';\nimport { DateTime } from './datetime';\nimport { Duration } from './duration';\nimport { Settings } from './settings';\nimport { InvalidArgumentError, InvalidIntervalError } from './errors';\n\nconst INVALID = 'Invalid Interval';\n\nfunction validateStartEnd(start, end) {\n  return !!start && !!end && start.isValid && end.isValid && start <= end;\n}\n\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link fromDateTimes}, {@link after}, {@link before}, or {@link fromISO}.\n * * **Accessors** Use {@link start} and {@link end} to get the start and end.\n * * **Interogation** To analyze the Interval, use {@link count}, {@link length}, {@link hasSame}, {@link contains}, {@link isAfter}, or {@link isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link set}, {@link splitAt}, {@link splitBy}, {@link divideEqually}, {@link merge}, {@link xor}, {@link union}, {@link intersection}, or {@link difference}.\n * * **Comparison** To compare this Interval to another one, use {@link equals}, {@link overlaps}, {@link abutsStart}, {@link abutsEnd}, {@link engulfs}\n * * **Output*** To convert the Interval into other representations, see {@link toString}, {@link toISO}, {@link toFormat}, and {@link toDuration}.\n */\nexport class Interval {\n  /**\n   * @private\n   */\n  constructor(config) {\n    Object.defineProperty(this, 's', { value: config.start, enumerable: true });\n    Object.defineProperty(this, 'e', { value: config.end, enumerable: true });\n    Object.defineProperty(this, 'invalidReason', {\n      value: config.invalidReason || null,\n      enumerable: false\n    });\n  }\n\n  /**\n   * Create an invalid Interval.\n   * @return {Interval}\n   */\n  static invalid(reason) {\n    if (!reason) {\n      throw new InvalidArgumentError('need to specify a reason the DateTime is invalid');\n    }\n    if (Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(reason);\n    } else {\n      return new Interval({ invalidReason: reason });\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|object|Date} start\n   * @param {DateTime|object|Date} end\n   * @return {Interval}\n   */\n  static fromDateTimes(start, end) {\n    const builtStart = Util.friendlyDateTime(start),\n      builtEnd = Util.friendlyDateTime(end);\n\n    return new Interval({\n      start: builtStart,\n      end: builtEnd,\n      invalidReason: validateStartEnd(builtStart, builtEnd) ? null : 'invalid endpoints'\n    });\n  }\n\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|object|Date} start\n   * @param {Duration|number|object} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static after(start, duration) {\n    const dur = Util.friendlyDuration(duration),\n      dt = Util.friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|object|Date} end\n   * @param {Duration|number|object} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static before(end, duration) {\n    const dur = Util.friendlyDuration(duration),\n      dt = Util.friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n\n  /**\n   * Create an Interval from an ISO 8601 string\n   * @param {string} string - the ISO string to parse\n   * @param {object} opts - options to pass {@see DateTime.fromISO}\n   * @return {Interval}\n   */\n  static fromISO(string, opts) {\n    if (string) {\n      const [s, e] = string.split(/\\//);\n      if (s && e) {\n        return Interval.fromDateTimes(DateTime.fromISO(s, opts), DateTime.fromISO(e, opts));\n      }\n    }\n    return Interval.invalid('invalid ISO format');\n  }\n\n  /**\n   * Returns the start of the Interval\n   * @return {DateTime}\n   */\n  get start() {\n    return this.isValid ? this.s : null;\n  }\n\n  /**\n   * Returns the end of the Interval\n   * @return {DateTime}\n   */\n  get end() {\n    return this.isValid ? this.e : null;\n  }\n\n  /**\n   * Returns whether this Interval's end is at least its start, i.e. that the Interval isn't 'backwards'.\n   * @return {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n   * @return {string}\n   */\n  get invalidReason() {\n    return this.invalidReason;\n  }\n\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n   * @return {number}\n   */\n  length(unit = 'milliseconds') {\n    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;\n  }\n\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\n   * @return {number}\n   */\n  count(unit = 'milliseconds') {\n    if (!this.isValid) return NaN;\n    const start = this.start.startOf(unit),\n      end = this.end.startOf(unit);\n    return Math.floor(end.diff(start, unit).get(unit)) + 1;\n  }\n\n  /**\n   * Returns whether this Interval's start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */\n  hasSame(unit) {\n    return this.isValid ? this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */\n  isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n\n  /**\n   * Return this Interval's start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n\n  /**\n   * Return this Interval's end is before the specified DateTime.\n   * @param {Datetime} dateTime\n   * @return {boolean}\n   */\n  isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e.plus(1) < dateTime;\n  }\n\n  /**\n   * Return this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n\n  /**\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */\n  set({ start, end } = {}) {\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...DateTimes} dateTimes - the unit of time to count.\n   * @return {[Interval]}\n   */\n  splitAt(...dateTimes) {\n    if (!this.isValid) return [];\n    const sorted = dateTimes.map(Util.friendlyDateTime).sort(),\n      results = [];\n    let { s } = this,\n      i = 0;\n\n    while (s < this.e) {\n      const added = sorted[i] || this.e,\n        next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|number|object} duration - The length of each resulting interval.\n   * @return {[Interval]}\n   */\n  splitBy(duration) {\n    if (!this.isValid) return [];\n    const dur = Util.friendlyDuration(duration),\n      results = [];\n    let { s } = this,\n      added,\n      next;\n\n    while (s < this.e) {\n      added = s.plus(dur);\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {[Interval]}\n   */\n  divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n\n  /**\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n\n  /**\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n\n  /**\n   * Return whether this Interval engulfs the start and end of the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  equals(other) {\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  intersection(other) {\n    if (!this.isValid) return this;\n    const s = this.s > other.s ? this.s : other.s,\n      e = this.e < other.e ? this.e : other.e;\n\n    if (s > e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  union(other) {\n    if (!this.isValid) return this;\n    const s = this.s < other.s ? this.s : other.s,\n      e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n\n  /**\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * @param {[Interval]} intervals\n   * @return {[Interval]}\n   */\n  static merge(intervals) {\n    const [found, final] = intervals.sort((a, b) => a.s - b.s).reduce(([sofar, current], item) => {\n      if (!current) {\n        return [sofar, item];\n      } else if (current.overlaps(item) || current.abutsStart(item)) {\n        return [sofar, current.union(item)];\n      } else {\n        return [sofar.concat([current]), item];\n      }\n    },\n    [[], null]);\n    if (final) {\n      found.push(final);\n    }\n    return found;\n  }\n\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {[Interval]} intervals\n   * @return {[Interval]}\n   */\n  static xor(intervals) {\n    let start = null,\n      currentCount = 0;\n    const results = [],\n      ends = intervals.map(i => [{ time: i.s, type: 's' }, { time: i.e, type: 'e' }]),\n      arr = Util.flatten(ends).sort((a, b) => a.time - b.time);\n\n    for (const i of arr) {\n      currentCount += i.type === 's' ? 1 : -1;\n\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n\n        start = null;\n      }\n    }\n\n    return Interval.merge(results);\n  }\n\n  /**\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {Interval}\n   */\n  difference(...intervals) {\n    return Interval.xor([this].concat(intervals))\n      .map(i => this.intersection(i))\n      .filter(i => i && !i.isEmpty());\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */\n  toString() {\n    if (!this.isValid) return INVALID;\n    return `[${this.s.toISO()} – ${this.e.toISO()})`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {object} opts - The same options as {@link DateTime.toISO}\n   * @return {string}\n   */\n  toISO(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format string.\n   * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime.toFormat} for details.\n   * @param {object} opts - options\n   * @param {string} [opts.separator =  ' – '] - a separator to place between the start and end representations\n   * @return {string}\n   */\n  toFormat(dateFormat, { separator = ' – ' } = {}) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;\n  }\n\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */\n  toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n    return this.e.diff(this.s, unit, opts);\n  }\n}\n","import { Util } from './util';\nimport { Formatter } from './formatter';\nimport { FixedOffsetZone } from '../zones/fixedOffsetZone';\nimport { IANAZone } from '../zones/IANAZone';\n\nconst MISSING_FTP = 'missing Intl.DateTimeFormat.formatToParts support';\n\nfunction intUnit(regex, post = i => i) {\n  return { regex, deser: ([s]) => post(parseInt(s)) };\n}\n\nfunction fixListRegex(s) {\n  // make dots optional and also make them literal\n  return s.replace(/\\./, '\\\\.?');\n}\n\nfunction stripInsensitivities(s) {\n  return s.replace(/\\./, '').toLowerCase();\n}\n\nfunction oneOf(strings, startIndex) {\n  if (strings === null) {\n    return null;\n  } else {\n    return {\n      regex: RegExp(strings.map(fixListRegex).join('|')),\n      deser: ([s]) =>\n        strings.findIndex(i => stripInsensitivities(s) === stripInsensitivities(i)) + startIndex\n    };\n  }\n}\n\nfunction offset(regex, groups) {\n  return { regex, deser: ([, h, m]) => Util.signedOffset(h, m), groups };\n}\n\nfunction simple(regex) {\n  return { regex, deser: ([s]) => s };\n}\n\nfunction unitForToken(token, loc) {\n  const one = /\\d/,\n    two = /\\d\\d/,\n    three = /\\d{3}/,\n    four = /\\d{4}/,\n    oneOrTwo = /\\d\\d?/,\n    oneToThree = /\\d(?:\\d{2})?/,\n    twoToFour = /\\d\\d(?:\\d{2})?/,\n    literal = t => ({ regex: RegExp(t.val), deser: ([s]) => s, literal: true }),\n    unitate = t => {\n      if (token.literal) {\n        return literal(t);\n      }\n\n      switch (t.val) {\n        // era\n        case 'G':\n          return oneOf(loc.eras('short', false), 0);\n        case 'GG':\n          return oneOf(loc.eras('long', false), 0);\n        // years\n        case 'yyyy':\n          return intUnit(four);\n        case 'yy':\n          return intUnit(twoToFour, Util.untruncateYear);\n        // months\n        case 'M':\n          return intUnit(oneOrTwo);\n        case 'MM':\n          return intUnit(two);\n        case 'MMM':\n          return oneOf(loc.months('short', false, false), 1);\n        case 'MMMM':\n          return oneOf(loc.months('long', false, false), 1);\n        case 'L':\n          return intUnit(oneOrTwo);\n        case 'LL':\n          return intUnit(two);\n        case 'LLL':\n          return oneOf(loc.months('short', true, false), 1);\n        case 'LLLL':\n          return oneOf(loc.months('long', true, false), 1);\n        // dates\n        case 'd':\n          return intUnit(oneOrTwo);\n        case 'dd':\n          return intUnit(two);\n        // ordinals\n        case 'o':\n          return intUnit(oneToThree);\n        case 'ooo':\n          return intUnit(three);\n        // time\n        case 'HH':\n          return intUnit(two);\n        case 'H':\n          return intUnit(oneOrTwo);\n        case 'hh':\n          return intUnit(two);\n        case 'h':\n          return intUnit(oneOrTwo);\n        case 'mm':\n          return intUnit(two);\n        case 'm':\n          return intUnit(oneOrTwo);\n        case 's':\n          return intUnit(oneOrTwo);\n        case 'ss':\n          return intUnit(two);\n        case 'S':\n          return intUnit(oneToThree);\n        case 'SSS':\n          return intUnit(three);\n        // meridiem\n        case 'a':\n          return oneOf(loc.meridiems(), 0);\n        // weekYear (k)\n        case 'kkkk':\n          return intUnit(four);\n        case 'kk':\n          return intUnit(twoToFour, Util.untruncateYear);\n        // weekNumber (W)\n        case 'W':\n          return intUnit(oneOrTwo);\n        case 'WW':\n          return intUnit(two);\n        // weekdays\n        case 'E':\n        case 'c':\n          return intUnit(one);\n        case 'EEE':\n          return oneOf(loc.weekdays('short', false, false), 1);\n        case 'EEEE':\n          return oneOf(loc.weekdays('long', false, false), 1);\n        case 'ccc':\n          return oneOf(loc.weekdays('short', true, false), 1);\n        case 'cccc':\n          return oneOf(loc.weekdays('long', true, false), 1);\n        // offset/zone\n        case 'Z':\n        case 'ZZ':\n          return offset(/([+-]\\d{1,2})(?::(\\d{2}))?/, 2);\n        case 'ZZZ':\n          return offset(/([+-]\\d{1,2})(\\d{2})?/, 2);\n        // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing\n        // because we don't have any way to figure out what they are\n        case 'z':\n          return simple(/[A-Za-z_]+\\/[A-Za-z_]+/);\n        default:\n          return literal(t);\n      }\n    };\n\n  const unit = unitate(token) || {\n    invalidReason: MISSING_FTP\n  };\n\n  unit.token = token;\n\n  return unit;\n}\n\nfunction buildRegex(units) {\n  return [units.map(u => u.regex).reduce((f, r) => `${f}(${r.source})`, ''), units];\n}\n\nfunction match(input, regex, handlers) {\n  const matches = input.match(regex);\n\n  if (matches) {\n    const all = {};\n    let matchIndex = 1;\n    for (const i in handlers) {\n      if (handlers.hasOwnProperty(i)) {\n        const h = handlers[i],\n          groups = h.groups ? h.groups + 1 : 1;\n        if (!h.literal && h.token) {\n          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));\n        }\n        matchIndex += groups;\n      }\n    }\n    return [matches, all];\n  } else {\n    return [matches, {}];\n  }\n}\n\nfunction dateTimeFromMatches(matches) {\n  const toField = token => {\n    switch (token) {\n      case 'S':\n        return 'millisecond';\n      case 's':\n        return 'second';\n      case 'm':\n        return 'minute';\n      case 'h':\n      case 'H':\n        return 'hour';\n      case 'd':\n        return 'day';\n      case 'o':\n        return 'ordinal';\n      case 'L':\n      case 'M':\n        return 'month';\n      case 'y':\n        return 'year';\n      case 'E':\n      case 'c':\n        return 'weekday';\n      case 'W':\n        return 'weekNumber';\n      case 'k':\n        return 'weekYear';\n      default:\n        return null;\n    }\n  };\n\n  let zone;\n  if (!Util.isUndefined(matches.Z)) {\n    zone = new FixedOffsetZone(matches.Z);\n  } else if (!Util.isUndefined(matches.z)) {\n    zone = new IANAZone(matches.z);\n  } else {\n    zone = null;\n  }\n\n  if (!Util.isUndefined(matches.h) && matches.a === 1) {\n    matches.h += 12;\n  }\n\n  if (matches.G === 0 && matches.y) {\n    matches.y = -matches.y;\n  }\n\n  const vals = Object.keys(matches).reduce((r, k) => {\n    const f = toField(k);\n    if (f) {\n      r[f] = matches[k];\n    }\n\n    return r;\n  }, {});\n\n  return [vals, zone];\n}\n\n/**\n * @private\n */\n\nexport class TokenParser {\n  constructor(loc) {\n    Object.defineProperty(this, 'loc', { value: loc, enumerable: true });\n  }\n\n  explainParse(input, format) {\n    const tokens = Formatter.parseFormat(format),\n      units = tokens.map(t => unitForToken(t, this.loc)),\n      disqualifyingUnit = units.find(t => t.invalidReason);\n\n    if (disqualifyingUnit) {\n      return { input, tokens, invalidReason: disqualifyingUnit.invalidReason };\n    } else {\n      const [regexString, handlers] = buildRegex(units),\n        regex = RegExp(regexString, 'i'),\n        [rawMatches, matches] = match(input, regex, handlers),\n        [result, zone] = matches ? dateTimeFromMatches(matches) : [null, null];\n\n      return { input, tokens, regex, rawMatches, matches, result, zone };\n    }\n  }\n\n  parseDateTime(input, format) {\n    const { result, zone, invalidReason } = this.explainParse(input, format);\n    return [result, zone, invalidReason];\n  }\n}\n","import { Util } from './util';\n\nconst nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],\n  leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];\n\nfunction dayOfWeek(year, month, day) {\n  const js = new Date(Date.UTC(year, month - 1, day)).getUTCDay();\n  return js === 0 ? 7 : js;\n}\n\nfunction lastWeekNumber(weekYear) {\n  const p1 =\n      (weekYear +\n        Math.floor(weekYear / 4) -\n        Math.floor(weekYear / 100) +\n        Math.floor(weekYear / 400)) %\n      7,\n    last = weekYear - 1,\n    p2 = (last + Math.floor(last / 4) - Math.floor(last / 100) + Math.floor(last / 400)) % 7;\n  return p1 === 4 || p2 === 3 ? 53 : 52;\n}\n\nfunction computeOrdinal(year, month, day) {\n  return day + (Util.isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];\n}\n\nfunction uncomputeOrdinal(year, ordinal) {\n  const table = Util.isLeapYear(year) ? leapLadder : nonLeapLadder,\n    month0 = table.findIndex(i => i < ordinal),\n    day = ordinal - table[month0];\n  return { month: month0 + 1, day };\n}\n\n/**\n * @private\n */\n\nexport class Conversions {\n  static gregorianToWeek(gregObj) {\n    const { year, month, day } = gregObj,\n      ordinal = computeOrdinal(year, month, day),\n      weekday = dayOfWeek(year, month, day);\n\n    let weekNumber = Math.floor((ordinal - weekday + 10) / 7),\n      weekYear;\n\n    if (weekNumber < 1) {\n      weekYear = year - 1;\n      weekNumber = lastWeekNumber(weekYear);\n    } else if (weekNumber > lastWeekNumber(year)) {\n      weekYear = year + 1;\n      weekNumber = 1;\n    } else {\n      weekYear = year;\n    }\n\n    return Object.assign({ weekYear, weekNumber, weekday }, Util.timeObject(gregObj));\n  }\n\n  static weekToGregorian(weekData) {\n    const { weekYear, weekNumber, weekday } = weekData,\n      weekdayOfJan4 = dayOfWeek(weekYear, 1, 4),\n      daysInYear = Util.daysInYear(weekYear);\n    let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3,\n      year;\n\n    if (ordinal < 1) {\n      year = weekYear - 1;\n      ordinal += Util.daysInYear(year);\n    } else if (ordinal > daysInYear) {\n      year = weekYear + 1;\n      ordinal -= Util.daysInYear(year);\n    } else {\n      year = weekYear;\n    }\n\n    const { month, day } = uncomputeOrdinal(year, ordinal);\n\n    return Object.assign({ year, month, day }, Util.timeObject(weekData));\n  }\n\n  static gregorianToOrdinal(gregData) {\n    const { year, month, day } = gregData,\n      ordinal = computeOrdinal(year, month, day);\n\n    return Object.assign({ year, ordinal }, Util.timeObject(gregData));\n  }\n\n  static ordinalToGregorian(ordinalData) {\n    const { year, ordinal } = ordinalData,\n      { month, day } = uncomputeOrdinal(year, ordinal);\n\n    return Object.assign({ year, month, day }, Util.timeObject(ordinalData));\n  }\n\n  static hasInvalidWeekData(obj) {\n    const validYear = Util.isNumber(obj.weekYear),\n      validWeek = Util.numberBetween(obj.weekNumber, 1, lastWeekNumber(obj.weekYear)),\n      validWeekday = Util.numberBetween(obj.weekday, 1, 7);\n\n    if (!validYear) {\n      return 'weekYear out of range';\n    } else if (!validWeek) {\n      return 'week out of range';\n    } else if (!validWeekday) {\n      return 'weekday out of range';\n    } else return false;\n  }\n\n  static hasInvalidOrdinalData(obj) {\n    const validYear = Util.isNumber(obj.year),\n      validOrdinal = Util.numberBetween(obj.ordinal, 1, Util.daysInYear(obj.year));\n\n    if (!validYear) {\n      return 'year out of range';\n    } else if (!validOrdinal) {\n      return 'ordinal out of range';\n    } else return false;\n  }\n\n  static hasInvalidGregorianData(obj) {\n    const validYear = Util.isNumber(obj.year),\n      validMonth = Util.numberBetween(obj.month, 1, 12),\n      validDay = Util.numberBetween(obj.day, 1, Util.daysInMonth(obj.year, obj.month));\n\n    if (!validYear) {\n      return 'year out of range';\n    } else if (!validMonth) {\n      return 'month out of range';\n    } else if (!validDay) {\n      return 'day out of range';\n    } else return false;\n  }\n\n  static hasInvalidTimeData(obj) {\n    const validHour = Util.numberBetween(obj.hour, 0, 23),\n      validMinute = Util.numberBetween(obj.minute, 0, 59),\n      validSecond = Util.numberBetween(obj.second, 0, 59),\n      validMillisecond = Util.numberBetween(obj.millisecond, 0, 999);\n\n    if (!validHour) {\n      return 'hour out of range';\n    } else if (!validMinute) {\n      return 'minute out of range';\n    } else if (!validSecond) {\n      return 'second out of range';\n    } else if (!validMillisecond) {\n      return 'millisecond out of range';\n    } else return false;\n  }\n}\n","import { Duration } from './duration';\nimport { Interval } from './interval';\nimport { Settings } from './settings';\nimport { Formatter } from './impl/formatter';\nimport { FixedOffsetZone } from './zones/fixedOffsetZone';\nimport { LocalZone } from './zones/localZone';\nimport { Locale } from './impl/locale';\nimport { Util } from './impl/util';\nimport { RegexParser } from './impl/regexParser';\nimport { TokenParser } from './impl/tokenParser';\nimport { Conversions } from './impl/conversions';\nimport {\n  InvalidArgumentError,\n  ConflictingSpecificationError,\n  InvalidUnitError,\n  InvalidDateTimeError\n} from './errors';\n\nconst INVALID = 'Invalid DateTime',\n  INVALID_INPUT = 'invalid input',\n  UNSUPPORTED_ZONE = 'unsupported zone',\n  UNPARSABLE = 'unparsable';\n\nfunction possiblyCachedWeekData(dt) {\n  if (dt.weekData === null) {\n    dt.weekData = Conversions.gregorianToWeek(dt.c);\n  }\n  return dt.weekData;\n}\n\nfunction clone(inst, alts = {}) {\n  const current = {\n    ts: inst.ts,\n    zone: inst.zone,\n    c: inst.c,\n    o: inst.o,\n    loc: inst.loc,\n    invalidReason: inst.invalidReason\n  };\n  return new DateTime(Object.assign({}, current, alts, { old: current }));\n}\n\nfunction fixOffset(localTS, o, tz) {\n  // Our UTC time is just a guess because our offset is just a guess\n  let utcGuess = localTS - o * 60 * 1000;\n\n  // Test whether the zone matches the offset for this ts\n  const o2 = tz.offset(utcGuess);\n\n  // If so, offset didn't change and we're done\n  if (o === o2) {\n    return [utcGuess, o];\n  }\n\n  // If not, change the ts by the difference in the offset\n  utcGuess -= (o2 - o) * 60 * 1000;\n\n  // If that gives us the local time we want, we're done\n  const o3 = tz.offset(utcGuess);\n  if (o2 === o3) {\n    return [utcGuess, o2];\n  }\n\n  // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time\n  return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];\n}\n\nfunction tsToObj(ts, offset) {\n  ts += offset * 60 * 1000;\n\n  const d = new Date(ts);\n\n  return {\n    year: d.getUTCFullYear(),\n    month: d.getUTCMonth() + 1,\n    day: d.getUTCDate(),\n    hour: d.getUTCHours(),\n    minute: d.getUTCMinutes(),\n    second: d.getUTCSeconds(),\n    millisecond: d.getUTCMilliseconds()\n  };\n}\n\nfunction objToLocalTS(obj) {\n  let d = Date.UTC(\n    obj.year,\n    obj.month - 1,\n    obj.day,\n    obj.hour,\n    obj.minute,\n    obj.second,\n    obj.millisecond\n  );\n\n  // javascript is stupid and i hate it\n  if (obj.year < 100 && obj.year >= 0) {\n    d = new Date(d);\n    d.setFullYear(obj.year);\n  }\n  return +d;\n}\n\nfunction objToTS(obj, offset, zone) {\n  return fixOffset(objToLocalTS(obj), offset, zone);\n}\n\nfunction adjustTime(inst, dur) {\n  const oPre = inst.o,\n    c = Object.assign({}, inst.c, {\n      year: inst.c.year + dur.years,\n      month: inst.c.month + dur.months,\n      day: inst.c.day + dur.days + dur.weeks * 7\n    }),\n    millisToAdd = Duration.fromObject({\n      hours: dur.hours,\n      minutes: dur.minutes,\n      seconds: dur.seconds,\n      milliseconds: dur.milliseconds\n    }).as('milliseconds'),\n    localTS = objToLocalTS(c);\n\n  let [ts, o] = fixOffset(localTS, oPre, inst.zone);\n\n  if (millisToAdd !== 0) {\n    ts += millisToAdd;\n    // that could have changed the offset by going over a DST, but we want to keep the ts the same\n    o = inst.zone.offset(ts);\n  }\n\n  return { ts, o };\n}\n\nfunction parseDataToDateTime(parsed, parsedZone, opts = {}) {\n  const { setZone, zone } = opts;\n  if (parsed && Object.keys(parsed).length !== 0) {\n    const interpretationZone = parsedZone || zone,\n      inst = DateTime.fromObject(\n        Object.assign(parsed, opts, {\n          zone: interpretationZone\n        })\n      );\n    return setZone ? inst : inst.setZone(zone);\n  } else {\n    return DateTime.invalid(UNPARSABLE);\n  }\n}\n\nfunction techFormat(dt, format) {\n  return dt.isValid\n    ? Formatter.create(Locale.create('en-US')).formatDateTimeFromString(dt, format)\n    : null;\n}\n\nconst defaultUnitValues = {\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  },\n  defaultWeekUnitValues = {\n    weekNumber: 1,\n    weekday: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  },\n  defaultOrdinalUnitValues = {\n    ordinal: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  };\n\nfunction isoTimeFormat(dateTime, suppressSecs, suppressMillis) {\n  return suppressSecs && dateTime.second === 0 && dateTime.millisecond === 0\n    ? 'HH:mmZ'\n    : suppressMillis && dateTime.millisecond === 0 ? 'HH:mm:ssZZ' : 'HH:mm:ss.SSSZZ';\n}\n\nconst orderedUnits = ['year', 'month', 'day', 'hour', 'minute', 'second', 'millisecond'];\n\nconst orderedWeekUnits = [\n  'weekYear',\n  'weekNumber',\n  'weekday',\n  'hour',\n  'minute',\n  'second',\n  'millisecond'\n];\n\nconst orderedOrdinalUnits = ['year', 'ordinal', 'hour', 'minute', 'second', 'millisecond'];\n\nfunction normalizeUnit(unit, ignoreUnknown = false) {\n  const normalized = {\n    year: 'year',\n    years: 'year',\n    month: 'month',\n    months: 'month',\n    day: 'day',\n    days: 'day',\n    hour: 'hour',\n    hours: 'hour',\n    minute: 'minute',\n    minutes: 'minute',\n    second: 'second',\n    seconds: 'second',\n    millisecond: 'millisecond',\n    milliseconds: 'millisecond',\n    weekday: 'weekday',\n    weekdays: 'weekday',\n    weeknumber: 'weekNumber',\n    weeksnumber: 'weekNumber',\n    weeknumbers: 'weekNumber',\n    weekyear: 'weekYear',\n    weekyears: 'weekYear',\n    ordinal: 'ordinal'\n  }[unit ? unit.toLowerCase() : unit];\n\n  if (!ignoreUnknown && !normalized) throw new InvalidUnitError(unit);\n\n  return normalized;\n}\n\n/**\n * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.\n *\n * A DateTime comprises of:\n * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.\n * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).\n * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.\n *\n * Here is a brief overview of the most commonly used functionality it provides:\n *\n * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link local}, {@link utc}, and (most flexibly) {@link fromObject}. To create one from a standard string format, use {@link fromISO}, {@link fromHTTP}, and {@link fromRFC2822}. To create one from a custom string format, use {@link fromString}. To create one from a native JS date, use {@link fromJSDate}.\n * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link toObject}), use the {@link year}, {@link month},\n * {@link day}, {@link hour}, {@link minute}, {@link second}, {@link millisecond} accessors.\n * * **Week calendar**: For ISO week calendar attributes, see the {@link weekYear}, {@link weekNumber}, and {@link weekday} accessors.\n * * **Configuration** See the {@link locale} and {@link numberingSystem} accessors.\n * * **Transformation**: To transform the DateTime into other DateTimes, use {@link set}, {@link reconfigure}, {@link setZone}, {@link setLocale}, {@link plus}, {@link minus}, {@link endOf}, {@link startOf}, {@link toUTC}, and {@link toLocal}.\n * * **Output**: To convert the DateTime to other representations, use the {@link toJSON}, {@link toISO}, {@link toHTTP}, {@link toObject}, {@link toRFC2822}, {@link toString}, {@link toLocaleString}, {@link toFormat}, {@link valueOf} and {@link toJSDate}.\n *\n * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.\n */\nexport class DateTime {\n  /**\n   * @access private\n   */\n  constructor(config = {}) {\n    const zone = config.zone || Settings.defaultZone,\n      invalidReason =\n        config.invalidReason ||\n        (Number.isNaN(config.ts) ? INVALID_INPUT : null) ||\n        (!zone.isValid ? UNSUPPORTED_ZONE : null);\n\n    Object.defineProperty(this, 'ts', {\n      value: config.ts || Settings.now(),\n      enumerable: true\n    });\n\n    Object.defineProperty(this, 'zone', {\n      value: zone,\n      enumerable: true\n    });\n\n    Object.defineProperty(this, 'loc', {\n      value: config.loc || Locale.create(),\n      enumerable: true\n    });\n\n    Object.defineProperty(this, 'invalidReason', {\n      value: invalidReason,\n      enumerable: false\n    });\n\n    Object.defineProperty(this, 'weekData', {\n      writable: true, // !!!\n      value: null,\n      enumerable: false\n    });\n\n    if (!invalidReason) {\n      const unchanged =\n          config.old && config.old.ts === this.ts && config.old.zone.equals(this.zone),\n        c = unchanged ? config.old.c : tsToObj(this.ts, this.zone.offset(this.ts)),\n        o = unchanged ? config.old.o : this.zone.offset(this.ts);\n\n      Object.defineProperty(this, 'c', { value: c });\n      Object.defineProperty(this, 'o', { value: o });\n    }\n  }\n\n  // CONSTRUCT\n\n  /**\n   * Create a local DateTime\n   * @param {number} year - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, i.e. a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, i.e. a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, i.e. a number between 0 and 999\n   * @example DateTime.local()                            //~> now\n   * @example DateTime.local(2017)                        //~> 2017-01-01T00:00:00\n   * @example DateTime.local(2017, 3)                     //~> 2017-03-01T00:00:00\n   * @example DateTime.local(2017, 3, 12)                 //~> 2017-03-12T00:00:00\n   * @example DateTime.local(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00\n   * @example DateTime.local(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.675\n   * @return {DateTime}\n   */\n  static local(year, month, day, hour, minute, second, millisecond) {\n    if (Util.isUndefined(year)) {\n      return new DateTime({ ts: Settings.now() });\n    } else {\n      return DateTime.fromObject({\n        year,\n        month,\n        day,\n        hour,\n        minute,\n        second,\n        millisecond,\n        zone: Settings.defaultZone\n      });\n    }\n  }\n\n  /**\n   * Create a DateTime in UTC\n   * @param {number} year - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, i.e. a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, i.e. a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, i.e. a number between 0 and 999\n   * @example DateTime.utc()                            //~> now\n   * @example DateTime.utc(2017)                        //~> 2017-01-01T00:00:00Z\n   * @example DateTime.utc(2017, 3)                     //~> 2017-03-01T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12)                 //~> 2017-03-12T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.675Z\n   * @return {DateTime}\n   */\n  static utc(year, month, day, hour, minute, second, millisecond) {\n    if (Util.isUndefined(year)) {\n      return new DateTime({\n        ts: Settings.now(),\n        zone: FixedOffsetZone.utcInstance\n      });\n    } else {\n      return DateTime.fromObject({\n        year,\n        month,\n        day,\n        hour,\n        minute,\n        second,\n        millisecond,\n        zone: FixedOffsetZone.utcInstance\n      });\n    }\n  }\n\n  /**\n   * Create an DateTime from a Javascript Date object. Uses the default zone.\n   * @param {Date} date - a Javascript Date object\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @return {DateTime}\n   */\n  static fromJSDate(date, options = {}) {\n    return new DateTime({\n      ts: Util.isDate(date) ? date.valueOf() : NaN,\n      zone: Util.normalizeZone(options.zone),\n      loc: Locale.fromObject(options)\n    });\n  }\n\n  /**\n   * Create an DateTime from a count of epoch milliseconds. Uses the default zone.\n   * @param {number} milliseconds - a number of milliseconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @param {string} [options.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromMillis(milliseconds, options = {}) {\n    return new DateTime({\n      ts: milliseconds,\n      zone: Util.normalizeZone(options.zone),\n      loc: Locale.fromObject(options)\n    });\n  }\n\n  /**\n   * Create an DateTime from a Javascript object with keys like 'year' and 'hour' with reasonable defaults.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.year - a year, such as 1987\n   * @param {number} obj.month - a month, 1-12\n   * @param {number} obj.day - a day of the month, 1-31, depending on the month\n   * @param {number} obj.ordinal - day of the year, 1-365 or 366\n   * @param {number} obj.weekYear - an ISO week year\n   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year\n   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday\n   * @param {number} obj.hour - hour of the day, 0-23\n   * @param {number} obj.minute - minute of the hour, 0-59\n   * @param {number} obj.second - second of the minute, 0-59\n   * @param {number} obj.millisecond - millisecond of the second, 0-999\n   * @param {string|Zone} [obj.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()\n   * @param {string} [obj.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} obj.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} obj.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'\n   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01T00'\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'utc' }),\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'local' })\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'America/New_York' })\n   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'\n   * @return {DateTime}\n   */\n  static fromObject(obj) {\n    const zoneToUse = Util.normalizeZone(obj.zone);\n    if (!zoneToUse.isValid) {\n      return DateTime.invalid(UNSUPPORTED_ZONE);\n    }\n\n    const tsNow = Settings.now(),\n      offsetProvis = zoneToUse.offset(tsNow),\n      normalized = Util.normalizeObject(obj, normalizeUnit, true),\n      containsOrdinal = !Util.isUndefined(normalized.ordinal),\n      containsGregorYear = !Util.isUndefined(normalized.year),\n      containsGregorMD = !Util.isUndefined(normalized.month) || !Util.isUndefined(normalized.day),\n      containsGregor = containsGregorYear || containsGregorMD,\n      definiteWeekDef = normalized.weekYear || normalized.weekNumber,\n      loc = Locale.fromObject(obj);\n\n    // cases:\n    // just a weekday -> this week's instance of that weekday, no worries\n    // (gregorian data or ordinal) + (weekYear or weekNumber) -> error\n    // (gregorian month or day) + ordinal -> error\n    // otherwise just use weeks or ordinals or gregorian, depending on what's specified\n\n    if ((containsGregor || containsOrdinal) && definiteWeekDef) {\n      throw new ConflictingSpecificationError(\n        \"Can't mix weekYear/weekNumber units with year/month/day or ordinals\"\n      );\n    }\n\n    if (containsGregorMD && containsOrdinal) {\n      throw new ConflictingSpecificationError(\"Can't mix ordinal dates with month/day\");\n    }\n\n    const useWeekData = definiteWeekDef || (normalized.weekday && !containsGregor);\n\n    // configure ourselves to deal with gregorian dates or week stuff\n    let units,\n      defaultValues,\n      objNow = tsToObj(tsNow, offsetProvis);\n    if (useWeekData) {\n      units = orderedWeekUnits;\n      defaultValues = defaultWeekUnitValues;\n      objNow = Conversions.gregorianToWeek(objNow);\n    } else if (containsOrdinal) {\n      units = orderedOrdinalUnits;\n      defaultValues = defaultOrdinalUnitValues;\n      objNow = Conversions.gregorianToOrdinal(objNow);\n    } else {\n      units = orderedUnits;\n      defaultValues = defaultUnitValues;\n    }\n\n    // set default values for missing stuff\n    let foundFirst = false;\n    for (const u of units) {\n      const v = normalized[u];\n      if (!Util.isUndefined(v)) {\n        foundFirst = true;\n      } else if (foundFirst) {\n        normalized[u] = defaultValues[u];\n      } else {\n        normalized[u] = objNow[u];\n      }\n    }\n\n    // make sure the values we have are in range\n    const higherOrderInvalid = useWeekData\n        ? Conversions.hasInvalidWeekData(normalized)\n        : containsOrdinal\n          ? Conversions.hasInvalidOrdinalData(normalized)\n          : Conversions.hasInvalidGregorianData(normalized),\n      invalidReason = higherOrderInvalid || Conversions.hasInvalidTimeData(normalized);\n\n    if (invalidReason) {\n      return DateTime.invalid(invalidReason);\n    }\n\n    // compute the actual time\n    const gregorian = useWeekData\n        ? Conversions.weekToGregorian(normalized)\n        : containsOrdinal ? Conversions.ordinalToGregorian(normalized) : normalized,\n      [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse),\n      inst = new DateTime({\n        ts: tsFinal,\n        zone: zoneToUse,\n        o: offsetFinal,\n        loc\n      });\n\n    // gregorian data + weekday serves only to validate\n    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {\n      return DateTime.invalid('mismatched weekday');\n    }\n\n    return inst;\n  }\n\n  /**\n   * Create a DateTime from an ISO 8601 string\n   * @param {string} text - the ISO string\n   * @param {Object} opts - options to affect the creation\n   * @param {boolean} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc')\n   * @example DateTime.fromISO('2016-W05-4')\n   * @return {DateTime}\n   */\n  static fromISO(text, opts = {}) {\n    const [vals, parsedZone] = RegexParser.parseISODate(text);\n    return parseDataToDateTime(vals, parsedZone, opts);\n  }\n\n  /**\n   * Create a DateTime from an RFC 2822 string\n   * @param {string} text - the RFC 2822 string\n   * @param {Object} opts - options to affect the creation\n   * @param {boolean} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')\n   * @example DateTime.fromRFC2822('Tue, 25 Nov 2016 13:23:12 +0600')\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')\n   * @return {DateTime}\n   */\n  static fromRFC2822(text, opts = {}) {\n    const [vals, parsedZone] = RegexParser.parseRFC2822Date(text);\n    return parseDataToDateTime(vals, parsedZone, opts);\n  }\n\n  /**\n   * Create a DateTime from an HTTP header date\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @param {string} text - the HTTP header date\n   * @param {object} options - options to affect the creation\n   * @param {boolean} [options.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [options.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.\n   * @param {string} [options.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')\n   * @return {DateTime}\n   */\n  static fromHTTP(text, options = {}) {\n    const [vals, parsedZone] = RegexParser.parseHTTPDate(text);\n    return parseDataToDateTime(vals, parsedZone, options);\n  }\n\n  /**\n   * Create a DateTime from an input string and format string\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see description)\n   * @param {Object} options - options to affect the creation\n   * @param {boolean} [options.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [options.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [options.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} options.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromString(text, fmt, options = {}) {\n    const { locale = null, numberingSystem = null } = options,\n      parser = new TokenParser(Locale.fromOpts({ locale, numberingSystem })),\n      [vals, parsedZone, invalidReason] = parser.parseDateTime(text, fmt);\n    if (invalidReason) {\n      return DateTime.invalid(invalidReason);\n    } else {\n      return parseDataToDateTime(vals, parsedZone, options);\n    }\n  }\n\n  /**\n   * Create an invalid DateTime.\n   * @return {DateTime}\n   */\n  static invalid(reason) {\n    if (!reason) {\n      throw new InvalidArgumentError('need to specify a reason the DateTime is invalid');\n    }\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDateTimeError(reason);\n    } else {\n      return new DateTime({ invalidReason: reason });\n    }\n  }\n\n  // INFO\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7\n   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4\n   * @return {number}\n   */\n  get(unit) {\n    return this[unit];\n  }\n\n  /**\n   * Returns whether the DateTime is valid. Invalid DateTimes occur when:\n   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30\n   * * The DateTime was created by an operation on another invalid date\n   * @return {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid\n   * @return {string}\n   */\n  get invalidReason() {\n    return this.invalidReason;\n  }\n\n  /**\n   * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime\n   *\n   * @return {string}\n   */\n  get locale() {\n    return this.loc.locale;\n  }\n\n  /**\n   * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime\n   *\n   * @return {string}\n   */\n  get numberingSystem() {\n    return this.loc.numberingSystem;\n  }\n\n  /**\n   * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime\n   *\n   * @return {string}\n   */\n  get outputCalendar() {\n    return this.loc.outputCalendar;\n  }\n\n  /**\n   * Get the name of the time zone.\n   * @return {String}\n   */\n  get zoneName() {\n    return this.zone.name;\n  }\n\n  /**\n   * Get the year\n   * @example DateTime.local(2017, 5, 25).year //=> 2017\n   * @return {number}\n   */\n  get year() {\n    return this.isValid ? this.c.year : NaN;\n  }\n\n  /**\n   * Get the month (1-12).\n   * @example DateTime.local(2017, 5, 25).month //=> 5\n   * @return {number}\n   */\n  get month() {\n    return this.isValid ? this.c.month : NaN;\n  }\n\n  /**\n   * Get the day of the month (1-30ish).\n   * @example DateTime.local(2017, 5, 25).day //=> 25\n   * @return {number}\n   */\n  get day() {\n    return this.isValid ? this.c.day : NaN;\n  }\n\n  /**\n   * Get the hour of the day (0-23).\n   * @example DateTime.local(2017, 5, 25, 9).hour //=> 9\n   * @return {number}\n   */\n  get hour() {\n    return this.isValid ? this.c.hour : NaN;\n  }\n\n  /**\n   * Get the minute of the hour (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30\n   * @return {number}\n   */\n  get minute() {\n    return this.isValid ? this.c.minute : NaN;\n  }\n\n  /**\n   * Get the second of the minute (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52\n   * @return {number}\n   */\n  get second() {\n    return this.isValid ? this.c.second : NaN;\n  }\n\n  /**\n   * Get the millisecond of the second (0-999).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654\n   * @return {number}\n   */\n  get millisecond() {\n    return this.isValid ? this.c.millisecond : NaN;\n  }\n\n  /**\n   * Get the week year\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 11, 31).weekYear //=> 2015\n   * @return {number}\n   */\n  get weekYear() {\n    return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;\n  }\n\n  /**\n   * Get the week number of the week year (1-52ish).\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2017, 5, 25).weekNumber //=> 21\n   * @return {number}\n   */\n  get weekNumber() {\n    return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;\n  }\n\n  /**\n   * Get the day of the week.\n   * 1 is Monday and 7 is Sunday\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 11, 31).weekday //=> 4\n   * @return {number}\n   */\n  get weekday() {\n    return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;\n  }\n\n  /**\n   * Get the ordinal (i.e. the day of the year)\n   * @example DateTime.local(2017, 5, 25).ordinal //=> 145\n   * @return {number|DateTime}\n   */\n  get ordinal() {\n    return this.isValid ? Conversions.gregorianToOrdinal(this.c).ordinal : NaN;\n  }\n\n  /**\n   * Get the UTC offset of this DateTime in minutes\n   * @example DateTime.local().offset //=> -240\n   * @example DateTime.utc().offset //=> 0\n   * @return {number}\n   */\n  get offset() {\n    return this.isValid ? this.zone.offset(this.ts) : NaN;\n  }\n\n  /**\n   * Get the short human name for the zone's current offset, for example \"EST\" or \"EDT\".\n   * @return {String}\n   */\n  get offsetNameShort() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: 'short',\n        locale: this.locale\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the long human name for the zone's current offset, for example \"Eastern Standard Time\" or \"Eastern Daylight Time\".\n   * Is locale-aware.\n   * @return {String}\n   */\n  get offsetNameLong() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: 'long',\n        locale: this.locale\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get whether this zone's offset ever changes, as in a DST.\n   * @return {boolean}\n   */\n  get isOffsetFixed() {\n    return this.zone.universal;\n  }\n\n  /**\n   * Get whether the DateTime is in a DST.\n   * @return {boolean}\n   */\n  get isInDST() {\n    if (this.isOffsetFixed) {\n      return false;\n    } else {\n      return (\n        this.offset > this.set({ month: 1 }).offset || this.offset > this.set({ month: 5 }).offset\n      );\n    }\n  }\n\n  /**\n   * Returns true if this DateTime is in a leap year, false otherwise\n   * @example DateTime.local(2016).isInLeapYear //=> true\n   * @example DateTime.local(2013).isInLeapYear //=> false\n   * @return {boolean}\n   */\n  get isInLeapYear() {\n    return Util.isLeapYear(this.year);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's month\n   * @example DateTime.local(2016, 2).daysInMonth //=> 29\n   * @example DateTime.local(2016, 3).days //=> 31\n   * @return {number}\n   */\n  get daysInMonth() {\n    return Util.daysInMonth(this.year, this.month);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's year\n   * @example DateTime.local(2016).daysInYear //=> 366\n   * @example DateTime.local(2013).daysInYear //=> 365\n   * @return {number}\n   */\n  get daysInYear() {\n    return this.isValid ? Util.daysInYear(this.year) : NaN;\n  }\n\n  /**\n   * Returns the resolved Intl options for this DateTime.\n   * This is useful in understanding the behavior of parsing and formatting methods\n   * @param {object} opts - the same options as toLocaleString\n   * @return {object}\n   */\n  resolvedLocaleOpts(opts = {}) {\n    const { locale, numberingSystem, calendar } = Formatter.create(\n      this.loc.clone(opts),\n      opts\n    ).resolvedOptions(this);\n    return { locale, numberingSystem, outputCalendar: calendar };\n  }\n\n  // TRANSFORM\n\n  /**\n   * \"Set\" the DateTime's zone to UTC. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to {@link setZone}('utc')\n   * @param {number} [offset=0] - optionally, an offset from UTC in minutes\n   * @param {object} [opts={}] - options to pass to `setZone()`\n   * @return {DateTime}\n   */\n  toUTC(offset = 0, opts = {}) {\n    return this.setZone(FixedOffsetZone.instance(offset), opts);\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to `setZone('local')`\n   * @return {DateTime}\n   */\n  toLocal() {\n    return this.setZone(new LocalZone());\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.\n   *\n   * By default, the setter keeps the underlying time the same (as in, the same UTC timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link plus}. You may wish to use {@link toLocal} and {@link toUTC} which provide simple convenience wrappers for commonly used zones.\n   * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'utc+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link Zone} class.\n   * @param {object} opts - options\n   * @param {boolean} [opts.keepCalendarTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.\n   * @return {DateTime}\n   */\n  setZone(zone, { keepCalendarTime = false } = {}) {\n    zone = Util.normalizeZone(zone);\n    if (zone.equals(this.zone)) {\n      return this;\n    } else if (!zone.isValid) {\n      return DateTime.invalid(UNSUPPORTED_ZONE);\n    } else {\n      const newTS = keepCalendarTime\n        ? this.ts + (this.o - zone.offset(this.ts)) * 60 * 1000\n        : this.ts;\n      return clone(this, { ts: newTS, zone });\n    }\n  }\n\n  /**\n   * \"Set\" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.\n   * @param {object} properties - the properties to set\n   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })\n   * @return {DateTime}\n   */\n  reconfigure({ locale, numberingSystem, outputCalendar } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem, outputCalendar });\n    return clone(this, { loc });\n  }\n\n  /**\n   * \"Set\" the locale. Returns a newly-constructed DateTime.\n   * Just a convenient alias for reconfigure({ locale })\n   * @example DateTime.local(2017, 5, 25).setLocale('en-GB')\n   * @return {DateTime}\n   */\n  setLocale(locale) {\n    return this.reconfigure({ locale });\n  }\n\n  /**\n   * \"Set\" the values of specified units. Returns a newly-constructed DateTime.\n   * @param {object} values - a mapping of units to numbers\n   * @example dt.set({ year: 2017 })\n   * @example dt.set({ hour: 8, minute: 30 })\n   * @example dt.set({ weekday: 5 })\n   * @example dt.set({ year: 2005, ordinal: 234 })\n   * @example dt.set({ outputCalendar: 'beng', zone: 'utc' })\n   * @return {DateTime}\n   */\n  set(values) {\n    if (!this.isValid) return this;\n\n    const normalized = Util.normalizeObject(values, normalizeUnit),\n      settingWeekStuff =\n        !Util.isUndefined(normalized.weekYear) ||\n        !Util.isUndefined(normalized.weekNumber) ||\n        !Util.isUndefined(normalized.weekday);\n\n    let mixed;\n    if (settingWeekStuff) {\n      mixed = Conversions.weekToGregorian(\n        Object.assign(Conversions.gregorianToWeek(this.c), normalized)\n      );\n    } else if (!Util.isUndefined(normalized.ordinal)) {\n      mixed = Conversions.ordinalToGregorian(\n        Object.assign(Conversions.gregorianToOrdinal(this.c), normalized)\n      );\n    } else {\n      mixed = Object.assign(this.toObject(), normalized);\n\n      // if we didn't set the day but we ended up on an overflow date,\n      // use the last day of the right month\n      if (Util.isUndefined(normalized.day)) {\n        mixed.day = Math.min(Util.daysInMonth(mixed.year, mixed.month), mixed.day);\n      }\n    }\n\n    const [ts, o] = objToTS(mixed, this.o, this.zone);\n    return clone(this, { ts, o });\n  }\n\n  /**\n   * Add a period of time to this DateTime and return the resulting DateTime\n   *\n   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.\n   * @param {Duration|number|object} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @example DateTime.local().plus(123) //~> in 123 milliseconds\n   * @example DateTime.local().plus({ minutes: 15 }) //~> in 15 minutes\n   * @example DateTime.local().plus({ days: 1 }) //~> this time tomorrow\n   * @example DateTime.local().plus({ hours: 3, minutes: 13 }) //~> in 1 hr, 13 min\n   * @example DateTime.local().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 1 hr, 13 min\n   * @return {DateTime}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n    const dur = Util.friendlyDuration(duration);\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * Subtract a period of time to this DateTime and return the resulting DateTime\n   * See {@link plus}\n   * @param {Duration|number|object} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   @return {DateTime}\n  */\n  minus(duration) {\n    if (!this.isValid) return this;\n    const dur = Util.friendlyDuration(duration).negate();\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * \"Set\" this DateTime to the beginning of a unit of time.\n   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'month', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'\n   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'\n   * @return {DateTime}\n   */\n  startOf(unit) {\n    if (!this.isValid) return this;\n    const o = {},\n      normalizedUnit = Duration.normalizeUnit(unit);\n    switch (normalizedUnit) {\n      case 'years':\n        o.month = 1;\n      // falls through\n      case 'months':\n        o.day = 1;\n      // falls through\n      case 'weeks':\n      case 'days':\n        o.hour = 0;\n      // falls through\n      case 'hours':\n        o.minute = 0;\n      // falls through\n      case 'minutes':\n        o.second = 0;\n      // falls through\n      case 'seconds':\n        o.millisecond = 0;\n        break;\n      default:\n        throw new InvalidUnitError(unit);\n    }\n\n    if (normalizedUnit === 'weeks') {\n      o.weekday = 1;\n    }\n\n    return this.set(o);\n  }\n\n  /**\n   * \"Set\" this DateTime to the end (i.e. the last millisecond) of a unit of time\n   * @param {string} unit - The unit to go to the end of. Can be 'year', 'month', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-03T00:00:00.000-05:00'\n   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'\n   * @return {DateTime}\n   */\n  endOf(unit) {\n    return this.isValid\n      ? this.startOf(unit)\n          .plus({ [unit]: 1 })\n          .minus(1)\n      : this;\n  }\n\n  // OUTPUT\n\n  /**\n   * Returns a string representation of this DateTime formatted according to the specified format string.\n   * **You may not want this.** See {@link toLocaleString} for a more flexible formatting tool. See the documentation for the specific format tokens supported.\n   * @param {string} fmt - the format string\n   * @param {object} opts - options\n   * @param {boolean} opts.round - round numerical values\n   * @example DateTime.local().toFormat('yyyy LLL dd') //=> '2017 avr. 22'\n   * @example DateTime.local().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 Apr 22'\n   * @example DateTime.local().toFormat(\"HH 'hours and' mm 'minutes'\") //=> '20 hours and 55 minutes'\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc, opts).formatDateTimeFromString(this, fmt)\n      : INVALID;\n  }\n\n  /**\n   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.\n   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation.\n   * of the DateTime in the assigned locale.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param opts {object} - Intl.DateTimeFormat constructor options\n   * @example DateTime.local().toLocaleString(); //=> 4/20/2017\n   * @example DateTime.local().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'\n   * @example DateTime.local().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'\n   * @example DateTime.local().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'\n   * @example DateTime.local().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'\n   * @example DateTime.local().toLocaleString({weekday: 'long', month: 'long', day: '2-digit'}); //=> 'Thu, Apr 20'\n   * @example DateTime.local().toLocaleString({weekday: 'long', month: 'long', day: '2-digit', hour: '2-digit', minute: '2-digit'}); //=> 'Thu, Apr 20, 11:27'\n   * @example DateTime.local().toLocaleString({hour: '2-digit', minute: '2-digit'}); //=> '11:32'\n   * @return {string}\n   */\n  toLocaleString(opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.clone(opts), opts).formatDateTime(this)\n      : INVALID;\n  }\n\n  /**\n   * Returns an array of format \"parts\", i.e. individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts\n   * @param opts {object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.\n   * @example DateTime.local().toLocaleString(); //=> [\n   *                                    //=>   { type: 'day', value: '25' },\n   *                                    //=>   { type: 'literal', value: '/' },\n   *                                    //=>   { type: 'month', value: '05' },\n   *                                    //=>   { type: 'literal', value: '/' },\n   *                                    //=>   { type: 'year', value: '1982' }\n   *                                    //=> ]\n   */\n  toLocaleParts(opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this)\n      : [];\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime\n   * @param {object} opts - options\n   * @param {boolean} opts.suppressMilliseconds - exclude milliseconds from the format if they're 0\n   * @param {boolean} opts.supressSeconds - exclude seconds from the format if they're 0\n   * @example DateTime.utc(1982, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'\n   * @example DateTime.local().toISO() //=> '2017-04-22T20:47:05.335-04:00'\n   * @return {string}\n   */\n  toISO({ suppressMilliseconds = false, suppressSeconds = false } = {}) {\n    const f = `yyyy-MM-dd'T'${isoTimeFormat(this, suppressSeconds, suppressMilliseconds)}`;\n    return techFormat(this, f);\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's date component\n   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '07:34:19.361Z'\n   * @return {string}\n   */\n  toISODate() {\n    return techFormat(this, 'yyyy-MM-dd');\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's week date\n   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'\n   * @return {string}\n   */\n  toISOWeekDate() {\n    return techFormat(this, \"kkkk-'W'WW-c\");\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's time component\n   * @param {object} opts - options\n   * @param {boolean} opts.suppressMilliseconds - exclude milliseconds from the format if they're 0\n   * @param {boolean} opts.supressSeconds - exclude seconds from the format if they're 0\n   * @example DateTime.utc().hour(7).minute(34).toISOTime() //=> '07:34:19.361Z'\n   * @example DateTime.utc().hour(7).minute(34).toISOTime({ suppressSeconds: true }) //=> '07:34Z'\n   * @return {string}\n   */\n  toISOTime({ suppressMilliseconds = false, suppressSeconds = false } = {}) {\n    return techFormat(this, isoTimeFormat(this, suppressSeconds, suppressMilliseconds));\n  }\n\n  /**\n   * Returns an RFC 2822-compatible string representation of this DateTime, always in UTC\n   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'\n   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'\n   * @return {string}\n   */\n  toRFC2822() {\n    return techFormat(this, 'EEE, dd LLL yyyy hh:mm:ss ZZZ');\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in HTTP headers.\n   * Specifically, the string conforms to RFC 1123.\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'\n   * @return {string}\n   */\n  toHTTP() {\n    return techFormat(this.toUTC(), \"EEE, dd LLL yyyy hh:mm:ss 'GMT'\");\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for debugging\n   * @return {string}\n   */\n  toString() {\n    return this.isValid ? this.toISO() : INVALID;\n  }\n\n  /**\n   * Returns the epoch milliseconds of this DateTime\n   * @return {number}\n   */\n  valueOf() {\n    return this.isValid ? this.ts : NaN;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns a Javascript object with this DateTime's year, month, day, and so on.\n   * @param opts - options for generating the object\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\n   * @example DateTime.local().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }\n   * @return {object}\n   */\n  toObject(opts = {}) {\n    if (!this.isValid) return {};\n\n    const base = Object.assign({}, this.c);\n\n    if (opts.includeConfig) {\n      base.outputCalendar = this.outputCalendar;\n      base.numberingSystem = this.loc.numberingSystem;\n      base.locale = this.loc.locale;\n    }\n    return base;\n  }\n\n  /**\n   * Returns a Javascript Date equivalent to this DateTime.\n   * @return {object}\n   */\n  toJSDate() {\n    return new Date(this.isValid ? this.ts : NaN);\n  }\n\n  // COMPARE\n\n  /**\n   * Return the difference between two DateTimes as a Duration.\n   * @param {DateTime} otherDateTime - the DateTime to compare this one to\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example\n   * var i1 = DateTime.fromISO('1982-05-25T09:45'),\n   *     i2 = DateTime.fromISO('1983-10-14T10:30');\n   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }\n   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }\n   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }\n   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }\n   * @return {Duration}\n   */\n  diff(otherDateTime, unit = 'milliseconds', opts = {}) {\n    if (!this.isValid || !otherDateTime.isValid)\n      return Duration.invalid(this.invalidReason || otherDateTime.invalidReason);\n\n    const units = Util.maybeArray(unit).map(Duration.normalizeUnit);\n\n    const flipped = otherDateTime.valueOf() > this.valueOf(),\n      post = flipped ? otherDateTime : this,\n      accum = {};\n\n    let cursor = flipped ? this : otherDateTime,\n      lowestOrder = null;\n\n    if (units.indexOf('years') >= 0) {\n      let dYear = post.year - cursor.year;\n\n      cursor = cursor.set({ year: post.year });\n\n      if (cursor > post) {\n        cursor = cursor.minus({ years: 1 });\n        dYear -= 1;\n      }\n\n      accum.years = dYear;\n      lowestOrder = 'years';\n    }\n\n    if (units.indexOf('months') >= 0) {\n      const dYear = post.year - cursor.year;\n      let dMonth = post.month - cursor.month + dYear * 12;\n\n      cursor = cursor.set({ year: post.year, month: post.month });\n\n      if (cursor > post) {\n        cursor = cursor.minus({ months: 1 });\n        dMonth -= 1;\n      }\n\n      accum.months = dMonth;\n      lowestOrder = 'months';\n    }\n\n    const computeDayDelta = () => {\n      const utcDayStart = dt =>\n          dt\n            .toUTC(0, { keepCalendarTime: true })\n            .startOf('day')\n            .valueOf(),\n        ms = utcDayStart(post) - utcDayStart(cursor);\n      return Math.floor(Duration.fromMillis(ms, opts).shiftTo('days').days);\n    };\n\n    if (units.indexOf('weeks') >= 0) {\n      const days = computeDayDelta();\n      let weeks = (days - days % 7) / 7;\n      cursor = cursor.plus({ weeks });\n\n      if (cursor > post) {\n        cursor.minus({ weeks: 1 });\n        weeks -= 1;\n      }\n\n      accum.weeks = weeks;\n      lowestOrder = 'weeks';\n    }\n\n    if (units.indexOf('days') >= 0) {\n      let days = computeDayDelta();\n      cursor = cursor.set({\n        year: post.year,\n        month: post.month,\n        day: post.day\n      });\n\n      if (cursor > post) {\n        cursor.minus({ days: 1 });\n        days -= 1;\n      }\n\n      accum.days = days;\n      lowestOrder = 'days';\n    }\n\n    const remaining = Duration.fromMillis(post - cursor, opts),\n      moreUnits = units.filter(\n        u => ['hours', 'minutes', 'seconds', 'milliseconds'].indexOf(u) >= 0\n      ),\n      shiftTo = moreUnits.length > 0 ? moreUnits : [lowestOrder],\n      shifted = remaining.shiftTo(...shiftTo),\n      merged = shifted.plus(Duration.fromObject(Object.assign(accum, opts)));\n\n    return flipped ? merged.negate() : merged;\n  }\n\n  /**\n   * Return the difference between this DateTime and right now.\n   * See {@link diff}\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  diffNow(unit, opts) {\n    return this.isValid ? this.diff(DateTime.local(), unit, opts) : this;\n  }\n\n  /**\n   * Return an Interval spanning between this DateTime and another DateTime\n   * @param {DateTime} otherDateTime - the other end point of the Interval\n   * @return {Duration}\n   */\n  until(otherDateTime) {\n    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;\n  }\n\n  /**\n   * Return whether this DateTime is in the same unit of time as another DateTime\n   * @param {DateTime} otherDateTime - the other DateTime\n   * @param {string} unit - the unit of time to check sameness on\n   * @example DateTime.local().hasSame(otherDT, 'day'); //~> true if both the same calendar day\n   * @return {boolean}\n   */\n  hasSame(otherDateTime, unit) {\n    if (!this.isValid) return false;\n    if (unit === 'millisecond') {\n      return this.valueOf() === otherDateTime.valueOf();\n    } else {\n      const inputMs = otherDateTime.valueOf();\n      return this.startOf(unit) <= inputMs && inputMs <= this.endOf(unit);\n    }\n  }\n\n  /**\n   * Equality check\n   * Two DateTimes are equal iff they represent the same millisecond\n   * @param {DateTime} other - the other DateTime\n   * @return {boolean}\n   */\n  equals(other) {\n    return this.isValid && other.isValid\n      ? this.valueOf() === other.valueOf() &&\n          this.zone.equals(other.zone) &&\n          this.loc.equals(other.loc)\n      : false;\n  }\n\n  /**\n   * Return the min of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum\n   * @return {DateTime}\n   */\n  static min(...dateTimes) {\n    return Util.bestBy(dateTimes, i => i.valueOf(), Math.min);\n  }\n\n  /**\n   * Return the max of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum\n   * @return {DateTime}\n   */\n  static max(...dateTimes) {\n    return Util.bestBy(dateTimes, i => i.valueOf(), Math.max);\n  }\n\n  // MISC\n\n  /**\n   * Explain how a string would be parsed by fromString()\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see description)\n   * @param {object} options - options taken by fromString()\n   * @return {object}\n   */\n  static fromStringExplain(text, fmt, options = {}) {\n    const parser = new TokenParser(Locale.fromOpts(options));\n    return parser.explainParse(text, fmt);\n  }\n\n  // FORMAT PRESETS\n\n  /**\n   * {@link toLocaleString} format like 10/14/1983\n   */\n  static get DATE_SHORT() {\n    return {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Oct 14, 1983'\n   */\n  static get DATE_MED() {\n    return {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'October 14, 1983'\n   */\n  static get DATE_FULL() {\n    return {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Tuesday, October 14, 1983'\n   */\n  static get DATE_HUGE() {\n    return {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      weekday: 'long'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.\n   */\n  static get TIME_SIMPLE() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.\n   */\n  static get TIME_WITH_SECONDS() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.\n   */\n  static get TIME_WITH_SHORT_OFFSET() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      timeZoneName: 'short'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   */\n  static get TIME_WITH_LONG_OFFSET() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      timeZoneName: 'long'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30', always 24-hour.\n   */\n  static get TIME_24_SIMPLE() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: false\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23', always 24-hour.\n   */\n  static get TIME_24_WITH_SECONDS() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 EDT', always 24-hour.\n   */\n  static get TIME_24_WITH_SHORT_OFFSET() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false,\n      timeZoneName: 'short'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.\n   */\n  static get TIME_24_WITH_LONG_OFFSET() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false,\n      timeZoneName: 'long'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_SHORT() {\n    return {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_SHORT_WITH_SECONDS() {\n    return {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_MED() {\n    return {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_MED_WITH_SECONDS() {\n    return {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_FULL() {\n    return {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit',\n      timeZoneName: 'short'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'October 14, 1983, 9:303 AM EDT'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_FULL_WITH_SECONDS() {\n    return {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      timeZoneName: 'short'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_HUGE() {\n    return {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      weekday: 'long',\n      hour: 'numeric',\n      minute: '2-digit',\n      timeZoneName: 'long'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_HUGE_WITH_SECONDS() {\n    return {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      weekday: 'long',\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      timeZoneName: 'long'\n    };\n  }\n}\n","import { DateTime } from './datetime';\nimport { Settings } from './settings';\nimport { Locale } from './impl/locale';\nimport { Util } from './impl/util';\n\n/**\n * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.\n */\nexport class Info {\n  /**\n   * Return whether the specified zone contains a DST.\n   * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.\n   * @return {boolean}\n   */\n  static hasDST(zone = Settings.defaultZone) {\n    return (\n      !zone.universal &&\n      DateTime.local()\n        .setZone(zone)\n        .set({ month: 1 }).offset !==\n        DateTime.local()\n          .setZone(zone)\n          .set({ month: 5 }).offset\n    );\n  }\n\n  /**\n   * Return an array of standalone month names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {object} opts - options\n   * @param {string} [opts.locale='en'] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @example Info.months()[0] //=> 'January'\n   * @example Info.months('short')[0] //=> 'Jan'\n   * @example Info.months('numeric')[0] //=> '1'\n   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'\n   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'\n   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'\n   * @return {[string]}\n   */\n  static months(\n    length = 'long',\n    { locale = 'en', numberingSystem = null, outputCalendar = 'gregory' } = {}\n  ) {\n    return new Locale(locale, numberingSystem, outputCalendar).months(length);\n  }\n\n  /**\n   * Return an array of format month names.\n   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that\n   * changes the string.\n   * See {@link months}\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {object} opts - options\n   * @param {string} [opts.locale='en'] - the locale code\n   * @param {string} [opts.numbering=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @return {[string]}\n   */\n  static monthsFormat(\n    length = 'long',\n    { locale = 'en', numberingSystem = null, outputCalendar = 'gregory' } = {}\n  ) {\n    return new Locale(locale, numberingSystem, outputCalendar).months(length, true);\n  }\n\n  /**\n   * Return an array of standalone week names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the month representation, such as \"narrow\", \"short\", \"long\".\n   * @param {object} opts - options\n   * @param {string} [opts.locale='en'] - the locale code\n   * @param {string} [opts.numbering=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @example Info.weekdays()[0] //=> 'Monday'\n   * @example Info.weekdays('short')[0] //=> 'Mon'\n   * @example Info.weekdays('short', 'fr-CA')[0] //=> 'lun.'\n   * @example Info.weekdays('short', 'ar')[0] //=> 'الاثنين'\n   * @return {[string]}\n   */\n  static weekdays(length = 'long', { locale = 'en', numberingSystem = null } = {}) {\n    return new Locale(locale, numberingSystem, null).weekdays(length);\n  }\n\n  /**\n   * Return an array of format week names.\n   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that\n   * changes the string.\n   * See {@link weekdays}\n   * @param {string} [length='long'] - the length of the month representation, such as \"narrow\", \"short\", \"long\".\n   * @param {object} opts - options\n   * @param {string} [opts.locale='en'] - the locale code\n   * @param {string} [opts.numbering=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @return {[string]}\n   */\n  static weekdaysFormat(length = 'long', { locale = 'en', numberingSystem = null } = {}) {\n    return new Locale(locale, numberingSystem, null).weekdays(length, true);\n  }\n\n  /**\n   * Return an array of meridiems.\n   * @param {object} opts - options\n   * @param {string} [opts.locale='en'] - the locale code\n   * @example Info.meridiems() //=> [ 'AM', 'PM' ]\n   * @example Info.meridiems('de') //=> [ 'vorm.', 'nachm.' ]\n   * @return {[string]}\n   */\n  static meridiems({ locale = 'en' } = {}) {\n    return new Locale(locale).meridiems();\n  }\n\n  /**\n   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.\n   * @param {string} [length='short'] - the length of the era representation, such as \"short\" or \"long\".\n   * @param {object} opts - options\n   * @param {string} [opts.locale='en'] - the locale code\n   * @example Info.eras() //=> [ 'BC', 'AD' ]\n   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]\n   * @example Info.eras('long', 'fr') //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]\n   * @return {[string]}\n   */\n  static eras(length = 'short', { locale = 'en' } = {}) {\n    return new Locale(locale, null, 'gregory').eras(length);\n  }\n\n  /**\n   * Return the set of available features in this environment.\n   * Some features of Luxon are not available in all environments. For example, on older browsers, timezone support is not available. Use this function to figure out if that's the case.\n   * Keys:\n   * * `timezones`: whether this environment supports IANA timezones\n   * * `intlTokens`: whether this environment supports internationalized token-based formatting/parsing\n   * * `intl`: whether this environment supports general internationalization\n   * @example Info.feature() //=> { intl: true, intlTokens: false, timezones: true }\n   * @return {object}\n   */\n  static features() {\n    let intl = false,\n      intlTokens = false,\n      zones = false;\n\n    if (!Util.isUndefined(Intl) && !Util.isUndefined(Intl.DateTimeFormat)) {\n      intl = true;\n\n      intlTokens = !Util.isUndefined(Intl.DateTimeFormat.prototype.formatToParts);\n\n      try {\n        Intl.DateTimeFormat({ timeZone: 'America/New_York' });\n        zones = true;\n      } catch (e) {\n        zones = false;\n      }\n    }\n\n    return { intl, intlTokens, zones };\n  }\n}\n"],"names":["require$$0","isObject","require$$1","require$$2","dP","anObject","toPrimitive","IE8_DOM_DEFINE","createDesc","has","hide","global","aFunction","PROTOTYPE","core","ctx","redefine","uid","LIBRARY","wksExt","cof","IObject","defined","toInteger","min","toIObject","toLength","toAbsoluteIndex","$keys","enumBugKeys","getKeys","gOPS","pIE","document","IE_PROTO","dPs","gOPN","toString","gOPD","$GOPD","$DP","gOPNExt","wks","shared","DESCRIPTORS","$fails","_create","enumKeys","create","require$$3","require$$4","$export","wksDefine","isArray","require$$5","setToStringTag","TAG","classof","fails","$getOwnPropertyDescriptor","ObjectProto","toObject","getPrototypeOf","$getPrototypeOf","meta","descriptor","$iterCreate","Iterators","step","addToUnscopables","ITERATOR","$iterators","ArrayProto","$defineProperty","getIterFn","isArrayIter","createProperty","call","html","test","speciesConstructor","asc","$reduce","$native","NEGATIVE_ZERO","$find","KEY","forced","SPECIES","isRegExp","MATCH","context","repeat","$pad","singleton","INVALID","orderedUnits","clone"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}