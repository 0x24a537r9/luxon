{"version":3,"file":"luxon.js","sources":["node_modules/core-js/library/modules/_global.js","node_modules/core-js/library/modules/_has.js","node_modules/core-js/library/modules/_fails.js","node_modules/core-js/library/modules/_descriptors.js","node_modules/core-js/library/modules/_core.js","node_modules/core-js/library/modules/_a-function.js","node_modules/core-js/library/modules/_ctx.js","node_modules/core-js/library/modules/_is-object.js","node_modules/core-js/library/modules/_an-object.js","node_modules/core-js/library/modules/_dom-create.js","node_modules/core-js/library/modules/_ie8-dom-define.js","node_modules/core-js/library/modules/_to-primitive.js","node_modules/core-js/library/modules/_object-dp.js","node_modules/core-js/library/modules/_property-desc.js","node_modules/core-js/library/modules/_hide.js","node_modules/core-js/library/modules/_export.js","node_modules/core-js/library/modules/_redefine.js","node_modules/core-js/library/modules/_uid.js","node_modules/core-js/library/modules/_meta.js","node_modules/core-js/library/modules/_shared.js","node_modules/core-js/library/modules/_wks.js","node_modules/core-js/library/modules/_set-to-string-tag.js","node_modules/core-js/library/modules/_wks-ext.js","node_modules/core-js/library/modules/_library.js","node_modules/core-js/library/modules/_wks-define.js","node_modules/core-js/library/modules/_cof.js","node_modules/core-js/library/modules/_iobject.js","node_modules/core-js/library/modules/_defined.js","node_modules/core-js/library/modules/_to-iobject.js","node_modules/core-js/library/modules/_to-integer.js","node_modules/core-js/library/modules/_to-length.js","node_modules/core-js/library/modules/_to-absolute-index.js","node_modules/core-js/library/modules/_array-includes.js","node_modules/core-js/library/modules/_shared-key.js","node_modules/core-js/library/modules/_object-keys-internal.js","node_modules/core-js/library/modules/_enum-bug-keys.js","node_modules/core-js/library/modules/_object-keys.js","node_modules/core-js/library/modules/_object-gops.js","node_modules/core-js/library/modules/_object-pie.js","node_modules/core-js/library/modules/_enum-keys.js","node_modules/core-js/library/modules/_is-array.js","node_modules/core-js/library/modules/_object-dps.js","node_modules/core-js/library/modules/_html.js","node_modules/core-js/library/modules/_object-create.js","node_modules/core-js/library/modules/_object-gopn.js","node_modules/core-js/library/modules/_object-gopn-ext.js","node_modules/core-js/library/modules/_object-gopd.js","node_modules/core-js/library/modules/es6.symbol.js","node_modules/core-js/library/modules/es6.object.create.js","node_modules/core-js/library/modules/es6.object.define-property.js","node_modules/core-js/library/modules/es6.object.define-properties.js","node_modules/core-js/library/modules/_object-sap.js","node_modules/core-js/library/modules/es6.object.get-own-property-descriptor.js","node_modules/core-js/library/modules/_to-object.js","node_modules/core-js/library/modules/_object-gpo.js","node_modules/core-js/library/modules/es6.object.get-prototype-of.js","node_modules/core-js/library/modules/es6.object.keys.js","node_modules/core-js/library/modules/es6.object.get-own-property-names.js","node_modules/core-js/library/modules/es6.object.freeze.js","node_modules/core-js/library/modules/es6.object.seal.js","node_modules/core-js/library/modules/es6.object.prevent-extensions.js","node_modules/core-js/library/modules/es6.object.is-frozen.js","node_modules/core-js/library/modules/es6.object.is-sealed.js","node_modules/core-js/library/modules/es6.object.is-extensible.js","node_modules/core-js/library/modules/_object-assign.js","node_modules/core-js/library/modules/es6.object.assign.js","node_modules/core-js/library/modules/_same-value.js","node_modules/core-js/library/modules/es6.object.is.js","node_modules/core-js/library/modules/_set-proto.js","node_modules/core-js/library/modules/es6.object.set-prototype-of.js","node_modules/core-js/library/modules/es6.number.is-nan.js","src/errors.js","src/zone.js","src/zones/localZone.js","src/zones/IANAZone.js","src/zones/fixedOffsetZone.js","src/settings.js","src/impl/util.js","src/impl/english.js","src/impl/locale.js","src/impl/formatter.js","src/impl/regexParser.js","src/duration.js","src/interval.js","src/impl/tokenParser.js","src/impl/conversions.js","src/datetime.js","src/info.js"],"sourcesContent":["// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","var core = module.exports = { version: '2.5.1' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar ctx = require('./_ctx');\nvar hide = require('./_hide');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var IS_WRAP = type & $export.W;\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE];\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] : (global[name] || {})[PROTOTYPE];\n  var key, own, out;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    if (own && key in exports) continue;\n    // export native or passed\n    out = own ? target[key] : source[key];\n    // prevent global pollution for namespaces\n    exports[key] = IS_GLOBAL && typeof target[key] != 'function' ? source[key]\n    // bind timers to global for call from export context\n    : IS_BIND && own ? ctx(out, global)\n    // wrap global constructors for prevent change them in library\n    : IS_WRAP && target[key] == out ? (function (C) {\n      var F = function (a, b, c) {\n        if (this instanceof C) {\n          switch (arguments.length) {\n            case 0: return new C();\n            case 1: return new C(a);\n            case 2: return new C(a, b);\n          } return new C(a, b, c);\n        } return C.apply(this, arguments);\n      };\n      F[PROTOTYPE] = C[PROTOTYPE];\n      return F;\n    // make static versions for prototype methods\n    })(out) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // export proto methods to core.%CONSTRUCTOR%.methods.%NAME%\n    if (IS_PROTO) {\n      (exports.virtual || (exports.virtual = {}))[key] = out;\n      // export proto methods to core.%CONSTRUCTOR%.prototype.%NAME%\n      if (type & $export.R && expProto && !expProto[key]) hide(expProto, key, out);\n    }\n  }\n};\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","module.exports = require('./_hide');\n","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","var META = require('./_uid')('meta');\nvar isObject = require('./_is-object');\nvar has = require('./_has');\nvar setDesc = require('./_object-dp').f;\nvar id = 0;\nvar isExtensible = Object.isExtensible || function () {\n  return true;\n};\nvar FREEZE = !require('./_fails')(function () {\n  return isExtensible(Object.preventExtensions({}));\n});\nvar setMeta = function (it) {\n  setDesc(it, META, { value: {\n    i: 'O' + ++id, // object ID\n    w: {}          // weak collections IDs\n  } });\n};\nvar fastKey = function (it, create) {\n  // return primitive with prefix\n  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return 'F';\n    // not necessary to add metadata\n    if (!create) return 'E';\n    // add missing metadata\n    setMeta(it);\n  // return object ID\n  } return it[META].i;\n};\nvar getWeak = function (it, create) {\n  if (!has(it, META)) {\n    // can't set metadata to uncaught frozen object\n    if (!isExtensible(it)) return true;\n    // not necessary to add metadata\n    if (!create) return false;\n    // add missing metadata\n    setMeta(it);\n  // return hash weak collections IDs\n  } return it[META].w;\n};\n// add metadata on freeze-family methods calling\nvar onFreeze = function (it) {\n  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);\n  return it;\n};\nvar meta = module.exports = {\n  KEY: META,\n  NEED: false,\n  fastKey: fastKey,\n  getWeak: getWeak,\n  onFreeze: onFreeze\n};\n","var global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\nmodule.exports = function (key) {\n  return store[key] || (store[key] = {});\n};\n","var store = require('./_shared')('wks');\nvar uid = require('./_uid');\nvar Symbol = require('./_global').Symbol;\nvar USE_SYMBOL = typeof Symbol == 'function';\n\nvar $exports = module.exports = function (name) {\n  return store[name] || (store[name] =\n    USE_SYMBOL && Symbol[name] || (USE_SYMBOL ? Symbol : uid)('Symbol.' + name));\n};\n\n$exports.store = store;\n","var def = require('./_object-dp').f;\nvar has = require('./_has');\nvar TAG = require('./_wks')('toStringTag');\n\nmodule.exports = function (it, tag, stat) {\n  if (it && !has(it = stat ? it : it.prototype, TAG)) def(it, TAG, { configurable: true, value: tag });\n};\n","exports.f = require('./_wks');\n","module.exports = true;\n","var global = require('./_global');\nvar core = require('./_core');\nvar LIBRARY = require('./_library');\nvar wksExt = require('./_wks-ext');\nvar defineProperty = require('./_object-dp').f;\nmodule.exports = function (name) {\n  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});\n  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });\n};\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","// fallback for non-array-like ES3 and non-enumerable old V8 strings\nvar cof = require('./_cof');\n// eslint-disable-next-line no-prototype-builtins\nmodule.exports = Object('z').propertyIsEnumerable(0) ? Object : function (it) {\n  return cof(it) == 'String' ? it.split('') : Object(it);\n};\n","// 7.2.1 RequireObjectCoercible(argument)\nmodule.exports = function (it) {\n  if (it == undefined) throw TypeError(\"Can't call method on  \" + it);\n  return it;\n};\n","// to indexed object, toObject with fallback for non-array-like ES3 strings\nvar IObject = require('./_iobject');\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return IObject(defined(it));\n};\n","// 7.1.4 ToInteger\nvar ceil = Math.ceil;\nvar floor = Math.floor;\nmodule.exports = function (it) {\n  return isNaN(it = +it) ? 0 : (it > 0 ? floor : ceil)(it);\n};\n","// 7.1.15 ToLength\nvar toInteger = require('./_to-integer');\nvar min = Math.min;\nmodule.exports = function (it) {\n  return it > 0 ? min(toInteger(it), 0x1fffffffffffff) : 0; // pow(2, 53) - 1 == 9007199254740991\n};\n","var toInteger = require('./_to-integer');\nvar max = Math.max;\nvar min = Math.min;\nmodule.exports = function (index, length) {\n  index = toInteger(index);\n  return index < 0 ? max(index + length, 0) : min(index, length);\n};\n","// false -> Array#indexOf\n// true  -> Array#includes\nvar toIObject = require('./_to-iobject');\nvar toLength = require('./_to-length');\nvar toAbsoluteIndex = require('./_to-absolute-index');\nmodule.exports = function (IS_INCLUDES) {\n  return function ($this, el, fromIndex) {\n    var O = toIObject($this);\n    var length = toLength(O.length);\n    var index = toAbsoluteIndex(fromIndex, length);\n    var value;\n    // Array#includes uses SameValueZero equality algorithm\n    // eslint-disable-next-line no-self-compare\n    if (IS_INCLUDES && el != el) while (length > index) {\n      value = O[index++];\n      // eslint-disable-next-line no-self-compare\n      if (value != value) return true;\n    // Array#indexOf ignores holes, Array#includes - not\n    } else for (;length > index; index++) if (IS_INCLUDES || index in O) {\n      if (O[index] === el) return IS_INCLUDES || index || 0;\n    } return !IS_INCLUDES && -1;\n  };\n};\n","var shared = require('./_shared')('keys');\nvar uid = require('./_uid');\nmodule.exports = function (key) {\n  return shared[key] || (shared[key] = uid(key));\n};\n","var has = require('./_has');\nvar toIObject = require('./_to-iobject');\nvar arrayIndexOf = require('./_array-includes')(false);\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\n\nmodule.exports = function (object, names) {\n  var O = toIObject(object);\n  var i = 0;\n  var result = [];\n  var key;\n  for (key in O) if (key != IE_PROTO) has(O, key) && result.push(key);\n  // Don't enum bug & hidden keys\n  while (names.length > i) if (has(O, key = names[i++])) {\n    ~arrayIndexOf(result, key) || result.push(key);\n  }\n  return result;\n};\n","// IE 8- don't enum bug keys\nmodule.exports = (\n  'constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf'\n).split(',');\n","// 19.1.2.14 / 15.2.3.14 Object.keys(O)\nvar $keys = require('./_object-keys-internal');\nvar enumBugKeys = require('./_enum-bug-keys');\n\nmodule.exports = Object.keys || function keys(O) {\n  return $keys(O, enumBugKeys);\n};\n","exports.f = Object.getOwnPropertySymbols;\n","exports.f = {}.propertyIsEnumerable;\n","// all enumerable object keys, includes symbols\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nmodule.exports = function (it) {\n  var result = getKeys(it);\n  var getSymbols = gOPS.f;\n  if (getSymbols) {\n    var symbols = getSymbols(it);\n    var isEnum = pIE.f;\n    var i = 0;\n    var key;\n    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);\n  } return result;\n};\n","// 7.2.2 IsArray(argument)\nvar cof = require('./_cof');\nmodule.exports = Array.isArray || function isArray(arg) {\n  return cof(arg) == 'Array';\n};\n","var dP = require('./_object-dp');\nvar anObject = require('./_an-object');\nvar getKeys = require('./_object-keys');\n\nmodule.exports = require('./_descriptors') ? Object.defineProperties : function defineProperties(O, Properties) {\n  anObject(O);\n  var keys = getKeys(Properties);\n  var length = keys.length;\n  var i = 0;\n  var P;\n  while (length > i) dP.f(O, P = keys[i++], Properties[P]);\n  return O;\n};\n","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n","// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\nvar anObject = require('./_an-object');\nvar dPs = require('./_object-dps');\nvar enumBugKeys = require('./_enum-bug-keys');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar Empty = function () { /* empty */ };\nvar PROTOTYPE = 'prototype';\n\n// Create object with fake `null` prototype: use iframe Object with cleared prototype\nvar createDict = function () {\n  // Thrash, waste and sodomy: IE GC bug\n  var iframe = require('./_dom-create')('iframe');\n  var i = enumBugKeys.length;\n  var lt = '<';\n  var gt = '>';\n  var iframeDocument;\n  iframe.style.display = 'none';\n  require('./_html').appendChild(iframe);\n  iframe.src = 'javascript:'; // eslint-disable-line no-script-url\n  // createDict = iframe.contentWindow.Object;\n  // html.removeChild(iframe);\n  iframeDocument = iframe.contentWindow.document;\n  iframeDocument.open();\n  iframeDocument.write(lt + 'script' + gt + 'document.F=Object' + lt + '/script' + gt);\n  iframeDocument.close();\n  createDict = iframeDocument.F;\n  while (i--) delete createDict[PROTOTYPE][enumBugKeys[i]];\n  return createDict();\n};\n\nmodule.exports = Object.create || function create(O, Properties) {\n  var result;\n  if (O !== null) {\n    Empty[PROTOTYPE] = anObject(O);\n    result = new Empty();\n    Empty[PROTOTYPE] = null;\n    // add \"__proto__\" for Object.getPrototypeOf polyfill\n    result[IE_PROTO] = O;\n  } else result = createDict();\n  return Properties === undefined ? result : dPs(result, Properties);\n};\n","// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)\nvar $keys = require('./_object-keys-internal');\nvar hiddenKeys = require('./_enum-bug-keys').concat('length', 'prototype');\n\nexports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {\n  return $keys(O, hiddenKeys);\n};\n","// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window\nvar toIObject = require('./_to-iobject');\nvar gOPN = require('./_object-gopn').f;\nvar toString = {}.toString;\n\nvar windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames\n  ? Object.getOwnPropertyNames(window) : [];\n\nvar getWindowNames = function (it) {\n  try {\n    return gOPN(it);\n  } catch (e) {\n    return windowNames.slice();\n  }\n};\n\nmodule.exports.f = function getOwnPropertyNames(it) {\n  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));\n};\n","var pIE = require('./_object-pie');\nvar createDesc = require('./_property-desc');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar has = require('./_has');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nexports.f = require('./_descriptors') ? gOPD : function getOwnPropertyDescriptor(O, P) {\n  O = toIObject(O);\n  P = toPrimitive(P, true);\n  if (IE8_DOM_DEFINE) try {\n    return gOPD(O, P);\n  } catch (e) { /* empty */ }\n  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);\n};\n","'use strict';\n// ECMAScript 6 symbols shim\nvar global = require('./_global');\nvar has = require('./_has');\nvar DESCRIPTORS = require('./_descriptors');\nvar $export = require('./_export');\nvar redefine = require('./_redefine');\nvar META = require('./_meta').KEY;\nvar $fails = require('./_fails');\nvar shared = require('./_shared');\nvar setToStringTag = require('./_set-to-string-tag');\nvar uid = require('./_uid');\nvar wks = require('./_wks');\nvar wksExt = require('./_wks-ext');\nvar wksDefine = require('./_wks-define');\nvar enumKeys = require('./_enum-keys');\nvar isArray = require('./_is-array');\nvar anObject = require('./_an-object');\nvar toIObject = require('./_to-iobject');\nvar toPrimitive = require('./_to-primitive');\nvar createDesc = require('./_property-desc');\nvar _create = require('./_object-create');\nvar gOPNExt = require('./_object-gopn-ext');\nvar $GOPD = require('./_object-gopd');\nvar $DP = require('./_object-dp');\nvar $keys = require('./_object-keys');\nvar gOPD = $GOPD.f;\nvar dP = $DP.f;\nvar gOPN = gOPNExt.f;\nvar $Symbol = global.Symbol;\nvar $JSON = global.JSON;\nvar _stringify = $JSON && $JSON.stringify;\nvar PROTOTYPE = 'prototype';\nvar HIDDEN = wks('_hidden');\nvar TO_PRIMITIVE = wks('toPrimitive');\nvar isEnum = {}.propertyIsEnumerable;\nvar SymbolRegistry = shared('symbol-registry');\nvar AllSymbols = shared('symbols');\nvar OPSymbols = shared('op-symbols');\nvar ObjectProto = Object[PROTOTYPE];\nvar USE_NATIVE = typeof $Symbol == 'function';\nvar QObject = global.QObject;\n// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173\nvar setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;\n\n// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687\nvar setSymbolDesc = DESCRIPTORS && $fails(function () {\n  return _create(dP({}, 'a', {\n    get: function () { return dP(this, 'a', { value: 7 }).a; }\n  })).a != 7;\n}) ? function (it, key, D) {\n  var protoDesc = gOPD(ObjectProto, key);\n  if (protoDesc) delete ObjectProto[key];\n  dP(it, key, D);\n  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);\n} : dP;\n\nvar wrap = function (tag) {\n  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);\n  sym._k = tag;\n  return sym;\n};\n\nvar isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {\n  return typeof it == 'symbol';\n} : function (it) {\n  return it instanceof $Symbol;\n};\n\nvar $defineProperty = function defineProperty(it, key, D) {\n  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);\n  anObject(it);\n  key = toPrimitive(key, true);\n  anObject(D);\n  if (has(AllSymbols, key)) {\n    if (!D.enumerable) {\n      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));\n      it[HIDDEN][key] = true;\n    } else {\n      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;\n      D = _create(D, { enumerable: createDesc(0, false) });\n    } return setSymbolDesc(it, key, D);\n  } return dP(it, key, D);\n};\nvar $defineProperties = function defineProperties(it, P) {\n  anObject(it);\n  var keys = enumKeys(P = toIObject(P));\n  var i = 0;\n  var l = keys.length;\n  var key;\n  while (l > i) $defineProperty(it, key = keys[i++], P[key]);\n  return it;\n};\nvar $create = function create(it, P) {\n  return P === undefined ? _create(it) : $defineProperties(_create(it), P);\n};\nvar $propertyIsEnumerable = function propertyIsEnumerable(key) {\n  var E = isEnum.call(this, key = toPrimitive(key, true));\n  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;\n  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;\n};\nvar $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {\n  it = toIObject(it);\n  key = toPrimitive(key, true);\n  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;\n  var D = gOPD(it, key);\n  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;\n  return D;\n};\nvar $getOwnPropertyNames = function getOwnPropertyNames(it) {\n  var names = gOPN(toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);\n  } return result;\n};\nvar $getOwnPropertySymbols = function getOwnPropertySymbols(it) {\n  var IS_OP = it === ObjectProto;\n  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));\n  var result = [];\n  var i = 0;\n  var key;\n  while (names.length > i) {\n    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);\n  } return result;\n};\n\n// 19.4.1.1 Symbol([description])\nif (!USE_NATIVE) {\n  $Symbol = function Symbol() {\n    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');\n    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);\n    var $set = function (value) {\n      if (this === ObjectProto) $set.call(OPSymbols, value);\n      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;\n      setSymbolDesc(this, tag, createDesc(1, value));\n    };\n    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });\n    return wrap(tag);\n  };\n  redefine($Symbol[PROTOTYPE], 'toString', function toString() {\n    return this._k;\n  });\n\n  $GOPD.f = $getOwnPropertyDescriptor;\n  $DP.f = $defineProperty;\n  require('./_object-gopn').f = gOPNExt.f = $getOwnPropertyNames;\n  require('./_object-pie').f = $propertyIsEnumerable;\n  require('./_object-gops').f = $getOwnPropertySymbols;\n\n  if (DESCRIPTORS && !require('./_library')) {\n    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);\n  }\n\n  wksExt.f = function (name) {\n    return wrap(wks(name));\n  };\n}\n\n$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });\n\nfor (var es6Symbols = (\n  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14\n  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'\n).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);\n\nfor (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);\n\n$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {\n  // 19.4.2.1 Symbol.for(key)\n  'for': function (key) {\n    return has(SymbolRegistry, key += '')\n      ? SymbolRegistry[key]\n      : SymbolRegistry[key] = $Symbol(key);\n  },\n  // 19.4.2.5 Symbol.keyFor(sym)\n  keyFor: function keyFor(sym) {\n    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');\n    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;\n  },\n  useSetter: function () { setter = true; },\n  useSimple: function () { setter = false; }\n});\n\n$export($export.S + $export.F * !USE_NATIVE, 'Object', {\n  // 19.1.2.2 Object.create(O [, Properties])\n  create: $create,\n  // 19.1.2.4 Object.defineProperty(O, P, Attributes)\n  defineProperty: $defineProperty,\n  // 19.1.2.3 Object.defineProperties(O, Properties)\n  defineProperties: $defineProperties,\n  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\n  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,\n  // 19.1.2.7 Object.getOwnPropertyNames(O)\n  getOwnPropertyNames: $getOwnPropertyNames,\n  // 19.1.2.8 Object.getOwnPropertySymbols(O)\n  getOwnPropertySymbols: $getOwnPropertySymbols\n});\n\n// 24.3.2 JSON.stringify(value [, replacer [, space]])\n$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {\n  var S = $Symbol();\n  // MS Edge converts symbol values to JSON as {}\n  // WebKit converts symbol values to JSON as null\n  // V8 throws on boxed symbols\n  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';\n})), 'JSON', {\n  stringify: function stringify(it) {\n    if (it === undefined || isSymbol(it)) return; // IE8 returns string on undefined\n    var args = [it];\n    var i = 1;\n    var replacer, $replacer;\n    while (arguments.length > i) args.push(arguments[i++]);\n    replacer = args[1];\n    if (typeof replacer == 'function') $replacer = replacer;\n    if ($replacer || !isArray(replacer)) replacer = function (key, value) {\n      if ($replacer) value = $replacer.call(this, key, value);\n      if (!isSymbol(value)) return value;\n    };\n    args[1] = replacer;\n    return _stringify.apply($JSON, args);\n  }\n});\n\n// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)\n$Symbol[PROTOTYPE][TO_PRIMITIVE] || require('./_hide')($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);\n// 19.4.3.5 Symbol.prototype[@@toStringTag]\nsetToStringTag($Symbol, 'Symbol');\n// 20.2.1.9 Math[@@toStringTag]\nsetToStringTag(Math, 'Math', true);\n// 24.3.3 JSON[@@toStringTag]\nsetToStringTag(global.JSON, 'JSON', true);\n","var $export = require('./_export');\n// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])\n$export($export.S, 'Object', { create: require('./_object-create') });\n","var $export = require('./_export');\n// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperty: require('./_object-dp').f });\n","var $export = require('./_export');\n// 19.1.2.3 / 15.2.3.7 Object.defineProperties(O, Properties)\n$export($export.S + $export.F * !require('./_descriptors'), 'Object', { defineProperties: require('./_object-dps') });\n","// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n","// 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)\nvar toIObject = require('./_to-iobject');\nvar $getOwnPropertyDescriptor = require('./_object-gopd').f;\n\nrequire('./_object-sap')('getOwnPropertyDescriptor', function () {\n  return function getOwnPropertyDescriptor(it, key) {\n    return $getOwnPropertyDescriptor(toIObject(it), key);\n  };\n});\n","// 7.1.13 ToObject(argument)\nvar defined = require('./_defined');\nmodule.exports = function (it) {\n  return Object(defined(it));\n};\n","// 19.1.2.9 / 15.2.3.2 Object.getPrototypeOf(O)\nvar has = require('./_has');\nvar toObject = require('./_to-object');\nvar IE_PROTO = require('./_shared-key')('IE_PROTO');\nvar ObjectProto = Object.prototype;\n\nmodule.exports = Object.getPrototypeOf || function (O) {\n  O = toObject(O);\n  if (has(O, IE_PROTO)) return O[IE_PROTO];\n  if (typeof O.constructor == 'function' && O instanceof O.constructor) {\n    return O.constructor.prototype;\n  } return O instanceof Object ? ObjectProto : null;\n};\n","// 19.1.2.9 Object.getPrototypeOf(O)\nvar toObject = require('./_to-object');\nvar $getPrototypeOf = require('./_object-gpo');\n\nrequire('./_object-sap')('getPrototypeOf', function () {\n  return function getPrototypeOf(it) {\n    return $getPrototypeOf(toObject(it));\n  };\n});\n","// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n","// 19.1.2.7 Object.getOwnPropertyNames(O)\nrequire('./_object-sap')('getOwnPropertyNames', function () {\n  return require('./_object-gopn-ext').f;\n});\n","// 19.1.2.5 Object.freeze(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('freeze', function ($freeze) {\n  return function freeze(it) {\n    return $freeze && isObject(it) ? $freeze(meta(it)) : it;\n  };\n});\n","// 19.1.2.17 Object.seal(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('seal', function ($seal) {\n  return function seal(it) {\n    return $seal && isObject(it) ? $seal(meta(it)) : it;\n  };\n});\n","// 19.1.2.15 Object.preventExtensions(O)\nvar isObject = require('./_is-object');\nvar meta = require('./_meta').onFreeze;\n\nrequire('./_object-sap')('preventExtensions', function ($preventExtensions) {\n  return function preventExtensions(it) {\n    return $preventExtensions && isObject(it) ? $preventExtensions(meta(it)) : it;\n  };\n});\n","// 19.1.2.12 Object.isFrozen(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isFrozen', function ($isFrozen) {\n  return function isFrozen(it) {\n    return isObject(it) ? $isFrozen ? $isFrozen(it) : false : true;\n  };\n});\n","// 19.1.2.13 Object.isSealed(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isSealed', function ($isSealed) {\n  return function isSealed(it) {\n    return isObject(it) ? $isSealed ? $isSealed(it) : false : true;\n  };\n});\n","// 19.1.2.11 Object.isExtensible(O)\nvar isObject = require('./_is-object');\n\nrequire('./_object-sap')('isExtensible', function ($isExtensible) {\n  return function isExtensible(it) {\n    return isObject(it) ? $isExtensible ? $isExtensible(it) : true : false;\n  };\n});\n","'use strict';\n// 19.1.2.1 Object.assign(target, source, ...)\nvar getKeys = require('./_object-keys');\nvar gOPS = require('./_object-gops');\nvar pIE = require('./_object-pie');\nvar toObject = require('./_to-object');\nvar IObject = require('./_iobject');\nvar $assign = Object.assign;\n\n// should work with symbols and should have deterministic property order (V8 bug)\nmodule.exports = !$assign || require('./_fails')(function () {\n  var A = {};\n  var B = {};\n  // eslint-disable-next-line no-undef\n  var S = Symbol();\n  var K = 'abcdefghijklmnopqrst';\n  A[S] = 7;\n  K.split('').forEach(function (k) { B[k] = k; });\n  return $assign({}, A)[S] != 7 || Object.keys($assign({}, B)).join('') != K;\n}) ? function assign(target, source) { // eslint-disable-line no-unused-vars\n  var T = toObject(target);\n  var aLen = arguments.length;\n  var index = 1;\n  var getSymbols = gOPS.f;\n  var isEnum = pIE.f;\n  while (aLen > index) {\n    var S = IObject(arguments[index++]);\n    var keys = getSymbols ? getKeys(S).concat(getSymbols(S)) : getKeys(S);\n    var length = keys.length;\n    var j = 0;\n    var key;\n    while (length > j) if (isEnum.call(S, key = keys[j++])) T[key] = S[key];\n  } return T;\n} : $assign;\n","// 19.1.3.1 Object.assign(target, source)\nvar $export = require('./_export');\n\n$export($export.S + $export.F, 'Object', { assign: require('./_object-assign') });\n","// 7.2.9 SameValue(x, y)\nmodule.exports = Object.is || function is(x, y) {\n  // eslint-disable-next-line no-self-compare\n  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;\n};\n","// 19.1.3.10 Object.is(value1, value2)\nvar $export = require('./_export');\n$export($export.S, 'Object', { is: require('./_same-value') });\n","// Works with __proto__ only. Old v8 can't work with null proto objects.\n/* eslint-disable no-proto */\nvar isObject = require('./_is-object');\nvar anObject = require('./_an-object');\nvar check = function (O, proto) {\n  anObject(O);\n  if (!isObject(proto) && proto !== null) throw TypeError(proto + \": can't set as prototype!\");\n};\nmodule.exports = {\n  set: Object.setPrototypeOf || ('__proto__' in {} ? // eslint-disable-line\n    function (test, buggy, set) {\n      try {\n        set = require('./_ctx')(Function.call, require('./_object-gopd').f(Object.prototype, '__proto__').set, 2);\n        set(test, []);\n        buggy = !(test instanceof Array);\n      } catch (e) { buggy = true; }\n      return function setPrototypeOf(O, proto) {\n        check(O, proto);\n        if (buggy) O.__proto__ = proto;\n        else set(O, proto);\n        return O;\n      };\n    }({}, false) : undefined),\n  check: check\n};\n","// 19.1.3.19 Object.setPrototypeOf(O, proto)\nvar $export = require('./_export');\n$export($export.S, 'Object', { setPrototypeOf: require('./_set-proto').set });\n","// 20.1.2.4 Number.isNaN(number)\nvar $export = require('./_export');\n\n$export($export.S, 'Number', {\n  isNaN: function isNaN(number) {\n    // eslint-disable-next-line no-self-compare\n    return number != number;\n  }\n});\n","// these aren't really private, but nor are they really useful to document\n\n/**\n * @private\n */\nclass LuxonError extends Error {}\n\n/**\n * @private\n */\nexport class InvalidDateTimeError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid DateTime: ${reason}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidIntervalError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Interval: ${reason}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidDurationError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Duration: ${reason}`);\n  }\n}\n\n/**\n * @private\n */\nexport class ConflictingSpecificationError extends LuxonError {}\n\n/**\n * @private\n */\nexport class InvalidUnitError extends LuxonError {\n  constructor(unit) {\n    super(`Invalid unit ${unit}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidArgumentError extends LuxonError {}\n\n/**\n * @private\n */\nexport class ZoneIsAbstract extends LuxonError {\n  constructor() {\n    super('Zone is an abstract class');\n  }\n}\n","/* eslint no-unused-vars: \"off\" */\nimport { ZoneIsAbstract } from './errors';\n\n/**\n * @interface\n*/\nexport class Zone {\n  /**\n   * The type of zone\n   * @abstract\n   * @return {string}\n   */\n  get type() {\n    throw new ZoneIsAbstract();\n  }\n\n  /**\n   * The name of this zone.\n   * @abstract\n   * @return {string}\n   */\n  get name() {\n    throw new ZoneIsAbstract();\n  }\n\n  /**\n   * Returns whether the offset is known to be fixed for the whole year.\n   * @abstract\n   * @return {boolean}\n   */\n  get universal() {\n    throw new ZoneIsAbstract();\n  }\n\n  /**\n   * Returns the offset's common name (such as EST) at the specified timestamp\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the name\n   * @param {Object} options - Options to affect the format\n   * @param {string} options.format - What style of offset to return. Accepts 'long' or 'short'.\n   * @param {string} options.localeCode - What locale to return the offset name in. Defaults to us-en\n   * @return {string}\n   */\n  static offsetName(ts, { format = 'long', localeCode = 'en-us' } = {}) {\n    throw new ZoneIsAbstract();\n  }\n\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\n   * @return {number}\n   */\n  offset(ts) {\n    throw new ZoneIsAbstract();\n  }\n\n  /**\n   * Return whether this Zone is equal to another zoner\n   * @abstract\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */\n  equals(otherZone) {\n    throw new ZoneIsAbstract();\n  }\n\n  /**\n   * Return whether this Zone is valid.\n   * @abstract\n   * @return {boolean}\n   */\n  get isValid() {\n    throw new ZoneIsAbstract();\n  }\n}\n","import { Util } from '../impl/util';\nimport { Zone } from '../zone';\n\nlet singleton = null;\n\n/**\n * @private\n */\n\nexport class LocalZone extends Zone {\n  static get instance() {\n    if (singleton === null) {\n      singleton = new LocalZone();\n    }\n    return singleton;\n  }\n\n  get type() {\n    return 'local';\n  }\n\n  get name() {\n    if (Util.isUndefined(Intl) && Util.isUndefined(Intl.DateTimeFormat)) {\n      return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n    } else return 'local';\n  }\n\n  get universal() {\n    return false;\n  }\n\n  offsetName(ts, { format = 'long', locale = 'en-us' } = {}) {\n    return Util.parseZoneInfo(ts, format, locale || 'en-us');\n  }\n\n  offset(ts) {\n    return -new Date(ts).getTimezoneOffset();\n  }\n\n  equals(otherZone) {\n    return otherZone.type === 'local';\n  }\n\n  get isValid() {\n    return true;\n  }\n}\n","import { Util } from '../impl/util';\nimport { Zone } from '../zone';\n\nconst typeToPos = {\n  year: 0,\n  month: 1,\n  day: 2,\n  hour: 3,\n  minute: 4,\n  second: 5\n};\n\nfunction hackyOffset(dtf, date) {\n  const formatted = dtf.format(date),\n    parsed = /(\\d+)\\/(\\d+)\\/(\\d+), (\\d+):(\\d+):(\\d+)/.exec(formatted),\n    [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed;\n  return [fYear, fMonth, fDay, fHour, fMinute, fSecond];\n}\n\nfunction partsOffset(dtf, date) {\n  const formatted = dtf.formatToParts(date),\n    filled = [];\n  for (let i = 0; i < formatted.length; i++) {\n    const { type, value } = formatted[i],\n      pos = typeToPos[type];\n\n    if (!Util.isUndefined(pos)) {\n      filled[pos] = parseInt(value, 10);\n    }\n  }\n  return filled;\n}\n\nfunction isValid(zone) {\n  try {\n    new Intl.DateTimeFormat('en-us', { timeZone: zone }).format();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * @private\n */\n\nexport class IANAZone extends Zone {\n  static isValidSpecier(s) {\n    return s && s.match(/[a-z_]+\\/[a-z_]+/i);\n  }\n\n  constructor(name) {\n    super();\n    this.zoneName = name;\n    this.valid = isValid(name);\n  }\n\n  get type() {\n    return 'iana';\n  }\n\n  get name() {\n    return this.zoneName;\n  }\n\n  get universal() {\n    return false;\n  }\n\n  offsetName(ts, { format = 'long', locale = 'en-us' } = {}) {\n    return Util.parseZoneInfo(ts, format, locale || 'en-us', this.zoneName);\n  }\n\n  offset(ts) {\n    const date = new Date(ts),\n      dtf = new Intl.DateTimeFormat('en-us', {\n        hour12: false,\n        timeZone: this.zoneName,\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      }),\n      [fYear, fMonth, fDay, fHour, fMinute, fSecond] = dtf.formatToParts\n        ? partsOffset(dtf, date)\n        : hackyOffset(dtf, date),\n      asUTC = Date.UTC(fYear, fMonth - 1, fDay, fHour, fMinute, fSecond);\n    let asTS = date.valueOf();\n    asTS -= asTS % 1000;\n    return (asUTC - asTS) / (60 * 1000);\n  }\n\n  equals(otherZone) {\n    return otherZone.type === 'iana' && otherZone.zoneName === this.zoneName;\n  }\n\n  get isValid() {\n    return this.valid;\n  }\n}\n","import { Util } from '../impl/util';\nimport { Zone } from '../zone';\n\nlet singleton = null;\n\n/**\n * @private\n */\n\nexport class FixedOffsetZone extends Zone {\n  static get utcInstance() {\n    if (singleton === null) {\n      singleton = new FixedOffsetZone(0);\n    }\n    return singleton;\n  }\n\n  static instance(offset) {\n    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);\n  }\n\n  static parseSpecifier(s) {\n    if (s) {\n      const r = s.match(/^utc(?:([+-]\\d{1,2})(?::(\\d{2}))?)?$/i);\n      if (r) {\n        return new FixedOffsetZone(Util.signedOffset(r[1], r[2]));\n      }\n    }\n    return null;\n  }\n\n  constructor(offset) {\n    super();\n    this.fixed = offset;\n  }\n\n  get type() {\n    return 'fixed';\n  }\n\n  get name() {\n    const hours = this.fixed / 60,\n      minutes = Math.abs(this.fixed % 60),\n      sign = hours > 0 ? '+' : '-',\n      base = sign + Math.abs(hours),\n      number = minutes > 0 ? `${base}:${Util.pad(minutes, 2)}` : base;\n\n    return this.fixed === 0 ? 'UTC' : `UTC${number}`;\n  }\n\n  offsetName() {\n    return this.name();\n  }\n\n  get universal() {\n    return true;\n  }\n\n  offset() {\n    return this.fixed;\n  }\n\n  equals(otherZone) {\n    return otherZone.type === 'fixed' && otherZone.fixed === this.fixed;\n  }\n\n  get isValid() {\n    return true;\n  }\n}\n","import { LocalZone } from './zones/localZone';\nimport { Util } from './impl/util';\n\nlet now = () => new Date().valueOf(),\n  defaultZone = LocalZone.instance,\n  throwOnInvalid = false;\n\n/**\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\n */\nexport class Settings {\n  /**\n   * Get the callback for returning the current timestamp.\n   * @type {function}\n   */\n  static get now() {\n    return now;\n  }\n\n  /**\n   * Set the callback for returning the current timestamp.\n   * @type {function}\n   */\n  static set now(n) {\n    now = n;\n  }\n\n  /**\n   * Set the default time zone to create DateTimes in.\n   * @type {string}\n   */\n  static get defaultZoneName() {\n    return defaultZone.name;\n  }\n\n  /**\n   * Set the default time zone to create DateTimes in.\n   * @type {string}\n   */\n  static set defaultZoneName(z) {\n    defaultZone = Util.normalizeZone(z);\n  }\n\n  /**\n   * Get the default time zone object to create DateTimes in.\n   * @type {Zone}\n   */\n  static get defaultZone() {\n    return defaultZone;\n  }\n\n  /**\n   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {Zone}\n   */\n  static get throwOnInvalid() {\n    return throwOnInvalid;\n  }\n\n  /**\n   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {Zone}\n   */\n  static set throwOnInvalid(t) {\n    throwOnInvalid = t;\n  }\n}\n","import { Duration } from '../duration';\nimport { DateTime } from '../datetime';\nimport { Zone } from '../zone';\nimport { LocalZone } from '../zones/localZone';\nimport { IANAZone } from '../zones/IANAZone';\nimport { FixedOffsetZone } from '../zones/fixedOffsetZone';\nimport { Settings } from '../settings';\nimport { InvalidArgumentError } from '../errors';\n\n/**\n * @private\n */\n\nexport class Util {\n  static friendlyDuration(duration) {\n    if (Util.isNumber(duration)) {\n      return Duration.fromMilliseconds(duration);\n    } else if (duration instanceof Duration) {\n      return duration;\n    } else if (duration instanceof Object) {\n      return Duration.fromObject(duration);\n    } else {\n      throw new InvalidArgumentError('Unknown duration argument');\n    }\n  }\n\n  static friendlyDateTime(dateTimeish) {\n    if (dateTimeish instanceof DateTime) {\n      return dateTimeish;\n    } else if (dateTimeish.valueOf && Util.isNumber(dateTimeish.valueOf())) {\n      return DateTime.fromJSDate(dateTimeish);\n    } else if (dateTimeish instanceof Object) {\n      return DateTime.fromObject(dateTimeish);\n    } else {\n      throw new InvalidArgumentError('Unknown datetime argument');\n    }\n  }\n\n  static maybeArray(thing) {\n    return Array.isArray(thing) ? thing : [thing];\n  }\n\n  static isUndefined(o) {\n    return typeof o === 'undefined';\n  }\n\n  static isNumber(o) {\n    return typeof o === 'number';\n  }\n\n  static isString(o) {\n    return typeof o === 'string';\n  }\n\n  static numberBetween(thing, bottom, top) {\n    return Util.isNumber(thing) && thing >= bottom && thing <= top;\n  }\n\n  static pad(input, n = 2) {\n    return ('0'.repeat(n) + input).slice(-n);\n  }\n\n  static towardZero(input) {\n    return input < 0 ? Math.ceil(input) : Math.floor(input);\n  }\n\n  // DateTime -> JS date such that the date's UTC time is the datetimes's local time\n  static asIfUTC(dt) {\n    const ts = dt.ts - dt.offset;\n    return new Date(ts);\n  }\n\n  // http://stackoverflow.com/a/15030117\n  static flatten(arr) {\n    return arr.reduce(\n      (flat, toFlatten) =>\n        flat.concat(\n          Array.isArray(toFlatten) ? Util.flatten(toFlatten) : toFlatten\n        ),\n      []\n    );\n  }\n\n  static bestBy(arr, by, compare) {\n    return arr.reduce(\n      (best, next) => {\n        const pair = [by(next), next];\n        if (!best) {\n          return pair;\n        } else if (compare.apply(null, [best[0], pair[0]]) === best[0]) {\n          return best;\n        } else {\n          return pair;\n        }\n      },\n      null\n    )[1];\n  }\n\n  static pick(obj, keys) {\n    return keys.reduce(\n      (a, k) => {\n        a[k] = obj[k];\n        return a;\n      },\n      {}\n    );\n  }\n\n  static isLeapYear(year) {\n    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n  }\n\n  static daysInYear(year) {\n    return Util.isLeapYear(year) ? 366 : 365;\n  }\n\n  static daysInMonth(year, month) {\n    if (month === 2) {\n      return Util.isLeapYear(year) ? 29 : 28;\n    } else {\n      return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month - 1];\n    }\n  }\n\n  static parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {\n    const date = new Date(ts),\n      intl = {\n        hour12: false,\n        // avoid AM/PM\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      };\n\n    if (timeZone) {\n      intl.timeZone = timeZone;\n    }\n\n    const modified = Object.assign({ timeZoneName: offsetFormat }, intl);\n\n    if (Intl.DateTimeFormat.prototype.formatToParts) {\n      const parsed = new Intl.DateTimeFormat(locale, modified)\n        .formatToParts(date)\n        .find(m => m.type.toLowerCase() === 'timezonename');\n      return parsed ? parsed.value : null;\n    } else {\n      // this probably doesn't work for all locales\n      const without = new Intl.DateTimeFormat(locale, intl).format(date),\n        included = new Intl.DateTimeFormat(locale, modified).format(date),\n        diffed = included.substring(without.length),\n        trimmed = diffed.replace(/^[, ]+/, '');\n\n      return trimmed;\n    }\n  }\n\n  static normalizeZone(input) {\n    if (input instanceof Zone) {\n      return input;\n    } else if (Util.isString(input)) {\n      const lowered = input.toLowerCase();\n      if (lowered === 'local') return LocalZone.instance;\n      else if (lowered === 'utc') return FixedOffsetZone.utcInstance;\n      else if (IANAZone.isValidSpecier(lowered)) return new IANAZone(input);\n      else return FixedOffsetZone.parseSpecifier(lowered) ||\n          Settings.defaultZone;\n    } else if (Util.isNumber(input)) {\n      return FixedOffsetZone.instance(input);\n    } else if (typeof input === 'object' && input.offset) {\n      // This is dumb, but the instanceof check above doesn't seem to really work\n      // so we're duck checking it\n      return input;\n    } else {\n      return Settings.defaultZone;\n    }\n  }\n\n  static normalizeObject(obj, normalizer, ignoreUnknown = false) {\n    const normalized = {};\n    for (const u in obj) {\n      if (obj.hasOwnProperty(u)) {\n        const v = obj[u];\n        if (v !== null && !Util.isUndefined(v) && !Number.isNaN(v)) {\n          const mapped = normalizer(u, ignoreUnknown);\n          if (mapped) {\n            normalized[mapped] = v;\n          }\n        }\n      }\n    }\n    return normalized;\n  }\n\n  static timeObject(obj) {\n    return Util.pick(obj, ['hour', 'minute', 'second', 'millisecond']);\n  }\n\n  static untrucateYear(year) {\n    return year > 60 ? 1900 + year : 2000 + year;\n  }\n\n  // signedOffset('-5', '30') -> -330\n  static signedOffset(offHourStr, offMinuteStr) {\n    const offHour = parseInt(offHourStr, 10) || 0,\n      offMin = parseInt(offMinuteStr, 10) || 0,\n      offMinSigned = offHour < 0 ? -offMin : offMin;\n    return offHour * 60 + offMinSigned;\n  }\n}\n","/**\n * @private\n */\n\nexport class English {\n  static get monthsLong() {\n    return [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ];\n  }\n\n  static get monthsShort() {\n    return ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  }\n\n  static get monthsNarrow() {\n    return ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'];\n  }\n\n  static months(length) {\n    switch (length) {\n      case 'narrow':\n        return English.monthsNarrow;\n      case 'short':\n        return English.monthsShort;\n      case 'long':\n        return English.monthsLong;\n      default:\n        return null;\n    }\n  }\n\n  static get weekdaysLong() {\n    return ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n  }\n\n  static get weekdaysShort() {\n    return ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n  }\n\n  static get weekdaysNarrow() {\n    return ['M', 'T', 'W', 'T', 'F', 'S', 'S'];\n  }\n\n  static weekdays(length) {\n    switch (length) {\n      case 'narrow':\n        return English.weekdaysNarrow;\n      case 'short':\n        return English.weekdaysShort;\n      case 'long':\n        return English.weekdaysLong;\n      default:\n        return null;\n    }\n  }\n\n  static get meridiems() {\n    return ['AM', 'PM'];\n  }\n\n  static eras(length) {\n    return length === 'short' ? ['BC', 'AD'] : ['Before Christ', 'Anno Domini'];\n  }\n}\n","import { Util } from './util';\nimport { English } from './english';\nimport { DateTime } from '../datetime';\n\nconst localeCache = new Map();\n\nfunction intlConfigString(locale, numberingSystem, outputCalendar) {\n  let loc = locale || new Intl.DateTimeFormat().resolvedOptions().locale;\n  loc = Array.isArray(locale) ? locale : [locale];\n\n  if (outputCalendar || numberingSystem) {\n    loc = loc.map(l => {\n      l += '-u';\n\n      if (outputCalendar) {\n        l += '-ca-' + outputCalendar;\n      }\n\n      if (numberingSystem) {\n        l += '-nu-' + numberingSystem;\n      }\n      return l;\n    });\n  }\n  return loc;\n}\n\nfunction mapMonths(f) {\n  const ms = [];\n  for (let i = 1; i <= 12; i++) {\n    const dt = DateTime.utc(2016, i, 1);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction mapWeekdays(f) {\n  const ms = [];\n  for (let i = 1; i <= 7; i++) {\n    const dt = DateTime.utc(2016, 11, 13 + i);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\n/**\n * @private\n */\n\nexport class Locale {\n  static fromOpts(opts) {\n    return Locale.create(\n      opts.locale,\n      opts.numberingSystem,\n      opts.outputCalendar\n    );\n  }\n\n  static create(locale, numberingSystem, outputCalendar) {\n    const localeR = locale || 'en-us',\n      numberingSystemR = numberingSystem || null,\n      outputCalendarR = outputCalendar || null,\n      cacheKey = `${localeR}|${numberingSystemR}|${outputCalendarR}`,\n      cached = localeCache.get(cacheKey);\n\n    if (cached) {\n      return cached;\n    } else {\n      const fresh = new Locale(localeR, numberingSystemR, outputCalendarR);\n      localeCache.set(cacheKey, fresh);\n      return fresh;\n    }\n  }\n\n  static fromObject({ locale, numberingSystem, outputCalendar } = {}) {\n    return Locale.create(locale, numberingSystem, outputCalendar);\n  }\n\n  constructor(locale, numbering, outputCalendar) {\n    Object.defineProperty(this, 'locale', { value: locale, enumerable: true });\n    Object.defineProperty(this, 'numberingSystem', {\n      value: numbering || null,\n      enumerable: true\n    });\n    Object.defineProperty(this, 'outputCalendar', {\n      value: outputCalendar || null,\n      enumerable: true\n    });\n    Object.defineProperty(this, 'intl', {\n      value: intlConfigString(\n        this.locale,\n        this.numberingSystem,\n        this.outputCalendar\n      ),\n      enumerable: false\n    });\n\n    // cached usefulness\n    Object.defineProperty(this, 'weekdaysCache', {\n      value: { format: {}, standalone: {} },\n      enumerable: false\n    });\n    Object.defineProperty(this, 'monthsCache', {\n      value: { format: {}, standalone: {} },\n      enumerable: false\n    });\n    Object.defineProperty(this, 'meridiemCache', {\n      value: null,\n      enumerable: false,\n      writable: true\n    });\n    Object.defineProperty(this, 'eraCache', {\n      value: {},\n      enumerable: false,\n      writable: true\n    });\n  }\n\n  knownEnglish() {\n    return (this.locale === 'en' ||\n      Intl.DateTimeFormat(this.intl)\n        .resolvedOptions()\n        .locale.startsWith('en-US')) &&\n      this.numberingSystem === null &&\n      (this.outputCalendar === null || this.outputCalendar === 'latn');\n  }\n\n  clone(alts) {\n    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {\n      return this;\n    } else {\n      return Locale.create(\n        alts.locale || this.locale,\n        alts.numberingSystem || this.numberingSystem,\n        alts.outputCalendar || this.outputCalendar\n      );\n    }\n  }\n\n  months(length, format = false) {\n    if (this.knownEnglish()) {\n      const english = English.months(length);\n      if (english) {\n        return english;\n      }\n    }\n\n    const intl = format ? { month: length, day: 'numeric' } : { month: length },\n      formatStr = format ? 'format' : 'standalone';\n    if (!this.monthsCache[formatStr][length]) {\n      this.monthsCache[formatStr][length] = mapMonths(dt =>\n        this.extract(dt, intl, 'month'));\n    }\n    return this.monthsCache[formatStr][length];\n  }\n\n  weekdays(length, format = false) {\n    if (this.knownEnglish()) {\n      const english = English.weekdays(length);\n      if (english) {\n        return english;\n      }\n    }\n\n    const intl = format\n      ? { weekday: length, year: 'numeric', month: 'long', day: 'numeric' }\n      : { weekday: length },\n      formatStr = format ? 'format' : 'standalone';\n    if (!this.weekdaysCache[formatStr][length]) {\n      this.weekdaysCache[formatStr][length] = mapWeekdays(dt =>\n        this.extract(dt, intl, 'weekday'));\n    }\n    return this.weekdaysCache[formatStr][length];\n  }\n\n  meridiems() {\n    if (this.knownEnglish()) {\n      return English.meridiems;\n    }\n\n    // In theory there could be aribitrary day periods. We're gonna assume there are exactly two\n    // for AM and PM. This is probably wrong, but it's makes parsing way easier.\n    if (!this.meridiemCache) {\n      const intl = { hour: 'numeric', hour12: true };\n      this.meridiemCache = [\n        DateTime.utc(2016, 11, 13, 9),\n        DateTime.utc(2016, 11, 13, 19)\n      ].map(dt => this.extract(dt, intl, 'dayperiod'));\n    }\n\n    return this.meridiemCache;\n  }\n\n  eras(length) {\n    if (this.knownEnglish()) {\n      return English.eras(length);\n    }\n\n    const intl = { era: length };\n\n    // This is utter bullshit. Different calendars are going to define eras totally differently. What I need is the minimum set of dates\n    // to definitely enumerate them.\n    if (!this.eraCache[length]) {\n      this.eraCache[length] = [\n        DateTime.utc(-40, 1, 1),\n        DateTime.utc(2017, 1, 1)\n      ].map(dt => this.extract(dt, intl, 'era'));\n    }\n\n    return this.eraCache[length];\n  }\n\n  extract(dt, intlOpts, field) {\n    const [df, d] = this.dtFormatter(dt, intlOpts),\n      results = df.formatToParts(d),\n      matching = results.find(m => m.type.toLowerCase() === field);\n\n    return matching ? matching.value : null;\n  }\n\n  numberFormatter(opts = {}, intlOpts = {}) {\n    const realIntlOpts = Object.assign({ useGrouping: false }, intlOpts);\n\n    if (opts.padTo > 0) {\n      realIntlOpts.minimumIntegerDigits = opts.padTo;\n    }\n\n    if (opts.round) {\n      realIntlOpts.maximumFractionDigits = 0;\n    }\n\n    return new Intl.NumberFormat(this.intl, realIntlOpts);\n  }\n\n  dtFormatter(dt, intlOpts = {}) {\n    let d, z;\n\n    if (dt.zone.universal) {\n      // if we have a fixed-offset zone that isn't actually UTC,\n      // (like UTC+8), we need to make do with just displaying\n      // the time in UTC; the formatter how to handle UTC+8\n      d = Util.asIfUTC(dt);\n      z = 'UTC';\n    } else if (dt.zone.type === 'local') {\n      d = dt.toJSDate();\n    } else {\n      d = dt.toJSDate();\n      z = dt.zone.name;\n    }\n\n    const realIntlOpts = Object.assign({}, intlOpts);\n    if (z) {\n      realIntlOpts.timeZone = z;\n    }\n\n    return [new Intl.DateTimeFormat(this.intl, realIntlOpts), d];\n  }\n\n  equals(other) {\n    return this.locale === other.locale &&\n      this.numberingSystem === other.numberingSystem &&\n      this.outputCalendar === other.outputCalendar;\n  }\n}\n","import { Util } from './util';\nimport { DateTime } from '../datetime';\n\nfunction stringifyTokens(splits, tokenToString) {\n  let s = '';\n  for (const token of splits) {\n    if (token.literal) {\n      s += token.val;\n    } else {\n      s += tokenToString(token.val);\n    }\n  }\n  return s;\n}\n\n/**\n * @private\n */\n\nexport class Formatter {\n  static create(locale, opts = {}) {\n    const formatOpts = Object.assign({}, { round: true }, opts);\n    return new Formatter(locale, formatOpts);\n  }\n\n  static parseFormat(fmt) {\n    let current = null, currentFull = '', bracketed = false;\n    const splits = [];\n    for (let i = 0; i < fmt.length; i++) {\n      const c = fmt.charAt(i);\n      if (c === \"'\") {\n        if (currentFull.length > 0) {\n          splits.push({ literal: bracketed, val: currentFull });\n        }\n        current = null;\n        currentFull = '';\n        bracketed = !bracketed;\n      } else if (bracketed) {\n        currentFull += c;\n      } else if (c === current) {\n        currentFull += c;\n      } else {\n        if (currentFull.length > 0) {\n          splits.push({ literal: false, val: currentFull });\n        }\n        currentFull = c;\n        current = c;\n      }\n    }\n\n    if (currentFull.length > 0) {\n      splits.push({ literal: bracketed, val: currentFull });\n    }\n\n    return splits;\n  }\n\n  constructor(locale, formatOpts) {\n    this.opts = formatOpts;\n    this.loc = locale;\n  }\n\n  formatDateTime(dt, opts = {}) {\n    const [df, d] = this.loc.dtFormatter(\n      dt,\n      Object.assign({}, this.opts, opts)\n    );\n    return df.format(d);\n  }\n\n  formatDateTimeParts(dt, opts = {}) {\n    const [df, d] = this.loc.dtFormatter(\n      dt,\n      Object.assign({}, this.opts, opts)\n    );\n    return df.format(d);\n  }\n\n  resolvedOptions(dt, opts = {}) {\n    const [df, d] = this.loc.dtFormatter(\n      dt,\n      Object.assign({}, this.opts, opts)\n    );\n    return df.resolvedOptions(d);\n  }\n\n  num(n, p = 0) {\n    const opts = Object.assign({}, this.opts);\n\n    if (p > 0) {\n      opts.padTo = p;\n    }\n\n    return this.loc.numberFormatter(opts).format(n);\n  }\n\n  formatDateTimeFromString(dt, fmt) {\n    const string = (opts, extract) => this.loc.extract(dt, opts, extract),\n      formatOffset = opts => {\n        if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {\n          return 'Z';\n        }\n\n        const hours = Util.towardZero(dt.offset / 60),\n          minutes = Math.abs(dt.offset % 60),\n          sign = hours >= 0 ? '+' : '-',\n          base = `${sign}${Math.abs(hours)}`;\n\n        switch (opts.format) {\n          case 'short':\n            return `${sign}${this.num(Math.abs(hours), 2)}:${this.num(minutes, 2)}`;\n          case 'narrow':\n            return minutes > 0 ? `${base}:${minutes}` : base;\n          case 'techie':\n            return `${sign}${this.num(Math.abs(hours), 2)}${this.num(minutes, 2)}`;\n          default:\n            throw new RangeError(\n              `Value format ${opts.format} is out of range for property format`\n            );\n        }\n      },\n      tokenToString = token => {\n        const outputCal = this.loc.outputCalendar;\n\n        // Where possible: http://cldr.unicode.org/translation/date-time#TOC-Stand-Alone-vs.-Format-Styles\n        switch (token) {\n          // ms\n          case 'S':\n            return this.num(dt.millisecond);\n          case 'SSS':\n            return this.num(dt.millisecond, 3);\n          // seconds\n          case 's':\n            return this.num(dt.second);\n          case 'ss':\n            return this.num(dt.second, 2);\n          // minutes\n          case 'm':\n            return this.num(dt.minute);\n          case 'mm':\n            return this.num(dt.minute, 2);\n          // hours\n          case 'h':\n            return this.num(dt.hour === 12 ? 12 : dt.hour % 12);\n          case 'hh':\n            return this.num(dt.hour === 12 ? 12 : dt.hour % 12, 2);\n          case 'H':\n            return this.num(dt.hour);\n          case 'HH':\n            return this.num(dt.hour, 2);\n          // offset\n          case 'Z':\n            // like +6\n            return formatOffset({ format: 'narrow', allowZ: true });\n          case 'ZZ':\n            // like +06:00\n            return formatOffset({ format: 'short', allowZ: true });\n          case 'ZZZ':\n            // like +0600\n            return formatOffset({ format: 'techie', allowZ: false });\n          case 'ZZZZ':\n            // like EST\n            return dt.offsetNameShort;\n          case 'ZZZZZ':\n            // like Eastern Standard Time\n            return dt.offsetNameLong;\n          // zone\n          case 'z':\n            return dt.zoneName;\n          // like America/New_York\n          // meridiems\n          case 'a':\n            return string({ hour: 'numeric', hour12: true }, 'dayperiod');\n          // dates\n          case 'd':\n            return outputCal\n              ? string({ day: 'numeric' }, 'day')\n              : this.num(dt.day);\n          case 'dd':\n            return outputCal\n              ? string({ day: '2-digit' }, 'day')\n              : this.num(dt.day, 2);\n          // weekdays - format\n          case 'c':\n            // like 1\n            return this.num(dt.weekday);\n          case 'ccc':\n            // like 'Tues'\n            return string({ weekday: 'short' }, 'weekday');\n          case 'cccc':\n            // like 'Tuesday'\n            return string({ weekday: 'long' }, 'weekday');\n          case 'ccccc':\n            // like 'T'\n            return string({ weekday: 'narrow' }, 'weekday');\n          // weekdays - standalone\n          case 'E':\n            // like 1\n            return this.num(dt.weekday);\n          case 'EEE':\n            // like 'Tues'\n            return string(\n              { weekday: 'short', month: 'long', day: 'numeric' },\n              'weekday'\n            );\n          case 'EEEE':\n            // like 'Tuesday'\n            return string(\n              { weekday: 'long', month: 'long', day: 'numeric' },\n              'weekday'\n            );\n          case 'EEEEE':\n            // like 'T'\n            return string(\n              { weekday: 'narrow', month: 'long', day: 'numeric' },\n              'weekday'\n            );\n          // months - format\n          case 'L':\n            // like 1\n            return string({ month: 'numeric', day: 'numeric' }, 'month');\n          case 'LL':\n            // like 01, doesn't seem to work\n            return string({ month: '2-digit', day: 'numeric' }, 'month');\n          case 'LLL':\n            // like Jan\n            return string({ month: 'short', day: 'numeric' }, 'month');\n          case 'LLLL':\n            // like January\n            return string({ month: 'long' }, 'month');\n          case 'LLLLL':\n            // like J\n            return string({ month: 'narrow' }, 'month');\n          // months - standalone\n          case 'M':\n            // like 1\n            return outputCal\n              ? string({ month: 'numeric' }, 'month')\n              : this.num(dt.month);\n          case 'MM':\n            // like 01\n            return outputCal\n              ? string({ month: '2-digit' }, 'month')\n              : this.num(dt.month, 2);\n          case 'MMM':\n            // like Jan\n            return string({ month: 'short', day: 'numeric' }, 'month');\n          case 'MMMM':\n            // like January\n            return string({ month: 'long', day: 'numeric' }, 'month');\n          case 'MMMMM':\n            // like J\n            return string({ month: 'narrow' }, 'month');\n          // years\n          case 'y':\n            // like 2014\n            return outputCal\n              ? string({ year: 'numeric' }, 'year')\n              : this.num(dt.year);\n          case 'yy':\n            // like 14\n            return outputCal\n              ? string({ year: '2-digit' }, 'year')\n              : this.num(dt.year.toString().slice(-2), 2);\n          case 'yyyy':\n            // like 0012\n            return outputCal\n              ? string({ year: 'numeric' }, 'year')\n              : this.num(dt.year, 4);\n          // eras\n          case 'G':\n            // like AD\n            return string({ era: 'short' }, 'era');\n          case 'GG':\n            // like Anno Domini\n            return string({ era: 'long' }, 'era');\n          case 'GGGGG':\n            return string({ era: 'narrow' }, 'era');\n          case 'kk':\n            return this.num(dt.weekYear.toString().slice(-2), 2);\n          case 'kkkk':\n            return this.num(dt.weekYear, 4);\n          case 'W':\n            return this.num(dt.weekNumber);\n          case 'WW':\n            return this.num(dt.weekNumber, 2);\n          case 'o':\n            return this.num(dt.ordinal);\n          case 'ooo':\n            return this.num(dt.ordinal, 3);\n          // macros\n          case 'D':\n            return this.formatDateTime(dt, DateTime.DATE_SHORT);\n          case 'DD':\n            return this.formatDateTime(dt, DateTime.DATE_MED);\n          case 'DDD':\n            return this.formatDateTime(dt, DateTime.DATE_FULL);\n          case 'DDDD':\n            return this.formatDateTime(dt, DateTime.DATE_HUGE);\n          case 't':\n            return this.formatDateTime(dt, DateTime.TIME_SIMPLE);\n          case 'tt':\n            return this.formatDateTime(dt, DateTime.TIME_WITH_SECONDS);\n          case 'ttt':\n            return this.formatDateTime(dt, DateTime.TIME_WITH_SHORT_OFFSET);\n          case 'tttt':\n            return this.formatDateTime(dt, DateTime.TIME_WITH_LONG_OFFSET);\n          case 'T':\n            return this.formatDateTime(dt, DateTime.TIME_24_SIMPLE);\n          case 'TT':\n            return this.formatDateTime(dt, DateTime.TIME_24_WITH_SECONDS);\n          case 'TTT':\n            return this.formatDateTime(dt, DateTime.TIME_24_WITH_SHORT_OFFSET);\n          case 'TTTT':\n            return this.formatDateTime(dt, DateTime.TIME_24_WITH_LONG_OFFSET);\n          case 'f':\n            return this.formatDateTime(dt, DateTime.DATETIME_SHORT);\n          case 'ff':\n            return this.formatDateTime(dt, DateTime.DATETIME_MED);\n          case 'fff':\n            return this.formatDateTime(dt, DateTime.DATETIME_FULL);\n          case 'ffff':\n            return this.formatDateTime(dt, DateTime.DATETIME_HUGE);\n          case 'F':\n            return this.formatDateTime(\n              dt,\n              DateTime.DATETIME_SHORT_WITH_SECONDS\n            );\n          case 'FF':\n            return this.formatDateTime(dt, DateTime.DATETIME_MED_WITH_SECONDS);\n          case 'FFF':\n            return this.formatDateTime(dt, DateTime.DATETIME_FULL_WITH_SECONDS);\n          case 'FFFF':\n            return this.formatDateTime(dt, DateTime.DATETIME_HUGE_WITH_SECONDS);\n\n          default:\n            return token;\n        }\n      };\n\n    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);\n  }\n\n  formatDuration() {}\n\n  formatDurationFromString(dur, fmt) {\n    const tokenToField = token => {\n      switch (token[0]) {\n        case 'S':\n          return 'millisecond';\n        case 's':\n          return 'second';\n        case 'm':\n          return 'minute';\n        case 'h':\n          return 'hour';\n        case 'd':\n          return 'day';\n        case 'M':\n          return 'month';\n        case 'y':\n          return 'year';\n        default:\n          return null;\n      }\n    },\n      tokenToString = lildur =>\n        token => {\n          const mapped = tokenToField(token);\n          if (mapped) {\n            return this.num(lildur.get(mapped), token.length);\n          } else {\n            return token;\n          }\n        },\n      tokens = Formatter.parseFormat(fmt),\n      realTokens = tokens.reduce(\n        (found, { literal, val }) => literal ? found : found.concat(val),\n        []\n      ),\n      collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter(t => t));\n    return stringifyTokens(tokens, tokenToString(collapsed));\n  }\n}\n","import { Util } from './util';\nimport { English } from './english';\nimport { FixedOffsetZone } from '../zones/fixedOffsetZone';\n\nfunction combineRegexes(...regexes) {\n  const full = regexes.reduce((f, r) => f + r.source, '');\n  return RegExp(full);\n}\n\nfunction combineExtractors(...extractors) {\n  return m =>\n    extractors\n      .reduce(\n        ([mergedVals, mergedZone, cursor], ex) => {\n          const [val, zone, next] = ex(m, cursor);\n          return [Object.assign(mergedVals, val), mergedZone || zone, next];\n        },\n        [{}, null, 1]\n      )\n      .slice(0, 2);\n}\n\nfunction parse(s, ...patterns) {\n  if (s == null) {\n    return [null, null];\n  }\n  for (const [regex, extractor] of patterns) {\n    const m = regex.exec(s);\n    if (m) {\n      return extractor(m);\n    }\n  }\n  return [null, null];\n}\n\nfunction simpleParse(...keys) {\n  return (match, cursor) => {\n    const ret = {};\n    let i;\n\n    for (i = 0; i < keys.length; i++) {\n      ret[keys[i]] = parseInt(match[cursor + i]);\n    }\n    return [ret, null, cursor + i];\n  };\n}\n\n// ISO parsing\nconst isoTimeRegex = /(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d\\d\\d))?)?)?(?:(Z)|([+-]\\d\\d)(?::?(\\d\\d))?)?)?$/,\n  extractISOYmd = simpleParse('year', 'month', 'day'),\n  isoYmdRegex = /^([+-]?\\d{6}|\\d{4})-?(\\d\\d)-?(\\d\\d)/,\n  extractISOWeekData = simpleParse('weekYear', 'weekNumber', 'weekDay'),\n  isoWeekRegex = /^(\\d{4})-?W(\\d\\d)-?(\\d)/,\n  isoOrdinalRegex = /^(\\d{4})-?(\\d{3})/,\n  extractISOOrdinalData = simpleParse('year', 'ordinal');\n\nfunction extractISOTime(match, cursor) {\n  const local = !match[cursor + 4] && !match[cursor + 5],\n    fullOffset = Util.signedOffset(match[cursor + 5], match[cursor + 6]),\n    item = {\n      hour: parseInt(match[cursor]) || 0,\n      minute: parseInt(match[cursor + 1]) || 0,\n      second: parseInt(match[cursor + 2]) || 0,\n      millisecond: parseInt(match[cursor + 3]) || 0\n    },\n    zone = local ? null : new FixedOffsetZone(fullOffset);\n\n  return [item, zone, cursor + 7];\n}\n\n// ISO duration parsing\n\nconst isoDuration = /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?)?$/;\n\nfunction extractISODuration(match) {\n  const [, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr] = match;\n\n  return {\n    year: parseInt(yearStr),\n    month: parseInt(monthStr),\n    day: parseInt(dayStr),\n    hour: parseInt(hourStr),\n    minute: parseInt(minuteStr),\n    second: parseInt(secondStr)\n  };\n}\n\n// These are a little braindead. EDT *should* tell us that we're in, say, America/New_York\n// and not just that we're in -240 *right now*. But since I don't think these are used that often\n// I'm just going to ignore that\nconst obsOffsets = {\n  GMT: 0,\n  EDT: -4 * 60,\n  EST: -5 * 60,\n  CDT: -5 * 60,\n  CST: -6 * 60,\n  MDT: -6 * 60,\n  MST: -7 * 60,\n  PDT: -7 * 60,\n  PST: -8 * 60\n};\n\nfunction fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n  const result = {\n    year: yearStr.length === 2 ? Util.untrucateYear(parseInt(yearStr)) : parseInt(yearStr),\n    month: English.monthsShort.indexOf(monthStr) + 1,\n    day: parseInt(dayStr),\n    hour: parseInt(hourStr),\n    minute: parseInt(minuteStr)\n  };\n\n  if (secondStr) result.second = parseInt(secondStr);\n  if (weekdayStr) {\n    result.weekday =\n      weekdayStr.length > 3\n        ? English.weekdaysLong.indexOf(weekdayStr) + 1\n        : English.weekdaysShort.indexOf(weekdayStr) + 1;\n  }\n\n  return result;\n}\n\n// RFC 2822/5322\nconst rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\\d\\d)(\\d\\d)))$/;\n\nfunction extractRFC2822(match) {\n  const [\n      ,\n      weekdayStr,\n      dayStr,\n      monthStr,\n      yearStr,\n      hourStr,\n      minuteStr,\n      secondStr,\n      obsOffset,\n      milOffset,\n      offHourStr,\n      offMinuteStr\n    ] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n\n  let offset;\n  if (obsOffset) {\n    offset = obsOffsets[obsOffset];\n  } else if (milOffset) {\n    offset = 0;\n  } else {\n    offset = Util.signedOffset(offHourStr, offMinuteStr);\n  }\n\n  return [result, new FixedOffsetZone(offset)];\n}\n\nfunction preprocessRFC2822(s) {\n  // Remove comments and folding whitespace and replace multiple-spaces with a single space\n  return s\n    .replace(/\\([^)]*\\)|[\\n\\t]/g, ' ')\n    .replace(/(\\s\\s+)/g, ' ')\n    .trim();\n}\n\n// http date\n\nconst rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d\\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  rfc850 = /^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\\d\\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \\d|\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) (\\d{4})$/;\n\nfunction extractRFC1123Or850(match) {\n  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\nfunction extractASCII(match) {\n  const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\n/**\n * @private\n */\n\nexport class RegexParser {\n  static parseISODate(s) {\n    return parse(\n      s,\n      [combineRegexes(isoYmdRegex, isoTimeRegex), combineExtractors(extractISOYmd, extractISOTime)],\n      [\n        combineRegexes(isoWeekRegex, isoTimeRegex),\n        combineExtractors(extractISOWeekData, extractISOTime)\n      ],\n      [\n        combineRegexes(isoOrdinalRegex, isoTimeRegex),\n        combineExtractors(extractISOOrdinalData, extractISOTime)\n      ]\n    );\n  }\n\n  static parseRFC2822Date(s) {\n    return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);\n  }\n\n  static parseHTTPDate(s) {\n    return parse(\n      s,\n      [rfc1123, extractRFC1123Or850],\n      [rfc850, extractRFC1123Or850],\n      [ascii, extractASCII]\n    );\n  }\n\n  static parseISODuration(s) {\n    return parse(s, [isoDuration, extractISODuration]);\n  }\n}\n","import { Util } from './impl/util';\nimport { Locale } from './impl/locale';\nimport { Formatter } from './impl/formatter';\nimport { RegexParser } from './impl/regexParser';\nimport { Settings } from './settings';\nimport {\n  InvalidArgumentError,\n  InvalidDurationError,\n  InvalidUnitError\n} from './errors';\n\nconst INVALID = 'Invalid Duration';\n\nconst lowOrderMatrix = {\n  weeks: {\n    days: 7,\n    hours: 7 * 24,\n    minutes: 7 * 24 * 60,\n    seconds: 7 * 24 * 60 * 60,\n    milliseconds: 7 * 24 * 60 * 60 * 1000\n  },\n  days: {\n    hours: 24,\n    minutes: 24 * 60,\n    seconds: 24 * 60 * 60,\n    milliseconds: 24 * 60 * 60 * 1000\n  },\n  hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1000 },\n  minutes: { seconds: 60, milliseconds: 60 * 1000 },\n  seconds: { milliseconds: 1000 }\n},\n  casualMatrix = Object.assign(\n    {\n      years: {\n        months: 12,\n        weeks: 52,\n        days: 365,\n        hours: 365 * 24,\n        minutes: 365 * 24 * 60,\n        seconds: 365 * 24 * 60 * 60,\n        milliseconds: 365 * 24 * 60 * 60 * 1000\n      },\n      months: {\n        weeks: 4,\n        days: 30,\n        hours: 30 * 24,\n        minutes: 30 * 24 * 60,\n        seconds: 30 * 24 * 60 * 60,\n        milliseconds: 30 * 24 * 60 * 60 * 1000\n      }\n    },\n    lowOrderMatrix\n  ),\n  daysInYearAccurate = 146097.0 / 400,\n  daysInMonthAccurate = 146097.0 / 4800,\n  accurateMatrix = Object.assign(\n    {\n      years: {\n        months: 12,\n        weeks: daysInYearAccurate / 7,\n        days: daysInYearAccurate,\n        hours: daysInYearAccurate * 24,\n        minutes: daysInYearAccurate * 24 * 60,\n        seconds: daysInYearAccurate * 24 * 60 * 60,\n        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000\n      },\n      months: {\n        weeks: daysInMonthAccurate / 7,\n        days: daysInMonthAccurate,\n        hours: daysInYearAccurate * 24,\n        minutes: daysInYearAccurate * 24 * 60,\n        seconds: daysInYearAccurate * 24 * 60 * 60,\n        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000\n      }\n    },\n    lowOrderMatrix\n  );\n\nconst orderedUnits = [\n  'years',\n  'months',\n  'weeks',\n  'days',\n  'hours',\n  'minutes',\n  'seconds',\n  'milliseconds'\n];\n\nfunction clone(dur, alts, clear = false) {\n  // deep merge for vals\n  const conf = {\n    values: clear ? alts.values : Object.assign(dur.values, alts.values || {}),\n    loc: dur.loc.clone(alts.loc),\n    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy\n  };\n  return new Duration(conf);\n}\n\nfunction isHighOrderNegative(obj) {\n  // only rule is that the highest-order part must be non-negative\n  for (const k of orderedUnits) {\n    if (obj[k]) return obj[k] < 0;\n  }\n  return false;\n}\n\n/**\n * A Duration object represents a period of time, like \"2 months\" or \"1 day, 1 hour\". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime.plus} to add a Duration object to a DateTime, producing another DateTime.\n *\n * Here is a brief overview of commonly used methods and getters in Duration:\n *\n * * **Creation** To create a Duration, use {@link fromMilliseconds}, {@link fromObject}, or {@link fromISO}.\n * * **Unit values** See the {@link years}, {@link months}, {@link weeks}, {@link days}, {@link hours}, {@link minutes}, {@link seconds}, {@link milliseconds} accessors.\n * * **Configuration** See  {@link locale} and {@link numberingSystem} accessors.\n * * **Transformation** To create new Durations out of old ones use {@link plus}, {@link minus}, {@link normalize}, {@link set}, {@link reconfigure}, {@link shiftTo}, and {@link negate}.\n * * **Output** To convert the Duration into other representations, see {@link as}, {@link toISO}, {@link toFormat}, and {@link toJSON}\n *\n * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.\n */\nexport class Duration {\n  /**\n   * @private\n   */\n  constructor(config) {\n    const accurate = config.conversionAccuracy === 'longterm' || false;\n\n    Object.defineProperty(this, 'values', {\n      value: config.values,\n      enumerable: true\n    });\n    Object.defineProperty(this, 'loc', {\n      value: config.loc || Locale.create(),\n      enumerable: true\n    });\n    Object.defineProperty(this, 'conversionAccuracy', {\n      value: accurate ? 'longterm' : 'casual',\n      enumerable: true\n    });\n    Object.defineProperty(this, 'invalidReason', {\n      value: config.invalidReason || null,\n      enumerable: false\n    });\n    Object.defineProperty(this, 'matrix', {\n      value: accurate ? accurateMatrix : casualMatrix,\n      enumerable: false\n    });\n  }\n\n  /**\n   * Create Duration from a number of milliseconds.\n   * @param {number} count of milliseconds\n   * @param {Object} opts - options for parsing\n   * @param {string} [obj.locale='en-US'] - the locale to use\n   * @param {string} obj.numberingSystem - the numbering system to use\n   * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  static fromMilliseconds(count, opts) {\n    return Duration.fromObject(Object.assign({ milliseconds: count }, opts));\n  }\n\n  /**\n   * Create an DateTime from a Javascript object with keys like 'years' and 'hours'.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.years\n   * @param {number} obj.months\n   * @param {number} obj.weeks\n   * @param {number} obj.days\n   * @param {number} obj.hours\n   * @param {number} obj.minutes\n   * @param {number} obj.seconds\n   * @param {number} obj.milliseconds\n   * @param {string} [obj.locale='en-US'] - the locale to use\n   * @param {string} obj.numberingSystem - the numbering system to use\n   * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  static fromObject(obj) {\n    return new Duration({\n      values: Util.normalizeObject(obj, Duration.normalizeUnit, true),\n      loc: Locale.fromObject(obj),\n      conversionAccuracy: obj.conversionAccuracy\n    });\n  }\n\n  /**\n   * Create a DateTime from an ISO 8601 duration string.\n   * @param {string} text - text to parse\n   * @param {Object} opts - options for parsing\n   * @param {string} [obj.locale='en-US'] - the locale to use\n   * @param {string} obj.numberingSystem - the numbering system to use\n   * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromISO('P3Y6M4DT12H30M5S').toObject() //=> { years: 3, months: 6, day: 4, hours: 12, minutes: 30, seconds: 5 }\n   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }\n   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }\n   * @return {Duration}\n   */\n  static fromISO(text, opts) {\n    const obj = Object.assign(RegexParser.parseISODuration(text), opts);\n    return Duration.fromObject(obj);\n  }\n\n  /**\n   * Create an invalid Duration.\n   * @param {string} reason - reason this is invalid\n   * @return {Duration}\n   */\n  static invalid(reason) {\n    if (!reason) {\n      throw new InvalidArgumentError(\n        'need to specify a reason the DateTime is invalid'\n      );\n    }\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDurationError(reason);\n    } else {\n      return new Duration({ invalidReason: reason });\n    }\n  }\n\n  /**\n   * @private\n   */\n  static normalizeUnit(unit, ignoreUnknown = false) {\n    const normalized = {\n      year: 'years',\n      years: 'years',\n      month: 'months',\n      months: 'months',\n      week: 'weeks',\n      weeks: 'weeks',\n      day: 'days',\n      days: 'days',\n      hour: 'hours',\n      hours: 'hours',\n      minute: 'minutes',\n      minutes: 'minutes',\n      second: 'seconds',\n      seconds: 'seconds',\n      millisecond: 'milliseconds',\n      milliseconds: 'milliseconds'\n    }[unit ? unit.toLowerCase() : unit];\n\n    if (!ignoreUnknown && !normalized) throw new InvalidUnitError(unit);\n\n    return normalized;\n  }\n\n  /**\n   * Get  the locale of a Duration, such 'en-UK'\n   * @return {string}\n   */\n  get locale() {\n    return this.loc.locale;\n  }\n\n  /**\n   * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration\n   *\n   * @return {string}\n   */\n  get numberingSystem() {\n    return this.loc.numberingSystem;\n  }\n\n  /**\n   * Returns a string representation of this Duration formatted according to the specified format string.\n   * @param {string} fmt - the format string\n   * @param {object} opts - options\n   * @param {boolean} opts.round - round numerical values\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc, opts).formatDurationFromString(this, fmt)\n      : INVALID;\n  }\n\n  /**\n   * Returns a Javascript object with this Duration's values.\n   * @param opts - options for generating the object\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }\n   * @return {object}\n   */\n  toObject(opts = {}) {\n    if (!this.isValid) return {};\n\n    const base = Object.assign({}, this.values);\n\n    if (opts.includeConfig) {\n      base.conversionAccuracy = this.conversionAccuracy;\n      base.numberingSystem = this.loc.numberingSystem;\n      base.locale = this.loc.locale;\n    }\n    return base;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Duration.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'\n   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'\n   * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'\n   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'\n   * @return {string}\n   */\n  toISO() {\n    // we could use the formatter, but this is an easier way to get the minimum string\n    if (!this.isValid) return null;\n\n    let s = 'P', norm = this.normalize();\n\n    // ISO durations are always positive, so take the absolute value\n    norm = isHighOrderNegative(norm.values) ? norm.negate() : norm;\n\n    if (norm.years > 0) s += norm.years + 'Y';\n    if (norm.months > 0) s += norm.months + 'M';\n    if (norm.days > 0 || norm.weeks > 0) s += norm.days + norm.weeks * 7 + 'D';\n    if (\n      norm.hours > 0 ||\n      norm.minutes > 0 ||\n      norm.seconds > 0 ||\n      norm.milliseconds > 0\n    )\n      s += 'T';\n    if (norm.hours > 0) s += norm.hours + 'H';\n    if (norm.minutes > 0) s += norm.minutes + 'M';\n    if (norm.seconds > 0) s += norm.seconds + 'S';\n    return s;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.\n   * @return {string}\n   */\n  toString() {\n    return this.toISO();\n  }\n\n  /**\n   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|number|object} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = Util.friendlyDuration(duration), result = {};\n\n    for (const k of orderedUnits) {\n      const val = dur.get(k) + this.get(k);\n      if (val !== 0) {\n        result[k] = val;\n      }\n    }\n\n    return clone(this, { values: result }, true);\n  }\n\n  /**\n   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|number|object} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  minus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = Util.friendlyDuration(duration);\n    return this.plus(dur.negate());\n  }\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example Duration.fromObject({years: 2, days: 3}).years //=> 2\n   * @example Duration.fromObject({years: 2, days: 3}).months //=> 0\n   * @example Duration.fromObject({years: 2, days: 3}).days //=> 3\n   * @return {number}\n   */\n  get(unit) {\n    return this[Duration.normalizeUnit(unit)];\n  }\n\n  /**\n   * \"Set\" the values of specified units. Return a newly-constructed Duration.\n   * @param {object} values - a mapping of units to numbers\n   * @example dur.set({ years: 2017 })\n   * @example dur.set({ hours: 8, minutes: 30 })\n   * @return {Duration}\n   */\n  set(values) {\n    const mixed = Object.assign(\n      this.values,\n      Util.normalizeObject(values, Duration.normalizeUnit)\n    );\n    return clone(this, { values: mixed });\n  }\n\n  /**\n   * \"Set\" the locale and/or numberingSystem.  Returns a newly-constructed Duration.\n   * @example dur.reconfigure({ locale: 'en-UK' })\n   * @return {Duration}\n   */\n  reconfigure({ locale, numberingSystem, conversionAccuracy } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem }), opts = { loc };\n\n    if (conversionAccuracy) {\n      opts.conversionAccuracy = conversionAccuracy;\n    }\n\n    return clone(this, opts);\n  }\n\n  /**\n   * Return the length of the duration in the specified unit.\n   * @param {string} unit - a unit such as 'minutes' or 'days'\n   * @example Duration.fromObject({years: 1}).as('days') //=> 365\n   * @example Duration.fromObject({years: 1}).as('months') //=> 12\n   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5\n   * @return {number}\n   */\n  as(unit) {\n    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;\n  }\n\n  /**\n   * Reduce this Duration to its canonical representation in its current units.\n   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }\n   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }\n   * @return {Duration}\n   */\n  normalize() {\n    if (!this.isValid) return this;\n\n    const neg = isHighOrderNegative(this.values),\n      dur = neg ? this.negate() : this,\n      shifted = dur.shiftTo(...Object.keys(this.values));\n    return neg ? shifted.negate() : shifted;\n  }\n\n  /**\n   * Convert this Duration into its representation in a different set of units.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }\n   * @return {Duration}\n   */\n  shiftTo(...units) {\n    if (!this.isValid) return this;\n\n    if (units.length === 0) {\n      return this;\n    }\n\n    units = units.map(Duration.normalizeUnit);\n\n    const built = {}, accumulated = {}, vals = this.toObject();\n    let lastUnit;\n\n    for (const k of orderedUnits) {\n      if (units.indexOf(k) >= 0) {\n        built[k] = 0;\n        lastUnit = k;\n\n        // anything we haven't boiled down yet should get boiled to this unit\n        for (const ak in accumulated) {\n          if (accumulated.hasOwnProperty(ak)) {\n            built[k] += this.matrix[ak][k] * accumulated[ak];\n          }\n          delete accumulated[ak];\n        }\n\n        // plus anything that's already in this unit\n        if (Util.isNumber(vals[k])) {\n          built[k] += vals[k];\n        }\n\n        // plus anything further down the chain that should be rolled up in to this\n        for (const down in vals) {\n          if (orderedUnits.indexOf(down) > orderedUnits.indexOf(k)) {\n            const conv = this.matrix[k][down],\n              added = Math.floor(vals[down] / conv);\n            built[k] += added;\n            vals[down] -= added * conv;\n          }\n        }\n        // otherwise, keep it in the wings to boil it later\n      } else if (Util.isNumber(vals[k])) {\n        accumulated[k] = vals[k];\n      }\n    }\n\n    // anything leftover becomes the decimal for the last unit\n    if (lastUnit) {\n      for (const key in accumulated) {\n        if (accumulated.hasOwnProperty(key)) {\n          built[lastUnit] += accumulated[key] / this.matrix[lastUnit][key];\n        }\n      }\n    }\n\n    return clone(this, { values: built }, true);\n  }\n\n  /**\n   * Return the negative of this Duration.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }\n   * @return {Duration}\n   */\n  negate() {\n    if (!this.isValid) return this;\n    const negated = {};\n    for (const k of Object.keys(this.values)) {\n      negated[k] = -this.values[k];\n    }\n    return Duration.fromObject(negated);\n  }\n\n  /**\n   * Get the years.\n   * @return {number}\n   */\n  get years() {\n    return this.isValid ? this.values.years || 0 : NaN;\n  }\n\n  /**\n   * Get the months.\n   * @return {number}\n   */\n  get months() {\n    return this.isValid ? this.values.months || 0 : NaN;\n  }\n\n  /**\n   * Get the weeks\n   * @return {number}\n   */\n  get weeks() {\n    return this.isValid ? this.values.weeks || 0 : NaN;\n  }\n\n  /**\n   * Get the days.\n   * @return {number\n   */\n  get days() {\n    return this.isValid ? this.values.days || 0 : NaN;\n  }\n\n  /**\n   * Get the hours.\n   * @return {number}\n   */\n  get hours() {\n    return this.isValid ? this.values.hours || 0 : NaN;\n  }\n\n  /**\n   * Get the minutes.\n   * @return {number}\n   */\n  get minutes() {\n    return this.isValid ? this.values.minutes || 0 : NaN;\n  }\n\n  /**\n   * Get the seconds.\n   * @return {number}\n   */\n  get seconds() {\n    return this.isValid ? this.values.seconds || 0 : NaN;\n  }\n\n  /**\n   * Get the milliseconds.\n   * @return {number}\n   */\n  get milliseconds() {\n    return this.isValid ? this.values.milliseconds || 0 : NaN;\n  }\n\n  /**\n   * Returns whether the Duration is invalid. Invalid durations are returned by diff operations\n   * on invalid DateTimes or Intervals.\n   * @return {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an explanation of why this Duration became invalid, or null if the Duration is valid\n   * @return {string}\n   */\n  get invalidReason() {\n    return this.invalidReason;\n  }\n\n  /**\n   * Equality check\n   * Two Durations are equal iff they have the same units and the same values for each unit.\n   * @param {Duration} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    for (const u of orderedUnits) {\n      if (this.values[u] !== other.values[u]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { Util } from './impl/util';\nimport { DateTime } from './datetime';\nimport { Duration } from './duration';\nimport { Settings } from './settings';\nimport { InvalidArgumentError, InvalidIntervalError } from './errors';\n\nconst INVALID = 'Invalid Interval';\n\nfunction validateStartEnd(start, end) {\n  return !!start && !!end && start.isValid && end.isValid && start <= end;\n}\n\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link fromDateTimes}, {@link after}, {@link before}, or {@link fromISO}.\n * * **Accessors** Use {@link start} and {@link end} to get the start and end.\n * * **Interogation** To analyze the Interval, use {@link count}, {@link length}, {@link hasSame}, {@link contains}, {@link isAfter}, or {@link isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link set}, {@link splitAt}, {@link splitBy}, {@link divideEqually}, {@link merge}, {@link xor}, {@link union}, {@link intersection}, or {@link difference}.\n * * **Comparison** To compare this Interval to another one, use {@link equals}, {@link overlaps}, {@link abutsStart}, {@link abutsEnd}, {@link engulfs}\n * * **Output*** To convert the Interval into other representations, see {@link toString}, {@link toISO}, {@link toFormat}, and {@link toDuration}.\n */\nexport class Interval {\n  /**\n   * @private\n   */\n  constructor(config) {\n    Object.defineProperty(this, 's', { value: config.start, enumerable: true });\n    Object.defineProperty(this, 'e', { value: config.end, enumerable: true });\n    Object.defineProperty(this, 'invalidReason', {\n      value: config.invalidReason || null,\n      enumerable: false\n    });\n  }\n\n  /**\n   * Create an invalid Interval.\n   * @return {Interval}\n   */\n  static invalid(reason) {\n    if (!reason) {\n      throw new InvalidArgumentError('need to specify a reason the DateTime is invalid');\n    }\n    if (Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(reason);\n    } else {\n      return new Interval({ invalidReason: reason });\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|object|Date} start\n   * @param {DateTime|object|Date} end\n   * @return {Interval}\n   */\n  static fromDateTimes(start, end) {\n    const builtStart = Util.friendlyDateTime(start),\n      builtEnd = Util.friendlyDateTime(end);\n\n    return new Interval({\n      start: builtStart,\n      end: builtEnd,\n      invalidReason: validateStartEnd(builtStart, builtEnd) ? null : 'invalid endpoints'\n    });\n  }\n\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|object|Date} start\n   * @param {Duration|number|object} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static after(start, duration) {\n    const dur = Util.friendlyDuration(duration),\n      dt = Util.friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|object|Date} end\n   * @param {Duration|number|object} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static before(end, duration) {\n    const dur = Util.friendlyDuration(duration),\n      dt = Util.friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n\n  /**\n   * Create an Interval from an ISO 8601 string\n   * @param {string} string - the ISO string to parse\n   * @param {object} opts - options to pass {@see DateTime.fromISO}\n   * @return {Interval}\n   */\n  static fromISO(string, opts) {\n    if (string) {\n      const [s, e] = string.split(/\\//);\n      if (s && e) {\n        return Interval.fromDateTimes(DateTime.fromISO(s, opts), DateTime.fromISO(e, opts));\n      }\n    }\n    return Interval.invalid('invalid ISO format');\n  }\n\n  /**\n   * Returns the start of the Interval\n   * @return {DateTime}\n   */\n  get start() {\n    return this.isValid ? this.s : null;\n  }\n\n  /**\n   * Returns the end of the Interval\n   * @return {DateTime}\n   */\n  get end() {\n    return this.isValid ? this.e : null;\n  }\n\n  /**\n   * Returns whether this Interval's end is at least its start, i.e. that the Interval isn't 'backwards'.\n   * @return {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n   * @return {string}\n   */\n  get invalidReason() {\n    return this.invalidReason;\n  }\n\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n   * @return {number}\n   */\n  length(unit = 'milliseconds') {\n    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;\n  }\n\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\n   * @return {number}\n   */\n  count(unit = 'milliseconds') {\n    if (!this.isValid) return NaN;\n    const start = this.start.startOf(unit),\n      end = this.end.startOf(unit);\n    return Math.floor(end.diff(start, unit).get(unit)) + 1;\n  }\n\n  /**\n   * Returns whether this Interval's start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */\n  hasSame(unit) {\n    return this.isValid ? this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */\n  isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n\n  /**\n   * Return this Interval's start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n\n  /**\n   * Return this Interval's end is before the specified DateTime.\n   * @param {Datetime} dateTime\n   * @return {boolean}\n   */\n  isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e.plus(1) < dateTime;\n  }\n\n  /**\n   * Return this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n\n  /**\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */\n  set({ start, end } = {}) {\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...DateTimes} dateTimes - the unit of time to count.\n   * @return {[Interval]}\n   */\n  splitAt(...dateTimes) {\n    if (!this.isValid) return [];\n    const sorted = dateTimes.map(Util.friendlyDateTime).sort(),\n      results = [];\n    let { s } = this,\n      i = 0;\n\n    while (s < this.e) {\n      const added = sorted[i] || this.e,\n        next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|number|object} duration - The length of each resulting interval.\n   * @return {[Interval]}\n   */\n  splitBy(duration) {\n    if (!this.isValid) return [];\n    const dur = Util.friendlyDuration(duration),\n      results = [];\n    let { s } = this,\n      added,\n      next;\n\n    while (s < this.e) {\n      added = s.plus(dur);\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {[Interval]}\n   */\n  divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n\n  /**\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n\n  /**\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n\n  /**\n   * Return whether this Interval engulfs the start and end of the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  equals(other) {\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  intersection(other) {\n    if (!this.isValid) return this;\n    const s = this.s > other.s ? this.s : other.s,\n      e = this.e < other.e ? this.e : other.e;\n\n    if (s > e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  union(other) {\n    if (!this.isValid) return this;\n    const s = this.s < other.s ? this.s : other.s,\n      e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n\n  /**\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * @param {[Interval]} intervals\n   * @return {[Interval]}\n   */\n  static merge(intervals) {\n    const [found, final] = intervals.sort((a, b) => a.s - b.s).reduce(([sofar, current], item) => {\n      if (!current) {\n        return [sofar, item];\n      } else if (current.overlaps(item) || current.abutsStart(item)) {\n        return [sofar, current.union(item)];\n      } else {\n        return [sofar.concat([current]), item];\n      }\n    },\n    [[], null]);\n    if (final) {\n      found.push(final);\n    }\n    return found;\n  }\n\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {[Interval]} intervals\n   * @return {[Interval]}\n   */\n  static xor(intervals) {\n    let start = null,\n      currentCount = 0;\n    const results = [],\n      ends = intervals.map(i => [{ time: i.s, type: 's' }, { time: i.e, type: 'e' }]),\n      arr = Util.flatten(ends).sort((a, b) => a.time - b.time);\n\n    for (const i of arr) {\n      currentCount += i.type === 's' ? 1 : -1;\n\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n\n        start = null;\n      }\n    }\n\n    return Interval.merge(results);\n  }\n\n  /**\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {Interval}\n   */\n  difference(...intervals) {\n    return Interval.xor([this].concat(intervals))\n      .map(i => this.intersection(i))\n      .filter(i => i && !i.isEmpty());\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */\n  toString() {\n    if (!this.isValid) return INVALID;\n    return `[${this.s.toISO()} – ${this.e.toISO()})`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {object} opts - The same options as {@link DateTime.toISO}\n   * @return {string}\n   */\n  toISO(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format string.\n   * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime.toFormat} for details.\n   * @param {object} opts - options\n   * @param {string} [opts.separator =  ' – '] - a separator to place between the start and end representations\n   * @return {string}\n   */\n  toFormat(dateFormat, { separator = ' – ' } = {}) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;\n  }\n\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */\n  toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n    return this.e.diff(this.s, unit, opts);\n  }\n}\n","import { Util } from './util';\nimport { Formatter } from './formatter';\nimport { FixedOffsetZone } from '../zones/fixedOffsetZone';\nimport { IANAZone } from '../zones/IANAZone';\n\nfunction intUnit(regex, post = i => i) {\n  return { regex, deser: ([s]) => post(parseInt(s, 10)) };\n}\n\nfunction oneOf(strings, startIndex) {\n  return {\n    regex: RegExp(strings.join('|')),\n    deser: ([s]) => strings.indexOf(s) + startIndex\n  };\n}\n\nfunction offset(regex, groups) {\n  return { regex, deser: ([, h, m]) => Util.signedOffset(h, m), groups };\n}\n\nfunction simple(regex) {\n  return { regex, deser: ([s]) => s };\n}\n\nfunction unitForToken(token, loc) {\n  const one = /\\d/,\n    two = /\\d\\d/,\n    three = /\\d{3}/,\n    four = /\\d{4}/,\n    oneOrTwo = /\\d\\d?/,\n    oneToThree = /\\d\\d{2}?/,\n    twoToFour = /\\d\\d\\d{2}?/,\n    literal = t => ({ regex: RegExp(t.val), deser: ([s]) => s, literal: true }),\n    unitate = t => {\n      if (token.literal) {\n        return literal(t);\n      }\n\n      switch (t.val) {\n        // era\n        case 'G':\n          return oneOf(loc.eras('short'), 0);\n        case 'GG':\n          return oneOf(loc.eras('long'), 0);\n        // years\n        case 'yyyy':\n          return intUnit(four);\n        case 'yy':\n          return intUnit(twoToFour, Util.untruncateYear);\n        // months\n        case 'M':\n          return intUnit(oneOrTwo);\n        case 'MM':\n          return intUnit(two);\n        case 'MMM':\n          return oneOf(loc.months('short', true), 1);\n        case 'MMMM':\n          return oneOf(loc.months('long', true), 1);\n        case 'L':\n          return intUnit(oneOrTwo);\n        case 'LL':\n          return intUnit(two);\n        case 'LLL':\n          return oneOf(loc.months('short', false), 1);\n        case 'LLLL':\n          return oneOf(loc.months('long', false), 1);\n        // dates\n        case 'd':\n          return intUnit(oneOrTwo);\n        case 'dd':\n          return intUnit(two);\n        // ordinals\n        case 'o':\n          return intUnit(oneToThree);\n        case 'ooo':\n          return intUnit(three);\n        // time\n        case 'HH':\n          return intUnit(two);\n        case 'H':\n          return intUnit(oneOrTwo);\n        case 'hh':\n          return intUnit(two);\n        case 'h':\n          return intUnit(oneOrTwo);\n        case 'mm':\n          return intUnit(two);\n        case 'm':\n          return intUnit(oneOrTwo);\n        case 's':\n          return intUnit(oneOrTwo);\n        case 'ss':\n          return intUnit(two);\n        case 'S':\n          return intUnit(oneToThree);\n        case 'SSS':\n          return intUnit(three);\n        // meridiem\n        case 'a':\n          return oneOf(loc.meridiems(), 0);\n        // weekYear (k)\n        case 'kkkk':\n          return intUnit(four);\n        case 'kk':\n          return intUnit(twoToFour, Util.untruncateYear);\n        // weekNumber (W)\n        case 'W':\n          return intUnit(oneOrTwo);\n        case 'WW':\n          return intUnit(two);\n        // weekdays\n        case 'E':\n        case 'c':\n          return intUnit(one);\n        case 'EEE':\n          return oneOf(loc.weekdays('short', true), 1);\n        case 'EEEE':\n          return oneOf(loc.weekdays('long', true), 1);\n        case 'ccc':\n          return oneOf(loc.weekdays('short', false), 1);\n        case 'cccc':\n          return oneOf(loc.weekdays('long', false), 1);\n        // offset/zone\n        case 'Z':\n        case 'ZZ':\n          return offset(/([+-]\\d{1,2})(?::(\\d{2}))?/, 2);\n        case 'ZZZ':\n          return offset(/([+-]\\d{1,2})(\\d{2})?/, 2);\n        // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing\n        // because we don't have any way to figure out what they are\n        case 'z':\n          return simple(/[A-Za-z_]+\\/[A-Za-z_]+/);\n        default:\n          return literal(t);\n      }\n    },\n    unit = unitate(token);\n  unit.token = token;\n  return unit;\n}\n\nfunction buildRegex(units) {\n  return [units.map(u => u.regex).reduce((f, r) => `${f}(${r.source})`, ''), units];\n}\n\nfunction match(input, regex, handlers) {\n  const matches = input.match(regex);\n\n  if (matches) {\n    const all = {};\n    let matchIndex = 1;\n    for (const i in handlers) {\n      if (handlers.hasOwnProperty(i)) {\n        const h = handlers[i],\n          groups = h.groups ? h.groups + 1 : 1;\n        if (!h.literal && h.token) {\n          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));\n        }\n        matchIndex += groups;\n      }\n    }\n    return all;\n  } else {\n    return {};\n  }\n}\n\nfunction dateTimeFromMatches(matches) {\n  const toField = token => {\n    switch (token) {\n      case 'S':\n        return 'millisecond';\n      case 's':\n        return 'second';\n      case 'm':\n        return 'minute';\n      case 'h':\n      case 'H':\n        return 'hour';\n      case 'd':\n        return 'day';\n      case 'o':\n        return 'ordinal';\n      case 'L':\n      case 'M':\n        return 'month';\n      case 'y':\n        return 'year';\n      case 'E':\n      case 'c':\n        return 'weekday';\n      case 'W':\n        return 'weekNumber';\n      case 'k':\n        return 'weekYear';\n      default:\n        return null;\n    }\n  };\n\n  let zone;\n  if (!Util.isUndefined(matches.Z)) {\n    zone = new FixedOffsetZone(matches.Z);\n  } else if (!Util.isUndefined(matches.z)) {\n    zone = new IANAZone(matches.z);\n  } else {\n    zone = null;\n  }\n\n  if (!Util.isUndefined(matches.h) && matches.a === 1) {\n    matches.h += 12;\n  }\n\n  if (matches.G === 0 && matches.y) {\n    matches.y = -matches.y;\n  }\n\n  const vals = Object.keys(matches).reduce((r, k) => {\n    const f = toField(k);\n    if (f) {\n      r[f] = matches[k];\n    }\n\n    return r;\n  }, {});\n\n  return [vals, zone];\n}\n\n/**\n * @private\n */\n\nexport class TokenParser {\n  constructor(loc) {\n    Object.defineProperty(this, 'loc', { value: loc, enumerable: true });\n  }\n\n  explainParse(input, format) {\n    const tokens = Formatter.parseFormat(format),\n      units = tokens.map(t => unitForToken(t, this.loc)),\n      [regex, handlers] = buildRegex(units),\n      matches = match(input, regex, handlers),\n      [result, zone] = matches ? dateTimeFromMatches(matches) : [null, null];\n\n    return { input, tokens, regex, matches, result, zone };\n  }\n\n  parseDateTime(input, format) {\n    const { result, zone } = this.explainParse(input, format);\n    return [result, zone];\n  }\n}\n","import { Util } from './util';\n\nconst nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],\n  leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];\n\nfunction dayOfWeek(year, month, day) {\n  const js = new Date(Date.UTC(year, month - 1, day)).getUTCDay();\n  return js === 0 ? 7 : js;\n}\n\nfunction lastWeekNumber(weekYear) {\n  const p1 = (weekYear +\n    Math.floor(weekYear / 4) -\n    Math.floor(weekYear / 100) +\n    Math.floor(weekYear / 400)) %\n    7,\n    last = weekYear - 1,\n    p2 = (last +\n      Math.floor(last / 4) -\n      Math.floor(last / 100) +\n      Math.floor(last / 400)) %\n      7;\n  return p1 === 4 || p2 === 3 ? 53 : 52;\n}\n\nfunction computeOrdinal(year, month, day) {\n  return day + (Util.isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];\n}\n\nfunction uncomputeOrdinal(year, ordinal) {\n  const table = Util.isLeapYear(year) ? leapLadder : nonLeapLadder,\n    month0 = table.findIndex(i => i < ordinal),\n    day = ordinal - table[month0];\n  return { month: month0 + 1, day };\n}\n\n/**\n * @private\n */\n\nexport class Conversions {\n  static gregorianToWeek(gregObj) {\n    const { year, month, day } = gregObj,\n      ordinal = computeOrdinal(year, month, day),\n      weekday = dayOfWeek(year, month, day);\n\n    let weekNumber = Math.floor((ordinal - weekday + 10) / 7), weekYear;\n\n    if (weekNumber < 1) {\n      weekYear = year - 1;\n      weekNumber = lastWeekNumber(weekYear);\n    } else if (weekNumber > lastWeekNumber(year)) {\n      weekYear = year + 1;\n      weekNumber = 1;\n    } else {\n      weekYear = year;\n    }\n\n    return Object.assign(\n      { weekYear, weekNumber, weekday },\n      Util.timeObject(gregObj)\n    );\n  }\n\n  static weekToGregorian(weekData) {\n    const { weekYear, weekNumber, weekday } = weekData,\n      weekdayOfJan4 = dayOfWeek(weekYear, 1, 4),\n      daysInYear = Util.daysInYear(weekYear);\n    let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3, year;\n\n    if (ordinal < 1) {\n      year = weekYear - 1;\n      ordinal += Util.daysInYear(year);\n    } else if (ordinal > daysInYear) {\n      year = weekYear + 1;\n      ordinal -= Util.daysInYear(year);\n    } else {\n      year = weekYear;\n    }\n\n    const { month, day } = uncomputeOrdinal(year, ordinal);\n\n    return Object.assign({ year, month, day }, Util.timeObject(weekData));\n  }\n\n  static gregorianToOrdinal(gregData) {\n    const { year, month, day } = gregData,\n      ordinal = computeOrdinal(year, month, day);\n\n    return Object.assign({ year, ordinal }, Util.timeObject(gregData));\n  }\n\n  static ordinalToGregorian(ordinalData) {\n    const { year, ordinal } = ordinalData,\n      { month, day } = uncomputeOrdinal(year, ordinal);\n\n    return Object.assign({ year, month, day }, Util.timeObject(ordinalData));\n  }\n\n  static hasInvalidWeekData(obj) {\n    const validYear = Util.isNumber(obj.weekYear),\n      validWeek = Util.numberBetween(\n        obj.weekNumber,\n        1,\n        lastWeekNumber(obj.weekYear)\n      ),\n      validWeekday = Util.numberBetween(obj.weekday, 1, 7);\n\n    if (!validYear) {\n      return 'weekYear out of range';\n    } else if (!validWeek) {\n      return 'week out of range';\n    } else if (!validWeekday) {\n      return 'weekday out of range';\n    } else\n      return false;\n  }\n\n  static hasInvalidOrdinalData(obj) {\n    const validYear = Util.isNumber(obj.year),\n      validOrdinal = Util.numberBetween(\n        obj.ordinal,\n        1,\n        Util.daysInYear(obj.year)\n      );\n\n    if (!validYear) {\n      return 'year out of range';\n    } else if (!validOrdinal) {\n      return 'ordinal out of range';\n    } else\n      return false;\n  }\n\n  static hasInvalidGregorianData(obj) {\n    const validYear = Util.isNumber(obj.year),\n      validMonth = Util.numberBetween(obj.month, 1, 12),\n      validDay = Util.numberBetween(\n        obj.day,\n        1,\n        Util.daysInMonth(obj.year, obj.month)\n      );\n\n    if (!validYear) {\n      return 'year out of range';\n    } else if (!validMonth) {\n      return 'month out of range';\n    } else if (!validDay) {\n      return 'day out of range';\n    } else\n      return false;\n  }\n\n  static hasInvalidTimeData(obj) {\n    const validHour = Util.numberBetween(obj.hour, 0, 23),\n      validMinute = Util.numberBetween(obj.minute, 0, 59),\n      validSecond = Util.numberBetween(obj.second, 0, 59),\n      validMillisecond = Util.numberBetween(obj.millisecond, 0, 999);\n\n    if (!validHour) {\n      return 'hour out of range';\n    } else if (!validMinute) {\n      return 'minute out of range';\n    } else if (!validSecond) {\n      return 'second out of range';\n    } else if (!validMillisecond) {\n      return 'millisecond out of range';\n    } else\n      return false;\n  }\n}\n","import { Duration } from './duration';\nimport { Interval } from './interval';\nimport { Settings } from './settings';\nimport { Formatter } from './impl/formatter';\nimport { FixedOffsetZone } from './zones/fixedOffsetZone';\nimport { LocalZone } from './zones/localZone';\nimport { Locale } from './impl/locale';\nimport { Util } from './impl/util';\nimport { RegexParser } from './impl/regexParser';\nimport { TokenParser } from './impl/tokenParser';\nimport { Conversions } from './impl/conversions';\nimport {\n  InvalidArgumentError,\n  ConflictingSpecificationError,\n  InvalidUnitError,\n  InvalidDateTimeError\n} from './errors';\n\nconst INVALID = 'Invalid DateTime', UNSUPPORTED_ZONE = 'unsupported zone';\n\nfunction possiblyCachedWeekData(dt) {\n  if (dt.weekData === null) {\n    dt.weekData = Conversions.gregorianToWeek(dt.c);\n  }\n  return dt.weekData;\n}\n\nfunction clone(inst, alts = {}) {\n  const current = {\n    ts: inst.ts,\n    zone: inst.zone,\n    c: inst.c,\n    o: inst.o,\n    loc: inst.loc,\n    invalidReason: inst.invalidReason\n  };\n  return new DateTime(Object.assign({}, current, alts, { old: current }));\n}\n\nfunction fixOffset(localTS, o, tz) {\n  // Our UTC time is just a guess because our offset is just a guess\n  let utcGuess = localTS - o * 60 * 1000;\n\n  // Test whether the zone matches the offset for this ts\n  const o2 = tz.offset(utcGuess);\n\n  // If so, offset didn't change and we're done\n  if (o === o2) {\n    return [utcGuess, o];\n  }\n\n  // If not, change the ts by the difference in the offset\n  utcGuess -= (o2 - o) * 60 * 1000;\n\n  // If that gives us the local time we want, we're done\n  const o3 = tz.offset(utcGuess);\n  if (o2 === o3) {\n    return [utcGuess, o2];\n  }\n\n  // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time\n  return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];\n}\n\nfunction tsToObj(ts, offset) {\n  ts += offset * 60 * 1000;\n\n  const d = new Date(ts);\n\n  return {\n    year: d.getUTCFullYear(),\n    month: d.getUTCMonth() + 1,\n    day: d.getUTCDate(),\n    hour: d.getUTCHours(),\n    minute: d.getUTCMinutes(),\n    second: d.getUTCSeconds(),\n    millisecond: d.getUTCMilliseconds()\n  };\n}\n\nfunction objToLocalTS(obj) {\n  let d = Date.UTC(\n    obj.year,\n    obj.month - 1,\n    obj.day,\n    obj.hour,\n    obj.minute,\n    obj.second,\n    obj.millisecond\n  );\n\n  // javascript is stupid and i hate it\n  if (obj.year < 100 && obj.year >= 0) {\n    d = new Date(d);\n    d.setFullYear(obj.year);\n  }\n  return +d;\n}\n\nfunction objToTS(obj, offset, zone) {\n  return fixOffset(objToLocalTS(obj), offset, zone);\n}\n\nfunction adjustTime(inst, dur) {\n  const oPre = inst.o,\n    c = Object.assign({}, inst.c, {\n      year: inst.c.year + dur.years,\n      month: inst.c.month + dur.months,\n      day: inst.c.day + dur.days + dur.weeks * 7\n    }),\n    millisToAdd = Duration.fromObject({\n      hours: dur.hours,\n      minutes: dur.minutes,\n      seconds: dur.seconds,\n      milliseconds: dur.milliseconds\n    }).as('milliseconds'),\n    localTS = objToLocalTS(c);\n\n  let [ts, o] = fixOffset(localTS, oPre, inst.zone);\n\n  if (millisToAdd !== 0) {\n    ts += millisToAdd;\n    // that could have changed the offset by going over a DST, but we want to keep the ts the same\n    o = inst.zone.offset(ts);\n  }\n\n  return { ts, o };\n}\n\nfunction parseDataToDateTime(parsed, parsedZone, opts = {}) {\n  const { setZone, zone } = opts;\n  if (parsed && Object.keys(parsed).length !== 0) {\n    const interpretationZone = parsedZone || zone,\n      inst = DateTime.fromObject(\n        Object.assign(parsed, opts, {\n          zone: interpretationZone\n        })\n      );\n    return setZone ? inst : inst.setZone(zone);\n  } else {\n    return DateTime.invalid(UNSUPPORTED_ZONE);\n  }\n}\n\nfunction formatMaybe(dt, format) {\n  return dt.isValid\n    ? Formatter.create(Locale.create('en')).formatDateTimeFromString(dt, format)\n    : null;\n}\n\nconst defaultUnitValues = {\n  month: 1,\n  day: 1,\n  hour: 0,\n  minute: 0,\n  second: 0,\n  millisecond: 0\n},\n  defaultWeekUnitValues = {\n    weekNumber: 1,\n    weekday: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  },\n  defaultOrdinalUnitValues = {\n    ordinal: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  };\n\nfunction isoTimeFormat(dateTime, suppressSecs, suppressMillis) {\n  return suppressSecs && dateTime.second === 0 && dateTime.millisecond === 0\n    ? 'HH:mmZ'\n    : suppressMillis && dateTime.millisecond === 0\n        ? 'HH:mm:ssZZ'\n        : 'HH:mm:ss.SSSZZ';\n}\n\nconst orderedUnits = [\n  'year',\n  'month',\n  'day',\n  'hour',\n  'minute',\n  'second',\n  'millisecond'\n];\n\nconst orderedWeekUnits = [\n  'weekYear',\n  'weekNumber',\n  'weekday',\n  'hour',\n  'minute',\n  'second',\n  'millisecond'\n];\n\nconst orderedOrdinalUnits = [\n  'year',\n  'ordinal',\n  'hour',\n  'minute',\n  'second',\n  'millisecond'\n];\n\nfunction normalizeUnit(unit, ignoreUnknown = false) {\n  const normalized = {\n    year: 'year',\n    years: 'year',\n    month: 'month',\n    months: 'month',\n    day: 'day',\n    days: 'day',\n    hour: 'hour',\n    hours: 'hour',\n    minute: 'minute',\n    minutes: 'minute',\n    second: 'second',\n    seconds: 'second',\n    millisecond: 'millisecond',\n    milliseconds: 'millisecond',\n    weekday: 'weekday',\n    weekdays: 'weekday',\n    weeknumber: 'weekNumber',\n    weeksnumber: 'weekNumber',\n    weeknumbers: 'weekNumber',\n    weekyear: 'weekYear',\n    weekyears: 'weekYear',\n    ordinal: 'ordinal'\n  }[unit ? unit.toLowerCase() : unit];\n\n  if (!ignoreUnknown && !normalized) throw new InvalidUnitError(unit);\n\n  return normalized;\n}\n\n/**\n * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.\n *\n * A DateTime comprises of:\n * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.\n * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).\n * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.\n *\n * Here is a brief overview of the most commonly used functionality it provides:\n *\n * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link local}, {@link utc}, and (most flexibly) {@link fromObject}. To create one from a standard string format, use {@link fromISO}, {@link fromHTTP}, and {@link fromRFC2822}. To create one from a custom string format, use {@link fromString}. To create one from a native JS date, use {@link fromJSDate}.\n * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link toObject}), use the {@link year}, {@link month},\n * {@link day}, {@link hour}, {@link minute}, {@link second}, {@link millisecond} accessors.\n * * **Week calendar**: For ISO week calendar attributes, see the {@link weekYear}, {@link weekNumber}, and {@link weekday} accessors.\n * * **Configuration** See the {@link locale} and {@link numberingSystem} accessors.\n * * **Transformation**: To transform the DateTime into other DateTimes, use {@link set}, {@link reconfigure}, {@link setZone}, {@link setLocale}, {@link plus}, {@link minus}, {@link endOf}, {@link startOf}, {@link toUTC}, and {@link toLocal}.\n * * **Output**: To convert the DateTime to other representations, use the {@link toJSON}, {@link toISO}, {@link toHTTP}, {@link toObject}, {@link toRFC2822}, {@link toString}, {@link toLocaleString}, {@link toFormat}, and {@link valueOf}.\n *\n * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.\n */\nexport class DateTime {\n  /**\n   * @access private\n   */\n  constructor(config = {}) {\n    const zone = config.zone || Settings.defaultZone,\n      invalidReason = config.invalidReason ||\n        (zone.isValid ? null : UNSUPPORTED_ZONE);\n\n    Object.defineProperty(this, 'ts', {\n      value: config.ts || Settings.now(),\n      enumerable: true\n    });\n\n    Object.defineProperty(this, 'zone', {\n      value: zone,\n      enumerable: true\n    });\n\n    Object.defineProperty(this, 'loc', {\n      value: config.loc || Locale.create(),\n      enumerable: true\n    });\n\n    Object.defineProperty(this, 'invalidReason', {\n      value: invalidReason,\n      enumerable: false\n    });\n\n    Object.defineProperty(this, 'weekData', {\n      writable: true, // !!!\n      value: null,\n      enumerable: false\n    });\n\n    if (!invalidReason) {\n      const unchanged = config.old &&\n        config.old.ts === this.ts &&\n        config.old.zone.equals(this.zone),\n        c = unchanged\n          ? config.old.c\n          : tsToObj(this.ts, this.zone.offset(this.ts)),\n        o = unchanged ? config.old.o : this.zone.offset(this.ts);\n\n      Object.defineProperty(this, 'c', { value: c });\n      Object.defineProperty(this, 'o', { value: o });\n    }\n  }\n\n  // CONSTRUCT\n\n  /**\n   * Create a local DateTime\n   * @param {number} year - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, i.e. a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, i.e. a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, i.e. a number between 0 and 999\n   * @example DateTime.local()                            //~> now\n   * @example DateTime.local(2017)                        //~> 2017-01-01T00:00:00\n   * @example DateTime.local(2017, 3)                     //~> 2017-03-01T00:00:00\n   * @example DateTime.local(2017, 3, 12)                 //~> 2017-03-12T00:00:00\n   * @example DateTime.local(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00\n   * @example DateTime.local(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.675\n   * @return {DateTime}\n   */\n  static local(year, month, day, hour, minute, second, millisecond) {\n    if (Util.isUndefined(year)) {\n      return new DateTime({ ts: Settings.now() });\n    } else {\n      return DateTime.fromObject({\n        year,\n        month,\n        day,\n        hour,\n        minute,\n        second,\n        millisecond,\n        zone: Settings.defaultZone\n      });\n    }\n  }\n\n  /**\n   * Create a DateTime in UTC\n   * @param {number} year - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, i.e. a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, i.e. a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, i.e. a number between 0 and 999\n   * @example DateTime.utc()                            //~> now\n   * @example DateTime.utc(2017)                        //~> 2017-01-01T00:00:00Z\n   * @example DateTime.utc(2017, 3)                     //~> 2017-03-01T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12)                 //~> 2017-03-12T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.675Z\n   * @return {DateTime}\n   */\n  static utc(year, month, day, hour, minute, second, millisecond) {\n    if (Util.isUndefined(year)) {\n      return new DateTime({\n        ts: Settings.now(),\n        zone: FixedOffsetZone.utcInstance\n      });\n    } else {\n      return DateTime.fromObject({\n        year,\n        month,\n        day,\n        hour,\n        minute,\n        second,\n        millisecond,\n        zone: FixedOffsetZone.utcInstance\n      });\n    }\n  }\n\n  /**\n   * Create an DateTime from a Javascript Date object. Uses the default zone.\n   * @param {Date|Any} date - a Javascript Date object\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @return {DateTime}\n   */\n  static fromJSDate(date, options = {}) {\n    return new DateTime({\n      ts: new Date(date).valueOf(),\n      zone: Util.normalizeZone(options.zone),\n      loc: Locale.fromObject(options)\n    });\n  }\n\n  /**\n   * Create an DateTime from a count of epoch milliseconds. Uses the default zone.\n   * @param {number} milliseconds - a number of milliseconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @param {string} [options.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromMillis(milliseconds, options = {}) {\n    return new DateTime({\n      ts: milliseconds,\n      zone: Util.normalizeZone(options.zone),\n      loc: Locale.fromObject(options)\n    });\n  }\n\n  /**\n   * Create an DateTime from a Javascript object with keys like 'year' and 'hour' with reasonable defaults.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.year - a year, such as 1987\n   * @param {number} obj.month - a month, 1-12\n   * @param {number} obj.day - a day of the month, 1-31, depending on the month\n   * @param {number} obj.ordinal - day of the year, 1-365 or 366\n   * @param {number} obj.weekYear - an ISO week year\n   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year\n   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday\n   * @param {number} obj.hour - hour of the day, 0-23\n   * @param {number} obj.minute - minute of the hour, 0-59\n   * @param {number} obj.second - second of the minute, 0-59\n   * @param {number} obj.millisecond - millisecond of the second, 0-999\n   * @param {string|Zone} [obj.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()\n   * @param {string} [obj.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} obj.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} obj.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'\n   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01T00'\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'utc' }),\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'local' })\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'America/New_York' })\n   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'\n   * @return {DateTime}\n   */\n  static fromObject(obj) {\n    const zoneToUse = Util.normalizeZone(obj.zone);\n    if (!zoneToUse.isValid) {\n      return DateTime.invalid(UNSUPPORTED_ZONE);\n    }\n\n    const tsNow = Settings.now(),\n      offsetProvis = zoneToUse.offset(tsNow),\n      normalized = Util.normalizeObject(obj, normalizeUnit, true),\n      containsOrdinal = !Util.isUndefined(normalized.ordinal),\n      containsGregorYear = !Util.isUndefined(normalized.year),\n      containsGregorMD = !Util.isUndefined(normalized.month) ||\n        !Util.isUndefined(normalized.day),\n      containsGregor = containsGregorYear || containsGregorMD,\n      definiteWeekDef = normalized.weekYear || normalized.weekNumber,\n      loc = Locale.fromObject(obj);\n\n    // cases:\n    // just a weekday -> this week's instance of that weekday, no worries\n    // (gregorian data or ordinal) + (weekYear or weekNumber) -> error\n    // (gregorian month or day) + ordinal -> error\n    // otherwise just use weeks or ordinals or gregorian, depending on what's specified\n\n    if ((containsGregor || containsOrdinal) && definiteWeekDef) {\n      throw new ConflictingSpecificationError(\n        \"Can't mix weekYear/weekNumber units with year/month/day or ordinals\"\n      );\n    }\n\n    if (containsGregorMD && containsOrdinal) {\n      throw new ConflictingSpecificationError(\n        \"Can't mix ordinal dates with month/day\"\n      );\n    }\n\n    const useWeekData = definiteWeekDef ||\n      (normalized.weekday && !containsGregor);\n\n    // configure ourselves to deal with gregorian dates or week stuff\n    let units, defaultValues, objNow = tsToObj(tsNow, offsetProvis);\n    if (useWeekData) {\n      units = orderedWeekUnits;\n      defaultValues = defaultWeekUnitValues;\n      objNow = Conversions.gregorianToWeek(objNow);\n    } else if (containsOrdinal) {\n      units = orderedOrdinalUnits;\n      defaultValues = defaultOrdinalUnitValues;\n      objNow = Conversions.gregorianToOrdinal(objNow);\n    } else {\n      units = orderedUnits;\n      defaultValues = defaultUnitValues;\n    }\n\n    // set default values for missing stuff\n    let foundFirst = false;\n    for (const u of units) {\n      const v = normalized[u];\n      if (!Util.isUndefined(v)) {\n        foundFirst = true;\n      } else if (foundFirst) {\n        normalized[u] = defaultValues[u];\n      } else {\n        normalized[u] = objNow[u];\n      }\n    }\n\n    // make sure the values we have are in range\n    const higherOrderInvalid = useWeekData\n      ? Conversions.hasInvalidWeekData(normalized)\n      : containsOrdinal\n          ? Conversions.hasInvalidOrdinalData(normalized)\n          : Conversions.hasInvalidGregorianData(normalized),\n      invalidReason = higherOrderInvalid ||\n        Conversions.hasInvalidTimeData(normalized);\n\n    if (invalidReason) {\n      return DateTime.invalid(invalidReason);\n    }\n\n    // compute the actual time\n    const gregorian = useWeekData\n      ? Conversions.weekToGregorian(normalized)\n      : containsOrdinal\n          ? Conversions.ordinalToGregorian(normalized)\n          : normalized,\n      [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse),\n      inst = new DateTime({\n        ts: tsFinal,\n        zone: zoneToUse,\n        o: offsetFinal,\n        loc\n      });\n\n    // gregorian data + weekday serves only to validate\n    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {\n      return DateTime.invalid('mismatched weekday');\n    }\n\n    return inst;\n  }\n\n  /**\n   * Create a DateTime from an ISO 8601 string\n   * @param {string} text - the ISO string\n   * @param {Object} opts - options to affect the creation\n   * @param {boolean} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc')\n   * @example DateTime.fromISO('2016-W05-4')\n   * @return {DateTime}\n   */\n  static fromISO(text, opts = {}) {\n    const [vals, parsedZone] = RegexParser.parseISODate(text);\n    return parseDataToDateTime(vals, parsedZone, opts);\n  }\n\n  /**\n   * Create a DateTime from an RFC 2822 string\n   * @param {string} text - the RFC 2822 string\n   * @param {Object} opts - options to affect the creation\n   * @param {boolean} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')\n   * @example DateTime.fromRFC2822('Tue, 25 Nov 2016 13:23:12 +0600')\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')\n   * @return {DateTime}\n   */\n  static fromRFC2822(text, opts = {}) {\n    const [vals, parsedZone] = RegexParser.parseRFC2822Date(text);\n    return parseDataToDateTime(vals, parsedZone, opts);\n  }\n\n  /**\n   * Create a DateTime from an HTTP header date\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @param {string} text - the HTTP header date\n   * @param {object} options - options to affect the creation\n   * @param {boolean} [options.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [options.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.\n   * @param {string} [options.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')\n   * @return {DateTime}\n   */\n  static fromHTTP(text, options = {}) {\n    const [vals, parsedZone] = RegexParser.parseHTTPDate(text);\n    return parseDataToDateTime(vals, parsedZone, options);\n  }\n\n  /**\n   * Create a DateTime from an input string and format string\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see description)\n   * @param {Object} options - options to affect the creation\n   * @param {boolean} [options.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [options.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [options.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} options.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromString(text, fmt, options = {}) {\n    const { locale = null, numberingSystem = null } = options,\n      parser = new TokenParser(Locale.fromOpts({ locale, numberingSystem })),\n      [vals, parsedZone] = parser.parseDateTime(text, fmt);\n    return parseDataToDateTime(vals, parsedZone, options);\n  }\n\n  /**\n   * Create an invalid DateTime.\n   * @return {DateTime}\n   */\n  static invalid(reason) {\n    if (!reason) {\n      throw new InvalidArgumentError(\n        'need to specify a reason the DateTime is invalid'\n      );\n    }\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDateTimeError(reason);\n    } else {\n      return new DateTime({ invalidReason: reason });\n    }\n  }\n\n  // INFO\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7\n   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4\n   * @return {number}\n   */\n  get(unit) {\n    return this[unit];\n  }\n\n  /**\n   * Returns whether the DateTime is valid. Invalid DateTimes occur when:\n   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30\n   * * The DateTime was created by an operation on another invalid date\n   * @return {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid\n   * @return {string}\n   */\n  get invalidReason() {\n    return this.invalidReason;\n  }\n\n  /**\n   * Get the locale of a DateTime, such 'en-UK'. The locale is used when formatting the DateTime\n   *\n   * @return {string}\n   */\n  get locale() {\n    return this.loc.locale;\n  }\n\n  /**\n   * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime\n   *\n   * @return {string}\n   */\n  get numberingSystem() {\n    return this.loc.numberingSystem;\n  }\n\n  /**\n   * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime\n   *\n   * @return {string}\n   */\n  get outputCalendar() {\n    return this.loc.outputCalendar;\n  }\n\n  /**\n   * Get the name of the time zone.\n   * @return {String}\n   */\n  get zoneName() {\n    return this.zone.name;\n  }\n\n  /**\n   * Get the year\n   * @example DateTime.local(2017, 5, 25).year //=> 2017\n   * @return {number}\n   */\n  get year() {\n    return this.isValid ? this.c.year : NaN;\n  }\n\n  /**\n   * Get the month (1-12).\n   * @example DateTime.local(2017, 5, 25).month //=> 5\n   * @return {number}\n   */\n  get month() {\n    return this.isValid ? this.c.month : NaN;\n  }\n\n  /**\n   * Get the day of the month (1-30ish).\n   * @example DateTime.local(2017, 5, 25).day //=> 25\n   * @return {number}\n   */\n  get day() {\n    return this.isValid ? this.c.day : NaN;\n  }\n\n  /**\n   * Get the hour of the day (0-23).\n   * @example DateTime.local(2017, 5, 25, 9).hour //=> 9\n   * @return {number}\n   */\n  get hour() {\n    return this.isValid ? this.c.hour : NaN;\n  }\n\n  /**\n   * Get the minute of the hour (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30\n   * @return {number}\n   */\n  get minute() {\n    return this.isValid ? this.c.minute : NaN;\n  }\n\n  /**\n   * Get the second of the minute (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52\n   * @return {number}\n   */\n  get second() {\n    return this.isValid ? this.c.second : NaN;\n  }\n\n  /**\n   * Get the millisecond of the second (0-999).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654\n   * @return {number}\n   */\n  get millisecond() {\n    return this.isValid ? this.c.millisecond : NaN;\n  }\n\n  /**\n   * Get the week year\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 11, 31).weekYear //=> 2015\n   * @return {number}\n   */\n  get weekYear() {\n    return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;\n  }\n\n  /**\n   * Get the week number of the week year (1-52ish).\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2017, 5, 25).weekNumber //=> 21\n   * @return {number}\n   */\n  get weekNumber() {\n    return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;\n  }\n\n  /**\n   * Get the day of the week.\n   * 1 is Monday and 7 is Sunday\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 11, 31).weekday //=> 4\n   * @return {number}\n   */\n  get weekday() {\n    return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;\n  }\n\n  /**\n   * Get the ordinal (i.e. the day of the year)\n   * @example DateTime.local(2017, 5, 25).ordinal //=> 145\n   * @return {number|DateTime}\n   */\n  get ordinal() {\n    return this.isValid ? Conversions.gregorianToOrdinal(this.c).ordinal : NaN;\n  }\n\n  /**\n   * Get the UTC offset of this DateTime in minutes\n   * @example DateTime.local().offset //=> -240\n   * @example DateTime.utc().offset //=> 0\n   * @return {number}\n   */\n  get offset() {\n    return this.isValid ? this.zone.offset(this.ts) : NaN;\n  }\n\n  /**\n   * Get the short human name for the zone's current offset, for example \"EST\" or \"EDT\".\n   * @return {String}\n   */\n  get offsetNameShort() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: 'short',\n        locale: this.locale\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the long human name for the zone's current offset, for example \"Eastern Standard Time\" or \"Eastern Daylight Time\".\n   * Is locale-aware.\n   * @return {String}\n   */\n  get offsetNameLong() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: 'long',\n        locale: this.locale\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get whether this zone's offset ever changes, as in a DST.\n   * @return {boolean}\n   */\n  get isOffsetFixed() {\n    return this.zone.universal;\n  }\n\n  /**\n   * Get whether the DateTime is in a DST.\n   * @return {boolean}\n   */\n  get isInDST() {\n    if (this.isOffsetFixed) {\n      return false;\n    } else {\n      return this.offset > this.set({ month: 1 }).offset ||\n        this.offset > this.set({ month: 5 }).offset;\n    }\n  }\n\n  /**\n   * Returns true if this DateTime is in a leap year, false otherwise\n   * @example DateTime.local(2016).isInLeapYear //=> true\n   * @example DateTime.local(2013).isInLeapYear //=> false\n   * @return {boolean}\n   */\n  get isInLeapYear() {\n    return Util.isLeapYear(this.year);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's month\n   * @example DateTime.local(2016, 2).daysInMonth //=> 29\n   * @example DateTime.local(2016, 3).days //=> 31\n   * @return {number}\n   */\n  get daysInMonth() {\n    return Util.daysInMonth(this.year, this.month);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's year\n   * @example DateTime.local(2016).daysInYear //=> 366\n   * @example DateTime.local(2013).daysInYear //=> 365\n   * @return {number}\n   */\n  get daysInYear() {\n    return this.isValid ? Util.daysInYear(this.year) : NaN;\n  }\n\n  /**\n   * Returns the resolved Intl options for this DateTime.\n   * This is useful in understanding the behavior of parsing and formatting methods\n   * @param {object} opts - the same options as toLocaleString\n   * @return {object}\n   */\n  resolvedLocaleOpts(opts = {}) {\n    const { locale, numberingSystem, calendar } = Formatter.create(\n      this.loc.clone(opts),\n      opts\n    ).resolvedOptions(this);\n    return { locale, numberingSystem, outputCalendar: calendar };\n  }\n\n  // TRANSFORM\n\n  /**\n   * \"Set\" the DateTime's zone to UTC. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to {@link setZone}('utc')\n   * @param {number} [offset=0] - optionally, an offset from UTC in minutes\n   * @param {object} [opts={}] - options to pass to `setZone()`\n   * @return {DateTime}\n   */\n  toUTC(offset = 0, opts = {}) {\n    return this.setZone(FixedOffsetZone.instance(offset), opts);\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to `setZone('local')`\n   * @return {DateTime}\n   */\n  toLocal() {\n    return this.setZone(new LocalZone());\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.\n   *\n   * By default, the setter keeps the underlying time the same (as in, the same UTC timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link plus}. You may wish to use {@link toLocal} and {@link toUTC} which provide simple convenience wrappers for commonly used zones.\n   * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'utc+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link Zone} class.\n   * @param {object} opts - options\n   * @param {boolean} [opts.keepCalendarTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.\n   * @return {DateTime}\n   */\n  setZone(zone, { keepCalendarTime = false } = {}) {\n    zone = Util.normalizeZone(zone);\n    if (zone.equals(this.zone)) {\n      return this;\n    } else if (!zone.isValid) {\n      return DateTime.invalid(UNSUPPORTED_ZONE);\n    } else {\n      const newTS = keepCalendarTime\n        ? this.ts + (this.o - zone.offset(this.ts)) * 60 * 1000\n        : this.ts;\n      return clone(this, { ts: newTS, zone });\n    }\n  }\n\n  /**\n   * \"Set\" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.\n   * @param {object} properties - the properties to set\n   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-uk' })\n   * @return {DateTime}\n   */\n  reconfigure({ locale, numberingSystem, outputCalendar } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem, outputCalendar });\n    return clone(this, { loc });\n  }\n\n  /**\n   * \"Set\" the locale. Returns a newly-constructed DateTime.\n   * Just a convenient alias for reconfigure({ locale })\n   * @example DateTime.local(2017, 5, 25).setLocale('en-uk')\n   * @return {DateTime}\n   */\n  setLocale(locale) {\n    return this.reconfigure({ locale });\n  }\n\n  /**\n   * \"Set\" the values of specified units. Returns a newly-constructed DateTime.\n   * @param {object} values - a mapping of units to numbers\n   * @example dt.set({ year: 2017 })\n   * @example dt.set({ hour: 8, minute: 30 })\n   * @example dt.set({ weekday: 5 })\n   * @example dt.set({ year: 2005, ordinal: 234 })\n   * @example dt.set({ outputCalendar: 'beng', zone: 'utc' })\n   * @return {DateTime}\n   */\n  set(values) {\n    const normalized = Util.normalizeObject(values, normalizeUnit),\n      settingWeekStuff = !Util.isUndefined(normalized.weekYear) ||\n        !Util.isUndefined(normalized.weekNumber) ||\n        !Util.isUndefined(normalized.weekday);\n\n    let mixed;\n    if (settingWeekStuff) {\n      mixed = Conversions.weekToGregorian(\n        Object.assign(Conversions.gregorianToWeek(this.c), normalized)\n      );\n    } else if (!Util.isUndefined(normalized.ordinal)) {\n      mixed = Conversions.ordinalToGregorian(\n        Object.assign(Conversions.gregorianToOrdinal(this.c), normalized)\n      );\n    } else {\n      mixed = Object.assign(this.toObject(), normalized);\n\n      // if we didn't set the day but we ended up on an overflow date,\n      // use the last day of the right month\n      if (Util.isUndefined(normalized.day)) {\n        mixed.day = Math.min(\n          Util.daysInMonth(mixed.year, mixed.month),\n          mixed.day\n        );\n      }\n    }\n\n    const [ts, o] = objToTS(mixed, this.o, this.zone);\n    return clone(this, { ts, o });\n  }\n\n  /**\n   * Add a period of time to this DateTime and return the resulting DateTime\n   *\n   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.\n   * @param {Duration|number|object} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @example DateTime.local().plus(123) //~> in 123 milliseconds\n   * @example DateTime.local().plus({ minutes: 15 }) //~> in 15 minutes\n   * @example DateTime.local().plus({ days: 1 }) //~> this time tomorrow\n   * @example DateTime.local().plus({ hours: 3, minutes: 13 }) //~> in 1 hr, 13 min\n   * @example DateTime.local().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 1 hr, 13 min\n   * @return {DateTime}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n    const dur = Util.friendlyDuration(duration);\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * Subtract a period of time to this DateTime and return the resulting DateTime\n   * See {@link plus}\n   * @param {Duration|number|object} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   @return {DateTime}\n  */\n  minus(duration) {\n    if (!this.isValid) return this;\n    const dur = Util.friendlyDuration(duration).negate();\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * \"Set\" this DateTime to the beginning of a unit of time.\n   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'month', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'\n   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'\n   * @return {DateTime}\n   */\n  startOf(unit) {\n    if (!this.isValid) return this;\n    const o = {}, normalizedUnit = Duration.normalizeUnit(unit);\n    switch (normalizedUnit) {\n      case 'years':\n        o.month = 1;\n      // falls through\n      case 'months':\n        o.day = 1;\n      // falls through\n      case 'weeks':\n      case 'days':\n        o.hour = 0;\n      // falls through\n      case 'hours':\n        o.minute = 0;\n      // falls through\n      case 'minutes':\n        o.second = 0;\n      // falls through\n      case 'seconds':\n        o.millisecond = 0;\n        break;\n      default:\n        throw new InvalidUnitError(unit);\n    }\n\n    if (normalizedUnit === 'weeks') {\n      o.weekday = 1;\n    }\n\n    return this.set(o);\n  }\n\n  /**\n   * \"Set\" this DateTime to the end (i.e. the last millisecond) of a unit of time\n   * @param {string} unit - The unit to go to the end of. Can be 'year', 'month', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-03T00:00:00.000-05:00'\n   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'\n   * @return {DateTime}\n   */\n  endOf(unit) {\n    return this.isValid\n      ? this.startOf(unit).plus({ [unit]: 1 }).minus(1)\n      : this;\n  }\n\n  // OUTPUT\n\n  /**\n   * Returns a string representation of this DateTime formatted according to the specified format string.\n   * **You may not want this.** See {@link toLocaleString} for a more flexible formatting tool. See the documentation for the specific format tokens supported.\n   * @param {string} fmt - the format string\n   * @param {object} opts - options\n   * @param {boolean} opts.round - round numerical values\n   * @example DateTime.local().toFormat('yyyy LLL dd') //=> '2017 avr. 22'\n   * @example DateTime.local().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 Apr 22'\n   * @example DateTime.local().toFormat(\"HH 'hours and' mm 'minutes'\") //=> '20 hours and 55 minutes'\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc, opts).formatDateTimeFromString(this, fmt)\n      : INVALID;\n  }\n\n  /**\n   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.\n   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation.\n   * of the DateTime in the assigned locale.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param opts {object} - Intl.DateTimeFormat constructor options\n   * @example DateTime.local().toLocaleString(); //=> 4/20/2017\n   * @example DateTime.local().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'\n   * @example DateTime.local().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'\n   * @example DateTime.local().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'\n   * @example DateTime.local().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'\n   * @example DateTime.local().toLocaleString({weekday: 'long', month: 'long', day: '2-digit'}); //=> 'Thu, Apr 20'\n   * @example DateTime.local().toLocaleString({weekday: 'long', month: 'long', day: '2-digit', hour: '2-digit', minute: '2-digit'}); //=> 'Thu, Apr 20, 11:27'\n   * @example DateTime.local().toLocaleString({hour: '2-digit', minute: '2-digit'}); //=> '11:32'\n   * @return {string}\n   */\n  toLocaleString(opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.clone(opts), opts).formatDateTime(this)\n      : INVALID;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime\n   * @param {object} opts - options\n   * @param {boolean} opts.suppressMilliseconds - exclude milliseconds from the format if they're 0\n   * @param {boolean} opts.supressSeconds - exclude seconds from the format if they're 0\n   * @example DateTime.utc(1982, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'\n   * @example DateTime.local().toISO() //=> '2017-04-22T20:47:05.335-04:00'\n   * @return {string}\n   */\n  toISO({ suppressMilliseconds = false, suppressSeconds = false } = {}) {\n    const f = `yyyy-MM-dd'T'${isoTimeFormat(this, suppressSeconds, suppressMilliseconds)}`;\n    return formatMaybe(this, f);\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's date component\n   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '07:34:19.361Z'\n   * @return {string}\n   */\n  toISODate() {\n    return formatMaybe(this, 'yyyy-MM-dd');\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's week date\n   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'\n   * @return {string}\n   */\n  toISOWeekDate() {\n    return formatMaybe(this, \"kkkk-'W'WW-c\");\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's time component\n   * @param {object} opts - options\n   * @param {boolean} opts.suppressMilliseconds - exclude milliseconds from the format if they're 0\n   * @param {boolean} opts.supressSeconds - exclude seconds from the format if they're 0\n   * @example DateTime.utc().hour(7).minute(34).toISOTime() //=> '07:34:19.361Z'\n   * @example DateTime.utc().hour(7).minute(34).toISOTime({ suppressSeconds: true }) //=> '07:34Z'\n   * @return {string}\n   */\n  toISOTime({ suppressMilliseconds = false, suppressSeconds = false } = {}) {\n    return formatMaybe(\n      this,\n      isoTimeFormat(this, suppressSeconds, suppressMilliseconds)\n    );\n  }\n\n  /**\n   * Returns an RFC 2822-compatible string representation of this DateTime, always in UTC\n   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'\n   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'\n   * @return {string}\n   */\n  toRFC2822() {\n    return formatMaybe(this, 'EEE, dd LLL yyyy hh:mm:ss ZZZ');\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in HTTP headers.\n   * Specifically, the string conforms to RFC 1123.\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'\n   * @return {string}\n   */\n  toHTTP() {\n    return formatMaybe(this.toUTC(), \"EEE, dd LLL yyyy hh:mm:ss 'GMT'\");\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for debugging\n   * @return {string}\n   */\n  toString() {\n    return this.isValid ? this.toISO() : INVALID;\n  }\n\n  /**\n   * Returns the epoch milliseconds of this DateTime\n   * @return {number}\n   */\n  valueOf() {\n    return this.isValid ? this.ts : NaN;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns a Javascript object with this DateTime's year, month, day, and so on.\n   * @param opts - options for generating the object\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\n   * @example DateTime.local().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }\n   * @return {object}\n   */\n  toObject(opts = {}) {\n    if (!this.isValid) return {};\n\n    const base = Object.assign({}, this.c);\n\n    if (opts.includeConfig) {\n      base.outputCalendar = this.outputCalendar;\n      base.numberingSystem = this.loc.numberingSystem;\n      base.locale = this.loc.locale;\n    }\n    return base;\n  }\n\n  /**\n   * Returns a Javascript Date equivalent to this DateTime.\n   * @return {object}\n   */\n  toJSDate() {\n    return new Date(this.isValid ? this.ts : NaN);\n  }\n\n  // COMPARE\n\n  /**\n   * Return the difference between two DateTimes as a Duration.\n   * @param {DateTime} otherDateTime - the DateTime to compare this one to\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example\n   * var i1 = DateTime.fromISO('1982-05-25T09:45'),\n   *     i2 = DateTime.fromISO('1983-10-14T10:30');\n   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }\n   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }\n   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }\n   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }\n   * @return {Duration}\n   */\n  diff(otherDateTime, unit = 'milliseconds', opts = {}) {\n    if (!this.isValid) return this;\n\n    const units = Util.maybeArray(unit).map(Duration.normalizeUnit);\n\n    const flipped = otherDateTime.valueOf() > this.valueOf(),\n      post = flipped ? otherDateTime : this,\n      accum = {};\n\n    let cursor = flipped ? this : otherDateTime, lowestOrder = null;\n\n    if (units.indexOf('years') >= 0) {\n      let dYear = post.year - cursor.year;\n\n      cursor = cursor.set({ year: post.year });\n\n      if (cursor > post) {\n        cursor = cursor.minus({ years: 1 });\n        dYear -= 1;\n      }\n\n      accum.years = dYear;\n      lowestOrder = 'years';\n    }\n\n    if (units.indexOf('months') >= 0) {\n      const dYear = post.year - cursor.year;\n      let dMonth = post.month - cursor.month + dYear * 12;\n\n      cursor = cursor.set({ year: post.year, month: post.month });\n\n      if (cursor > post) {\n        cursor = cursor.minus({ months: 1 });\n        dMonth -= 1;\n      }\n\n      accum.months = dMonth;\n      lowestOrder = 'months';\n    }\n\n    const computeDayDelta = () => {\n      const utcDayStart = dt =>\n        dt.toUTC(0, { keepCalendarTime: true }).startOf('day').valueOf(),\n        ms = utcDayStart(post) - utcDayStart(cursor);\n      return Math.floor(\n        Duration.fromMilliseconds(ms, opts).shiftTo('days').days\n      );\n    };\n\n    if (units.indexOf('weeks') >= 0) {\n      const days = computeDayDelta();\n      let weeks = (days - days % 7) / 7;\n      cursor = cursor.plus({ weeks });\n\n      if (cursor > post) {\n        cursor.minus({ weeks: 1 });\n        weeks -= 1;\n      }\n\n      accum.weeks = weeks;\n      lowestOrder = 'weeks';\n    }\n\n    if (units.indexOf('days') >= 0) {\n      let days = computeDayDelta();\n      cursor = cursor.set({\n        year: post.year,\n        month: post.month,\n        day: post.day\n      });\n\n      if (cursor > post) {\n        cursor.minus({ days: 1 });\n        days -= 1;\n      }\n\n      accum.days = days;\n      lowestOrder = 'days';\n    }\n\n    const remaining = Duration.fromMilliseconds(post - cursor, opts),\n      moreUnits = units.filter(\n        u => ['hours', 'minutes', 'seconds', 'milliseconds'].indexOf(u) >= 0\n      ),\n      shiftTo = moreUnits.length > 0 ? moreUnits : [lowestOrder],\n      shifted = remaining.shiftTo(...shiftTo),\n      merged = shifted.plus(Duration.fromObject(Object.assign(accum, opts)));\n\n    return flipped ? merged.negate() : merged;\n  }\n\n  /**\n   * Return the difference between this DateTime and right now.\n   * See {@link diff}\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  diffNow(unit, opts) {\n    return this.isValid ? this.diff(DateTime.local(), unit, opts) : this;\n  }\n\n  /**\n   * Return an Interval spanning between this DateTime and another DateTime\n   * @param {DateTime} otherDateTime - the other end point of the Interval\n   * @return {Duration}\n   */\n  until(otherDateTime) {\n    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;\n  }\n\n  /**\n   * Return whether this DateTime is in the same unit of time as another DateTime\n   * @param {DateTime} otherDateTime - the other DateTime\n   * @param {string} unit - the unit of time to check sameness on\n   * @example DateTime.local().hasSame(otherDT, 'day'); //~> true if both the same calendar day\n   * @return {boolean}\n   */\n  hasSame(otherDateTime, unit) {\n    if (!this.isValid) return false;\n    if (unit === 'millisecond') {\n      return this.valueOf() === otherDateTime.valueOf();\n    } else {\n      const inputMs = otherDateTime.valueOf();\n      return this.startOf(unit) <= inputMs && inputMs <= this.endOf(unit);\n    }\n  }\n\n  /**\n   * Equality check\n   * Two DateTimes are equal iff they represent the same millisecond\n   * @param {DateTime} other - the other DateTime\n   * @return {boolean}\n   */\n  equals(other) {\n    return this.isValid && other.isValid\n      ? this.valueOf() === other.valueOf() &&\n          this.zone.equals(other.zone) &&\n          this.loc.equals(other.loc)\n      : false;\n  }\n\n  /**\n   * Return the min of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum\n   * @return {DateTime}\n   */\n  static min(...dateTimes) {\n    return Util.bestBy(dateTimes, i => i.valueOf(), Math.min);\n  }\n\n  /**\n   * Return the max of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum\n   * @return {DateTime}\n   */\n  static max(...dateTimes) {\n    return Util.bestBy(dateTimes, i => i.valueOf(), Math.max);\n  }\n\n  // MISC\n\n  /**\n   * Explain how a string would be parsed by fromString()\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see description)\n   * @param {object} options - options taken by fromString()\n   * @return {object}\n   */\n  static fromStringExplain(text, fmt, options = {}) {\n    const parser = new TokenParser(Locale.fromOpts(options));\n    return parser.explainParse(text, fmt);\n  }\n\n  // FORMAT PRESETS\n\n  /**\n   * {@link toLocaleString} format like 10/14/1983\n   */\n  static get DATE_SHORT() {\n    return {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Oct 14, 1983'\n   */\n  static get DATE_MED() {\n    return {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'October 14, 1983'\n   */\n  static get DATE_FULL() {\n    return {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Tuesday, October 14, 1983'\n   */\n  static get DATE_HUGE() {\n    return {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      weekday: 'long'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.\n   */\n  static get TIME_SIMPLE() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.\n   */\n  static get TIME_WITH_SECONDS() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.\n   */\n  static get TIME_WITH_SHORT_OFFSET() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      timeZoneName: 'short'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   */\n  static get TIME_WITH_LONG_OFFSET() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      timeZoneName: 'long'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30', always 24-hour.\n   */\n  static get TIME_24_SIMPLE() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: false\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23', always 24-hour.\n   */\n  static get TIME_24_WITH_SECONDS() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 EDT', always 24-hour.\n   */\n  static get TIME_24_WITH_SHORT_OFFSET() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false,\n      timeZoneName: 'short'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.\n   */\n  static get TIME_24_WITH_LONG_OFFSET() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false,\n      timeZoneName: 'long'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_SHORT() {\n    return {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_SHORT_WITH_SECONDS() {\n    return {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_MED() {\n    return {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_MED_WITH_SECONDS() {\n    return {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_FULL() {\n    return {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit',\n      timeZoneName: 'short'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'October 14, 1983, 9:303 AM EDT'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_FULL_WITH_SECONDS() {\n    return {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      timeZoneName: 'short'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_HUGE() {\n    return {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      weekday: 'long',\n      hour: 'numeric',\n      minute: '2-digit',\n      timeZoneName: 'long'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_HUGE_WITH_SECONDS() {\n    return {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      weekday: 'long',\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      timeZoneName: 'long'\n    };\n  }\n}\n","import { DateTime } from './datetime';\nimport { Settings } from './settings';\nimport { Locale } from './impl/locale';\nimport { Util } from './impl/util';\n\n/**\n * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.\n */\nexport class Info {\n  /**\n   * Return whether the specified zone contains a DST.\n   * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.\n   * @return {boolean}\n   */\n  static hasDST(zone = Settings.defaultZone) {\n    return (\n      !zone.universal &&\n      DateTime.local()\n        .setZone(zone)\n        .set({ month: 1 }).offset !==\n        DateTime.local()\n          .setZone(zone)\n          .set({ month: 5 }).offset\n    );\n  }\n\n  /**\n   * Return an array of standalone month names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {object} opts - options\n   * @param {string} [opts.locale='en'] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @example Info.months()[0] //=> 'January'\n   * @example Info.months('short')[0] //=> 'Jan'\n   * @example Info.months('numeric')[0] //=> '1'\n   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'\n   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'\n   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'\n   * @return {[string]}\n   */\n  static months(\n    length = 'long',\n    { locale = 'en', numberingSystem = null, outputCalendar = 'gregory' } = {}\n  ) {\n    return new Locale(locale, numberingSystem, outputCalendar).months(length);\n  }\n\n  /**\n   * Return an array of format month names.\n   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that\n   * changes the string.\n   * See {@link months}\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {object} opts - options\n   * @param {string} [opts.locale='en'] - the locale code\n   * @param {string} [opts.numbering=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @return {[string]}\n   */\n  static monthsFormat(\n    length = 'long',\n    { locale = 'en', numberingSystem = null, outputCalendar = 'gregory' } = {}\n  ) {\n    return new Locale(locale, numberingSystem, outputCalendar).months(length, true);\n  }\n\n  /**\n   * Return an array of standalone week names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the month representation, such as \"narrow\", \"short\", \"long\".\n   * @param {object} opts - options\n   * @param {string} [opts.locale='en'] - the locale code\n   * @param {string} [opts.numbering=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @example Info.weekdays()[0] //=> 'Monday'\n   * @example Info.weekdays('short')[0] //=> 'Mon'\n   * @example Info.weekdays('short', 'fr-CA')[0] //=> 'lun.'\n   * @example Info.weekdays('short', 'ar')[0] //=> 'الاثنين'\n   * @return {[string]}\n   */\n  static weekdays(length = 'long', { locale = 'en', numberingSystem = null } = {}) {\n    return new Locale(locale, numberingSystem, null).weekdays(length);\n  }\n\n  /**\n   * Return an array of format week names.\n   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that\n   * changes the string.\n   * See {@link weekdays}\n   * @param {string} [length='long'] - the length of the month representation, such as \"narrow\", \"short\", \"long\".\n   * @param {object} opts - options\n   * @param {string} [opts.locale='en'] - the locale code\n   * @param {string} [opts.numbering=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @return {[string]}\n   */\n  static weekdaysFormat(length = 'long', { locale = 'en', numberingSystem = null } = {}) {\n    return new Locale(locale, numberingSystem, null).weekdays(length, true);\n  }\n\n  /**\n   * Return an array of meridiems.\n   * @param {object} opts - options\n   * @param {string} [opts.locale='en'] - the locale code\n   * @example Info.meridiems() //=> [ 'AM', 'PM' ]\n   * @example Info.meridiems('de') //=> [ 'vorm.', 'nachm.' ]\n   * @return {[string]}\n   */\n  static meridiems({ locale = 'en' } = {}) {\n    return new Locale(locale).meridiems();\n  }\n\n  /**\n   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.\n   * @param {string} [length='short'] - the length of the era representation, such as \"short\" or \"long\".\n   * @param {object} opts - options\n   * @param {string} [opts.locale='en'] - the locale code\n   * @example Info.eras() //=> [ 'BC', 'AD' ]\n   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]\n   * @example Info.eras('long', 'fr') //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]\n   * @return {[string]}\n   */\n  static eras(length = 'short', { locale = 'en' } = {}) {\n    return new Locale(locale, null, 'gregory').eras(length);\n  }\n\n  /**\n   * Return the set of available features in this environment.\n   * Some features of Luxon are not available in all environments. For example, on older browsers, timezone support is not available. Use this function to figure out if that's the case.\n   * Keys:\n   * * `timezones`: whether this environment supports IANA timezones\n   * * `intlTokens`: whether this environment supports internationalized token-based formatting/parsing\n   * * `intl`: whether this environment supports general internationalization\n   * @example Info.feature() //=> { intl: true, intlTokens: false, timezones: true }\n   * @return {object}\n   */\n  static features() {\n    let intl = false,\n      intlTokens = false,\n      zones = false;\n\n    if (Util.isUndefined(Intl) && Util.isUndefined(Util.DateTimeFormat)) {\n      intl = true;\n\n      intlTokens = Util.isUndefined(Intl.DateTimeFormat.prototype.formatToParts);\n\n      try {\n        Intl.DateTimeFormat({ timeZone: 'America/New_York' });\n        zones = true;\n      } catch (e) {\n        zones = false;\n      }\n    }\n\n    return { intl, intlTokens, zones };\n  }\n}\n"],"names":["global","module","window","Math","self","Function","__g","hasOwnProperty","it","key","call","exec","e","require$$0","Object","defineProperty","get","a","core","version","__e","TypeError","fn","that","length","undefined","b","c","apply","arguments","isObject","document","is","createElement","require$$1","require$$2","S","val","toString","valueOf","dP","O","P","Attributes","toPrimitive","IE8_DOM_DEFINE","value","bitmap","object","f","createDesc","PROTOTYPE","$export","type","name","source","IS_FORCED","F","IS_GLOBAL","G","IS_STATIC","IS_PROTO","IS_BIND","B","IS_WRAP","W","exports","expProto","target","own","out","ctx","C","virtual","R","hide","U","id","px","random","concat","META","setDesc","isExtensible","FREEZE","preventExtensions","setMeta","fastKey","create","has","i","getWeak","w","onFreeze","meta","NEED","SHARED","store","Symbol","USE_SYMBOL","$exports","uid","def","TAG","tag","stat","prototype","configurable","$Symbol","LIBRARY","charAt","wksExt","slice","propertyIsEnumerable","cof","split","IObject","defined","ceil","floor","isNaN","min","toInteger","max","index","IS_INCLUDES","$this","el","fromIndex","toIObject","toLength","toAbsoluteIndex","shared","arrayIndexOf","IE_PROTO","names","result","push","keys","$keys","enumBugKeys","getOwnPropertySymbols","getKeys","getSymbols","gOPS","symbols","isEnum","pIE","Array","isArray","arg","defineProperties","Properties","documentElement","Empty","createDict","iframe","lt","gt","iframeDocument","style","display","appendChild","src","contentWindow","open","write","close","anObject","dPs","hiddenKeys","getOwnPropertyNames","gOPN","windowNames","getWindowNames","gOPD","getOwnPropertyDescriptor","KEY","$GOPD","$DP","gOPNExt","$JSON","JSON","_stringify","stringify","HIDDEN","wks","TO_PRIMITIVE","SymbolRegistry","AllSymbols","OPSymbols","ObjectProto","USE_NATIVE","QObject","setter","findChild","setSymbolDesc","DESCRIPTORS","$fails","_create","D","protoDesc","wrap","sym","_k","isSymbol","babelHelpers.typeof","iterator","$defineProperty","enumerable","$defineProperties","enumKeys","l","$create","$propertyIsEnumerable","E","$getOwnPropertyDescriptor","$getOwnPropertyNames","$getOwnPropertySymbols","IS_OP","$set","set","require$$4","es6Symbols","j","wellKnownSymbols","k","keyFor","args","replacer","$replacer","require$$5","setToStringTag","exp","fails","getPrototypeOf","toObject","constructor","$getPrototypeOf","$freeze","freeze","$seal","seal","$preventExtensions","$isFrozen","isFrozen","$isSealed","isSealed","$isExtensible","$assign","assign","A","K","forEach","join","T","aLen","x","y","check","proto","setPrototypeOf","test","buggy","__proto__","number","LuxonError","Error","InvalidDateTimeError","reason","InvalidIntervalError","InvalidDurationError","ConflictingSpecificationError","InvalidUnitError","unit","InvalidArgumentError","ZoneIsAbstract","Zone","ts","otherZone","singleton","LocalZone","format","locale","Util","parseZoneInfo","Date","getTimezoneOffset","isUndefined","Intl","DateTimeFormat","resolvedOptions","timeZone","typeToPos","hackyOffset","dtf","date","parsed","formatted","fMonth","fDay","fYear","fHour","fMinute","fSecond","partsOffset","formatToParts","filled","pos","parseInt","isValid","zone","IANAZone","s","match","zoneName","valid","asUTC","UTC","asTS","FixedOffsetZone","offset","utcInstance","r","signedOffset","fixed","hours","minutes","abs","sign","base","pad","now","defaultZone","instance","throwOnInvalid","Settings","n","z","normalizeZone","t","duration","isNumber","Duration","fromMilliseconds","fromObject","dateTimeish","DateTime","fromJSDate","thing","o","bottom","top","input","repeat","dt","arr","reduce","flat","toFlatten","flatten","by","compare","best","next","pair","obj","year","isLeapYear","month","offsetFormat","intl","modified","timeZoneName","find","m","toLowerCase","without","included","diffed","substring","trimmed","replace","isString","lowered","isValidSpecier","parseSpecifier","normalizer","ignoreUnknown","normalized","u","v","Number","mapped","pick","offHourStr","offMinuteStr","offHour","offMin","offMinSigned","English","monthsNarrow","monthsShort","monthsLong","weekdaysNarrow","weekdaysShort","weekdaysLong","localeCache","Map","intlConfigString","numberingSystem","outputCalendar","loc","map","mapMonths","ms","utc","mapWeekdays","Locale","opts","localeR","numberingSystemR","outputCalendarR","cacheKey","cached","fresh","numbering","standalone","startsWith","alts","knownEnglish","english","months","day","formatStr","monthsCache","extract","weekdays","weekday","weekdaysCache","meridiems","meridiemCache","hour","hour12","eras","era","eraCache","intlOpts","field","dtFormatter","df","d","results","matching","realIntlOpts","useGrouping","padTo","minimumIntegerDigits","round","maximumFractionDigits","NumberFormat","universal","asIfUTC","toJSDate","other","stringifyTokens","splits","tokenToString","token","literal","Formatter","formatOpts","fmt","current","currentFull","bracketed","p","numberFormatter","string","formatOffset","isOffsetFixed","allowZ","towardZero","num","RangeError","outputCal","millisecond","second","minute","offsetNameShort","offsetNameLong","weekYear","weekNumber","ordinal","formatDateTime","DATE_SHORT","DATE_MED","DATE_FULL","DATE_HUGE","TIME_SIMPLE","TIME_WITH_SECONDS","TIME_WITH_SHORT_OFFSET","TIME_WITH_LONG_OFFSET","TIME_24_SIMPLE","TIME_24_WITH_SECONDS","TIME_24_WITH_SHORT_OFFSET","TIME_24_WITH_LONG_OFFSET","DATETIME_SHORT","DATETIME_MED","DATETIME_FULL","DATETIME_HUGE","DATETIME_SHORT_WITH_SECONDS","DATETIME_MED_WITH_SECONDS","DATETIME_FULL_WITH_SECONDS","DATETIME_HUGE_WITH_SECONDS","parseFormat","dur","tokenToField","lildur","tokens","realTokens","found","collapsed","shiftTo","filter","combineRegexes","regexes","full","RegExp","combineExtractors","extractors","ex","mergedVals","mergedZone","cursor","parse","patterns","regex","extractor","simpleParse","ret","isoTimeRegex","extractISOYmd","isoYmdRegex","extractISOWeekData","isoWeekRegex","isoOrdinalRegex","extractISOOrdinalData","extractISOTime","local","fullOffset","item","isoDuration","extractISODuration","yearStr","monthStr","dayStr","hourStr","minuteStr","secondStr","obsOffsets","fromStrings","weekdayStr","untrucateYear","indexOf","rfc2822","extractRFC2822","obsOffset","milOffset","preprocessRFC2822","trim","rfc1123","rfc850","ascii","extractRFC1123Or850","extractASCII","RegexParser","INVALID","lowOrderMatrix","seconds","milliseconds","casualMatrix","daysInYearAccurate","daysInMonthAccurate","accurateMatrix","orderedUnits","clone","clear","conf","values","conversionAccuracy","isHighOrderNegative","config","accurate","invalidReason","formatDurationFromString","includeConfig","norm","normalize","negate","years","days","weeks","toISO","friendlyDuration","plus","normalizeUnit","mixed","normalizeObject","NaN","neg","shifted","units","built","accumulated","vals","lastUnit","ak","matrix","down","conv","added","negated","count","text","parseISODuration","validateStartEnd","start","end","Interval","toDuration","startOf","diff","minus","hasSame","dateTime","fromDateTimes","dateTimes","sorted","friendlyDateTime","sort","numberOfParts","splitBy","equals","intervals","xor","intersection","isEmpty","dateFormat","separator","toFormat","invalid","builtStart","builtEnd","fromISO","sofar","overlaps","abutsStart","union","final","currentCount","ends","time","merge","intUnit","post","deser","oneOf","strings","startIndex","groups","h","simple","unitForToken","one","two","three","four","oneOrTwo","oneToThree","twoToFour","unitate","untruncateYear","buildRegex","handlers","matches","all","matchIndex","dateTimeFromMatches","toField","Z","TokenParser","explainParse","nonLeapLadder","leapLadder","dayOfWeek","js","getUTCDay","lastWeekNumber","p1","last","p2","computeOrdinal","uncomputeOrdinal","table","month0","findIndex","Conversions","gregObj","timeObject","weekData","weekdayOfJan4","daysInYear","gregData","ordinalData","validYear","validWeek","numberBetween","validWeekday","validOrdinal","validMonth","validDay","daysInMonth","validHour","validMinute","validSecond","validMillisecond","UNSUPPORTED_ZONE","possiblyCachedWeekData","gregorianToWeek","inst","old","fixOffset","localTS","tz","utcGuess","o2","o3","tsToObj","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","objToLocalTS","setFullYear","objToTS","adjustTime","oPre","millisToAdd","as","parseDataToDateTime","parsedZone","setZone","interpretationZone","formatMaybe","formatDateTimeFromString","defaultUnitValues","defaultWeekUnitValues","defaultOrdinalUnitValues","isoTimeFormat","suppressSecs","suppressMillis","orderedWeekUnits","orderedOrdinalUnits","unchanged","calendar","keepCalendarTime","newTS","reconfigure","settingWeekStuff","weekToGregorian","ordinalToGregorian","gregorianToOrdinal","normalizedUnit","suppressMilliseconds","suppressSeconds","toUTC","otherDateTime","maybeArray","flipped","accum","lowestOrder","dYear","dMonth","computeDayDelta","utcDayStart","remaining","moreUnits","merged","inputMs","endOf","offsetName","options","zoneToUse","tsNow","offsetProvis","containsOrdinal","containsGregorYear","containsGregorMD","containsGregor","definiteWeekDef","useWeekData","defaultValues","objNow","foundFirst","higherOrderInvalid","hasInvalidWeekData","hasInvalidOrdinalData","hasInvalidGregorianData","hasInvalidTimeData","gregorian","tsFinal","offsetFinal","parseISODate","parseRFC2822Date","parseHTTPDate","parser","fromOpts","parseDateTime","bestBy","Info","intlTokens","zones"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}