{"version":3,"file":"luxon.js","sources":["src/errors.js","src/zone.js","src/zones/localZone.js","src/zones/IANAZone.js","src/zones/fixedOffsetZone.js","src/settings.js","src/impl/util.js","src/impl/english.js","src/impl/locale.js","src/impl/formatter.js","src/impl/regexParser.js","src/duration.js","src/interval.js","src/impl/tokenParser.js","src/impl/conversions.js","src/datetime.js","src/info.js"],"sourcesContent":["// these aren't really private, but nor are they really useful to document\n\n/**\n * @private\n */\nclass LuxonError extends Error {}\n\n/**\n * @private\n */\nexport class InvalidDateTimeError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid DateTime: ${reason}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidIntervalError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Interval: ${reason}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidDurationError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Duration: ${reason}`);\n  }\n}\n\n/**\n * @private\n */\nexport class ConflictingSpecificationError extends LuxonError {}\n\n/**\n * @private\n */\nexport class InvalidUnitError extends LuxonError {\n  constructor(unit) {\n    super(`Invalid unit ${unit}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidArgumentError extends LuxonError {}\n\n/**\n * @private\n */\nexport class ZoneIsAbstract extends LuxonError {\n  constructor() {\n    super('Zone is an abstract class');\n  }\n}\n","/* eslint no-unused-vars: \"off\" */\nimport { ZoneIsAbstract } from './errors';\n\n/**\n * @interface\n*/\nexport class Zone {\n  /**\n   * The type of zone\n   * @abstract\n   * @return {string}\n   */\n  get type() {\n    throw new ZoneIsAbstract();\n  }\n\n  /**\n   * The name of this zone.\n   * @abstract\n   * @return {string}\n   */\n  get name() {\n    throw new ZoneIsAbstract();\n  }\n\n  /**\n   * Returns whether the offset is known to be fixed for the whole year.\n   * @abstract\n   * @return {boolean}\n   */\n  get universal() {\n    throw new ZoneIsAbstract();\n  }\n\n  /**\n   * Returns the offset's common name (such as EST) at the specified timestamp\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the name\n   * @param {Object} options - Options to affect the format\n   * @param {string} options.format - What style of offset to return. Accepts 'long' or 'short'.\n   * @param {string} options.localeCode - What locale to return the offset name in. Defaults to us-en\n   * @return {string}\n   */\n  static offsetName(ts, { format = 'long', localeCode = 'en-us' } = {}) {\n    throw new ZoneIsAbstract();\n  }\n\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\n   * @return {number}\n   */\n  offset(ts) {\n    throw new ZoneIsAbstract();\n  }\n\n  /**\n   * Return whether this Zone is equal to another zoner\n   * @abstract\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */\n  equals(otherZone) {\n    throw new ZoneIsAbstract();\n  }\n\n  /**\n   * Return whether this Zone is valid.\n   * @abstract\n   * @return {boolean}\n   */\n  get isValid() {\n    throw new ZoneIsAbstract();\n  }\n}\n","import { Util } from '../impl/util';\nimport { Zone } from '../zone';\n\nlet singleton = null;\n\n/**\n * @private\n */\n\nexport class LocalZone extends Zone {\n  static get instance() {\n    if (singleton === null) {\n      singleton = new LocalZone();\n    }\n    return singleton;\n  }\n\n  get type() {\n    return 'local';\n  }\n\n  get name() {\n    if (Util.isUndefined(Intl) && Util.isUndefined(Intl.DateTimeFormat)) {\n      return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n    } else return 'local';\n  }\n\n  get universal() {\n    return false;\n  }\n\n  offsetName(ts, { format = 'long', locale = 'en-us' } = {}) {\n    return Util.parseZoneInfo(ts, format, locale || 'en-us');\n  }\n\n  offset(ts) {\n    return -new Date(ts).getTimezoneOffset();\n  }\n\n  equals(otherZone) {\n    return otherZone.type === 'local';\n  }\n\n  get isValid() {\n    return true;\n  }\n}\n","import { Util } from '../impl/util';\nimport { Zone } from '../zone';\n\nconst typeToPos = {\n  year: 0,\n  month: 1,\n  day: 2,\n  hour: 3,\n  minute: 4,\n  second: 5\n};\n\nfunction hackyOffset(dtf, date) {\n  const formatted = dtf.format(date),\n    parsed = /(\\d+)\\/(\\d+)\\/(\\d+), (\\d+):(\\d+):(\\d+)/.exec(formatted),\n    [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed;\n  return [fYear, fMonth, fDay, fHour, fMinute, fSecond];\n}\n\nfunction partsOffset(dtf, date) {\n  const formatted = dtf.formatToParts(date),\n    filled = [];\n  for (let i = 0; i < formatted.length; i++) {\n    const { type, value } = formatted[i],\n      pos = typeToPos[type];\n\n    if (!Util.isUndefined(pos)) {\n      filled[pos] = parseInt(value, 10);\n    }\n  }\n  return filled;\n}\n\nfunction isValid(zone) {\n  try {\n    new Intl.DateTimeFormat('en-us', { timeZone: zone }).format();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * @private\n */\n\nexport class IANAZone extends Zone {\n  static isValidSpecier(s) {\n    return s && s.match(/[a-z_]+\\/[a-z_]+/i);\n  }\n\n  constructor(name) {\n    super();\n    this.zoneName = name;\n    this.valid = isValid(name);\n  }\n\n  get type() {\n    return 'iana';\n  }\n\n  get name() {\n    return this.zoneName;\n  }\n\n  get universal() {\n    return false;\n  }\n\n  offsetName(ts, { format = 'long', locale = 'en-us' } = {}) {\n    return Util.parseZoneInfo(ts, format, locale || 'en-us', this.zoneName);\n  }\n\n  offset(ts) {\n    const date = new Date(ts),\n      dtf = new Intl.DateTimeFormat('en-us', {\n        hour12: false,\n        timeZone: this.zoneName,\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      }),\n      [fYear, fMonth, fDay, fHour, fMinute, fSecond] = dtf.formatToParts\n        ? partsOffset(dtf, date)\n        : hackyOffset(dtf, date),\n      asUTC = Date.UTC(fYear, fMonth - 1, fDay, fHour, fMinute, fSecond);\n    let asTS = date.valueOf();\n    asTS -= asTS % 1000;\n    return (asUTC - asTS) / (60 * 1000);\n  }\n\n  equals(otherZone) {\n    return otherZone.type === 'iana' && otherZone.zoneName === this.zoneName;\n  }\n\n  get isValid() {\n    return this.valid;\n  }\n}\n","import { Util } from '../impl/util';\nimport { Zone } from '../zone';\n\nlet singleton = null;\n\n/**\n * @private\n */\n\nexport class FixedOffsetZone extends Zone {\n  static get utcInstance() {\n    if (singleton === null) {\n      singleton = new FixedOffsetZone(0);\n    }\n    return singleton;\n  }\n\n  static instance(offset) {\n    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);\n  }\n\n  static parseSpecifier(s) {\n    if (s) {\n      const r = s.match(/^utc(?:([+-]\\d{1,2})(?::(\\d{2}))?)?$/i);\n      if (r) {\n        return new FixedOffsetZone(Util.signedOffset(r[1], r[2]));\n      }\n    }\n    return null;\n  }\n\n  constructor(offset) {\n    super();\n    this.fixed = offset;\n  }\n\n  get type() {\n    return 'fixed';\n  }\n\n  get name() {\n    const hours = this.fixed / 60,\n      minutes = Math.abs(this.fixed % 60),\n      sign = hours > 0 ? '+' : '-',\n      base = sign + Math.abs(hours),\n      number = minutes > 0 ? `${base}:${Util.pad(minutes, 2)}` : base;\n\n    return this.fixed === 0 ? 'UTC' : `UTC${number}`;\n  }\n\n  offsetName() {\n    return this.name();\n  }\n\n  get universal() {\n    return true;\n  }\n\n  offset() {\n    return this.fixed;\n  }\n\n  equals(otherZone) {\n    return otherZone.type === 'fixed' && otherZone.fixed === this.fixed;\n  }\n\n  get isValid() {\n    return true;\n  }\n}\n","import { LocalZone } from './zones/localZone';\nimport { Util } from './impl/util';\n\nlet now = () => new Date().valueOf(),\n  defaultZone = LocalZone.instance,\n  throwOnInvalid = false;\n\n/**\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\n */\nexport class Settings {\n  /**\n   * Get the callback for returning the current timestamp.\n   * @type {function}\n   */\n  static get now() {\n    return now;\n  }\n\n  /**\n   * Set the callback for returning the current timestamp.\n   * @type {function}\n   */\n  static set now(n) {\n    now = n;\n  }\n\n  /**\n   * Set the default time zone to create DateTimes in.\n   * @type {string}\n   */\n  static get defaultZoneName() {\n    return defaultZone.name;\n  }\n\n  /**\n   * Set the default time zone to create DateTimes in.\n   * @type {string}\n   */\n  static set defaultZoneName(z) {\n    defaultZone = Util.normalizeZone(z);\n  }\n\n  /**\n   * Get the default time zone object to create DateTimes in.\n   * @type {Zone}\n   */\n  static get defaultZone() {\n    return defaultZone;\n  }\n\n  /**\n   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {Zone}\n   */\n  static get throwOnInvalid() {\n    return throwOnInvalid;\n  }\n\n  /**\n   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {Zone}\n   */\n  static set throwOnInvalid(t) {\n    throwOnInvalid = t;\n  }\n}\n","import { Duration } from '../duration';\nimport { DateTime } from '../datetime';\nimport { Zone } from '../zone';\nimport { LocalZone } from '../zones/localZone';\nimport { IANAZone } from '../zones/IANAZone';\nimport { FixedOffsetZone } from '../zones/fixedOffsetZone';\nimport { Settings } from '../settings';\nimport { InvalidArgumentError } from '../errors';\n\n/**\n * @private\n */\n\nexport class Util {\n  static friendlyDuration(duration) {\n    if (Util.isNumber(duration)) {\n      return Duration.fromMilliseconds(duration);\n    } else if (duration instanceof Duration) {\n      return duration;\n    } else if (duration instanceof Object) {\n      return Duration.fromObject(duration);\n    } else {\n      throw new InvalidArgumentError('Unknown duration argument');\n    }\n  }\n\n  static friendlyDateTime(dateTimeish) {\n    if (dateTimeish instanceof DateTime) {\n      return dateTimeish;\n    } else if (dateTimeish.valueOf && Util.isNumber(dateTimeish.valueOf())) {\n      return DateTime.fromJSDate(dateTimeish);\n    } else if (dateTimeish instanceof Object) {\n      return DateTime.fromObject(dateTimeish);\n    } else {\n      throw new InvalidArgumentError('Unknown datetime argument');\n    }\n  }\n\n  static maybeArray(thing) {\n    return Array.isArray(thing) ? thing : [thing];\n  }\n\n  static isUndefined(o) {\n    return typeof o === 'undefined';\n  }\n\n  static isNumber(o) {\n    return typeof o === 'number';\n  }\n\n  static isString(o) {\n    return typeof o === 'string';\n  }\n\n  static numberBetween(thing, bottom, top) {\n    return Util.isNumber(thing) && thing >= bottom && thing <= top;\n  }\n\n  static pad(input, n = 2) {\n    return ('0'.repeat(n) + input).slice(-n);\n  }\n\n  static towardZero(input) {\n    return input < 0 ? Math.ceil(input) : Math.floor(input);\n  }\n\n  // DateTime -> JS date such that the date's UTC time is the datetimes's local time\n  static asIfUTC(dt) {\n    const ts = dt.ts - dt.offset;\n    return new Date(ts);\n  }\n\n  // http://stackoverflow.com/a/15030117\n  static flatten(arr) {\n    return arr.reduce(\n      (flat, toFlatten) =>\n        flat.concat(Array.isArray(toFlatten) ? Util.flatten(toFlatten) : toFlatten),\n      []\n    );\n  }\n\n  static bestBy(arr, by, compare) {\n    return arr.reduce((best, next) => {\n      const pair = [by(next), next];\n      if (!best) {\n        return pair;\n      } else if (compare.apply(null, [best[0], pair[0]]) === best[0]) {\n        return best;\n      } else {\n        return pair;\n      }\n    }, null)[1];\n  }\n\n  static pick(obj, keys) {\n    return keys.reduce((a, k) => {\n      a[k] = obj[k];\n      return a;\n    }, {});\n  }\n\n  static isLeapYear(year) {\n    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n  }\n\n  static daysInYear(year) {\n    return Util.isLeapYear(year) ? 366 : 365;\n  }\n\n  static daysInMonth(year, month) {\n    if (month === 2) {\n      return Util.isLeapYear(year) ? 29 : 28;\n    } else {\n      return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month - 1];\n    }\n  }\n\n  static parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {\n    const date = new Date(ts),\n      intl = {\n        hour12: false,\n        // avoid AM/PM\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      };\n\n    if (timeZone) {\n      intl.timeZone = timeZone;\n    }\n\n    const modified = Util.assign({ timeZoneName: offsetFormat }, intl);\n\n    if (Intl.DateTimeFormat.prototype.formatToParts) {\n      const parsed = new Intl.DateTimeFormat(locale, modified)\n        .formatToParts(date)\n        .find(m => m.type.toLowerCase() === 'timezonename');\n      return parsed ? parsed.value : null;\n    } else {\n      // this probably doesn't work for all locales\n      const without = new Intl.DateTimeFormat(locale, intl).format(date),\n        included = new Intl.DateTimeFormat(locale, modified).format(date),\n        diffed = included.substring(without.length),\n        trimmed = diffed.replace(/^[, ]+/, '');\n\n      return trimmed;\n    }\n  }\n\n  static normalizeZone(input) {\n    if (input instanceof Zone) {\n      return input;\n    } else if (Util.isString(input)) {\n      const lowered = input.toLowerCase();\n      if (lowered === 'local') return LocalZone.instance;\n      else if (lowered === 'utc') return FixedOffsetZone.utcInstance;\n      else if (IANAZone.isValidSpecier(lowered)) return new IANAZone(input);\n      else return FixedOffsetZone.parseSpecifier(lowered) || Settings.defaultZone;\n    } else if (Util.isNumber(input)) {\n      return FixedOffsetZone.instance(input);\n    } else if (typeof input === 'object' && input.offset) {\n      // This is dumb, but the instanceof check above doesn't seem to really work\n      // so we're duck checking it\n      return input;\n    } else {\n      return Settings.defaultZone;\n    }\n  }\n\n  static normalizeObject(obj, normalizer, ignoreUnknown = false) {\n    const normalized = {};\n    for (const u in obj) {\n      if (obj.hasOwnProperty(u)) {\n        const v = obj[u];\n        if (v !== null && !Util.isUndefined(v) && !Util.isNaN(v)) {\n          const mapped = normalizer(u, ignoreUnknown);\n          if (mapped) {\n            normalized[mapped] = v;\n          }\n        }\n      }\n    }\n    return normalized;\n  }\n\n  static timeObject(obj) {\n    return Util.pick(obj, ['hour', 'minute', 'second', 'millisecond']);\n  }\n\n  static untrucateYear(year) {\n    return year > 60 ? 1900 + year : 2000 + year;\n  }\n\n  // signedOffset('-5', '30') -> -330\n  static signedOffset(offHourStr, offMinuteStr) {\n    const offHour = parseInt(offHourStr, 10) || 0,\n      offMin = parseInt(offMinuteStr, 10) || 0,\n      offMinSigned = offHour < 0 ? -offMin : offMin;\n    return offHour * 60 + offMinSigned;\n  }\n\n  // adapted from https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign#Polyfill\n  static assign(target, ...args) {\n    if (typeof Object.assign === 'function') {\n      return Object.assign(target, ...args);\n    } else {\n      const to = Object(target);\n\n      for (let index = 1; index < args.length; index++) {\n        const nextSource = args[index];\n\n        if (nextSource != null) {\n          // Skip over if undefined or null\n          for (const nextKey in nextSource) {\n            if (Object.hasOwnProperty(nextSource, nextKey)) {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n      }\n      return to;\n    }\n  }\n\n  static isNaN(thing) {\n    if (typeof Number.isNaN === 'function') {\n      return Number.isNaN(thing);\n    } else {\n      return thing !== thing; // eslint-disable-line no-self-compare\n    }\n  }\n}\n","/**\n * @private\n */\n\nexport class English {\n  static get monthsLong() {\n    return [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ];\n  }\n\n  static get monthsShort() {\n    return ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  }\n\n  static get monthsNarrow() {\n    return ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'];\n  }\n\n  static months(length) {\n    switch (length) {\n      case 'narrow':\n        return English.monthsNarrow;\n      case 'short':\n        return English.monthsShort;\n      case 'long':\n        return English.monthsLong;\n      default:\n        return null;\n    }\n  }\n\n  static get weekdaysLong() {\n    return ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n  }\n\n  static get weekdaysShort() {\n    return ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n  }\n\n  static get weekdaysNarrow() {\n    return ['M', 'T', 'W', 'T', 'F', 'S', 'S'];\n  }\n\n  static weekdays(length) {\n    switch (length) {\n      case 'narrow':\n        return English.weekdaysNarrow;\n      case 'short':\n        return English.weekdaysShort;\n      case 'long':\n        return English.weekdaysLong;\n      default:\n        return null;\n    }\n  }\n\n  static get meridiems() {\n    return ['AM', 'PM'];\n  }\n\n  static eras(length) {\n    return length === 'short' ? ['BC', 'AD'] : ['Before Christ', 'Anno Domini'];\n  }\n}\n","import { Util } from './util';\nimport { English } from './english';\nimport { DateTime } from '../datetime';\n\nconst localeCache = new Map();\n\nfunction intlConfigString(locale, numberingSystem, outputCalendar) {\n  let loc = locale || new Intl.DateTimeFormat().resolvedOptions().locale;\n  loc = Array.isArray(locale) ? locale : [locale];\n\n  if (outputCalendar || numberingSystem) {\n    loc = loc.map(l => {\n      l += '-u';\n\n      if (outputCalendar) {\n        l += '-ca-' + outputCalendar;\n      }\n\n      if (numberingSystem) {\n        l += '-nu-' + numberingSystem;\n      }\n      return l;\n    });\n  }\n  return loc;\n}\n\nfunction mapMonths(f) {\n  const ms = [];\n  for (let i = 1; i <= 12; i++) {\n    const dt = DateTime.utc(2016, i, 1);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction mapWeekdays(f) {\n  const ms = [];\n  for (let i = 1; i <= 7; i++) {\n    const dt = DateTime.utc(2016, 11, 13 + i);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\n/**\n * @private\n */\n\nexport class Locale {\n  static fromOpts(opts) {\n    return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar);\n  }\n\n  static create(locale, numberingSystem, outputCalendar) {\n    const localeR = locale || 'en-us',\n      numberingSystemR = numberingSystem || null,\n      outputCalendarR = outputCalendar || null,\n      cacheKey = `${localeR}|${numberingSystemR}|${outputCalendarR}`,\n      cached = localeCache.get(cacheKey);\n\n    if (cached) {\n      return cached;\n    } else {\n      const fresh = new Locale(localeR, numberingSystemR, outputCalendarR);\n      localeCache.set(cacheKey, fresh);\n      return fresh;\n    }\n  }\n\n  static fromObject({ locale, numberingSystem, outputCalendar } = {}) {\n    return Locale.create(locale, numberingSystem, outputCalendar);\n  }\n\n  constructor(locale, numbering, outputCalendar) {\n    Object.defineProperty(this, 'locale', { value: locale, enumerable: true });\n    Object.defineProperty(this, 'numberingSystem', {\n      value: numbering || null,\n      enumerable: true\n    });\n    Object.defineProperty(this, 'outputCalendar', {\n      value: outputCalendar || null,\n      enumerable: true\n    });\n    Object.defineProperty(this, 'intl', {\n      value: intlConfigString(this.locale, this.numberingSystem, this.outputCalendar),\n      enumerable: false\n    });\n\n    // cached usefulness\n    Object.defineProperty(this, 'weekdaysCache', {\n      value: { format: {}, standalone: {} },\n      enumerable: false\n    });\n    Object.defineProperty(this, 'monthsCache', {\n      value: { format: {}, standalone: {} },\n      enumerable: false\n    });\n    Object.defineProperty(this, 'meridiemCache', {\n      value: null,\n      enumerable: false,\n      writable: true\n    });\n    Object.defineProperty(this, 'eraCache', {\n      value: {},\n      enumerable: false,\n      writable: true\n    });\n  }\n\n  knownEnglish() {\n    return (\n      (this.locale === 'en' ||\n        Intl.DateTimeFormat(this.intl)\n          .resolvedOptions()\n          .locale.startsWith('en-US')) &&\n      this.numberingSystem === null &&\n      (this.outputCalendar === null || this.outputCalendar === 'latn')\n    );\n  }\n\n  clone(alts) {\n    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {\n      return this;\n    } else {\n      return Locale.create(\n        alts.locale || this.locale,\n        alts.numberingSystem || this.numberingSystem,\n        alts.outputCalendar || this.outputCalendar\n      );\n    }\n  }\n\n  months(length, format = false) {\n    if (this.knownEnglish()) {\n      const english = English.months(length);\n      if (english) {\n        return english;\n      }\n    }\n\n    const intl = format ? { month: length, day: 'numeric' } : { month: length },\n      formatStr = format ? 'format' : 'standalone';\n    if (!this.monthsCache[formatStr][length]) {\n      this.monthsCache[formatStr][length] = mapMonths(dt => this.extract(dt, intl, 'month'));\n    }\n    return this.monthsCache[formatStr][length];\n  }\n\n  weekdays(length, format = false) {\n    if (this.knownEnglish()) {\n      const english = English.weekdays(length);\n      if (english) {\n        return english;\n      }\n    }\n\n    const intl = format\n        ? { weekday: length, year: 'numeric', month: 'long', day: 'numeric' }\n        : { weekday: length },\n      formatStr = format ? 'format' : 'standalone';\n    if (!this.weekdaysCache[formatStr][length]) {\n      this.weekdaysCache[formatStr][length] = mapWeekdays(dt => this.extract(dt, intl, 'weekday'));\n    }\n    return this.weekdaysCache[formatStr][length];\n  }\n\n  meridiems() {\n    if (this.knownEnglish()) {\n      return English.meridiems;\n    }\n\n    // In theory there could be aribitrary day periods. We're gonna assume there are exactly two\n    // for AM and PM. This is probably wrong, but it's makes parsing way easier.\n    if (!this.meridiemCache) {\n      const intl = { hour: 'numeric', hour12: true };\n      this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(dt =>\n        this.extract(dt, intl, 'dayperiod')\n      );\n    }\n\n    return this.meridiemCache;\n  }\n\n  eras(length) {\n    if (this.knownEnglish()) {\n      return English.eras(length);\n    }\n\n    const intl = { era: length };\n\n    // This is utter bullshit. Different calendars are going to define eras totally differently. What I need is the minimum set of dates\n    // to definitely enumerate them.\n    if (!this.eraCache[length]) {\n      this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(dt =>\n        this.extract(dt, intl, 'era')\n      );\n    }\n\n    return this.eraCache[length];\n  }\n\n  extract(dt, intlOpts, field) {\n    const [df, d] = this.dtFormatter(dt, intlOpts),\n      results = df.formatToParts(d),\n      matching = results.find(m => m.type.toLowerCase() === field);\n\n    return matching ? matching.value : null;\n  }\n\n  numberFormatter(opts = {}, intlOpts = {}) {\n    const realIntlOpts = Util.assign({ useGrouping: false }, intlOpts);\n\n    if (opts.padTo > 0) {\n      realIntlOpts.minimumIntegerDigits = opts.padTo;\n    }\n\n    if (opts.round) {\n      realIntlOpts.maximumFractionDigits = 0;\n    }\n\n    return new Intl.NumberFormat(this.intl, realIntlOpts);\n  }\n\n  dtFormatter(dt, intlOpts = {}) {\n    let d, z;\n\n    if (dt.zone.universal) {\n      // if we have a fixed-offset zone that isn't actually UTC,\n      // (like UTC+8), we need to make do with just displaying\n      // the time in UTC; the formatter how to handle UTC+8\n      d = Util.asIfUTC(dt);\n      z = 'UTC';\n    } else if (dt.zone.type === 'local') {\n      d = dt.toJSDate();\n    } else {\n      d = dt.toJSDate();\n      z = dt.zone.name;\n    }\n\n    const realIntlOpts = Util.assign({}, intlOpts);\n    if (z) {\n      realIntlOpts.timeZone = z;\n    }\n\n    return [new Intl.DateTimeFormat(this.intl, realIntlOpts), d];\n  }\n\n  equals(other) {\n    return (\n      this.locale === other.locale &&\n      this.numberingSystem === other.numberingSystem &&\n      this.outputCalendar === other.outputCalendar\n    );\n  }\n}\n","import { Util } from './util';\nimport { DateTime } from '../datetime';\n\nfunction stringifyTokens(splits, tokenToString) {\n  let s = '';\n  for (const token of splits) {\n    if (token.literal) {\n      s += token.val;\n    } else {\n      s += tokenToString(token.val);\n    }\n  }\n  return s;\n}\n\n/**\n * @private\n */\n\nexport class Formatter {\n  static create(locale, opts = {}) {\n    const formatOpts = Util.assign({}, { round: true }, opts);\n    return new Formatter(locale, formatOpts);\n  }\n\n  static parseFormat(fmt) {\n    let current = null,\n      currentFull = '',\n      bracketed = false;\n    const splits = [];\n    for (let i = 0; i < fmt.length; i++) {\n      const c = fmt.charAt(i);\n      if (c === \"'\") {\n        if (currentFull.length > 0) {\n          splits.push({ literal: bracketed, val: currentFull });\n        }\n        current = null;\n        currentFull = '';\n        bracketed = !bracketed;\n      } else if (bracketed) {\n        currentFull += c;\n      } else if (c === current) {\n        currentFull += c;\n      } else {\n        if (currentFull.length > 0) {\n          splits.push({ literal: false, val: currentFull });\n        }\n        currentFull = c;\n        current = c;\n      }\n    }\n\n    if (currentFull.length > 0) {\n      splits.push({ literal: bracketed, val: currentFull });\n    }\n\n    return splits;\n  }\n\n  constructor(locale, formatOpts) {\n    this.opts = formatOpts;\n    this.loc = locale;\n  }\n\n  formatDateTime(dt, opts = {}) {\n    const [df, d] = this.loc.dtFormatter(dt, Util.assign({}, this.opts, opts));\n    return df.format(d);\n  }\n\n  formatDateTimeParts(dt, opts = {}) {\n    const [df, d] = this.loc.dtFormatter(dt, Util.assign({}, this.opts, opts));\n    return df.format(d);\n  }\n\n  resolvedOptions(dt, opts = {}) {\n    const [df, d] = this.loc.dtFormatter(dt, Util.assign({}, this.opts, opts));\n    return df.resolvedOptions(d);\n  }\n\n  num(n, p = 0) {\n    const opts = Util.assign({}, this.opts);\n\n    if (p > 0) {\n      opts.padTo = p;\n    }\n\n    return this.loc.numberFormatter(opts).format(n);\n  }\n\n  formatDateTimeFromString(dt, fmt) {\n    const string = (opts, extract) => this.loc.extract(dt, opts, extract),\n      formatOffset = opts => {\n        if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {\n          return 'Z';\n        }\n\n        const hours = Util.towardZero(dt.offset / 60),\n          minutes = Math.abs(dt.offset % 60),\n          sign = hours >= 0 ? '+' : '-',\n          base = `${sign}${Math.abs(hours)}`;\n\n        switch (opts.format) {\n          case 'short':\n            return `${sign}${this.num(Math.abs(hours), 2)}:${this.num(minutes, 2)}`;\n          case 'narrow':\n            return minutes > 0 ? `${base}:${minutes}` : base;\n          case 'techie':\n            return `${sign}${this.num(Math.abs(hours), 2)}${this.num(minutes, 2)}`;\n          default:\n            throw new RangeError(`Value format ${opts.format} is out of range for property format`);\n        }\n      },\n      tokenToString = token => {\n        const outputCal = this.loc.outputCalendar;\n\n        // Where possible: http://cldr.unicode.org/translation/date-time#TOC-Stand-Alone-vs.-Format-Styles\n        switch (token) {\n          // ms\n          case 'S':\n            return this.num(dt.millisecond);\n          case 'SSS':\n            return this.num(dt.millisecond, 3);\n          // seconds\n          case 's':\n            return this.num(dt.second);\n          case 'ss':\n            return this.num(dt.second, 2);\n          // minutes\n          case 'm':\n            return this.num(dt.minute);\n          case 'mm':\n            return this.num(dt.minute, 2);\n          // hours\n          case 'h':\n            return this.num(dt.hour === 12 ? 12 : dt.hour % 12);\n          case 'hh':\n            return this.num(dt.hour === 12 ? 12 : dt.hour % 12, 2);\n          case 'H':\n            return this.num(dt.hour);\n          case 'HH':\n            return this.num(dt.hour, 2);\n          // offset\n          case 'Z':\n            // like +6\n            return formatOffset({ format: 'narrow', allowZ: true });\n          case 'ZZ':\n            // like +06:00\n            return formatOffset({ format: 'short', allowZ: true });\n          case 'ZZZ':\n            // like +0600\n            return formatOffset({ format: 'techie', allowZ: false });\n          case 'ZZZZ':\n            // like EST\n            return dt.offsetNameShort;\n          case 'ZZZZZ':\n            // like Eastern Standard Time\n            return dt.offsetNameLong;\n          // zone\n          case 'z':\n            return dt.zoneName;\n          // like America/New_York\n          // meridiems\n          case 'a':\n            return string({ hour: 'numeric', hour12: true }, 'dayperiod');\n          // dates\n          case 'd':\n            return outputCal ? string({ day: 'numeric' }, 'day') : this.num(dt.day);\n          case 'dd':\n            return outputCal ? string({ day: '2-digit' }, 'day') : this.num(dt.day, 2);\n          // weekdays - format\n          case 'c':\n            // like 1\n            return this.num(dt.weekday);\n          case 'ccc':\n            // like 'Tues'\n            return string({ weekday: 'short' }, 'weekday');\n          case 'cccc':\n            // like 'Tuesday'\n            return string({ weekday: 'long' }, 'weekday');\n          case 'ccccc':\n            // like 'T'\n            return string({ weekday: 'narrow' }, 'weekday');\n          // weekdays - standalone\n          case 'E':\n            // like 1\n            return this.num(dt.weekday);\n          case 'EEE':\n            // like 'Tues'\n            return string({ weekday: 'short', month: 'long', day: 'numeric' }, 'weekday');\n          case 'EEEE':\n            // like 'Tuesday'\n            return string({ weekday: 'long', month: 'long', day: 'numeric' }, 'weekday');\n          case 'EEEEE':\n            // like 'T'\n            return string({ weekday: 'narrow', month: 'long', day: 'numeric' }, 'weekday');\n          // months - format\n          case 'L':\n            // like 1\n            return string({ month: 'numeric', day: 'numeric' }, 'month');\n          case 'LL':\n            // like 01, doesn't seem to work\n            return string({ month: '2-digit', day: 'numeric' }, 'month');\n          case 'LLL':\n            // like Jan\n            return string({ month: 'short', day: 'numeric' }, 'month');\n          case 'LLLL':\n            // like January\n            return string({ month: 'long' }, 'month');\n          case 'LLLLL':\n            // like J\n            return string({ month: 'narrow' }, 'month');\n          // months - standalone\n          case 'M':\n            // like 1\n            return outputCal ? string({ month: 'numeric' }, 'month') : this.num(dt.month);\n          case 'MM':\n            // like 01\n            return outputCal ? string({ month: '2-digit' }, 'month') : this.num(dt.month, 2);\n          case 'MMM':\n            // like Jan\n            return string({ month: 'short', day: 'numeric' }, 'month');\n          case 'MMMM':\n            // like January\n            return string({ month: 'long', day: 'numeric' }, 'month');\n          case 'MMMMM':\n            // like J\n            return string({ month: 'narrow' }, 'month');\n          // years\n          case 'y':\n            // like 2014\n            return outputCal ? string({ year: 'numeric' }, 'year') : this.num(dt.year);\n          case 'yy':\n            // like 14\n            return outputCal\n              ? string({ year: '2-digit' }, 'year')\n              : this.num(dt.year.toString().slice(-2), 2);\n          case 'yyyy':\n            // like 0012\n            return outputCal ? string({ year: 'numeric' }, 'year') : this.num(dt.year, 4);\n          // eras\n          case 'G':\n            // like AD\n            return string({ era: 'short' }, 'era');\n          case 'GG':\n            // like Anno Domini\n            return string({ era: 'long' }, 'era');\n          case 'GGGGG':\n            return string({ era: 'narrow' }, 'era');\n          case 'kk':\n            return this.num(dt.weekYear.toString().slice(-2), 2);\n          case 'kkkk':\n            return this.num(dt.weekYear, 4);\n          case 'W':\n            return this.num(dt.weekNumber);\n          case 'WW':\n            return this.num(dt.weekNumber, 2);\n          case 'o':\n            return this.num(dt.ordinal);\n          case 'ooo':\n            return this.num(dt.ordinal, 3);\n          // macros\n          case 'D':\n            return this.formatDateTime(dt, DateTime.DATE_SHORT);\n          case 'DD':\n            return this.formatDateTime(dt, DateTime.DATE_MED);\n          case 'DDD':\n            return this.formatDateTime(dt, DateTime.DATE_FULL);\n          case 'DDDD':\n            return this.formatDateTime(dt, DateTime.DATE_HUGE);\n          case 't':\n            return this.formatDateTime(dt, DateTime.TIME_SIMPLE);\n          case 'tt':\n            return this.formatDateTime(dt, DateTime.TIME_WITH_SECONDS);\n          case 'ttt':\n            return this.formatDateTime(dt, DateTime.TIME_WITH_SHORT_OFFSET);\n          case 'tttt':\n            return this.formatDateTime(dt, DateTime.TIME_WITH_LONG_OFFSET);\n          case 'T':\n            return this.formatDateTime(dt, DateTime.TIME_24_SIMPLE);\n          case 'TT':\n            return this.formatDateTime(dt, DateTime.TIME_24_WITH_SECONDS);\n          case 'TTT':\n            return this.formatDateTime(dt, DateTime.TIME_24_WITH_SHORT_OFFSET);\n          case 'TTTT':\n            return this.formatDateTime(dt, DateTime.TIME_24_WITH_LONG_OFFSET);\n          case 'f':\n            return this.formatDateTime(dt, DateTime.DATETIME_SHORT);\n          case 'ff':\n            return this.formatDateTime(dt, DateTime.DATETIME_MED);\n          case 'fff':\n            return this.formatDateTime(dt, DateTime.DATETIME_FULL);\n          case 'ffff':\n            return this.formatDateTime(dt, DateTime.DATETIME_HUGE);\n          case 'F':\n            return this.formatDateTime(dt, DateTime.DATETIME_SHORT_WITH_SECONDS);\n          case 'FF':\n            return this.formatDateTime(dt, DateTime.DATETIME_MED_WITH_SECONDS);\n          case 'FFF':\n            return this.formatDateTime(dt, DateTime.DATETIME_FULL_WITH_SECONDS);\n          case 'FFFF':\n            return this.formatDateTime(dt, DateTime.DATETIME_HUGE_WITH_SECONDS);\n\n          default:\n            return token;\n        }\n      };\n\n    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);\n  }\n\n  formatDuration() {}\n\n  formatDurationFromString(dur, fmt) {\n    const tokenToField = token => {\n        switch (token[0]) {\n          case 'S':\n            return 'millisecond';\n          case 's':\n            return 'second';\n          case 'm':\n            return 'minute';\n          case 'h':\n            return 'hour';\n          case 'd':\n            return 'day';\n          case 'M':\n            return 'month';\n          case 'y':\n            return 'year';\n          default:\n            return null;\n        }\n      },\n      tokenToString = lildur => token => {\n        const mapped = tokenToField(token);\n        if (mapped) {\n          return this.num(lildur.get(mapped), token.length);\n        } else {\n          return token;\n        }\n      },\n      tokens = Formatter.parseFormat(fmt),\n      realTokens = tokens.reduce(\n        (found, { literal, val }) => (literal ? found : found.concat(val)),\n        []\n      ),\n      collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter(t => t));\n    return stringifyTokens(tokens, tokenToString(collapsed));\n  }\n}\n","import { Util } from './util';\nimport { English } from './english';\nimport { FixedOffsetZone } from '../zones/fixedOffsetZone';\n\nfunction combineRegexes(...regexes) {\n  const full = regexes.reduce((f, r) => f + r.source, '');\n  return RegExp(full);\n}\n\nfunction combineExtractors(...extractors) {\n  return m =>\n    extractors\n      .reduce(\n        ([mergedVals, mergedZone, cursor], ex) => {\n          const [val, zone, next] = ex(m, cursor);\n          return [Object.assign(mergedVals, val), mergedZone || zone, next];\n        },\n        [{}, null, 1]\n      )\n      .slice(0, 2);\n}\n\nfunction parse(s, ...patterns) {\n  if (s == null) {\n    return [null, null];\n  }\n  for (const [regex, extractor] of patterns) {\n    const m = regex.exec(s);\n    if (m) {\n      return extractor(m);\n    }\n  }\n  return [null, null];\n}\n\nfunction simpleParse(...keys) {\n  return (match, cursor) => {\n    const ret = {};\n    let i;\n\n    for (i = 0; i < keys.length; i++) {\n      ret[keys[i]] = parseInt(match[cursor + i]);\n    }\n    return [ret, null, cursor + i];\n  };\n}\n\n// ISO parsing\nconst isoTimeRegex = /(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d\\d\\d))?)?)?(?:(Z)|([+-]\\d\\d)(?::?(\\d\\d))?)?)?$/,\n  extractISOYmd = simpleParse('year', 'month', 'day'),\n  isoYmdRegex = /^([+-]?\\d{6}|\\d{4})-?(\\d\\d)-?(\\d\\d)/,\n  extractISOWeekData = simpleParse('weekYear', 'weekNumber', 'weekDay'),\n  isoWeekRegex = /^(\\d{4})-?W(\\d\\d)-?(\\d)/,\n  isoOrdinalRegex = /^(\\d{4})-?(\\d{3})/,\n  extractISOOrdinalData = simpleParse('year', 'ordinal');\n\nfunction extractISOTime(match, cursor) {\n  const local = !match[cursor + 4] && !match[cursor + 5],\n    fullOffset = Util.signedOffset(match[cursor + 5], match[cursor + 6]),\n    item = {\n      hour: parseInt(match[cursor]) || 0,\n      minute: parseInt(match[cursor + 1]) || 0,\n      second: parseInt(match[cursor + 2]) || 0,\n      millisecond: parseInt(match[cursor + 3]) || 0\n    },\n    zone = local ? null : new FixedOffsetZone(fullOffset);\n\n  return [item, zone, cursor + 7];\n}\n\n// ISO duration parsing\n\nconst isoDuration = /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?)?$/;\n\nfunction extractISODuration(match) {\n  const [, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr] = match;\n\n  return {\n    year: parseInt(yearStr),\n    month: parseInt(monthStr),\n    day: parseInt(dayStr),\n    hour: parseInt(hourStr),\n    minute: parseInt(minuteStr),\n    second: parseInt(secondStr)\n  };\n}\n\n// These are a little braindead. EDT *should* tell us that we're in, say, America/New_York\n// and not just that we're in -240 *right now*. But since I don't think these are used that often\n// I'm just going to ignore that\nconst obsOffsets = {\n  GMT: 0,\n  EDT: -4 * 60,\n  EST: -5 * 60,\n  CDT: -5 * 60,\n  CST: -6 * 60,\n  MDT: -6 * 60,\n  MST: -7 * 60,\n  PDT: -7 * 60,\n  PST: -8 * 60\n};\n\nfunction fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n  const result = {\n    year: yearStr.length === 2 ? Util.untrucateYear(parseInt(yearStr)) : parseInt(yearStr),\n    month: English.monthsShort.indexOf(monthStr) + 1,\n    day: parseInt(dayStr),\n    hour: parseInt(hourStr),\n    minute: parseInt(minuteStr)\n  };\n\n  if (secondStr) result.second = parseInt(secondStr);\n  if (weekdayStr) {\n    result.weekday =\n      weekdayStr.length > 3\n        ? English.weekdaysLong.indexOf(weekdayStr) + 1\n        : English.weekdaysShort.indexOf(weekdayStr) + 1;\n  }\n\n  return result;\n}\n\n// RFC 2822/5322\nconst rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\\d\\d)(\\d\\d)))$/;\n\nfunction extractRFC2822(match) {\n  const [\n      ,\n      weekdayStr,\n      dayStr,\n      monthStr,\n      yearStr,\n      hourStr,\n      minuteStr,\n      secondStr,\n      obsOffset,\n      milOffset,\n      offHourStr,\n      offMinuteStr\n    ] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n\n  let offset;\n  if (obsOffset) {\n    offset = obsOffsets[obsOffset];\n  } else if (milOffset) {\n    offset = 0;\n  } else {\n    offset = Util.signedOffset(offHourStr, offMinuteStr);\n  }\n\n  return [result, new FixedOffsetZone(offset)];\n}\n\nfunction preprocessRFC2822(s) {\n  // Remove comments and folding whitespace and replace multiple-spaces with a single space\n  return s\n    .replace(/\\([^)]*\\)|[\\n\\t]/g, ' ')\n    .replace(/(\\s\\s+)/g, ' ')\n    .trim();\n}\n\n// http date\n\nconst rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d\\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  rfc850 = /^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\\d\\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \\d|\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) (\\d{4})$/;\n\nfunction extractRFC1123Or850(match) {\n  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\nfunction extractASCII(match) {\n  const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\n/**\n * @private\n */\n\nexport class RegexParser {\n  static parseISODate(s) {\n    return parse(\n      s,\n      [combineRegexes(isoYmdRegex, isoTimeRegex), combineExtractors(extractISOYmd, extractISOTime)],\n      [\n        combineRegexes(isoWeekRegex, isoTimeRegex),\n        combineExtractors(extractISOWeekData, extractISOTime)\n      ],\n      [\n        combineRegexes(isoOrdinalRegex, isoTimeRegex),\n        combineExtractors(extractISOOrdinalData, extractISOTime)\n      ]\n    );\n  }\n\n  static parseRFC2822Date(s) {\n    return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);\n  }\n\n  static parseHTTPDate(s) {\n    return parse(\n      s,\n      [rfc1123, extractRFC1123Or850],\n      [rfc850, extractRFC1123Or850],\n      [ascii, extractASCII]\n    );\n  }\n\n  static parseISODuration(s) {\n    return parse(s, [isoDuration, extractISODuration]);\n  }\n}\n","import { Util } from './impl/util';\nimport { Locale } from './impl/locale';\nimport { Formatter } from './impl/formatter';\nimport { RegexParser } from './impl/regexParser';\nimport { Settings } from './settings';\nimport { InvalidArgumentError, InvalidDurationError, InvalidUnitError } from './errors';\n\nconst INVALID = 'Invalid Duration';\n\nconst lowOrderMatrix = {\n    weeks: {\n      days: 7,\n      hours: 7 * 24,\n      minutes: 7 * 24 * 60,\n      seconds: 7 * 24 * 60 * 60,\n      milliseconds: 7 * 24 * 60 * 60 * 1000\n    },\n    days: {\n      hours: 24,\n      minutes: 24 * 60,\n      seconds: 24 * 60 * 60,\n      milliseconds: 24 * 60 * 60 * 1000\n    },\n    hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1000 },\n    minutes: { seconds: 60, milliseconds: 60 * 1000 },\n    seconds: { milliseconds: 1000 }\n  },\n  casualMatrix = Util.assign(\n    {\n      years: {\n        months: 12,\n        weeks: 52,\n        days: 365,\n        hours: 365 * 24,\n        minutes: 365 * 24 * 60,\n        seconds: 365 * 24 * 60 * 60,\n        milliseconds: 365 * 24 * 60 * 60 * 1000\n      },\n      months: {\n        weeks: 4,\n        days: 30,\n        hours: 30 * 24,\n        minutes: 30 * 24 * 60,\n        seconds: 30 * 24 * 60 * 60,\n        milliseconds: 30 * 24 * 60 * 60 * 1000\n      }\n    },\n    lowOrderMatrix\n  ),\n  daysInYearAccurate = 146097.0 / 400,\n  daysInMonthAccurate = 146097.0 / 4800,\n  accurateMatrix = Util.assign(\n    {\n      years: {\n        months: 12,\n        weeks: daysInYearAccurate / 7,\n        days: daysInYearAccurate,\n        hours: daysInYearAccurate * 24,\n        minutes: daysInYearAccurate * 24 * 60,\n        seconds: daysInYearAccurate * 24 * 60 * 60,\n        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000\n      },\n      months: {\n        weeks: daysInMonthAccurate / 7,\n        days: daysInMonthAccurate,\n        hours: daysInYearAccurate * 24,\n        minutes: daysInYearAccurate * 24 * 60,\n        seconds: daysInYearAccurate * 24 * 60 * 60,\n        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000\n      }\n    },\n    lowOrderMatrix\n  );\n\nconst orderedUnits = [\n  'years',\n  'months',\n  'weeks',\n  'days',\n  'hours',\n  'minutes',\n  'seconds',\n  'milliseconds'\n];\n\nfunction clone(dur, alts, clear = false) {\n  // deep merge for vals\n  const conf = {\n    values: clear ? alts.values : Util.assign(dur.values, alts.values || {}),\n    loc: dur.loc.clone(alts.loc),\n    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy\n  };\n  return new Duration(conf);\n}\n\nfunction isHighOrderNegative(obj) {\n  // only rule is that the highest-order part must be non-negative\n  for (const k of orderedUnits) {\n    if (obj[k]) return obj[k] < 0;\n  }\n  return false;\n}\n\n/**\n * A Duration object represents a period of time, like \"2 months\" or \"1 day, 1 hour\". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime.plus} to add a Duration object to a DateTime, producing another DateTime.\n *\n * Here is a brief overview of commonly used methods and getters in Duration:\n *\n * * **Creation** To create a Duration, use {@link fromMilliseconds}, {@link fromObject}, or {@link fromISO}.\n * * **Unit values** See the {@link years}, {@link months}, {@link weeks}, {@link days}, {@link hours}, {@link minutes}, {@link seconds}, {@link milliseconds} accessors.\n * * **Configuration** See  {@link locale} and {@link numberingSystem} accessors.\n * * **Transformation** To create new Durations out of old ones use {@link plus}, {@link minus}, {@link normalize}, {@link set}, {@link reconfigure}, {@link shiftTo}, and {@link negate}.\n * * **Output** To convert the Duration into other representations, see {@link as}, {@link toISO}, {@link toFormat}, and {@link toJSON}\n *\n * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.\n */\nexport class Duration {\n  /**\n   * @private\n   */\n  constructor(config) {\n    const accurate = config.conversionAccuracy === 'longterm' || false;\n\n    Object.defineProperty(this, 'values', {\n      value: config.values,\n      enumerable: true\n    });\n    Object.defineProperty(this, 'loc', {\n      value: config.loc || Locale.create(),\n      enumerable: true\n    });\n    Object.defineProperty(this, 'conversionAccuracy', {\n      value: accurate ? 'longterm' : 'casual',\n      enumerable: true\n    });\n    Object.defineProperty(this, 'invalidReason', {\n      value: config.invalidReason || null,\n      enumerable: false\n    });\n    Object.defineProperty(this, 'matrix', {\n      value: accurate ? accurateMatrix : casualMatrix,\n      enumerable: false\n    });\n  }\n\n  /**\n   * Create Duration from a number of milliseconds.\n   * @param {number} count of milliseconds\n   * @param {Object} opts - options for parsing\n   * @param {string} [obj.locale='en-US'] - the locale to use\n   * @param {string} obj.numberingSystem - the numbering system to use\n   * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  static fromMilliseconds(count, opts) {\n    return Duration.fromObject(Util.assign({ milliseconds: count }, opts));\n  }\n\n  /**\n   * Create an DateTime from a Javascript object with keys like 'years' and 'hours'.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.years\n   * @param {number} obj.months\n   * @param {number} obj.weeks\n   * @param {number} obj.days\n   * @param {number} obj.hours\n   * @param {number} obj.minutes\n   * @param {number} obj.seconds\n   * @param {number} obj.milliseconds\n   * @param {string} [obj.locale='en-US'] - the locale to use\n   * @param {string} obj.numberingSystem - the numbering system to use\n   * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  static fromObject(obj) {\n    return new Duration({\n      values: Util.normalizeObject(obj, Duration.normalizeUnit, true),\n      loc: Locale.fromObject(obj),\n      conversionAccuracy: obj.conversionAccuracy\n    });\n  }\n\n  /**\n   * Create a DateTime from an ISO 8601 duration string.\n   * @param {string} text - text to parse\n   * @param {Object} opts - options for parsing\n   * @param {string} [obj.locale='en-US'] - the locale to use\n   * @param {string} obj.numberingSystem - the numbering system to use\n   * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromISO('P3Y6M4DT12H30M5S').toObject() //=> { years: 3, months: 6, day: 4, hours: 12, minutes: 30, seconds: 5 }\n   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }\n   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }\n   * @return {Duration}\n   */\n  static fromISO(text, opts) {\n    const obj = Util.assign(RegexParser.parseISODuration(text), opts);\n    return Duration.fromObject(obj);\n  }\n\n  /**\n   * Create an invalid Duration.\n   * @param {string} reason - reason this is invalid\n   * @return {Duration}\n   */\n  static invalid(reason) {\n    if (!reason) {\n      throw new InvalidArgumentError('need to specify a reason the DateTime is invalid');\n    }\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDurationError(reason);\n    } else {\n      return new Duration({ invalidReason: reason });\n    }\n  }\n\n  /**\n   * @private\n   */\n  static normalizeUnit(unit, ignoreUnknown = false) {\n    const normalized = {\n      year: 'years',\n      years: 'years',\n      month: 'months',\n      months: 'months',\n      week: 'weeks',\n      weeks: 'weeks',\n      day: 'days',\n      days: 'days',\n      hour: 'hours',\n      hours: 'hours',\n      minute: 'minutes',\n      minutes: 'minutes',\n      second: 'seconds',\n      seconds: 'seconds',\n      millisecond: 'milliseconds',\n      milliseconds: 'milliseconds'\n    }[unit ? unit.toLowerCase() : unit];\n\n    if (!ignoreUnknown && !normalized) throw new InvalidUnitError(unit);\n\n    return normalized;\n  }\n\n  /**\n   * Get  the locale of a Duration, such 'en-UK'\n   * @return {string}\n   */\n  get locale() {\n    return this.loc.locale;\n  }\n\n  /**\n   * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration\n   *\n   * @return {string}\n   */\n  get numberingSystem() {\n    return this.loc.numberingSystem;\n  }\n\n  /**\n   * Returns a string representation of this Duration formatted according to the specified format string.\n   * @param {string} fmt - the format string\n   * @param {object} opts - options\n   * @param {boolean} opts.round - round numerical values\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc, opts).formatDurationFromString(this, fmt)\n      : INVALID;\n  }\n\n  /**\n   * Returns a Javascript object with this Duration's values.\n   * @param opts - options for generating the object\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }\n   * @return {object}\n   */\n  toObject(opts = {}) {\n    if (!this.isValid) return {};\n\n    const base = Util.assign({}, this.values);\n\n    if (opts.includeConfig) {\n      base.conversionAccuracy = this.conversionAccuracy;\n      base.numberingSystem = this.loc.numberingSystem;\n      base.locale = this.loc.locale;\n    }\n    return base;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Duration.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'\n   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'\n   * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'\n   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'\n   * @return {string}\n   */\n  toISO() {\n    // we could use the formatter, but this is an easier way to get the minimum string\n    if (!this.isValid) return null;\n\n    let s = 'P',\n      norm = this.normalize();\n\n    // ISO durations are always positive, so take the absolute value\n    norm = isHighOrderNegative(norm.values) ? norm.negate() : norm;\n\n    if (norm.years > 0) s += norm.years + 'Y';\n    if (norm.months > 0) s += norm.months + 'M';\n    if (norm.days > 0 || norm.weeks > 0) s += norm.days + norm.weeks * 7 + 'D';\n    if (norm.hours > 0 || norm.minutes > 0 || norm.seconds > 0 || norm.milliseconds > 0) s += 'T';\n    if (norm.hours > 0) s += norm.hours + 'H';\n    if (norm.minutes > 0) s += norm.minutes + 'M';\n    if (norm.seconds > 0) s += norm.seconds + 'S';\n    return s;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.\n   * @return {string}\n   */\n  toString() {\n    return this.toISO();\n  }\n\n  /**\n   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|number|object} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = Util.friendlyDuration(duration),\n      result = {};\n\n    for (const k of orderedUnits) {\n      const val = dur.get(k) + this.get(k);\n      if (val !== 0) {\n        result[k] = val;\n      }\n    }\n\n    return clone(this, { values: result }, true);\n  }\n\n  /**\n   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|number|object} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  minus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = Util.friendlyDuration(duration);\n    return this.plus(dur.negate());\n  }\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example Duration.fromObject({years: 2, days: 3}).years //=> 2\n   * @example Duration.fromObject({years: 2, days: 3}).months //=> 0\n   * @example Duration.fromObject({years: 2, days: 3}).days //=> 3\n   * @return {number}\n   */\n  get(unit) {\n    return this[Duration.normalizeUnit(unit)];\n  }\n\n  /**\n   * \"Set\" the values of specified units. Return a newly-constructed Duration.\n   * @param {object} values - a mapping of units to numbers\n   * @example dur.set({ years: 2017 })\n   * @example dur.set({ hours: 8, minutes: 30 })\n   * @return {Duration}\n   */\n  set(values) {\n    const mixed = Util.assign(this.values, Util.normalizeObject(values, Duration.normalizeUnit));\n    return clone(this, { values: mixed });\n  }\n\n  /**\n   * \"Set\" the locale and/or numberingSystem.  Returns a newly-constructed Duration.\n   * @example dur.reconfigure({ locale: 'en-UK' })\n   * @return {Duration}\n   */\n  reconfigure({ locale, numberingSystem, conversionAccuracy } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem }),\n      opts = { loc };\n\n    if (conversionAccuracy) {\n      opts.conversionAccuracy = conversionAccuracy;\n    }\n\n    return clone(this, opts);\n  }\n\n  /**\n   * Return the length of the duration in the specified unit.\n   * @param {string} unit - a unit such as 'minutes' or 'days'\n   * @example Duration.fromObject({years: 1}).as('days') //=> 365\n   * @example Duration.fromObject({years: 1}).as('months') //=> 12\n   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5\n   * @return {number}\n   */\n  as(unit) {\n    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;\n  }\n\n  /**\n   * Reduce this Duration to its canonical representation in its current units.\n   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }\n   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }\n   * @return {Duration}\n   */\n  normalize() {\n    if (!this.isValid) return this;\n\n    const neg = isHighOrderNegative(this.values),\n      dur = neg ? this.negate() : this,\n      shifted = dur.shiftTo(...Object.keys(this.values));\n    return neg ? shifted.negate() : shifted;\n  }\n\n  /**\n   * Convert this Duration into its representation in a different set of units.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }\n   * @return {Duration}\n   */\n  shiftTo(...units) {\n    if (!this.isValid) return this;\n\n    if (units.length === 0) {\n      return this;\n    }\n\n    units = units.map(Duration.normalizeUnit);\n\n    const built = {},\n      accumulated = {},\n      vals = this.toObject();\n    let lastUnit;\n\n    for (const k of orderedUnits) {\n      if (units.indexOf(k) >= 0) {\n        built[k] = 0;\n        lastUnit = k;\n\n        // anything we haven't boiled down yet should get boiled to this unit\n        for (const ak in accumulated) {\n          if (accumulated.hasOwnProperty(ak)) {\n            built[k] += this.matrix[ak][k] * accumulated[ak];\n          }\n          delete accumulated[ak];\n        }\n\n        // plus anything that's already in this unit\n        if (Util.isNumber(vals[k])) {\n          built[k] += vals[k];\n        }\n\n        // plus anything further down the chain that should be rolled up in to this\n        for (const down in vals) {\n          if (orderedUnits.indexOf(down) > orderedUnits.indexOf(k)) {\n            const conv = this.matrix[k][down],\n              added = Math.floor(vals[down] / conv);\n            built[k] += added;\n            vals[down] -= added * conv;\n          }\n        }\n        // otherwise, keep it in the wings to boil it later\n      } else if (Util.isNumber(vals[k])) {\n        accumulated[k] = vals[k];\n      }\n    }\n\n    // anything leftover becomes the decimal for the last unit\n    if (lastUnit) {\n      for (const key in accumulated) {\n        if (accumulated.hasOwnProperty(key)) {\n          built[lastUnit] += accumulated[key] / this.matrix[lastUnit][key];\n        }\n      }\n    }\n\n    return clone(this, { values: built }, true);\n  }\n\n  /**\n   * Return the negative of this Duration.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }\n   * @return {Duration}\n   */\n  negate() {\n    if (!this.isValid) return this;\n    const negated = {};\n    for (const k of Object.keys(this.values)) {\n      negated[k] = -this.values[k];\n    }\n    return Duration.fromObject(negated);\n  }\n\n  /**\n   * Get the years.\n   * @return {number}\n   */\n  get years() {\n    return this.isValid ? this.values.years || 0 : NaN;\n  }\n\n  /**\n   * Get the months.\n   * @return {number}\n   */\n  get months() {\n    return this.isValid ? this.values.months || 0 : NaN;\n  }\n\n  /**\n   * Get the weeks\n   * @return {number}\n   */\n  get weeks() {\n    return this.isValid ? this.values.weeks || 0 : NaN;\n  }\n\n  /**\n   * Get the days.\n   * @return {number\n   */\n  get days() {\n    return this.isValid ? this.values.days || 0 : NaN;\n  }\n\n  /**\n   * Get the hours.\n   * @return {number}\n   */\n  get hours() {\n    return this.isValid ? this.values.hours || 0 : NaN;\n  }\n\n  /**\n   * Get the minutes.\n   * @return {number}\n   */\n  get minutes() {\n    return this.isValid ? this.values.minutes || 0 : NaN;\n  }\n\n  /**\n   * Get the seconds.\n   * @return {number}\n   */\n  get seconds() {\n    return this.isValid ? this.values.seconds || 0 : NaN;\n  }\n\n  /**\n   * Get the milliseconds.\n   * @return {number}\n   */\n  get milliseconds() {\n    return this.isValid ? this.values.milliseconds || 0 : NaN;\n  }\n\n  /**\n   * Returns whether the Duration is invalid. Invalid durations are returned by diff operations\n   * on invalid DateTimes or Intervals.\n   * @return {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an explanation of why this Duration became invalid, or null if the Duration is valid\n   * @return {string}\n   */\n  get invalidReason() {\n    return this.invalidReason;\n  }\n\n  /**\n   * Equality check\n   * Two Durations are equal iff they have the same units and the same values for each unit.\n   * @param {Duration} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    for (const u of orderedUnits) {\n      if (this.values[u] !== other.values[u]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { Util } from './impl/util';\nimport { DateTime } from './datetime';\nimport { Duration } from './duration';\nimport { Settings } from './settings';\nimport { InvalidArgumentError, InvalidIntervalError } from './errors';\n\nconst INVALID = 'Invalid Interval';\n\nfunction validateStartEnd(start, end) {\n  return !!start && !!end && start.isValid && end.isValid && start <= end;\n}\n\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link fromDateTimes}, {@link after}, {@link before}, or {@link fromISO}.\n * * **Accessors** Use {@link start} and {@link end} to get the start and end.\n * * **Interogation** To analyze the Interval, use {@link count}, {@link length}, {@link hasSame}, {@link contains}, {@link isAfter}, or {@link isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link set}, {@link splitAt}, {@link splitBy}, {@link divideEqually}, {@link merge}, {@link xor}, {@link union}, {@link intersection}, or {@link difference}.\n * * **Comparison** To compare this Interval to another one, use {@link equals}, {@link overlaps}, {@link abutsStart}, {@link abutsEnd}, {@link engulfs}\n * * **Output*** To convert the Interval into other representations, see {@link toString}, {@link toISO}, {@link toFormat}, and {@link toDuration}.\n */\nexport class Interval {\n  /**\n   * @private\n   */\n  constructor(config) {\n    Object.defineProperty(this, 's', { value: config.start, enumerable: true });\n    Object.defineProperty(this, 'e', { value: config.end, enumerable: true });\n    Object.defineProperty(this, 'invalidReason', {\n      value: config.invalidReason || null,\n      enumerable: false\n    });\n  }\n\n  /**\n   * Create an invalid Interval.\n   * @return {Interval}\n   */\n  static invalid(reason) {\n    if (!reason) {\n      throw new InvalidArgumentError('need to specify a reason the DateTime is invalid');\n    }\n    if (Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(reason);\n    } else {\n      return new Interval({ invalidReason: reason });\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|object|Date} start\n   * @param {DateTime|object|Date} end\n   * @return {Interval}\n   */\n  static fromDateTimes(start, end) {\n    const builtStart = Util.friendlyDateTime(start),\n      builtEnd = Util.friendlyDateTime(end);\n\n    return new Interval({\n      start: builtStart,\n      end: builtEnd,\n      invalidReason: validateStartEnd(builtStart, builtEnd) ? null : 'invalid endpoints'\n    });\n  }\n\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|object|Date} start\n   * @param {Duration|number|object} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static after(start, duration) {\n    const dur = Util.friendlyDuration(duration),\n      dt = Util.friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|object|Date} end\n   * @param {Duration|number|object} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static before(end, duration) {\n    const dur = Util.friendlyDuration(duration),\n      dt = Util.friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n\n  /**\n   * Create an Interval from an ISO 8601 string\n   * @param {string} string - the ISO string to parse\n   * @param {object} opts - options to pass {@see DateTime.fromISO}\n   * @return {Interval}\n   */\n  static fromISO(string, opts) {\n    if (string) {\n      const [s, e] = string.split(/\\//);\n      if (s && e) {\n        return Interval.fromDateTimes(DateTime.fromISO(s, opts), DateTime.fromISO(e, opts));\n      }\n    }\n    return Interval.invalid('invalid ISO format');\n  }\n\n  /**\n   * Returns the start of the Interval\n   * @return {DateTime}\n   */\n  get start() {\n    return this.isValid ? this.s : null;\n  }\n\n  /**\n   * Returns the end of the Interval\n   * @return {DateTime}\n   */\n  get end() {\n    return this.isValid ? this.e : null;\n  }\n\n  /**\n   * Returns whether this Interval's end is at least its start, i.e. that the Interval isn't 'backwards'.\n   * @return {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n   * @return {string}\n   */\n  get invalidReason() {\n    return this.invalidReason;\n  }\n\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n   * @return {number}\n   */\n  length(unit = 'milliseconds') {\n    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;\n  }\n\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\n   * @return {number}\n   */\n  count(unit = 'milliseconds') {\n    if (!this.isValid) return NaN;\n    const start = this.start.startOf(unit),\n      end = this.end.startOf(unit);\n    return Math.floor(end.diff(start, unit).get(unit)) + 1;\n  }\n\n  /**\n   * Returns whether this Interval's start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */\n  hasSame(unit) {\n    return this.isValid ? this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */\n  isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n\n  /**\n   * Return this Interval's start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n\n  /**\n   * Return this Interval's end is before the specified DateTime.\n   * @param {Datetime} dateTime\n   * @return {boolean}\n   */\n  isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e.plus(1) < dateTime;\n  }\n\n  /**\n   * Return this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n\n  /**\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */\n  set({ start, end } = {}) {\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...DateTimes} dateTimes - the unit of time to count.\n   * @return {[Interval]}\n   */\n  splitAt(...dateTimes) {\n    if (!this.isValid) return [];\n    const sorted = dateTimes.map(Util.friendlyDateTime).sort(),\n      results = [];\n    let { s } = this,\n      i = 0;\n\n    while (s < this.e) {\n      const added = sorted[i] || this.e,\n        next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|number|object} duration - The length of each resulting interval.\n   * @return {[Interval]}\n   */\n  splitBy(duration) {\n    if (!this.isValid) return [];\n    const dur = Util.friendlyDuration(duration),\n      results = [];\n    let { s } = this,\n      added,\n      next;\n\n    while (s < this.e) {\n      added = s.plus(dur);\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {[Interval]}\n   */\n  divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n\n  /**\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n\n  /**\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n\n  /**\n   * Return whether this Interval engulfs the start and end of the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  equals(other) {\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  intersection(other) {\n    if (!this.isValid) return this;\n    const s = this.s > other.s ? this.s : other.s,\n      e = this.e < other.e ? this.e : other.e;\n\n    if (s > e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  union(other) {\n    if (!this.isValid) return this;\n    const s = this.s < other.s ? this.s : other.s,\n      e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n\n  /**\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * @param {[Interval]} intervals\n   * @return {[Interval]}\n   */\n  static merge(intervals) {\n    const [found, final] = intervals.sort((a, b) => a.s - b.s).reduce(([sofar, current], item) => {\n      if (!current) {\n        return [sofar, item];\n      } else if (current.overlaps(item) || current.abutsStart(item)) {\n        return [sofar, current.union(item)];\n      } else {\n        return [sofar.concat([current]), item];\n      }\n    },\n    [[], null]);\n    if (final) {\n      found.push(final);\n    }\n    return found;\n  }\n\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {[Interval]} intervals\n   * @return {[Interval]}\n   */\n  static xor(intervals) {\n    let start = null,\n      currentCount = 0;\n    const results = [],\n      ends = intervals.map(i => [{ time: i.s, type: 's' }, { time: i.e, type: 'e' }]),\n      arr = Util.flatten(ends).sort((a, b) => a.time - b.time);\n\n    for (const i of arr) {\n      currentCount += i.type === 's' ? 1 : -1;\n\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n\n        start = null;\n      }\n    }\n\n    return Interval.merge(results);\n  }\n\n  /**\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {Interval}\n   */\n  difference(...intervals) {\n    return Interval.xor([this].concat(intervals))\n      .map(i => this.intersection(i))\n      .filter(i => i && !i.isEmpty());\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */\n  toString() {\n    if (!this.isValid) return INVALID;\n    return `[${this.s.toISO()} – ${this.e.toISO()})`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {object} opts - The same options as {@link DateTime.toISO}\n   * @return {string}\n   */\n  toISO(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format string.\n   * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime.toFormat} for details.\n   * @param {object} opts - options\n   * @param {string} [opts.separator =  ' – '] - a separator to place between the start and end representations\n   * @return {string}\n   */\n  toFormat(dateFormat, { separator = ' – ' } = {}) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;\n  }\n\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */\n  toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n    return this.e.diff(this.s, unit, opts);\n  }\n}\n","import { Util } from './util';\nimport { Formatter } from './formatter';\nimport { FixedOffsetZone } from '../zones/fixedOffsetZone';\nimport { IANAZone } from '../zones/IANAZone';\n\nfunction intUnit(regex, post = i => i) {\n  return { regex, deser: ([s]) => post(parseInt(s, 10)) };\n}\n\nfunction oneOf(strings, startIndex) {\n  return {\n    regex: RegExp(strings.join('|')),\n    deser: ([s]) => strings.indexOf(s) + startIndex\n  };\n}\n\nfunction offset(regex, groups) {\n  return { regex, deser: ([, h, m]) => Util.signedOffset(h, m), groups };\n}\n\nfunction simple(regex) {\n  return { regex, deser: ([s]) => s };\n}\n\nfunction unitForToken(token, loc) {\n  const one = /\\d/,\n    two = /\\d\\d/,\n    three = /\\d{3}/,\n    four = /\\d{4}/,\n    oneOrTwo = /\\d\\d?/,\n    oneToThree = /\\d\\d{2}?/,\n    twoToFour = /\\d\\d\\d{2}?/,\n    literal = t => ({ regex: RegExp(t.val), deser: ([s]) => s, literal: true }),\n    unitate = t => {\n      if (token.literal) {\n        return literal(t);\n      }\n\n      switch (t.val) {\n        // era\n        case 'G':\n          return oneOf(loc.eras('short'), 0);\n        case 'GG':\n          return oneOf(loc.eras('long'), 0);\n        // years\n        case 'yyyy':\n          return intUnit(four);\n        case 'yy':\n          return intUnit(twoToFour, Util.untruncateYear);\n        // months\n        case 'M':\n          return intUnit(oneOrTwo);\n        case 'MM':\n          return intUnit(two);\n        case 'MMM':\n          return oneOf(loc.months('short', true), 1);\n        case 'MMMM':\n          return oneOf(loc.months('long', true), 1);\n        case 'L':\n          return intUnit(oneOrTwo);\n        case 'LL':\n          return intUnit(two);\n        case 'LLL':\n          return oneOf(loc.months('short', false), 1);\n        case 'LLLL':\n          return oneOf(loc.months('long', false), 1);\n        // dates\n        case 'd':\n          return intUnit(oneOrTwo);\n        case 'dd':\n          return intUnit(two);\n        // ordinals\n        case 'o':\n          return intUnit(oneToThree);\n        case 'ooo':\n          return intUnit(three);\n        // time\n        case 'HH':\n          return intUnit(two);\n        case 'H':\n          return intUnit(oneOrTwo);\n        case 'hh':\n          return intUnit(two);\n        case 'h':\n          return intUnit(oneOrTwo);\n        case 'mm':\n          return intUnit(two);\n        case 'm':\n          return intUnit(oneOrTwo);\n        case 's':\n          return intUnit(oneOrTwo);\n        case 'ss':\n          return intUnit(two);\n        case 'S':\n          return intUnit(oneToThree);\n        case 'SSS':\n          return intUnit(three);\n        // meridiem\n        case 'a':\n          return oneOf(loc.meridiems(), 0);\n        // weekYear (k)\n        case 'kkkk':\n          return intUnit(four);\n        case 'kk':\n          return intUnit(twoToFour, Util.untruncateYear);\n        // weekNumber (W)\n        case 'W':\n          return intUnit(oneOrTwo);\n        case 'WW':\n          return intUnit(two);\n        // weekdays\n        case 'E':\n        case 'c':\n          return intUnit(one);\n        case 'EEE':\n          return oneOf(loc.weekdays('short', true), 1);\n        case 'EEEE':\n          return oneOf(loc.weekdays('long', true), 1);\n        case 'ccc':\n          return oneOf(loc.weekdays('short', false), 1);\n        case 'cccc':\n          return oneOf(loc.weekdays('long', false), 1);\n        // offset/zone\n        case 'Z':\n        case 'ZZ':\n          return offset(/([+-]\\d{1,2})(?::(\\d{2}))?/, 2);\n        case 'ZZZ':\n          return offset(/([+-]\\d{1,2})(\\d{2})?/, 2);\n        // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing\n        // because we don't have any way to figure out what they are\n        case 'z':\n          return simple(/[A-Za-z_]+\\/[A-Za-z_]+/);\n        default:\n          return literal(t);\n      }\n    },\n    unit = unitate(token);\n  unit.token = token;\n  return unit;\n}\n\nfunction buildRegex(units) {\n  return [units.map(u => u.regex).reduce((f, r) => `${f}(${r.source})`, ''), units];\n}\n\nfunction match(input, regex, handlers) {\n  const matches = input.match(regex);\n\n  if (matches) {\n    const all = {};\n    let matchIndex = 1;\n    for (const i in handlers) {\n      if (handlers.hasOwnProperty(i)) {\n        const h = handlers[i],\n          groups = h.groups ? h.groups + 1 : 1;\n        if (!h.literal && h.token) {\n          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));\n        }\n        matchIndex += groups;\n      }\n    }\n    return all;\n  } else {\n    return {};\n  }\n}\n\nfunction dateTimeFromMatches(matches) {\n  const toField = token => {\n    switch (token) {\n      case 'S':\n        return 'millisecond';\n      case 's':\n        return 'second';\n      case 'm':\n        return 'minute';\n      case 'h':\n      case 'H':\n        return 'hour';\n      case 'd':\n        return 'day';\n      case 'o':\n        return 'ordinal';\n      case 'L':\n      case 'M':\n        return 'month';\n      case 'y':\n        return 'year';\n      case 'E':\n      case 'c':\n        return 'weekday';\n      case 'W':\n        return 'weekNumber';\n      case 'k':\n        return 'weekYear';\n      default:\n        return null;\n    }\n  };\n\n  let zone;\n  if (!Util.isUndefined(matches.Z)) {\n    zone = new FixedOffsetZone(matches.Z);\n  } else if (!Util.isUndefined(matches.z)) {\n    zone = new IANAZone(matches.z);\n  } else {\n    zone = null;\n  }\n\n  if (!Util.isUndefined(matches.h) && matches.a === 1) {\n    matches.h += 12;\n  }\n\n  if (matches.G === 0 && matches.y) {\n    matches.y = -matches.y;\n  }\n\n  const vals = Object.keys(matches).reduce((r, k) => {\n    const f = toField(k);\n    if (f) {\n      r[f] = matches[k];\n    }\n\n    return r;\n  }, {});\n\n  return [vals, zone];\n}\n\n/**\n * @private\n */\n\nexport class TokenParser {\n  constructor(loc) {\n    Object.defineProperty(this, 'loc', { value: loc, enumerable: true });\n  }\n\n  explainParse(input, format) {\n    const tokens = Formatter.parseFormat(format),\n      units = tokens.map(t => unitForToken(t, this.loc)),\n      [regex, handlers] = buildRegex(units),\n      matches = match(input, regex, handlers),\n      [result, zone] = matches ? dateTimeFromMatches(matches) : [null, null];\n\n    return { input, tokens, regex, matches, result, zone };\n  }\n\n  parseDateTime(input, format) {\n    const { result, zone } = this.explainParse(input, format);\n    return [result, zone];\n  }\n}\n","import { Util } from './util';\n\nconst nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],\n  leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];\n\nfunction dayOfWeek(year, month, day) {\n  const js = new Date(Date.UTC(year, month - 1, day)).getUTCDay();\n  return js === 0 ? 7 : js;\n}\n\nfunction lastWeekNumber(weekYear) {\n  const p1 =\n      (weekYear +\n        Math.floor(weekYear / 4) -\n        Math.floor(weekYear / 100) +\n        Math.floor(weekYear / 400)) %\n      7,\n    last = weekYear - 1,\n    p2 = (last + Math.floor(last / 4) - Math.floor(last / 100) + Math.floor(last / 400)) % 7;\n  return p1 === 4 || p2 === 3 ? 53 : 52;\n}\n\nfunction computeOrdinal(year, month, day) {\n  return day + (Util.isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];\n}\n\nfunction uncomputeOrdinal(year, ordinal) {\n  const table = Util.isLeapYear(year) ? leapLadder : nonLeapLadder,\n    month0 = table.findIndex(i => i < ordinal),\n    day = ordinal - table[month0];\n  return { month: month0 + 1, day };\n}\n\n/**\n * @private\n */\n\nexport class Conversions {\n  static gregorianToWeek(gregObj) {\n    const { year, month, day } = gregObj,\n      ordinal = computeOrdinal(year, month, day),\n      weekday = dayOfWeek(year, month, day);\n\n    let weekNumber = Math.floor((ordinal - weekday + 10) / 7),\n      weekYear;\n\n    if (weekNumber < 1) {\n      weekYear = year - 1;\n      weekNumber = lastWeekNumber(weekYear);\n    } else if (weekNumber > lastWeekNumber(year)) {\n      weekYear = year + 1;\n      weekNumber = 1;\n    } else {\n      weekYear = year;\n    }\n\n    return Util.assign({ weekYear, weekNumber, weekday }, Util.timeObject(gregObj));\n  }\n\n  static weekToGregorian(weekData) {\n    const { weekYear, weekNumber, weekday } = weekData,\n      weekdayOfJan4 = dayOfWeek(weekYear, 1, 4),\n      daysInYear = Util.daysInYear(weekYear);\n    let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3,\n      year;\n\n    if (ordinal < 1) {\n      year = weekYear - 1;\n      ordinal += Util.daysInYear(year);\n    } else if (ordinal > daysInYear) {\n      year = weekYear + 1;\n      ordinal -= Util.daysInYear(year);\n    } else {\n      year = weekYear;\n    }\n\n    const { month, day } = uncomputeOrdinal(year, ordinal);\n\n    return Util.assign({ year, month, day }, Util.timeObject(weekData));\n  }\n\n  static gregorianToOrdinal(gregData) {\n    const { year, month, day } = gregData,\n      ordinal = computeOrdinal(year, month, day);\n\n    return Util.assign({ year, ordinal }, Util.timeObject(gregData));\n  }\n\n  static ordinalToGregorian(ordinalData) {\n    const { year, ordinal } = ordinalData,\n      { month, day } = uncomputeOrdinal(year, ordinal);\n\n    return Util.assign({ year, month, day }, Util.timeObject(ordinalData));\n  }\n\n  static hasInvalidWeekData(obj) {\n    const validYear = Util.isNumber(obj.weekYear),\n      validWeek = Util.numberBetween(obj.weekNumber, 1, lastWeekNumber(obj.weekYear)),\n      validWeekday = Util.numberBetween(obj.weekday, 1, 7);\n\n    if (!validYear) {\n      return 'weekYear out of range';\n    } else if (!validWeek) {\n      return 'week out of range';\n    } else if (!validWeekday) {\n      return 'weekday out of range';\n    } else return false;\n  }\n\n  static hasInvalidOrdinalData(obj) {\n    const validYear = Util.isNumber(obj.year),\n      validOrdinal = Util.numberBetween(obj.ordinal, 1, Util.daysInYear(obj.year));\n\n    if (!validYear) {\n      return 'year out of range';\n    } else if (!validOrdinal) {\n      return 'ordinal out of range';\n    } else return false;\n  }\n\n  static hasInvalidGregorianData(obj) {\n    const validYear = Util.isNumber(obj.year),\n      validMonth = Util.numberBetween(obj.month, 1, 12),\n      validDay = Util.numberBetween(obj.day, 1, Util.daysInMonth(obj.year, obj.month));\n\n    if (!validYear) {\n      return 'year out of range';\n    } else if (!validMonth) {\n      return 'month out of range';\n    } else if (!validDay) {\n      return 'day out of range';\n    } else return false;\n  }\n\n  static hasInvalidTimeData(obj) {\n    const validHour = Util.numberBetween(obj.hour, 0, 23),\n      validMinute = Util.numberBetween(obj.minute, 0, 59),\n      validSecond = Util.numberBetween(obj.second, 0, 59),\n      validMillisecond = Util.numberBetween(obj.millisecond, 0, 999);\n\n    if (!validHour) {\n      return 'hour out of range';\n    } else if (!validMinute) {\n      return 'minute out of range';\n    } else if (!validSecond) {\n      return 'second out of range';\n    } else if (!validMillisecond) {\n      return 'millisecond out of range';\n    } else return false;\n  }\n}\n","import { Duration } from './duration';\nimport { Interval } from './interval';\nimport { Settings } from './settings';\nimport { Formatter } from './impl/formatter';\nimport { FixedOffsetZone } from './zones/fixedOffsetZone';\nimport { LocalZone } from './zones/localZone';\nimport { Locale } from './impl/locale';\nimport { Util } from './impl/util';\nimport { RegexParser } from './impl/regexParser';\nimport { TokenParser } from './impl/tokenParser';\nimport { Conversions } from './impl/conversions';\nimport {\n  InvalidArgumentError,\n  ConflictingSpecificationError,\n  InvalidUnitError,\n  InvalidDateTimeError\n} from './errors';\n\nconst INVALID = 'Invalid DateTime',\n  UNSUPPORTED_ZONE = 'unsupported zone';\n\nfunction possiblyCachedWeekData(dt) {\n  if (dt.weekData === null) {\n    dt.weekData = Conversions.gregorianToWeek(dt.c);\n  }\n  return dt.weekData;\n}\n\nfunction clone(inst, alts = {}) {\n  const current = {\n    ts: inst.ts,\n    zone: inst.zone,\n    c: inst.c,\n    o: inst.o,\n    loc: inst.loc,\n    invalidReason: inst.invalidReason\n  };\n  return new DateTime(Util.assign({}, current, alts, { old: current }));\n}\n\nfunction fixOffset(localTS, o, tz) {\n  // Our UTC time is just a guess because our offset is just a guess\n  let utcGuess = localTS - o * 60 * 1000;\n\n  // Test whether the zone matches the offset for this ts\n  const o2 = tz.offset(utcGuess);\n\n  // If so, offset didn't change and we're done\n  if (o === o2) {\n    return [utcGuess, o];\n  }\n\n  // If not, change the ts by the difference in the offset\n  utcGuess -= (o2 - o) * 60 * 1000;\n\n  // If that gives us the local time we want, we're done\n  const o3 = tz.offset(utcGuess);\n  if (o2 === o3) {\n    return [utcGuess, o2];\n  }\n\n  // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time\n  return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];\n}\n\nfunction tsToObj(ts, offset) {\n  ts += offset * 60 * 1000;\n\n  const d = new Date(ts);\n\n  return {\n    year: d.getUTCFullYear(),\n    month: d.getUTCMonth() + 1,\n    day: d.getUTCDate(),\n    hour: d.getUTCHours(),\n    minute: d.getUTCMinutes(),\n    second: d.getUTCSeconds(),\n    millisecond: d.getUTCMilliseconds()\n  };\n}\n\nfunction objToLocalTS(obj) {\n  let d = Date.UTC(\n    obj.year,\n    obj.month - 1,\n    obj.day,\n    obj.hour,\n    obj.minute,\n    obj.second,\n    obj.millisecond\n  );\n\n  // javascript is stupid and i hate it\n  if (obj.year < 100 && obj.year >= 0) {\n    d = new Date(d);\n    d.setFullYear(obj.year);\n  }\n  return +d;\n}\n\nfunction objToTS(obj, offset, zone) {\n  return fixOffset(objToLocalTS(obj), offset, zone);\n}\n\nfunction adjustTime(inst, dur) {\n  const oPre = inst.o,\n    c = Util.assign({}, inst.c, {\n      year: inst.c.year + dur.years,\n      month: inst.c.month + dur.months,\n      day: inst.c.day + dur.days + dur.weeks * 7\n    }),\n    millisToAdd = Duration.fromObject({\n      hours: dur.hours,\n      minutes: dur.minutes,\n      seconds: dur.seconds,\n      milliseconds: dur.milliseconds\n    }).as('milliseconds'),\n    localTS = objToLocalTS(c);\n\n  let [ts, o] = fixOffset(localTS, oPre, inst.zone);\n\n  if (millisToAdd !== 0) {\n    ts += millisToAdd;\n    // that could have changed the offset by going over a DST, but we want to keep the ts the same\n    o = inst.zone.offset(ts);\n  }\n\n  return { ts, o };\n}\n\nfunction parseDataToDateTime(parsed, parsedZone, opts = {}) {\n  const { setZone, zone } = opts;\n  if (parsed && Object.keys(parsed).length !== 0) {\n    const interpretationZone = parsedZone || zone,\n      inst = DateTime.fromObject(\n        Util.assign(parsed, opts, {\n          zone: interpretationZone\n        })\n      );\n    return setZone ? inst : inst.setZone(zone);\n  } else {\n    return DateTime.invalid(UNSUPPORTED_ZONE);\n  }\n}\n\nfunction formatMaybe(dt, format) {\n  return dt.isValid\n    ? Formatter.create(Locale.create('en')).formatDateTimeFromString(dt, format)\n    : null;\n}\n\nconst defaultUnitValues = {\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  },\n  defaultWeekUnitValues = {\n    weekNumber: 1,\n    weekday: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  },\n  defaultOrdinalUnitValues = {\n    ordinal: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  };\n\nfunction isoTimeFormat(dateTime, suppressSecs, suppressMillis) {\n  return suppressSecs && dateTime.second === 0 && dateTime.millisecond === 0\n    ? 'HH:mmZ'\n    : suppressMillis && dateTime.millisecond === 0 ? 'HH:mm:ssZZ' : 'HH:mm:ss.SSSZZ';\n}\n\nconst orderedUnits = ['year', 'month', 'day', 'hour', 'minute', 'second', 'millisecond'];\n\nconst orderedWeekUnits = [\n  'weekYear',\n  'weekNumber',\n  'weekday',\n  'hour',\n  'minute',\n  'second',\n  'millisecond'\n];\n\nconst orderedOrdinalUnits = ['year', 'ordinal', 'hour', 'minute', 'second', 'millisecond'];\n\nfunction normalizeUnit(unit, ignoreUnknown = false) {\n  const normalized = {\n    year: 'year',\n    years: 'year',\n    month: 'month',\n    months: 'month',\n    day: 'day',\n    days: 'day',\n    hour: 'hour',\n    hours: 'hour',\n    minute: 'minute',\n    minutes: 'minute',\n    second: 'second',\n    seconds: 'second',\n    millisecond: 'millisecond',\n    milliseconds: 'millisecond',\n    weekday: 'weekday',\n    weekdays: 'weekday',\n    weeknumber: 'weekNumber',\n    weeksnumber: 'weekNumber',\n    weeknumbers: 'weekNumber',\n    weekyear: 'weekYear',\n    weekyears: 'weekYear',\n    ordinal: 'ordinal'\n  }[unit ? unit.toLowerCase() : unit];\n\n  if (!ignoreUnknown && !normalized) throw new InvalidUnitError(unit);\n\n  return normalized;\n}\n\n/**\n * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.\n *\n * A DateTime comprises of:\n * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.\n * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).\n * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.\n *\n * Here is a brief overview of the most commonly used functionality it provides:\n *\n * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link local}, {@link utc}, and (most flexibly) {@link fromObject}. To create one from a standard string format, use {@link fromISO}, {@link fromHTTP}, and {@link fromRFC2822}. To create one from a custom string format, use {@link fromString}. To create one from a native JS date, use {@link fromJSDate}.\n * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link toObject}), use the {@link year}, {@link month},\n * {@link day}, {@link hour}, {@link minute}, {@link second}, {@link millisecond} accessors.\n * * **Week calendar**: For ISO week calendar attributes, see the {@link weekYear}, {@link weekNumber}, and {@link weekday} accessors.\n * * **Configuration** See the {@link locale} and {@link numberingSystem} accessors.\n * * **Transformation**: To transform the DateTime into other DateTimes, use {@link set}, {@link reconfigure}, {@link setZone}, {@link setLocale}, {@link plus}, {@link minus}, {@link endOf}, {@link startOf}, {@link toUTC}, and {@link toLocal}.\n * * **Output**: To convert the DateTime to other representations, use the {@link toJSON}, {@link toISO}, {@link toHTTP}, {@link toObject}, {@link toRFC2822}, {@link toString}, {@link toLocaleString}, {@link toFormat}, and {@link valueOf}.\n *\n * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.\n */\nexport class DateTime {\n  /**\n   * @access private\n   */\n  constructor(config = {}) {\n    const zone = config.zone || Settings.defaultZone,\n      invalidReason = config.invalidReason || (zone.isValid ? null : UNSUPPORTED_ZONE);\n\n    Object.defineProperty(this, 'ts', {\n      value: config.ts || Settings.now(),\n      enumerable: true\n    });\n\n    Object.defineProperty(this, 'zone', {\n      value: zone,\n      enumerable: true\n    });\n\n    Object.defineProperty(this, 'loc', {\n      value: config.loc || Locale.create(),\n      enumerable: true\n    });\n\n    Object.defineProperty(this, 'invalidReason', {\n      value: invalidReason,\n      enumerable: false\n    });\n\n    Object.defineProperty(this, 'weekData', {\n      writable: true, // !!!\n      value: null,\n      enumerable: false\n    });\n\n    if (!invalidReason) {\n      const unchanged =\n          config.old && config.old.ts === this.ts && config.old.zone.equals(this.zone),\n        c = unchanged ? config.old.c : tsToObj(this.ts, this.zone.offset(this.ts)),\n        o = unchanged ? config.old.o : this.zone.offset(this.ts);\n\n      Object.defineProperty(this, 'c', { value: c });\n      Object.defineProperty(this, 'o', { value: o });\n    }\n  }\n\n  // CONSTRUCT\n\n  /**\n   * Create a local DateTime\n   * @param {number} year - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, i.e. a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, i.e. a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, i.e. a number between 0 and 999\n   * @example DateTime.local()                            //~> now\n   * @example DateTime.local(2017)                        //~> 2017-01-01T00:00:00\n   * @example DateTime.local(2017, 3)                     //~> 2017-03-01T00:00:00\n   * @example DateTime.local(2017, 3, 12)                 //~> 2017-03-12T00:00:00\n   * @example DateTime.local(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00\n   * @example DateTime.local(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.675\n   * @return {DateTime}\n   */\n  static local(year, month, day, hour, minute, second, millisecond) {\n    if (Util.isUndefined(year)) {\n      return new DateTime({ ts: Settings.now() });\n    } else {\n      return DateTime.fromObject({\n        year,\n        month,\n        day,\n        hour,\n        minute,\n        second,\n        millisecond,\n        zone: Settings.defaultZone\n      });\n    }\n  }\n\n  /**\n   * Create a DateTime in UTC\n   * @param {number} year - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, i.e. a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, i.e. a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, i.e. a number between 0 and 999\n   * @example DateTime.utc()                            //~> now\n   * @example DateTime.utc(2017)                        //~> 2017-01-01T00:00:00Z\n   * @example DateTime.utc(2017, 3)                     //~> 2017-03-01T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12)                 //~> 2017-03-12T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.675Z\n   * @return {DateTime}\n   */\n  static utc(year, month, day, hour, minute, second, millisecond) {\n    if (Util.isUndefined(year)) {\n      return new DateTime({\n        ts: Settings.now(),\n        zone: FixedOffsetZone.utcInstance\n      });\n    } else {\n      return DateTime.fromObject({\n        year,\n        month,\n        day,\n        hour,\n        minute,\n        second,\n        millisecond,\n        zone: FixedOffsetZone.utcInstance\n      });\n    }\n  }\n\n  /**\n   * Create an DateTime from a Javascript Date object. Uses the default zone.\n   * @param {Date|Any} date - a Javascript Date object\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @return {DateTime}\n   */\n  static fromJSDate(date, options = {}) {\n    return new DateTime({\n      ts: new Date(date).valueOf(),\n      zone: Util.normalizeZone(options.zone),\n      loc: Locale.fromObject(options)\n    });\n  }\n\n  /**\n   * Create an DateTime from a count of epoch milliseconds. Uses the default zone.\n   * @param {number} milliseconds - a number of milliseconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @param {string} [options.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromMillis(milliseconds, options = {}) {\n    return new DateTime({\n      ts: milliseconds,\n      zone: Util.normalizeZone(options.zone),\n      loc: Locale.fromObject(options)\n    });\n  }\n\n  /**\n   * Create an DateTime from a Javascript object with keys like 'year' and 'hour' with reasonable defaults.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.year - a year, such as 1987\n   * @param {number} obj.month - a month, 1-12\n   * @param {number} obj.day - a day of the month, 1-31, depending on the month\n   * @param {number} obj.ordinal - day of the year, 1-365 or 366\n   * @param {number} obj.weekYear - an ISO week year\n   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year\n   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday\n   * @param {number} obj.hour - hour of the day, 0-23\n   * @param {number} obj.minute - minute of the hour, 0-59\n   * @param {number} obj.second - second of the minute, 0-59\n   * @param {number} obj.millisecond - millisecond of the second, 0-999\n   * @param {string|Zone} [obj.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()\n   * @param {string} [obj.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} obj.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} obj.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'\n   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01T00'\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'utc' }),\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'local' })\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'America/New_York' })\n   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'\n   * @return {DateTime}\n   */\n  static fromObject(obj) {\n    const zoneToUse = Util.normalizeZone(obj.zone);\n    if (!zoneToUse.isValid) {\n      return DateTime.invalid(UNSUPPORTED_ZONE);\n    }\n\n    const tsNow = Settings.now(),\n      offsetProvis = zoneToUse.offset(tsNow),\n      normalized = Util.normalizeObject(obj, normalizeUnit, true),\n      containsOrdinal = !Util.isUndefined(normalized.ordinal),\n      containsGregorYear = !Util.isUndefined(normalized.year),\n      containsGregorMD = !Util.isUndefined(normalized.month) || !Util.isUndefined(normalized.day),\n      containsGregor = containsGregorYear || containsGregorMD,\n      definiteWeekDef = normalized.weekYear || normalized.weekNumber,\n      loc = Locale.fromObject(obj);\n\n    // cases:\n    // just a weekday -> this week's instance of that weekday, no worries\n    // (gregorian data or ordinal) + (weekYear or weekNumber) -> error\n    // (gregorian month or day) + ordinal -> error\n    // otherwise just use weeks or ordinals or gregorian, depending on what's specified\n\n    if ((containsGregor || containsOrdinal) && definiteWeekDef) {\n      throw new ConflictingSpecificationError(\n        \"Can't mix weekYear/weekNumber units with year/month/day or ordinals\"\n      );\n    }\n\n    if (containsGregorMD && containsOrdinal) {\n      throw new ConflictingSpecificationError(\"Can't mix ordinal dates with month/day\");\n    }\n\n    const useWeekData = definiteWeekDef || (normalized.weekday && !containsGregor);\n\n    // configure ourselves to deal with gregorian dates or week stuff\n    let units,\n      defaultValues,\n      objNow = tsToObj(tsNow, offsetProvis);\n    if (useWeekData) {\n      units = orderedWeekUnits;\n      defaultValues = defaultWeekUnitValues;\n      objNow = Conversions.gregorianToWeek(objNow);\n    } else if (containsOrdinal) {\n      units = orderedOrdinalUnits;\n      defaultValues = defaultOrdinalUnitValues;\n      objNow = Conversions.gregorianToOrdinal(objNow);\n    } else {\n      units = orderedUnits;\n      defaultValues = defaultUnitValues;\n    }\n\n    // set default values for missing stuff\n    let foundFirst = false;\n    for (const u of units) {\n      const v = normalized[u];\n      if (!Util.isUndefined(v)) {\n        foundFirst = true;\n      } else if (foundFirst) {\n        normalized[u] = defaultValues[u];\n      } else {\n        normalized[u] = objNow[u];\n      }\n    }\n\n    // make sure the values we have are in range\n    const higherOrderInvalid = useWeekData\n        ? Conversions.hasInvalidWeekData(normalized)\n        : containsOrdinal\n          ? Conversions.hasInvalidOrdinalData(normalized)\n          : Conversions.hasInvalidGregorianData(normalized),\n      invalidReason = higherOrderInvalid || Conversions.hasInvalidTimeData(normalized);\n\n    if (invalidReason) {\n      return DateTime.invalid(invalidReason);\n    }\n\n    // compute the actual time\n    const gregorian = useWeekData\n        ? Conversions.weekToGregorian(normalized)\n        : containsOrdinal ? Conversions.ordinalToGregorian(normalized) : normalized,\n      [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse),\n      inst = new DateTime({\n        ts: tsFinal,\n        zone: zoneToUse,\n        o: offsetFinal,\n        loc\n      });\n\n    // gregorian data + weekday serves only to validate\n    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {\n      return DateTime.invalid('mismatched weekday');\n    }\n\n    return inst;\n  }\n\n  /**\n   * Create a DateTime from an ISO 8601 string\n   * @param {string} text - the ISO string\n   * @param {Object} opts - options to affect the creation\n   * @param {boolean} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc')\n   * @example DateTime.fromISO('2016-W05-4')\n   * @return {DateTime}\n   */\n  static fromISO(text, opts = {}) {\n    const [vals, parsedZone] = RegexParser.parseISODate(text);\n    return parseDataToDateTime(vals, parsedZone, opts);\n  }\n\n  /**\n   * Create a DateTime from an RFC 2822 string\n   * @param {string} text - the RFC 2822 string\n   * @param {Object} opts - options to affect the creation\n   * @param {boolean} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')\n   * @example DateTime.fromRFC2822('Tue, 25 Nov 2016 13:23:12 +0600')\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')\n   * @return {DateTime}\n   */\n  static fromRFC2822(text, opts = {}) {\n    const [vals, parsedZone] = RegexParser.parseRFC2822Date(text);\n    return parseDataToDateTime(vals, parsedZone, opts);\n  }\n\n  /**\n   * Create a DateTime from an HTTP header date\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @param {string} text - the HTTP header date\n   * @param {object} options - options to affect the creation\n   * @param {boolean} [options.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [options.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.\n   * @param {string} [options.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')\n   * @return {DateTime}\n   */\n  static fromHTTP(text, options = {}) {\n    const [vals, parsedZone] = RegexParser.parseHTTPDate(text);\n    return parseDataToDateTime(vals, parsedZone, options);\n  }\n\n  /**\n   * Create a DateTime from an input string and format string\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see description)\n   * @param {Object} options - options to affect the creation\n   * @param {boolean} [options.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [options.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [options.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} options.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromString(text, fmt, options = {}) {\n    const { locale = null, numberingSystem = null } = options,\n      parser = new TokenParser(Locale.fromOpts({ locale, numberingSystem })),\n      [vals, parsedZone] = parser.parseDateTime(text, fmt);\n    return parseDataToDateTime(vals, parsedZone, options);\n  }\n\n  /**\n   * Create an invalid DateTime.\n   * @return {DateTime}\n   */\n  static invalid(reason) {\n    if (!reason) {\n      throw new InvalidArgumentError('need to specify a reason the DateTime is invalid');\n    }\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDateTimeError(reason);\n    } else {\n      return new DateTime({ invalidReason: reason });\n    }\n  }\n\n  // INFO\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7\n   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4\n   * @return {number}\n   */\n  get(unit) {\n    return this[unit];\n  }\n\n  /**\n   * Returns whether the DateTime is valid. Invalid DateTimes occur when:\n   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30\n   * * The DateTime was created by an operation on another invalid date\n   * @return {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid\n   * @return {string}\n   */\n  get invalidReason() {\n    return this.invalidReason;\n  }\n\n  /**\n   * Get the locale of a DateTime, such 'en-UK'. The locale is used when formatting the DateTime\n   *\n   * @return {string}\n   */\n  get locale() {\n    return this.loc.locale;\n  }\n\n  /**\n   * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime\n   *\n   * @return {string}\n   */\n  get numberingSystem() {\n    return this.loc.numberingSystem;\n  }\n\n  /**\n   * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime\n   *\n   * @return {string}\n   */\n  get outputCalendar() {\n    return this.loc.outputCalendar;\n  }\n\n  /**\n   * Get the name of the time zone.\n   * @return {String}\n   */\n  get zoneName() {\n    return this.zone.name;\n  }\n\n  /**\n   * Get the year\n   * @example DateTime.local(2017, 5, 25).year //=> 2017\n   * @return {number}\n   */\n  get year() {\n    return this.isValid ? this.c.year : NaN;\n  }\n\n  /**\n   * Get the month (1-12).\n   * @example DateTime.local(2017, 5, 25).month //=> 5\n   * @return {number}\n   */\n  get month() {\n    return this.isValid ? this.c.month : NaN;\n  }\n\n  /**\n   * Get the day of the month (1-30ish).\n   * @example DateTime.local(2017, 5, 25).day //=> 25\n   * @return {number}\n   */\n  get day() {\n    return this.isValid ? this.c.day : NaN;\n  }\n\n  /**\n   * Get the hour of the day (0-23).\n   * @example DateTime.local(2017, 5, 25, 9).hour //=> 9\n   * @return {number}\n   */\n  get hour() {\n    return this.isValid ? this.c.hour : NaN;\n  }\n\n  /**\n   * Get the minute of the hour (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30\n   * @return {number}\n   */\n  get minute() {\n    return this.isValid ? this.c.minute : NaN;\n  }\n\n  /**\n   * Get the second of the minute (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52\n   * @return {number}\n   */\n  get second() {\n    return this.isValid ? this.c.second : NaN;\n  }\n\n  /**\n   * Get the millisecond of the second (0-999).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654\n   * @return {number}\n   */\n  get millisecond() {\n    return this.isValid ? this.c.millisecond : NaN;\n  }\n\n  /**\n   * Get the week year\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 11, 31).weekYear //=> 2015\n   * @return {number}\n   */\n  get weekYear() {\n    return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;\n  }\n\n  /**\n   * Get the week number of the week year (1-52ish).\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2017, 5, 25).weekNumber //=> 21\n   * @return {number}\n   */\n  get weekNumber() {\n    return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;\n  }\n\n  /**\n   * Get the day of the week.\n   * 1 is Monday and 7 is Sunday\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 11, 31).weekday //=> 4\n   * @return {number}\n   */\n  get weekday() {\n    return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;\n  }\n\n  /**\n   * Get the ordinal (i.e. the day of the year)\n   * @example DateTime.local(2017, 5, 25).ordinal //=> 145\n   * @return {number|DateTime}\n   */\n  get ordinal() {\n    return this.isValid ? Conversions.gregorianToOrdinal(this.c).ordinal : NaN;\n  }\n\n  /**\n   * Get the UTC offset of this DateTime in minutes\n   * @example DateTime.local().offset //=> -240\n   * @example DateTime.utc().offset //=> 0\n   * @return {number}\n   */\n  get offset() {\n    return this.isValid ? this.zone.offset(this.ts) : NaN;\n  }\n\n  /**\n   * Get the short human name for the zone's current offset, for example \"EST\" or \"EDT\".\n   * @return {String}\n   */\n  get offsetNameShort() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: 'short',\n        locale: this.locale\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the long human name for the zone's current offset, for example \"Eastern Standard Time\" or \"Eastern Daylight Time\".\n   * Is locale-aware.\n   * @return {String}\n   */\n  get offsetNameLong() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: 'long',\n        locale: this.locale\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get whether this zone's offset ever changes, as in a DST.\n   * @return {boolean}\n   */\n  get isOffsetFixed() {\n    return this.zone.universal;\n  }\n\n  /**\n   * Get whether the DateTime is in a DST.\n   * @return {boolean}\n   */\n  get isInDST() {\n    if (this.isOffsetFixed) {\n      return false;\n    } else {\n      return (\n        this.offset > this.set({ month: 1 }).offset || this.offset > this.set({ month: 5 }).offset\n      );\n    }\n  }\n\n  /**\n   * Returns true if this DateTime is in a leap year, false otherwise\n   * @example DateTime.local(2016).isInLeapYear //=> true\n   * @example DateTime.local(2013).isInLeapYear //=> false\n   * @return {boolean}\n   */\n  get isInLeapYear() {\n    return Util.isLeapYear(this.year);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's month\n   * @example DateTime.local(2016, 2).daysInMonth //=> 29\n   * @example DateTime.local(2016, 3).days //=> 31\n   * @return {number}\n   */\n  get daysInMonth() {\n    return Util.daysInMonth(this.year, this.month);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's year\n   * @example DateTime.local(2016).daysInYear //=> 366\n   * @example DateTime.local(2013).daysInYear //=> 365\n   * @return {number}\n   */\n  get daysInYear() {\n    return this.isValid ? Util.daysInYear(this.year) : NaN;\n  }\n\n  /**\n   * Returns the resolved Intl options for this DateTime.\n   * This is useful in understanding the behavior of parsing and formatting methods\n   * @param {object} opts - the same options as toLocaleString\n   * @return {object}\n   */\n  resolvedLocaleOpts(opts = {}) {\n    const { locale, numberingSystem, calendar } = Formatter.create(\n      this.loc.clone(opts),\n      opts\n    ).resolvedOptions(this);\n    return { locale, numberingSystem, outputCalendar: calendar };\n  }\n\n  // TRANSFORM\n\n  /**\n   * \"Set\" the DateTime's zone to UTC. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to {@link setZone}('utc')\n   * @param {number} [offset=0] - optionally, an offset from UTC in minutes\n   * @param {object} [opts={}] - options to pass to `setZone()`\n   * @return {DateTime}\n   */\n  toUTC(offset = 0, opts = {}) {\n    return this.setZone(FixedOffsetZone.instance(offset), opts);\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to `setZone('local')`\n   * @return {DateTime}\n   */\n  toLocal() {\n    return this.setZone(new LocalZone());\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.\n   *\n   * By default, the setter keeps the underlying time the same (as in, the same UTC timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link plus}. You may wish to use {@link toLocal} and {@link toUTC} which provide simple convenience wrappers for commonly used zones.\n   * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'utc+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link Zone} class.\n   * @param {object} opts - options\n   * @param {boolean} [opts.keepCalendarTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.\n   * @return {DateTime}\n   */\n  setZone(zone, { keepCalendarTime = false } = {}) {\n    zone = Util.normalizeZone(zone);\n    if (zone.equals(this.zone)) {\n      return this;\n    } else if (!zone.isValid) {\n      return DateTime.invalid(UNSUPPORTED_ZONE);\n    } else {\n      const newTS = keepCalendarTime\n        ? this.ts + (this.o - zone.offset(this.ts)) * 60 * 1000\n        : this.ts;\n      return clone(this, { ts: newTS, zone });\n    }\n  }\n\n  /**\n   * \"Set\" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.\n   * @param {object} properties - the properties to set\n   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-uk' })\n   * @return {DateTime}\n   */\n  reconfigure({ locale, numberingSystem, outputCalendar } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem, outputCalendar });\n    return clone(this, { loc });\n  }\n\n  /**\n   * \"Set\" the locale. Returns a newly-constructed DateTime.\n   * Just a convenient alias for reconfigure({ locale })\n   * @example DateTime.local(2017, 5, 25).setLocale('en-uk')\n   * @return {DateTime}\n   */\n  setLocale(locale) {\n    return this.reconfigure({ locale });\n  }\n\n  /**\n   * \"Set\" the values of specified units. Returns a newly-constructed DateTime.\n   * @param {object} values - a mapping of units to numbers\n   * @example dt.set({ year: 2017 })\n   * @example dt.set({ hour: 8, minute: 30 })\n   * @example dt.set({ weekday: 5 })\n   * @example dt.set({ year: 2005, ordinal: 234 })\n   * @example dt.set({ outputCalendar: 'beng', zone: 'utc' })\n   * @return {DateTime}\n   */\n  set(values) {\n    const normalized = Util.normalizeObject(values, normalizeUnit),\n      settingWeekStuff =\n        !Util.isUndefined(normalized.weekYear) ||\n        !Util.isUndefined(normalized.weekNumber) ||\n        !Util.isUndefined(normalized.weekday);\n\n    let mixed;\n    if (settingWeekStuff) {\n      mixed = Conversions.weekToGregorian(\n        Util.assign(Conversions.gregorianToWeek(this.c), normalized)\n      );\n    } else if (!Util.isUndefined(normalized.ordinal)) {\n      mixed = Conversions.ordinalToGregorian(\n        Util.assign(Conversions.gregorianToOrdinal(this.c), normalized)\n      );\n    } else {\n      mixed = Util.assign(this.toObject(), normalized);\n\n      // if we didn't set the day but we ended up on an overflow date,\n      // use the last day of the right month\n      if (Util.isUndefined(normalized.day)) {\n        mixed.day = Math.min(Util.daysInMonth(mixed.year, mixed.month), mixed.day);\n      }\n    }\n\n    const [ts, o] = objToTS(mixed, this.o, this.zone);\n    return clone(this, { ts, o });\n  }\n\n  /**\n   * Add a period of time to this DateTime and return the resulting DateTime\n   *\n   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.\n   * @param {Duration|number|object} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @example DateTime.local().plus(123) //~> in 123 milliseconds\n   * @example DateTime.local().plus({ minutes: 15 }) //~> in 15 minutes\n   * @example DateTime.local().plus({ days: 1 }) //~> this time tomorrow\n   * @example DateTime.local().plus({ hours: 3, minutes: 13 }) //~> in 1 hr, 13 min\n   * @example DateTime.local().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 1 hr, 13 min\n   * @return {DateTime}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n    const dur = Util.friendlyDuration(duration);\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * Subtract a period of time to this DateTime and return the resulting DateTime\n   * See {@link plus}\n   * @param {Duration|number|object} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   @return {DateTime}\n  */\n  minus(duration) {\n    if (!this.isValid) return this;\n    const dur = Util.friendlyDuration(duration).negate();\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * \"Set\" this DateTime to the beginning of a unit of time.\n   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'month', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'\n   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'\n   * @return {DateTime}\n   */\n  startOf(unit) {\n    if (!this.isValid) return this;\n    const o = {},\n      normalizedUnit = Duration.normalizeUnit(unit);\n    switch (normalizedUnit) {\n      case 'years':\n        o.month = 1;\n      // falls through\n      case 'months':\n        o.day = 1;\n      // falls through\n      case 'weeks':\n      case 'days':\n        o.hour = 0;\n      // falls through\n      case 'hours':\n        o.minute = 0;\n      // falls through\n      case 'minutes':\n        o.second = 0;\n      // falls through\n      case 'seconds':\n        o.millisecond = 0;\n        break;\n      default:\n        throw new InvalidUnitError(unit);\n    }\n\n    if (normalizedUnit === 'weeks') {\n      o.weekday = 1;\n    }\n\n    return this.set(o);\n  }\n\n  /**\n   * \"Set\" this DateTime to the end (i.e. the last millisecond) of a unit of time\n   * @param {string} unit - The unit to go to the end of. Can be 'year', 'month', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-03T00:00:00.000-05:00'\n   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'\n   * @return {DateTime}\n   */\n  endOf(unit) {\n    return this.isValid\n      ? this.startOf(unit)\n          .plus({ [unit]: 1 })\n          .minus(1)\n      : this;\n  }\n\n  // OUTPUT\n\n  /**\n   * Returns a string representation of this DateTime formatted according to the specified format string.\n   * **You may not want this.** See {@link toLocaleString} for a more flexible formatting tool. See the documentation for the specific format tokens supported.\n   * @param {string} fmt - the format string\n   * @param {object} opts - options\n   * @param {boolean} opts.round - round numerical values\n   * @example DateTime.local().toFormat('yyyy LLL dd') //=> '2017 avr. 22'\n   * @example DateTime.local().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 Apr 22'\n   * @example DateTime.local().toFormat(\"HH 'hours and' mm 'minutes'\") //=> '20 hours and 55 minutes'\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc, opts).formatDateTimeFromString(this, fmt)\n      : INVALID;\n  }\n\n  /**\n   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.\n   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation.\n   * of the DateTime in the assigned locale.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param opts {object} - Intl.DateTimeFormat constructor options\n   * @example DateTime.local().toLocaleString(); //=> 4/20/2017\n   * @example DateTime.local().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'\n   * @example DateTime.local().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'\n   * @example DateTime.local().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'\n   * @example DateTime.local().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'\n   * @example DateTime.local().toLocaleString({weekday: 'long', month: 'long', day: '2-digit'}); //=> 'Thu, Apr 20'\n   * @example DateTime.local().toLocaleString({weekday: 'long', month: 'long', day: '2-digit', hour: '2-digit', minute: '2-digit'}); //=> 'Thu, Apr 20, 11:27'\n   * @example DateTime.local().toLocaleString({hour: '2-digit', minute: '2-digit'}); //=> '11:32'\n   * @return {string}\n   */\n  toLocaleString(opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.clone(opts), opts).formatDateTime(this)\n      : INVALID;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime\n   * @param {object} opts - options\n   * @param {boolean} opts.suppressMilliseconds - exclude milliseconds from the format if they're 0\n   * @param {boolean} opts.supressSeconds - exclude seconds from the format if they're 0\n   * @example DateTime.utc(1982, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'\n   * @example DateTime.local().toISO() //=> '2017-04-22T20:47:05.335-04:00'\n   * @return {string}\n   */\n  toISO({ suppressMilliseconds = false, suppressSeconds = false } = {}) {\n    const f = `yyyy-MM-dd'T'${isoTimeFormat(this, suppressSeconds, suppressMilliseconds)}`;\n    return formatMaybe(this, f);\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's date component\n   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '07:34:19.361Z'\n   * @return {string}\n   */\n  toISODate() {\n    return formatMaybe(this, 'yyyy-MM-dd');\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's week date\n   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'\n   * @return {string}\n   */\n  toISOWeekDate() {\n    return formatMaybe(this, \"kkkk-'W'WW-c\");\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's time component\n   * @param {object} opts - options\n   * @param {boolean} opts.suppressMilliseconds - exclude milliseconds from the format if they're 0\n   * @param {boolean} opts.supressSeconds - exclude seconds from the format if they're 0\n   * @example DateTime.utc().hour(7).minute(34).toISOTime() //=> '07:34:19.361Z'\n   * @example DateTime.utc().hour(7).minute(34).toISOTime({ suppressSeconds: true }) //=> '07:34Z'\n   * @return {string}\n   */\n  toISOTime({ suppressMilliseconds = false, suppressSeconds = false } = {}) {\n    return formatMaybe(this, isoTimeFormat(this, suppressSeconds, suppressMilliseconds));\n  }\n\n  /**\n   * Returns an RFC 2822-compatible string representation of this DateTime, always in UTC\n   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'\n   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'\n   * @return {string}\n   */\n  toRFC2822() {\n    return formatMaybe(this, 'EEE, dd LLL yyyy hh:mm:ss ZZZ');\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in HTTP headers.\n   * Specifically, the string conforms to RFC 1123.\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'\n   * @return {string}\n   */\n  toHTTP() {\n    return formatMaybe(this.toUTC(), \"EEE, dd LLL yyyy hh:mm:ss 'GMT'\");\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for debugging\n   * @return {string}\n   */\n  toString() {\n    return this.isValid ? this.toISO() : INVALID;\n  }\n\n  /**\n   * Returns the epoch milliseconds of this DateTime\n   * @return {number}\n   */\n  valueOf() {\n    return this.isValid ? this.ts : NaN;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns a Javascript object with this DateTime's year, month, day, and so on.\n   * @param opts - options for generating the object\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\n   * @example DateTime.local().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }\n   * @return {object}\n   */\n  toObject(opts = {}) {\n    if (!this.isValid) return {};\n\n    const base = Util.assign({}, this.c);\n\n    if (opts.includeConfig) {\n      base.outputCalendar = this.outputCalendar;\n      base.numberingSystem = this.loc.numberingSystem;\n      base.locale = this.loc.locale;\n    }\n    return base;\n  }\n\n  /**\n   * Returns a Javascript Date equivalent to this DateTime.\n   * @return {object}\n   */\n  toJSDate() {\n    return new Date(this.isValid ? this.ts : NaN);\n  }\n\n  // COMPARE\n\n  /**\n   * Return the difference between two DateTimes as a Duration.\n   * @param {DateTime} otherDateTime - the DateTime to compare this one to\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example\n   * var i1 = DateTime.fromISO('1982-05-25T09:45'),\n   *     i2 = DateTime.fromISO('1983-10-14T10:30');\n   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }\n   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }\n   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }\n   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }\n   * @return {Duration}\n   */\n  diff(otherDateTime, unit = 'milliseconds', opts = {}) {\n    if (!this.isValid) return this;\n\n    const units = Util.maybeArray(unit).map(Duration.normalizeUnit);\n\n    const flipped = otherDateTime.valueOf() > this.valueOf(),\n      post = flipped ? otherDateTime : this,\n      accum = {};\n\n    let cursor = flipped ? this : otherDateTime,\n      lowestOrder = null;\n\n    if (units.indexOf('years') >= 0) {\n      let dYear = post.year - cursor.year;\n\n      cursor = cursor.set({ year: post.year });\n\n      if (cursor > post) {\n        cursor = cursor.minus({ years: 1 });\n        dYear -= 1;\n      }\n\n      accum.years = dYear;\n      lowestOrder = 'years';\n    }\n\n    if (units.indexOf('months') >= 0) {\n      const dYear = post.year - cursor.year;\n      let dMonth = post.month - cursor.month + dYear * 12;\n\n      cursor = cursor.set({ year: post.year, month: post.month });\n\n      if (cursor > post) {\n        cursor = cursor.minus({ months: 1 });\n        dMonth -= 1;\n      }\n\n      accum.months = dMonth;\n      lowestOrder = 'months';\n    }\n\n    const computeDayDelta = () => {\n      const utcDayStart = dt =>\n          dt\n            .toUTC(0, { keepCalendarTime: true })\n            .startOf('day')\n            .valueOf(),\n        ms = utcDayStart(post) - utcDayStart(cursor);\n      return Math.floor(Duration.fromMilliseconds(ms, opts).shiftTo('days').days);\n    };\n\n    if (units.indexOf('weeks') >= 0) {\n      const days = computeDayDelta();\n      let weeks = (days - days % 7) / 7;\n      cursor = cursor.plus({ weeks });\n\n      if (cursor > post) {\n        cursor.minus({ weeks: 1 });\n        weeks -= 1;\n      }\n\n      accum.weeks = weeks;\n      lowestOrder = 'weeks';\n    }\n\n    if (units.indexOf('days') >= 0) {\n      let days = computeDayDelta();\n      cursor = cursor.set({\n        year: post.year,\n        month: post.month,\n        day: post.day\n      });\n\n      if (cursor > post) {\n        cursor.minus({ days: 1 });\n        days -= 1;\n      }\n\n      accum.days = days;\n      lowestOrder = 'days';\n    }\n\n    const remaining = Duration.fromMilliseconds(post - cursor, opts),\n      moreUnits = units.filter(\n        u => ['hours', 'minutes', 'seconds', 'milliseconds'].indexOf(u) >= 0\n      ),\n      shiftTo = moreUnits.length > 0 ? moreUnits : [lowestOrder],\n      shifted = remaining.shiftTo(...shiftTo),\n      merged = shifted.plus(Duration.fromObject(Util.assign(accum, opts)));\n\n    return flipped ? merged.negate() : merged;\n  }\n\n  /**\n   * Return the difference between this DateTime and right now.\n   * See {@link diff}\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  diffNow(unit, opts) {\n    return this.isValid ? this.diff(DateTime.local(), unit, opts) : this;\n  }\n\n  /**\n   * Return an Interval spanning between this DateTime and another DateTime\n   * @param {DateTime} otherDateTime - the other end point of the Interval\n   * @return {Duration}\n   */\n  until(otherDateTime) {\n    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;\n  }\n\n  /**\n   * Return whether this DateTime is in the same unit of time as another DateTime\n   * @param {DateTime} otherDateTime - the other DateTime\n   * @param {string} unit - the unit of time to check sameness on\n   * @example DateTime.local().hasSame(otherDT, 'day'); //~> true if both the same calendar day\n   * @return {boolean}\n   */\n  hasSame(otherDateTime, unit) {\n    if (!this.isValid) return false;\n    if (unit === 'millisecond') {\n      return this.valueOf() === otherDateTime.valueOf();\n    } else {\n      const inputMs = otherDateTime.valueOf();\n      return this.startOf(unit) <= inputMs && inputMs <= this.endOf(unit);\n    }\n  }\n\n  /**\n   * Equality check\n   * Two DateTimes are equal iff they represent the same millisecond\n   * @param {DateTime} other - the other DateTime\n   * @return {boolean}\n   */\n  equals(other) {\n    return this.isValid && other.isValid\n      ? this.valueOf() === other.valueOf() &&\n          this.zone.equals(other.zone) &&\n          this.loc.equals(other.loc)\n      : false;\n  }\n\n  /**\n   * Return the min of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum\n   * @return {DateTime}\n   */\n  static min(...dateTimes) {\n    return Util.bestBy(dateTimes, i => i.valueOf(), Math.min);\n  }\n\n  /**\n   * Return the max of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum\n   * @return {DateTime}\n   */\n  static max(...dateTimes) {\n    return Util.bestBy(dateTimes, i => i.valueOf(), Math.max);\n  }\n\n  // MISC\n\n  /**\n   * Explain how a string would be parsed by fromString()\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see description)\n   * @param {object} options - options taken by fromString()\n   * @return {object}\n   */\n  static fromStringExplain(text, fmt, options = {}) {\n    const parser = new TokenParser(Locale.fromOpts(options));\n    return parser.explainParse(text, fmt);\n  }\n\n  // FORMAT PRESETS\n\n  /**\n   * {@link toLocaleString} format like 10/14/1983\n   */\n  static get DATE_SHORT() {\n    return {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Oct 14, 1983'\n   */\n  static get DATE_MED() {\n    return {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'October 14, 1983'\n   */\n  static get DATE_FULL() {\n    return {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Tuesday, October 14, 1983'\n   */\n  static get DATE_HUGE() {\n    return {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      weekday: 'long'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.\n   */\n  static get TIME_SIMPLE() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.\n   */\n  static get TIME_WITH_SECONDS() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.\n   */\n  static get TIME_WITH_SHORT_OFFSET() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      timeZoneName: 'short'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   */\n  static get TIME_WITH_LONG_OFFSET() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      timeZoneName: 'long'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30', always 24-hour.\n   */\n  static get TIME_24_SIMPLE() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: false\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23', always 24-hour.\n   */\n  static get TIME_24_WITH_SECONDS() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 EDT', always 24-hour.\n   */\n  static get TIME_24_WITH_SHORT_OFFSET() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false,\n      timeZoneName: 'short'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.\n   */\n  static get TIME_24_WITH_LONG_OFFSET() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false,\n      timeZoneName: 'long'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_SHORT() {\n    return {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_SHORT_WITH_SECONDS() {\n    return {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_MED() {\n    return {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_MED_WITH_SECONDS() {\n    return {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_FULL() {\n    return {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit',\n      timeZoneName: 'short'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'October 14, 1983, 9:303 AM EDT'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_FULL_WITH_SECONDS() {\n    return {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      timeZoneName: 'short'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_HUGE() {\n    return {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      weekday: 'long',\n      hour: 'numeric',\n      minute: '2-digit',\n      timeZoneName: 'long'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_HUGE_WITH_SECONDS() {\n    return {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      weekday: 'long',\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      timeZoneName: 'long'\n    };\n  }\n}\n","import { DateTime } from './datetime';\nimport { Settings } from './settings';\nimport { Locale } from './impl/locale';\nimport { Util } from './impl/util';\n\n/**\n * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.\n */\nexport class Info {\n  /**\n   * Return whether the specified zone contains a DST.\n   * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.\n   * @return {boolean}\n   */\n  static hasDST(zone = Settings.defaultZone) {\n    return (\n      !zone.universal &&\n      DateTime.local()\n        .setZone(zone)\n        .set({ month: 1 }).offset !==\n        DateTime.local()\n          .setZone(zone)\n          .set({ month: 5 }).offset\n    );\n  }\n\n  /**\n   * Return an array of standalone month names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {object} opts - options\n   * @param {string} [opts.locale='en'] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @example Info.months()[0] //=> 'January'\n   * @example Info.months('short')[0] //=> 'Jan'\n   * @example Info.months('numeric')[0] //=> '1'\n   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'\n   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'\n   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'\n   * @return {[string]}\n   */\n  static months(\n    length = 'long',\n    { locale = 'en', numberingSystem = null, outputCalendar = 'gregory' } = {}\n  ) {\n    return new Locale(locale, numberingSystem, outputCalendar).months(length);\n  }\n\n  /**\n   * Return an array of format month names.\n   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that\n   * changes the string.\n   * See {@link months}\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {object} opts - options\n   * @param {string} [opts.locale='en'] - the locale code\n   * @param {string} [opts.numbering=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @return {[string]}\n   */\n  static monthsFormat(\n    length = 'long',\n    { locale = 'en', numberingSystem = null, outputCalendar = 'gregory' } = {}\n  ) {\n    return new Locale(locale, numberingSystem, outputCalendar).months(length, true);\n  }\n\n  /**\n   * Return an array of standalone week names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the month representation, such as \"narrow\", \"short\", \"long\".\n   * @param {object} opts - options\n   * @param {string} [opts.locale='en'] - the locale code\n   * @param {string} [opts.numbering=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @example Info.weekdays()[0] //=> 'Monday'\n   * @example Info.weekdays('short')[0] //=> 'Mon'\n   * @example Info.weekdays('short', 'fr-CA')[0] //=> 'lun.'\n   * @example Info.weekdays('short', 'ar')[0] //=> 'الاثنين'\n   * @return {[string]}\n   */\n  static weekdays(length = 'long', { locale = 'en', numberingSystem = null } = {}) {\n    return new Locale(locale, numberingSystem, null).weekdays(length);\n  }\n\n  /**\n   * Return an array of format week names.\n   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that\n   * changes the string.\n   * See {@link weekdays}\n   * @param {string} [length='long'] - the length of the month representation, such as \"narrow\", \"short\", \"long\".\n   * @param {object} opts - options\n   * @param {string} [opts.locale='en'] - the locale code\n   * @param {string} [opts.numbering=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @return {[string]}\n   */\n  static weekdaysFormat(length = 'long', { locale = 'en', numberingSystem = null } = {}) {\n    return new Locale(locale, numberingSystem, null).weekdays(length, true);\n  }\n\n  /**\n   * Return an array of meridiems.\n   * @param {object} opts - options\n   * @param {string} [opts.locale='en'] - the locale code\n   * @example Info.meridiems() //=> [ 'AM', 'PM' ]\n   * @example Info.meridiems('de') //=> [ 'vorm.', 'nachm.' ]\n   * @return {[string]}\n   */\n  static meridiems({ locale = 'en' } = {}) {\n    return new Locale(locale).meridiems();\n  }\n\n  /**\n   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.\n   * @param {string} [length='short'] - the length of the era representation, such as \"short\" or \"long\".\n   * @param {object} opts - options\n   * @param {string} [opts.locale='en'] - the locale code\n   * @example Info.eras() //=> [ 'BC', 'AD' ]\n   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]\n   * @example Info.eras('long', 'fr') //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]\n   * @return {[string]}\n   */\n  static eras(length = 'short', { locale = 'en' } = {}) {\n    return new Locale(locale, null, 'gregory').eras(length);\n  }\n\n  /**\n   * Return the set of available features in this environment.\n   * Some features of Luxon are not available in all environments. For example, on older browsers, timezone support is not available. Use this function to figure out if that's the case.\n   * Keys:\n   * * `timezones`: whether this environment supports IANA timezones\n   * * `intlTokens`: whether this environment supports internationalized token-based formatting/parsing\n   * * `intl`: whether this environment supports general internationalization\n   * @example Info.feature() //=> { intl: true, intlTokens: false, timezones: true }\n   * @return {object}\n   */\n  static features() {\n    let intl = false,\n      intlTokens = false,\n      zones = false;\n\n    if (Util.isUndefined(Intl) && Util.isUndefined(Util.DateTimeFormat)) {\n      intl = true;\n\n      intlTokens = Util.isUndefined(Intl.DateTimeFormat.prototype.formatToParts);\n\n      try {\n        Intl.DateTimeFormat({ timeZone: 'America/New_York' });\n        zones = true;\n      } catch (e) {\n        zones = false;\n      }\n    }\n\n    return { intl, intlTokens, zones };\n  }\n}\n"],"names":["LuxonError","Error","InvalidDateTimeError","reason","InvalidIntervalError","InvalidDurationError","ConflictingSpecificationError","InvalidUnitError","unit","InvalidArgumentError","ZoneIsAbstract","Zone","ts","otherZone","singleton","LocalZone","format","locale","Util","parseZoneInfo","Date","getTimezoneOffset","type","isUndefined","Intl","DateTimeFormat","resolvedOptions","timeZone","typeToPos","hackyOffset","dtf","date","parsed","exec","formatted","fMonth","fDay","fYear","fHour","fMinute","fSecond","partsOffset","formatToParts","filled","i","length","value","pos","parseInt","isValid","zone","e","IANAZone","s","match","name","zoneName","valid","asUTC","UTC","asTS","valueOf","FixedOffsetZone","offset","utcInstance","r","signedOffset","fixed","hours","minutes","Math","abs","sign","base","number","pad","now","defaultZone","instance","throwOnInvalid","Settings","n","z","normalizeZone","t","duration","isNumber","Duration","fromMilliseconds","Object","fromObject","dateTimeish","DateTime","fromJSDate","thing","Array","isArray","o","bottom","top","input","repeat","slice","ceil","floor","dt","arr","reduce","flat","toFlatten","concat","flatten","by","compare","best","next","pair","apply","obj","keys","a","k","year","isLeapYear","month","offsetFormat","intl","modified","assign","timeZoneName","prototype","find","m","toLowerCase","without","included","diffed","substring","trimmed","replace","isString","lowered","isValidSpecier","parseSpecifier","normalizer","ignoreUnknown","normalized","u","hasOwnProperty","v","isNaN","mapped","pick","offHourStr","offMinuteStr","offHour","offMin","offMinSigned","target","args","to","index","nextSource","nextKey","Number","English","monthsNarrow","monthsShort","monthsLong","weekdaysNarrow","weekdaysShort","weekdaysLong","localeCache","Map","intlConfigString","numberingSystem","outputCalendar","loc","map","l","mapMonths","f","ms","utc","push","mapWeekdays","Locale","opts","create","localeR","numberingSystemR","outputCalendarR","cacheKey","cached","get","fresh","set","numbering","defineProperty","enumerable","standalone","startsWith","alts","getOwnPropertyNames","knownEnglish","english","months","day","formatStr","monthsCache","extract","weekdays","weekday","weekdaysCache","meridiems","meridiemCache","hour","hour12","eras","era","eraCache","intlOpts","field","dtFormatter","df","d","results","matching","realIntlOpts","useGrouping","padTo","minimumIntegerDigits","round","maximumFractionDigits","NumberFormat","universal","asIfUTC","toJSDate","other","stringifyTokens","splits","tokenToString","token","literal","val","Formatter","formatOpts","fmt","current","currentFull","bracketed","c","charAt","p","numberFormatter","string","formatOffset","isOffsetFixed","allowZ","towardZero","num","RangeError","outputCal","millisecond","second","minute","offsetNameShort","offsetNameLong","toString","weekYear","weekNumber","ordinal","formatDateTime","DATE_SHORT","DATE_MED","DATE_FULL","DATE_HUGE","TIME_SIMPLE","TIME_WITH_SECONDS","TIME_WITH_SHORT_OFFSET","TIME_WITH_LONG_OFFSET","TIME_24_SIMPLE","TIME_24_WITH_SECONDS","TIME_24_WITH_SHORT_OFFSET","TIME_24_WITH_LONG_OFFSET","DATETIME_SHORT","DATETIME_MED","DATETIME_FULL","DATETIME_HUGE","DATETIME_SHORT_WITH_SECONDS","DATETIME_MED_WITH_SECONDS","DATETIME_FULL_WITH_SECONDS","DATETIME_HUGE_WITH_SECONDS","parseFormat","dur","tokenToField","lildur","tokens","realTokens","found","collapsed","shiftTo","filter","combineRegexes","regexes","full","source","RegExp","combineExtractors","extractors","ex","mergedVals","mergedZone","cursor","parse","patterns","regex","extractor","simpleParse","ret","isoTimeRegex","extractISOYmd","isoYmdRegex","extractISOWeekData","isoWeekRegex","isoOrdinalRegex","extractISOOrdinalData","extractISOTime","local","fullOffset","item","isoDuration","extractISODuration","yearStr","monthStr","dayStr","hourStr","minuteStr","secondStr","obsOffsets","fromStrings","weekdayStr","result","untrucateYear","indexOf","rfc2822","extractRFC2822","obsOffset","milOffset","preprocessRFC2822","trim","rfc1123","rfc850","ascii","extractRFC1123Or850","extractASCII","RegexParser","INVALID","lowOrderMatrix","seconds","milliseconds","casualMatrix","daysInYearAccurate","daysInMonthAccurate","accurateMatrix","orderedUnits","clone","clear","conf","values","conversionAccuracy","isHighOrderNegative","config","accurate","invalidReason","formatDurationFromString","includeConfig","norm","normalize","negate","years","days","weeks","toISO","friendlyDuration","plus","normalizeUnit","mixed","normalizeObject","NaN","neg","shifted","units","built","accumulated","vals","toObject","lastUnit","ak","matrix","down","conv","added","key","negated","count","text","parseISODuration","validateStartEnd","start","end","Interval","toDuration","startOf","diff","minus","hasSame","dateTime","fromDateTimes","dateTimes","sorted","friendlyDateTime","sort","numberOfParts","splitBy","equals","intervals","xor","intersection","isEmpty","dateFormat","separator","toFormat","invalid","builtStart","builtEnd","split","fromISO","b","sofar","overlaps","abutsStart","union","final","currentCount","ends","time","merge","intUnit","post","deser","oneOf","strings","startIndex","join","groups","h","simple","unitForToken","one","two","three","four","oneOrTwo","oneToThree","twoToFour","unitate","untruncateYear","buildRegex","handlers","matches","all","matchIndex","dateTimeFromMatches","toField","Z","G","y","TokenParser","explainParse","nonLeapLadder","leapLadder","dayOfWeek","js","getUTCDay","lastWeekNumber","p1","last","p2","computeOrdinal","uncomputeOrdinal","table","month0","findIndex","Conversions","gregObj","timeObject","weekData","weekdayOfJan4","daysInYear","gregData","ordinalData","validYear","validWeek","numberBetween","validWeekday","validOrdinal","validMonth","validDay","daysInMonth","validHour","validMinute","validSecond","validMillisecond","UNSUPPORTED_ZONE","possiblyCachedWeekData","gregorianToWeek","inst","old","fixOffset","localTS","tz","utcGuess","o2","o3","min","max","tsToObj","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","objToLocalTS","setFullYear","objToTS","adjustTime","oPre","millisToAdd","as","parseDataToDateTime","parsedZone","setZone","interpretationZone","formatMaybe","formatDateTimeFromString","defaultUnitValues","defaultWeekUnitValues","defaultOrdinalUnitValues","isoTimeFormat","suppressSecs","suppressMillis","orderedWeekUnits","orderedOrdinalUnits","unchanged","calendar","keepCalendarTime","newTS","reconfigure","settingWeekStuff","weekToGregorian","ordinalToGregorian","gregorianToOrdinal","normalizedUnit","suppressMilliseconds","suppressSeconds","toUTC","otherDateTime","maybeArray","flipped","accum","lowestOrder","dYear","dMonth","computeDayDelta","utcDayStart","remaining","moreUnits","merged","inputMs","endOf","offsetName","options","zoneToUse","tsNow","offsetProvis","containsOrdinal","containsGregorYear","containsGregorMD","containsGregor","definiteWeekDef","useWeekData","defaultValues","objNow","foundFirst","higherOrderInvalid","hasInvalidWeekData","hasInvalidOrdinalData","hasInvalidGregorianData","hasInvalidTimeData","gregorian","tsFinal","offsetFinal","parseISODate","parseRFC2822Date","parseHTTPDate","parser","fromOpts","parseDateTime","bestBy","Info","intlTokens","zones"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}