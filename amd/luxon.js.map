{"version":3,"file":"luxon.js","sources":["src/errors.js","src/zone.js","src/zones/localZone.js","src/zones/IANAZone.js","src/zones/fixedOffsetZone.js","src/settings.js","src/impl/util.js","src/impl/english.js","src/impl/locale.js","src/impl/formatter.js","src/impl/regexParser.js","src/duration.js","src/interval.js","src/impl/tokenParser.js","src/impl/conversions.js","src/datetime.js","src/info.js"],"sourcesContent":["// these aren't really private, but nor are they really useful to document\n\n/**\n * @private\n */\nclass LuxonError extends Error {}\n\n/**\n * @private\n */\nexport class InvalidDateTimeError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid DateTime: ${reason}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidIntervalError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Interval: ${reason}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidDurationError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Duration: ${reason}`);\n  }\n}\n\n/**\n * @private\n */\nexport class ConflictingSpecificationError extends LuxonError {}\n\n/**\n * @private\n */\nexport class InvalidUnitError extends LuxonError {\n  constructor(unit) {\n    super(`Invalid unit ${unit}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidArgumentError extends LuxonError {}\n\n/**\n * @private\n */\nexport class ZoneIsAbstract extends LuxonError {\n  constructor() {\n    super('Zone is an abstract class');\n  }\n}\n","/* eslint no-unused-vars: \"off\" */\nimport { ZoneIsAbstract } from './errors';\n\n/**\n * @interface\n*/\nexport class Zone {\n  /**\n   * The type of zone\n   * @abstract\n   * @return {string}\n   */\n  get type() {\n    throw new ZoneIsAbstract();\n  }\n\n  /**\n   * The name of this zone.\n   * @abstract\n   * @return {string}\n   */\n  get name() {\n    throw new ZoneIsAbstract();\n  }\n\n  /**\n   * Returns whether the offset is known to be fixed for the whole year.\n   * @abstract\n   * @return {boolean}\n   */\n  get universal() {\n    throw new ZoneIsAbstract();\n  }\n\n  /**\n   * Returns the offset's common name (such as EST) at the specified timestamp\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the name\n   * @param {Object} options - Options to affect the format\n   * @param {string} options.format - What style of offset to return. Accepts 'long' or 'short'.\n   * @param {string} options.localeCode - What locale to return the offset name in. Defaults to us-en\n   * @return {string}\n   */\n  static offsetName(ts, { format = 'long', localeCode = 'en-us' } = {}) {\n    throw new ZoneIsAbstract();\n  }\n\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\n   * @return {number}\n   */\n  offset(ts) {\n    throw new ZoneIsAbstract();\n  }\n\n  /**\n   * Return whether this Zone is equal to another zoner\n   * @abstract\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */\n  equals(otherZone) {\n    throw new ZoneIsAbstract();\n  }\n\n  /**\n   * Return whether this Zone is valid.\n   * @abstract\n   * @return {boolean}\n   */\n  get isValid() {\n    throw new ZoneIsAbstract();\n  }\n}\n","import { Util } from '../impl/util';\nimport { Zone } from '../zone';\n\nlet singleton = null;\n\n/**\n * @private\n */\n\nexport class LocalZone extends Zone {\n  static get instance() {\n    if (singleton === null) {\n      singleton = new LocalZone();\n    }\n    return singleton;\n  }\n\n  get type() {\n    return 'local';\n  }\n\n  get name() {\n    if (Util.isUndefined(Intl) && Util.isUndefined(Intl.DateTimeFormat)) {\n      return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n    } else return 'local';\n  }\n\n  get universal() {\n    return false;\n  }\n\n  offsetName(ts, { format = 'long', locale = 'en-us' } = {}) {\n    return Util.parseZoneInfo(ts, format, locale || 'en-us');\n  }\n\n  offset(ts) {\n    return -new Date(ts).getTimezoneOffset();\n  }\n\n  equals(otherZone) {\n    return otherZone.type === 'local';\n  }\n\n  get isValid() {\n    return true;\n  }\n}\n","import { Util } from '../impl/util';\nimport { Zone } from '../zone';\n\nconst typeToPos = {\n  year: 0,\n  month: 1,\n  day: 2,\n  hour: 3,\n  minute: 4,\n  second: 5\n};\n\nfunction hackyOffset(dtf, date) {\n  const formatted = dtf.format(date),\n    parsed = /(\\d+)\\/(\\d+)\\/(\\d+), (\\d+):(\\d+):(\\d+)/.exec(formatted),\n    [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed;\n  return [fYear, fMonth, fDay, fHour, fMinute, fSecond];\n}\n\nfunction partsOffset(dtf, date) {\n  const formatted = dtf.formatToParts(date),\n    filled = [];\n  for (let i = 0; i < formatted.length; i++) {\n    const { type, value } = formatted[i],\n      pos = typeToPos[type];\n\n    if (!Util.isUndefined(pos)) {\n      filled[pos] = parseInt(value, 10);\n    }\n  }\n  return filled;\n}\n\nfunction isValid(zone) {\n  try {\n    new Intl.DateTimeFormat('en-us', { timeZone: zone }).format();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * @private\n */\n\nexport class IANAZone extends Zone {\n  static isValidSpecier(s) {\n    return s && s.match(/[a-z_]+\\/[a-z_]+/i);\n  }\n\n  constructor(name) {\n    super();\n    this.zoneName = name;\n    this.valid = isValid(name);\n  }\n\n  get type() {\n    return 'iana';\n  }\n\n  get name() {\n    return this.zoneName;\n  }\n\n  get universal() {\n    return false;\n  }\n\n  offsetName(ts, { format = 'long', locale = 'en-us' } = {}) {\n    return Util.parseZoneInfo(ts, format, locale || 'en-us', this.zoneName);\n  }\n\n  offset(ts) {\n    const date = new Date(ts),\n      dtf = new Intl.DateTimeFormat('en-us', {\n        hour12: false,\n        timeZone: this.zoneName,\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      }),\n      [fYear, fMonth, fDay, fHour, fMinute, fSecond] = dtf.formatToParts\n        ? partsOffset(dtf, date)\n        : hackyOffset(dtf, date),\n      asUTC = Date.UTC(fYear, fMonth - 1, fDay, fHour, fMinute, fSecond);\n    let asTS = date.valueOf();\n    asTS -= asTS % 1000;\n    return (asUTC - asTS) / (60 * 1000);\n  }\n\n  equals(otherZone) {\n    return otherZone.type === 'iana' && otherZone.zoneName === this.zoneName;\n  }\n\n  get isValid() {\n    return this.valid;\n  }\n}\n","import { Util } from '../impl/util';\nimport { Zone } from '../zone';\n\nlet singleton = null;\n\n/**\n * @private\n */\n\nexport class FixedOffsetZone extends Zone {\n  static get utcInstance() {\n    if (singleton === null) {\n      singleton = new FixedOffsetZone(0);\n    }\n    return singleton;\n  }\n\n  static instance(offset) {\n    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);\n  }\n\n  static parseSpecifier(s) {\n    if (s) {\n      const r = s.match(/^utc(?:([+-]\\d{1,2})(?::(\\d{2}))?)?$/i);\n      if (r) {\n        return new FixedOffsetZone(Util.signedOffset(r[1], r[2]));\n      }\n    }\n    return null;\n  }\n\n  constructor(offset) {\n    super();\n    this.fixed = offset;\n  }\n\n  get type() {\n    return 'fixed';\n  }\n\n  get name() {\n    const hours = this.fixed / 60,\n      minutes = Math.abs(this.fixed % 60),\n      sign = hours > 0 ? '+' : '-',\n      base = sign + Math.abs(hours),\n      number = minutes > 0 ? `${base}:${Util.pad(minutes, 2)}` : base;\n\n    return this.fixed === 0 ? 'UTC' : `UTC${number}`;\n  }\n\n  offsetName() {\n    return this.name();\n  }\n\n  get universal() {\n    return true;\n  }\n\n  offset() {\n    return this.fixed;\n  }\n\n  equals(otherZone) {\n    return otherZone.type === 'fixed' && otherZone.fixed === this.fixed;\n  }\n\n  get isValid() {\n    return true;\n  }\n}\n","import { LocalZone } from './zones/localZone';\nimport { Util } from './impl/util';\n\nlet now = () => new Date().valueOf(),\n  defaultZone = LocalZone.instance,\n  throwOnInvalid = false;\n\n/**\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\n */\nexport class Settings {\n  /**\n   * Get the callback for returning the current timestamp.\n   * @type {function}\n   */\n  static get now() {\n    return now;\n  }\n\n  /**\n   * Set the callback for returning the current timestamp.\n   * @type {function}\n   */\n  static set now(n) {\n    now = n;\n  }\n\n  /**\n   * Set the default time zone to create DateTimes in.\n   * @type {string}\n   */\n  static get defaultZoneName() {\n    return defaultZone.name;\n  }\n\n  /**\n   * Set the default time zone to create DateTimes in.\n   * @type {string}\n   */\n  static set defaultZoneName(z) {\n    defaultZone = Util.normalizeZone(z);\n  }\n\n  /**\n   * Get the default time zone object to create DateTimes in.\n   * @type {Zone}\n   */\n  static get defaultZone() {\n    return defaultZone;\n  }\n\n  /**\n   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {Zone}\n   */\n  static get throwOnInvalid() {\n    return throwOnInvalid;\n  }\n\n  /**\n   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {Zone}\n   */\n  static set throwOnInvalid(t) {\n    throwOnInvalid = t;\n  }\n}\n","import { Duration } from '../duration';\nimport { DateTime } from '../datetime';\nimport { Zone } from '../zone';\nimport { LocalZone } from '../zones/localZone';\nimport { IANAZone } from '../zones/IANAZone';\nimport { FixedOffsetZone } from '../zones/fixedOffsetZone';\nimport { Settings } from '../settings';\nimport { InvalidArgumentError } from '../errors';\n\n/**\n * @private\n */\n\nexport class Util {\n  static friendlyDuration(duration) {\n    if (Util.isNumber(duration)) {\n      return Duration.fromMilliseconds(duration);\n    } else if (duration instanceof Duration) {\n      return duration;\n    } else if (duration instanceof Object) {\n      return Duration.fromObject(duration);\n    } else {\n      throw new InvalidArgumentError('Unknown duration argument');\n    }\n  }\n\n  static friendlyDateTime(dateTimeish) {\n    if (dateTimeish instanceof DateTime) {\n      return dateTimeish;\n    } else if (dateTimeish.valueOf && Util.isNumber(dateTimeish.valueOf())) {\n      return DateTime.fromJSDate(dateTimeish);\n    } else if (dateTimeish instanceof Object) {\n      return DateTime.fromObject(dateTimeish);\n    } else {\n      throw new InvalidArgumentError('Unknown datetime argument');\n    }\n  }\n\n  static maybeArray(thing) {\n    return Array.isArray(thing) ? thing : [thing];\n  }\n\n  static isUndefined(o) {\n    return typeof o === 'undefined';\n  }\n\n  static isNumber(o) {\n    return typeof o === 'number';\n  }\n\n  static isString(o) {\n    return typeof o === 'string';\n  }\n\n  static numberBetween(thing, bottom, top) {\n    return Util.isNumber(thing) && thing >= bottom && thing <= top;\n  }\n\n  static pad(input, n = 2) {\n    return ('0'.repeat(n) + input).slice(-n);\n  }\n\n  static towardZero(input) {\n    return input < 0 ? Math.ceil(input) : Math.floor(input);\n  }\n\n  // DateTime -> JS date such that the date's UTC time is the datetimes's local time\n  static asIfUTC(dt) {\n    const ts = dt.ts - dt.offset;\n    return new Date(ts);\n  }\n\n  // http://stackoverflow.com/a/15030117\n  static flatten(arr) {\n    return arr.reduce(\n      (flat, toFlatten) =>\n        flat.concat(Array.isArray(toFlatten) ? Util.flatten(toFlatten) : toFlatten),\n      []\n    );\n  }\n\n  static bestBy(arr, by, compare) {\n    return arr.reduce((best, next) => {\n      const pair = [by(next), next];\n      if (!best) {\n        return pair;\n      } else if (compare.apply(null, [best[0], pair[0]]) === best[0]) {\n        return best;\n      } else {\n        return pair;\n      }\n    }, null)[1];\n  }\n\n  static pick(obj, keys) {\n    return keys.reduce((a, k) => {\n      a[k] = obj[k];\n      return a;\n    }, {});\n  }\n\n  static isLeapYear(year) {\n    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n  }\n\n  static daysInYear(year) {\n    return Util.isLeapYear(year) ? 366 : 365;\n  }\n\n  static daysInMonth(year, month) {\n    if (month === 2) {\n      return Util.isLeapYear(year) ? 29 : 28;\n    } else {\n      return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month - 1];\n    }\n  }\n\n  static parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {\n    const date = new Date(ts),\n      intl = {\n        hour12: false,\n        // avoid AM/PM\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      };\n\n    if (timeZone) {\n      intl.timeZone = timeZone;\n    }\n\n    const modified = Object.assign({ timeZoneName: offsetFormat }, intl);\n\n    if (Intl.DateTimeFormat.prototype.formatToParts) {\n      const parsed = new Intl.DateTimeFormat(locale, modified)\n        .formatToParts(date)\n        .find(m => m.type.toLowerCase() === 'timezonename');\n      return parsed ? parsed.value : null;\n    } else {\n      // this probably doesn't work for all locales\n      const without = new Intl.DateTimeFormat(locale, intl).format(date),\n        included = new Intl.DateTimeFormat(locale, modified).format(date),\n        diffed = included.substring(without.length),\n        trimmed = diffed.replace(/^[, ]+/, '');\n\n      return trimmed;\n    }\n  }\n\n  static normalizeZone(input) {\n    if (input instanceof Zone) {\n      return input;\n    } else if (Util.isString(input)) {\n      const lowered = input.toLowerCase();\n      if (lowered === 'local') return LocalZone.instance;\n      else if (lowered === 'utc') return FixedOffsetZone.utcInstance;\n      else if (IANAZone.isValidSpecier(lowered)) return new IANAZone(input);\n      else return FixedOffsetZone.parseSpecifier(lowered) || Settings.defaultZone;\n    } else if (Util.isNumber(input)) {\n      return FixedOffsetZone.instance(input);\n    } else if (typeof input === 'object' && input.offset) {\n      // This is dumb, but the instanceof check above doesn't seem to really work\n      // so we're duck checking it\n      return input;\n    } else {\n      return Settings.defaultZone;\n    }\n  }\n\n  static normalizeObject(obj, normalizer, ignoreUnknown = false) {\n    const normalized = {};\n    for (const u in obj) {\n      if (obj.hasOwnProperty(u)) {\n        const v = obj[u];\n        if (v !== null && !Util.isUndefined(v) && !Number.isNaN(v)) {\n          const mapped = normalizer(u, ignoreUnknown);\n          if (mapped) {\n            normalized[mapped] = v;\n          }\n        }\n      }\n    }\n    return normalized;\n  }\n\n  static timeObject(obj) {\n    return Util.pick(obj, ['hour', 'minute', 'second', 'millisecond']);\n  }\n\n  static untrucateYear(year) {\n    return year > 60 ? 1900 + year : 2000 + year;\n  }\n\n  // signedOffset('-5', '30') -> -330\n  static signedOffset(offHourStr, offMinuteStr) {\n    const offHour = parseInt(offHourStr, 10) || 0,\n      offMin = parseInt(offMinuteStr, 10) || 0,\n      offMinSigned = offHour < 0 ? -offMin : offMin;\n    return offHour * 60 + offMinSigned;\n  }\n}\n","/**\n * @private\n */\n\nexport class English {\n  static get monthsLong() {\n    return [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ];\n  }\n\n  static get monthsShort() {\n    return ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  }\n\n  static get monthsNarrow() {\n    return ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'];\n  }\n\n  static months(length) {\n    switch (length) {\n      case 'narrow':\n        return English.monthsNarrow;\n      case 'short':\n        return English.monthsShort;\n      case 'long':\n        return English.monthsLong;\n      default:\n        return null;\n    }\n  }\n\n  static get weekdaysLong() {\n    return ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n  }\n\n  static get weekdaysShort() {\n    return ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n  }\n\n  static get weekdaysNarrow() {\n    return ['M', 'T', 'W', 'T', 'F', 'S', 'S'];\n  }\n\n  static weekdays(length) {\n    switch (length) {\n      case 'narrow':\n        return English.weekdaysNarrow;\n      case 'short':\n        return English.weekdaysShort;\n      case 'long':\n        return English.weekdaysLong;\n      default:\n        return null;\n    }\n  }\n\n  static get meridiems() {\n    return ['AM', 'PM'];\n  }\n\n  static eras(length) {\n    return length === 'short' ? ['BC', 'AD'] : ['Before Christ', 'Anno Domini'];\n  }\n}\n","import { Util } from './util';\nimport { English } from './english';\nimport { DateTime } from '../datetime';\n\nconst localeCache = new Map();\n\nfunction intlConfigString(locale, numberingSystem, outputCalendar) {\n  let loc = locale || new Intl.DateTimeFormat().resolvedOptions().locale;\n  loc = Array.isArray(locale) ? locale : [locale];\n\n  if (outputCalendar || numberingSystem) {\n    loc = loc.map(l => {\n      l += '-u';\n\n      if (outputCalendar) {\n        l += '-ca-' + outputCalendar;\n      }\n\n      if (numberingSystem) {\n        l += '-nu-' + numberingSystem;\n      }\n      return l;\n    });\n  }\n  return loc;\n}\n\nfunction mapMonths(f) {\n  const ms = [];\n  for (let i = 1; i <= 12; i++) {\n    const dt = DateTime.utc(2016, i, 1);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction mapWeekdays(f) {\n  const ms = [];\n  for (let i = 1; i <= 7; i++) {\n    const dt = DateTime.utc(2016, 11, 13 + i);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\n/**\n * @private\n */\n\nexport class Locale {\n  static fromOpts(opts) {\n    return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar);\n  }\n\n  static create(locale, numberingSystem, outputCalendar) {\n    const localeR = locale || 'en-us',\n      numberingSystemR = numberingSystem || null,\n      outputCalendarR = outputCalendar || null,\n      cacheKey = `${localeR}|${numberingSystemR}|${outputCalendarR}`,\n      cached = localeCache.get(cacheKey);\n\n    if (cached) {\n      return cached;\n    } else {\n      const fresh = new Locale(localeR, numberingSystemR, outputCalendarR);\n      localeCache.set(cacheKey, fresh);\n      return fresh;\n    }\n  }\n\n  static fromObject({ locale, numberingSystem, outputCalendar } = {}) {\n    return Locale.create(locale, numberingSystem, outputCalendar);\n  }\n\n  constructor(locale, numbering, outputCalendar) {\n    Object.defineProperty(this, 'locale', { value: locale, enumerable: true });\n    Object.defineProperty(this, 'numberingSystem', {\n      value: numbering || null,\n      enumerable: true\n    });\n    Object.defineProperty(this, 'outputCalendar', {\n      value: outputCalendar || null,\n      enumerable: true\n    });\n    Object.defineProperty(this, 'intl', {\n      value: intlConfigString(this.locale, this.numberingSystem, this.outputCalendar),\n      enumerable: false\n    });\n\n    // cached usefulness\n    Object.defineProperty(this, 'weekdaysCache', {\n      value: { format: {}, standalone: {} },\n      enumerable: false\n    });\n    Object.defineProperty(this, 'monthsCache', {\n      value: { format: {}, standalone: {} },\n      enumerable: false\n    });\n    Object.defineProperty(this, 'meridiemCache', {\n      value: null,\n      enumerable: false,\n      writable: true\n    });\n    Object.defineProperty(this, 'eraCache', {\n      value: {},\n      enumerable: false,\n      writable: true\n    });\n  }\n\n  knownEnglish() {\n    return (\n      (this.locale === 'en' ||\n        Intl.DateTimeFormat(this.intl)\n          .resolvedOptions()\n          .locale.startsWith('en-US')) &&\n      this.numberingSystem === null &&\n      (this.outputCalendar === null || this.outputCalendar === 'latn')\n    );\n  }\n\n  clone(alts) {\n    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {\n      return this;\n    } else {\n      return Locale.create(\n        alts.locale || this.locale,\n        alts.numberingSystem || this.numberingSystem,\n        alts.outputCalendar || this.outputCalendar\n      );\n    }\n  }\n\n  months(length, format = false) {\n    if (this.knownEnglish()) {\n      const english = English.months(length);\n      if (english) {\n        return english;\n      }\n    }\n\n    const intl = format ? { month: length, day: 'numeric' } : { month: length },\n      formatStr = format ? 'format' : 'standalone';\n    if (!this.monthsCache[formatStr][length]) {\n      this.monthsCache[formatStr][length] = mapMonths(dt => this.extract(dt, intl, 'month'));\n    }\n    return this.monthsCache[formatStr][length];\n  }\n\n  weekdays(length, format = false) {\n    if (this.knownEnglish()) {\n      const english = English.weekdays(length);\n      if (english) {\n        return english;\n      }\n    }\n\n    const intl = format\n        ? { weekday: length, year: 'numeric', month: 'long', day: 'numeric' }\n        : { weekday: length },\n      formatStr = format ? 'format' : 'standalone';\n    if (!this.weekdaysCache[formatStr][length]) {\n      this.weekdaysCache[formatStr][length] = mapWeekdays(dt => this.extract(dt, intl, 'weekday'));\n    }\n    return this.weekdaysCache[formatStr][length];\n  }\n\n  meridiems() {\n    if (this.knownEnglish()) {\n      return English.meridiems;\n    }\n\n    // In theory there could be aribitrary day periods. We're gonna assume there are exactly two\n    // for AM and PM. This is probably wrong, but it's makes parsing way easier.\n    if (!this.meridiemCache) {\n      const intl = { hour: 'numeric', hour12: true };\n      this.meridiemCache = [DateTime.utc(2016, 11, 13, 9), DateTime.utc(2016, 11, 13, 19)].map(dt =>\n        this.extract(dt, intl, 'dayperiod')\n      );\n    }\n\n    return this.meridiemCache;\n  }\n\n  eras(length) {\n    if (this.knownEnglish()) {\n      return English.eras(length);\n    }\n\n    const intl = { era: length };\n\n    // This is utter bullshit. Different calendars are going to define eras totally differently. What I need is the minimum set of dates\n    // to definitely enumerate them.\n    if (!this.eraCache[length]) {\n      this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(dt =>\n        this.extract(dt, intl, 'era')\n      );\n    }\n\n    return this.eraCache[length];\n  }\n\n  extract(dt, intlOpts, field) {\n    const [df, d] = this.dtFormatter(dt, intlOpts),\n      results = df.formatToParts(d),\n      matching = results.find(m => m.type.toLowerCase() === field);\n\n    return matching ? matching.value : null;\n  }\n\n  numberFormatter(opts = {}, intlOpts = {}) {\n    const realIntlOpts = Object.assign({ useGrouping: false }, intlOpts);\n\n    if (opts.padTo > 0) {\n      realIntlOpts.minimumIntegerDigits = opts.padTo;\n    }\n\n    if (opts.round) {\n      realIntlOpts.maximumFractionDigits = 0;\n    }\n\n    return new Intl.NumberFormat(this.intl, realIntlOpts);\n  }\n\n  dtFormatter(dt, intlOpts = {}) {\n    let d, z;\n\n    if (dt.zone.universal) {\n      // if we have a fixed-offset zone that isn't actually UTC,\n      // (like UTC+8), we need to make do with just displaying\n      // the time in UTC; the formatter how to handle UTC+8\n      d = Util.asIfUTC(dt);\n      z = 'UTC';\n    } else if (dt.zone.type === 'local') {\n      d = dt.toJSDate();\n    } else {\n      d = dt.toJSDate();\n      z = dt.zone.name;\n    }\n\n    const realIntlOpts = Object.assign({}, intlOpts);\n    if (z) {\n      realIntlOpts.timeZone = z;\n    }\n\n    return [new Intl.DateTimeFormat(this.intl, realIntlOpts), d];\n  }\n\n  equals(other) {\n    return (\n      this.locale === other.locale &&\n      this.numberingSystem === other.numberingSystem &&\n      this.outputCalendar === other.outputCalendar\n    );\n  }\n}\n","import { Util } from './util';\nimport { DateTime } from '../datetime';\n\nfunction stringifyTokens(splits, tokenToString) {\n  let s = '';\n  for (const token of splits) {\n    if (token.literal) {\n      s += token.val;\n    } else {\n      s += tokenToString(token.val);\n    }\n  }\n  return s;\n}\n\n/**\n * @private\n */\n\nexport class Formatter {\n  static create(locale, opts = {}) {\n    const formatOpts = Object.assign({}, { round: true }, opts);\n    return new Formatter(locale, formatOpts);\n  }\n\n  static parseFormat(fmt) {\n    let current = null,\n      currentFull = '',\n      bracketed = false;\n    const splits = [];\n    for (let i = 0; i < fmt.length; i++) {\n      const c = fmt.charAt(i);\n      if (c === \"'\") {\n        if (currentFull.length > 0) {\n          splits.push({ literal: bracketed, val: currentFull });\n        }\n        current = null;\n        currentFull = '';\n        bracketed = !bracketed;\n      } else if (bracketed) {\n        currentFull += c;\n      } else if (c === current) {\n        currentFull += c;\n      } else {\n        if (currentFull.length > 0) {\n          splits.push({ literal: false, val: currentFull });\n        }\n        currentFull = c;\n        current = c;\n      }\n    }\n\n    if (currentFull.length > 0) {\n      splits.push({ literal: bracketed, val: currentFull });\n    }\n\n    return splits;\n  }\n\n  constructor(locale, formatOpts) {\n    this.opts = formatOpts;\n    this.loc = locale;\n  }\n\n  formatDateTime(dt, opts = {}) {\n    const [df, d] = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));\n    return df.format(d);\n  }\n\n  formatDateTimeParts(dt, opts = {}) {\n    const [df, d] = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));\n    return df.format(d);\n  }\n\n  resolvedOptions(dt, opts = {}) {\n    const [df, d] = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));\n    return df.resolvedOptions(d);\n  }\n\n  num(n, p = 0) {\n    const opts = Object.assign({}, this.opts);\n\n    if (p > 0) {\n      opts.padTo = p;\n    }\n\n    return this.loc.numberFormatter(opts).format(n);\n  }\n\n  formatDateTimeFromString(dt, fmt) {\n    const string = (opts, extract) => this.loc.extract(dt, opts, extract),\n      formatOffset = opts => {\n        if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {\n          return 'Z';\n        }\n\n        const hours = Util.towardZero(dt.offset / 60),\n          minutes = Math.abs(dt.offset % 60),\n          sign = hours >= 0 ? '+' : '-',\n          base = `${sign}${Math.abs(hours)}`;\n\n        switch (opts.format) {\n          case 'short':\n            return `${sign}${this.num(Math.abs(hours), 2)}:${this.num(minutes, 2)}`;\n          case 'narrow':\n            return minutes > 0 ? `${base}:${minutes}` : base;\n          case 'techie':\n            return `${sign}${this.num(Math.abs(hours), 2)}${this.num(minutes, 2)}`;\n          default:\n            throw new RangeError(`Value format ${opts.format} is out of range for property format`);\n        }\n      },\n      tokenToString = token => {\n        const outputCal = this.loc.outputCalendar;\n\n        // Where possible: http://cldr.unicode.org/translation/date-time#TOC-Stand-Alone-vs.-Format-Styles\n        switch (token) {\n          // ms\n          case 'S':\n            return this.num(dt.millisecond);\n          case 'SSS':\n            return this.num(dt.millisecond, 3);\n          // seconds\n          case 's':\n            return this.num(dt.second);\n          case 'ss':\n            return this.num(dt.second, 2);\n          // minutes\n          case 'm':\n            return this.num(dt.minute);\n          case 'mm':\n            return this.num(dt.minute, 2);\n          // hours\n          case 'h':\n            return this.num(dt.hour === 12 ? 12 : dt.hour % 12);\n          case 'hh':\n            return this.num(dt.hour === 12 ? 12 : dt.hour % 12, 2);\n          case 'H':\n            return this.num(dt.hour);\n          case 'HH':\n            return this.num(dt.hour, 2);\n          // offset\n          case 'Z':\n            // like +6\n            return formatOffset({ format: 'narrow', allowZ: true });\n          case 'ZZ':\n            // like +06:00\n            return formatOffset({ format: 'short', allowZ: true });\n          case 'ZZZ':\n            // like +0600\n            return formatOffset({ format: 'techie', allowZ: false });\n          case 'ZZZZ':\n            // like EST\n            return dt.offsetNameShort;\n          case 'ZZZZZ':\n            // like Eastern Standard Time\n            return dt.offsetNameLong;\n          // zone\n          case 'z':\n            return dt.zoneName;\n          // like America/New_York\n          // meridiems\n          case 'a':\n            return string({ hour: 'numeric', hour12: true }, 'dayperiod');\n          // dates\n          case 'd':\n            return outputCal ? string({ day: 'numeric' }, 'day') : this.num(dt.day);\n          case 'dd':\n            return outputCal ? string({ day: '2-digit' }, 'day') : this.num(dt.day, 2);\n          // weekdays - format\n          case 'c':\n            // like 1\n            return this.num(dt.weekday);\n          case 'ccc':\n            // like 'Tues'\n            return string({ weekday: 'short' }, 'weekday');\n          case 'cccc':\n            // like 'Tuesday'\n            return string({ weekday: 'long' }, 'weekday');\n          case 'ccccc':\n            // like 'T'\n            return string({ weekday: 'narrow' }, 'weekday');\n          // weekdays - standalone\n          case 'E':\n            // like 1\n            return this.num(dt.weekday);\n          case 'EEE':\n            // like 'Tues'\n            return string({ weekday: 'short', month: 'long', day: 'numeric' }, 'weekday');\n          case 'EEEE':\n            // like 'Tuesday'\n            return string({ weekday: 'long', month: 'long', day: 'numeric' }, 'weekday');\n          case 'EEEEE':\n            // like 'T'\n            return string({ weekday: 'narrow', month: 'long', day: 'numeric' }, 'weekday');\n          // months - format\n          case 'L':\n            // like 1\n            return string({ month: 'numeric', day: 'numeric' }, 'month');\n          case 'LL':\n            // like 01, doesn't seem to work\n            return string({ month: '2-digit', day: 'numeric' }, 'month');\n          case 'LLL':\n            // like Jan\n            return string({ month: 'short', day: 'numeric' }, 'month');\n          case 'LLLL':\n            // like January\n            return string({ month: 'long' }, 'month');\n          case 'LLLLL':\n            // like J\n            return string({ month: 'narrow' }, 'month');\n          // months - standalone\n          case 'M':\n            // like 1\n            return outputCal ? string({ month: 'numeric' }, 'month') : this.num(dt.month);\n          case 'MM':\n            // like 01\n            return outputCal ? string({ month: '2-digit' }, 'month') : this.num(dt.month, 2);\n          case 'MMM':\n            // like Jan\n            return string({ month: 'short', day: 'numeric' }, 'month');\n          case 'MMMM':\n            // like January\n            return string({ month: 'long', day: 'numeric' }, 'month');\n          case 'MMMMM':\n            // like J\n            return string({ month: 'narrow' }, 'month');\n          // years\n          case 'y':\n            // like 2014\n            return outputCal ? string({ year: 'numeric' }, 'year') : this.num(dt.year);\n          case 'yy':\n            // like 14\n            return outputCal\n              ? string({ year: '2-digit' }, 'year')\n              : this.num(dt.year.toString().slice(-2), 2);\n          case 'yyyy':\n            // like 0012\n            return outputCal ? string({ year: 'numeric' }, 'year') : this.num(dt.year, 4);\n          // eras\n          case 'G':\n            // like AD\n            return string({ era: 'short' }, 'era');\n          case 'GG':\n            // like Anno Domini\n            return string({ era: 'long' }, 'era');\n          case 'GGGGG':\n            return string({ era: 'narrow' }, 'era');\n          case 'kk':\n            return this.num(dt.weekYear.toString().slice(-2), 2);\n          case 'kkkk':\n            return this.num(dt.weekYear, 4);\n          case 'W':\n            return this.num(dt.weekNumber);\n          case 'WW':\n            return this.num(dt.weekNumber, 2);\n          case 'o':\n            return this.num(dt.ordinal);\n          case 'ooo':\n            return this.num(dt.ordinal, 3);\n          // macros\n          case 'D':\n            return this.formatDateTime(dt, DateTime.DATE_SHORT);\n          case 'DD':\n            return this.formatDateTime(dt, DateTime.DATE_MED);\n          case 'DDD':\n            return this.formatDateTime(dt, DateTime.DATE_FULL);\n          case 'DDDD':\n            return this.formatDateTime(dt, DateTime.DATE_HUGE);\n          case 't':\n            return this.formatDateTime(dt, DateTime.TIME_SIMPLE);\n          case 'tt':\n            return this.formatDateTime(dt, DateTime.TIME_WITH_SECONDS);\n          case 'ttt':\n            return this.formatDateTime(dt, DateTime.TIME_WITH_SHORT_OFFSET);\n          case 'tttt':\n            return this.formatDateTime(dt, DateTime.TIME_WITH_LONG_OFFSET);\n          case 'T':\n            return this.formatDateTime(dt, DateTime.TIME_24_SIMPLE);\n          case 'TT':\n            return this.formatDateTime(dt, DateTime.TIME_24_WITH_SECONDS);\n          case 'TTT':\n            return this.formatDateTime(dt, DateTime.TIME_24_WITH_SHORT_OFFSET);\n          case 'TTTT':\n            return this.formatDateTime(dt, DateTime.TIME_24_WITH_LONG_OFFSET);\n          case 'f':\n            return this.formatDateTime(dt, DateTime.DATETIME_SHORT);\n          case 'ff':\n            return this.formatDateTime(dt, DateTime.DATETIME_MED);\n          case 'fff':\n            return this.formatDateTime(dt, DateTime.DATETIME_FULL);\n          case 'ffff':\n            return this.formatDateTime(dt, DateTime.DATETIME_HUGE);\n          case 'F':\n            return this.formatDateTime(dt, DateTime.DATETIME_SHORT_WITH_SECONDS);\n          case 'FF':\n            return this.formatDateTime(dt, DateTime.DATETIME_MED_WITH_SECONDS);\n          case 'FFF':\n            return this.formatDateTime(dt, DateTime.DATETIME_FULL_WITH_SECONDS);\n          case 'FFFF':\n            return this.formatDateTime(dt, DateTime.DATETIME_HUGE_WITH_SECONDS);\n\n          default:\n            return token;\n        }\n      };\n\n    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);\n  }\n\n  formatDuration() {}\n\n  formatDurationFromString(dur, fmt) {\n    const tokenToField = token => {\n        switch (token[0]) {\n          case 'S':\n            return 'millisecond';\n          case 's':\n            return 'second';\n          case 'm':\n            return 'minute';\n          case 'h':\n            return 'hour';\n          case 'd':\n            return 'day';\n          case 'M':\n            return 'month';\n          case 'y':\n            return 'year';\n          default:\n            return null;\n        }\n      },\n      tokenToString = lildur => token => {\n        const mapped = tokenToField(token);\n        if (mapped) {\n          return this.num(lildur.get(mapped), token.length);\n        } else {\n          return token;\n        }\n      },\n      tokens = Formatter.parseFormat(fmt),\n      realTokens = tokens.reduce(\n        (found, { literal, val }) => (literal ? found : found.concat(val)),\n        []\n      ),\n      collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter(t => t));\n    return stringifyTokens(tokens, tokenToString(collapsed));\n  }\n}\n","import { Util } from './util';\nimport { English } from './english';\nimport { FixedOffsetZone } from '../zones/fixedOffsetZone';\n\nfunction combineRegexes(...regexes) {\n  const full = regexes.reduce((f, r) => f + r.source, '');\n  return RegExp(full);\n}\n\nfunction combineExtractors(...extractors) {\n  return m =>\n    extractors\n      .reduce(\n        ([mergedVals, mergedZone, cursor], ex) => {\n          const [val, zone, next] = ex(m, cursor);\n          return [Object.assign(mergedVals, val), mergedZone || zone, next];\n        },\n        [{}, null, 1]\n      )\n      .slice(0, 2);\n}\n\nfunction parse(s, ...patterns) {\n  if (s == null) {\n    return [null, null];\n  }\n  for (const [regex, extractor] of patterns) {\n    const m = regex.exec(s);\n    if (m) {\n      return extractor(m);\n    }\n  }\n  return [null, null];\n}\n\nfunction simpleParse(...keys) {\n  return (match, cursor) => {\n    const ret = {};\n    let i;\n\n    for (i = 0; i < keys.length; i++) {\n      ret[keys[i]] = parseInt(match[cursor + i]);\n    }\n    return [ret, null, cursor + i];\n  };\n}\n\n// ISO parsing\nconst isoTimeRegex = /(?:T(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d\\d\\d))?)?)?(?:(Z)|([+-]\\d\\d)(?::?(\\d\\d))?)?)?$/,\n  extractISOYmd = simpleParse('year', 'month', 'day'),\n  isoYmdRegex = /^([+-]?\\d{6}|\\d{4})-?(\\d\\d)-?(\\d\\d)/,\n  extractISOWeekData = simpleParse('weekYear', 'weekNumber', 'weekDay'),\n  isoWeekRegex = /^(\\d{4})-?W(\\d\\d)-?(\\d)/,\n  isoOrdinalRegex = /^(\\d{4})-?(\\d{3})/,\n  extractISOOrdinalData = simpleParse('year', 'ordinal');\n\nfunction extractISOTime(match, cursor) {\n  const local = !match[cursor + 4] && !match[cursor + 5],\n    fullOffset = Util.signedOffset(match[cursor + 5], match[cursor + 6]),\n    item = {\n      hour: parseInt(match[cursor]) || 0,\n      minute: parseInt(match[cursor + 1]) || 0,\n      second: parseInt(match[cursor + 2]) || 0,\n      millisecond: parseInt(match[cursor + 3]) || 0\n    },\n    zone = local ? null : new FixedOffsetZone(fullOffset);\n\n  return [item, zone, cursor + 7];\n}\n\n// ISO duration parsing\n\nconst isoDuration = /^P(?:(\\d+)Y)?(?:(\\d+)M)?(?:(\\d+)D)?(?:T(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?)?$/;\n\nfunction extractISODuration(match) {\n  const [, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr] = match;\n\n  return {\n    year: parseInt(yearStr),\n    month: parseInt(monthStr),\n    day: parseInt(dayStr),\n    hour: parseInt(hourStr),\n    minute: parseInt(minuteStr),\n    second: parseInt(secondStr)\n  };\n}\n\n// These are a little braindead. EDT *should* tell us that we're in, say, America/New_York\n// and not just that we're in -240 *right now*. But since I don't think these are used that often\n// I'm just going to ignore that\nconst obsOffsets = {\n  GMT: 0,\n  EDT: -4 * 60,\n  EST: -5 * 60,\n  CDT: -5 * 60,\n  CST: -6 * 60,\n  MDT: -6 * 60,\n  MST: -7 * 60,\n  PDT: -7 * 60,\n  PST: -8 * 60\n};\n\nfunction fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n  const result = {\n    year: yearStr.length === 2 ? Util.untrucateYear(parseInt(yearStr)) : parseInt(yearStr),\n    month: English.monthsShort.indexOf(monthStr) + 1,\n    day: parseInt(dayStr),\n    hour: parseInt(hourStr),\n    minute: parseInt(minuteStr)\n  };\n\n  if (secondStr) result.second = parseInt(secondStr);\n  if (weekdayStr) {\n    result.weekday =\n      weekdayStr.length > 3\n        ? English.weekdaysLong.indexOf(weekdayStr) + 1\n        : English.weekdaysShort.indexOf(weekdayStr) + 1;\n  }\n\n  return result;\n}\n\n// RFC 2822/5322\nconst rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\\d\\d)(\\d\\d)))$/;\n\nfunction extractRFC2822(match) {\n  const [\n      ,\n      weekdayStr,\n      dayStr,\n      monthStr,\n      yearStr,\n      hourStr,\n      minuteStr,\n      secondStr,\n      obsOffset,\n      milOffset,\n      offHourStr,\n      offMinuteStr\n    ] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n\n  let offset;\n  if (obsOffset) {\n    offset = obsOffsets[obsOffset];\n  } else if (milOffset) {\n    offset = 0;\n  } else {\n    offset = Util.signedOffset(offHourStr, offMinuteStr);\n  }\n\n  return [result, new FixedOffsetZone(offset)];\n}\n\nfunction preprocessRFC2822(s) {\n  // Remove comments and folding whitespace and replace multiple-spaces with a single space\n  return s\n    .replace(/\\([^)]*\\)|[\\n\\t]/g, ' ')\n    .replace(/(\\s\\s+)/g, ' ')\n    .trim();\n}\n\n// http date\n\nconst rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d\\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  rfc850 = /^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\\d\\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \\d|\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) (\\d{4})$/;\n\nfunction extractRFC1123Or850(match) {\n  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\nfunction extractASCII(match) {\n  const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\n/**\n * @private\n */\n\nexport class RegexParser {\n  static parseISODate(s) {\n    return parse(\n      s,\n      [combineRegexes(isoYmdRegex, isoTimeRegex), combineExtractors(extractISOYmd, extractISOTime)],\n      [\n        combineRegexes(isoWeekRegex, isoTimeRegex),\n        combineExtractors(extractISOWeekData, extractISOTime)\n      ],\n      [\n        combineRegexes(isoOrdinalRegex, isoTimeRegex),\n        combineExtractors(extractISOOrdinalData, extractISOTime)\n      ]\n    );\n  }\n\n  static parseRFC2822Date(s) {\n    return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);\n  }\n\n  static parseHTTPDate(s) {\n    return parse(\n      s,\n      [rfc1123, extractRFC1123Or850],\n      [rfc850, extractRFC1123Or850],\n      [ascii, extractASCII]\n    );\n  }\n\n  static parseISODuration(s) {\n    return parse(s, [isoDuration, extractISODuration]);\n  }\n}\n","import { Util } from './impl/util';\nimport { Locale } from './impl/locale';\nimport { Formatter } from './impl/formatter';\nimport { RegexParser } from './impl/regexParser';\nimport { Settings } from './settings';\nimport { InvalidArgumentError, InvalidDurationError, InvalidUnitError } from './errors';\n\nconst INVALID = 'Invalid Duration';\n\nconst lowOrderMatrix = {\n    weeks: {\n      days: 7,\n      hours: 7 * 24,\n      minutes: 7 * 24 * 60,\n      seconds: 7 * 24 * 60 * 60,\n      milliseconds: 7 * 24 * 60 * 60 * 1000\n    },\n    days: {\n      hours: 24,\n      minutes: 24 * 60,\n      seconds: 24 * 60 * 60,\n      milliseconds: 24 * 60 * 60 * 1000\n    },\n    hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1000 },\n    minutes: { seconds: 60, milliseconds: 60 * 1000 },\n    seconds: { milliseconds: 1000 }\n  },\n  casualMatrix = Object.assign(\n    {\n      years: {\n        months: 12,\n        weeks: 52,\n        days: 365,\n        hours: 365 * 24,\n        minutes: 365 * 24 * 60,\n        seconds: 365 * 24 * 60 * 60,\n        milliseconds: 365 * 24 * 60 * 60 * 1000\n      },\n      months: {\n        weeks: 4,\n        days: 30,\n        hours: 30 * 24,\n        minutes: 30 * 24 * 60,\n        seconds: 30 * 24 * 60 * 60,\n        milliseconds: 30 * 24 * 60 * 60 * 1000\n      }\n    },\n    lowOrderMatrix\n  ),\n  daysInYearAccurate = 146097.0 / 400,\n  daysInMonthAccurate = 146097.0 / 4800,\n  accurateMatrix = Object.assign(\n    {\n      years: {\n        months: 12,\n        weeks: daysInYearAccurate / 7,\n        days: daysInYearAccurate,\n        hours: daysInYearAccurate * 24,\n        minutes: daysInYearAccurate * 24 * 60,\n        seconds: daysInYearAccurate * 24 * 60 * 60,\n        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000\n      },\n      months: {\n        weeks: daysInMonthAccurate / 7,\n        days: daysInMonthAccurate,\n        hours: daysInYearAccurate * 24,\n        minutes: daysInYearAccurate * 24 * 60,\n        seconds: daysInYearAccurate * 24 * 60 * 60,\n        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000\n      }\n    },\n    lowOrderMatrix\n  );\n\nconst orderedUnits = [\n  'years',\n  'months',\n  'weeks',\n  'days',\n  'hours',\n  'minutes',\n  'seconds',\n  'milliseconds'\n];\n\nfunction clone(dur, alts, clear = false) {\n  // deep merge for vals\n  const conf = {\n    values: clear ? alts.values : Object.assign(dur.values, alts.values || {}),\n    loc: dur.loc.clone(alts.loc),\n    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy\n  };\n  return new Duration(conf);\n}\n\nfunction isHighOrderNegative(obj) {\n  // only rule is that the highest-order part must be non-negative\n  for (const k of orderedUnits) {\n    if (obj[k]) return obj[k] < 0;\n  }\n  return false;\n}\n\n/**\n * A Duration object represents a period of time, like \"2 months\" or \"1 day, 1 hour\". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime.plus} to add a Duration object to a DateTime, producing another DateTime.\n *\n * Here is a brief overview of commonly used methods and getters in Duration:\n *\n * * **Creation** To create a Duration, use {@link fromMilliseconds}, {@link fromObject}, or {@link fromISO}.\n * * **Unit values** See the {@link years}, {@link months}, {@link weeks}, {@link days}, {@link hours}, {@link minutes}, {@link seconds}, {@link milliseconds} accessors.\n * * **Configuration** See  {@link locale} and {@link numberingSystem} accessors.\n * * **Transformation** To create new Durations out of old ones use {@link plus}, {@link minus}, {@link normalize}, {@link set}, {@link reconfigure}, {@link shiftTo}, and {@link negate}.\n * * **Output** To convert the Duration into other representations, see {@link as}, {@link toISO}, {@link toFormat}, and {@link toJSON}\n *\n * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.\n */\nexport class Duration {\n  /**\n   * @private\n   */\n  constructor(config) {\n    const accurate = config.conversionAccuracy === 'longterm' || false;\n\n    Object.defineProperty(this, 'values', {\n      value: config.values,\n      enumerable: true\n    });\n    Object.defineProperty(this, 'loc', {\n      value: config.loc || Locale.create(),\n      enumerable: true\n    });\n    Object.defineProperty(this, 'conversionAccuracy', {\n      value: accurate ? 'longterm' : 'casual',\n      enumerable: true\n    });\n    Object.defineProperty(this, 'invalidReason', {\n      value: config.invalidReason || null,\n      enumerable: false\n    });\n    Object.defineProperty(this, 'matrix', {\n      value: accurate ? accurateMatrix : casualMatrix,\n      enumerable: false\n    });\n  }\n\n  /**\n   * Create Duration from a number of milliseconds.\n   * @param {number} count of milliseconds\n   * @param {Object} opts - options for parsing\n   * @param {string} [obj.locale='en-US'] - the locale to use\n   * @param {string} obj.numberingSystem - the numbering system to use\n   * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  static fromMilliseconds(count, opts) {\n    return Duration.fromObject(Object.assign({ milliseconds: count }, opts));\n  }\n\n  /**\n   * Create an DateTime from a Javascript object with keys like 'years' and 'hours'.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.years\n   * @param {number} obj.months\n   * @param {number} obj.weeks\n   * @param {number} obj.days\n   * @param {number} obj.hours\n   * @param {number} obj.minutes\n   * @param {number} obj.seconds\n   * @param {number} obj.milliseconds\n   * @param {string} [obj.locale='en-US'] - the locale to use\n   * @param {string} obj.numberingSystem - the numbering system to use\n   * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  static fromObject(obj) {\n    return new Duration({\n      values: Util.normalizeObject(obj, Duration.normalizeUnit, true),\n      loc: Locale.fromObject(obj),\n      conversionAccuracy: obj.conversionAccuracy\n    });\n  }\n\n  /**\n   * Create a DateTime from an ISO 8601 duration string.\n   * @param {string} text - text to parse\n   * @param {Object} opts - options for parsing\n   * @param {string} [obj.locale='en-US'] - the locale to use\n   * @param {string} obj.numberingSystem - the numbering system to use\n   * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromISO('P3Y6M4DT12H30M5S').toObject() //=> { years: 3, months: 6, day: 4, hours: 12, minutes: 30, seconds: 5 }\n   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }\n   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }\n   * @return {Duration}\n   */\n  static fromISO(text, opts) {\n    const obj = Object.assign(RegexParser.parseISODuration(text), opts);\n    return Duration.fromObject(obj);\n  }\n\n  /**\n   * Create an invalid Duration.\n   * @param {string} reason - reason this is invalid\n   * @return {Duration}\n   */\n  static invalid(reason) {\n    if (!reason) {\n      throw new InvalidArgumentError('need to specify a reason the DateTime is invalid');\n    }\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDurationError(reason);\n    } else {\n      return new Duration({ invalidReason: reason });\n    }\n  }\n\n  /**\n   * @private\n   */\n  static normalizeUnit(unit, ignoreUnknown = false) {\n    const normalized = {\n      year: 'years',\n      years: 'years',\n      month: 'months',\n      months: 'months',\n      week: 'weeks',\n      weeks: 'weeks',\n      day: 'days',\n      days: 'days',\n      hour: 'hours',\n      hours: 'hours',\n      minute: 'minutes',\n      minutes: 'minutes',\n      second: 'seconds',\n      seconds: 'seconds',\n      millisecond: 'milliseconds',\n      milliseconds: 'milliseconds'\n    }[unit ? unit.toLowerCase() : unit];\n\n    if (!ignoreUnknown && !normalized) throw new InvalidUnitError(unit);\n\n    return normalized;\n  }\n\n  /**\n   * Get  the locale of a Duration, such 'en-UK'\n   * @return {string}\n   */\n  get locale() {\n    return this.loc.locale;\n  }\n\n  /**\n   * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration\n   *\n   * @return {string}\n   */\n  get numberingSystem() {\n    return this.loc.numberingSystem;\n  }\n\n  /**\n   * Returns a string representation of this Duration formatted according to the specified format string.\n   * @param {string} fmt - the format string\n   * @param {object} opts - options\n   * @param {boolean} opts.round - round numerical values\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc, opts).formatDurationFromString(this, fmt)\n      : INVALID;\n  }\n\n  /**\n   * Returns a Javascript object with this Duration's values.\n   * @param opts - options for generating the object\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }\n   * @return {object}\n   */\n  toObject(opts = {}) {\n    if (!this.isValid) return {};\n\n    const base = Object.assign({}, this.values);\n\n    if (opts.includeConfig) {\n      base.conversionAccuracy = this.conversionAccuracy;\n      base.numberingSystem = this.loc.numberingSystem;\n      base.locale = this.loc.locale;\n    }\n    return base;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Duration.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'\n   * Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'\n   * Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'\n   * Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'\n   * @return {string}\n   */\n  toISO() {\n    // we could use the formatter, but this is an easier way to get the minimum string\n    if (!this.isValid) return null;\n\n    let s = 'P',\n      norm = this.normalize();\n\n    // ISO durations are always positive, so take the absolute value\n    norm = isHighOrderNegative(norm.values) ? norm.negate() : norm;\n\n    if (norm.years > 0) s += norm.years + 'Y';\n    if (norm.months > 0) s += norm.months + 'M';\n    if (norm.days > 0 || norm.weeks > 0) s += norm.days + norm.weeks * 7 + 'D';\n    if (norm.hours > 0 || norm.minutes > 0 || norm.seconds > 0 || norm.milliseconds > 0) s += 'T';\n    if (norm.hours > 0) s += norm.hours + 'H';\n    if (norm.minutes > 0) s += norm.minutes + 'M';\n    if (norm.seconds > 0) s += norm.seconds + 'S';\n    return s;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.\n   * @return {string}\n   */\n  toString() {\n    return this.toISO();\n  }\n\n  /**\n   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|number|object} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = Util.friendlyDuration(duration),\n      result = {};\n\n    for (const k of orderedUnits) {\n      const val = dur.get(k) + this.get(k);\n      if (val !== 0) {\n        result[k] = val;\n      }\n    }\n\n    return clone(this, { values: result }, true);\n  }\n\n  /**\n   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|number|object} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  minus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = Util.friendlyDuration(duration);\n    return this.plus(dur.negate());\n  }\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example Duration.fromObject({years: 2, days: 3}).years //=> 2\n   * @example Duration.fromObject({years: 2, days: 3}).months //=> 0\n   * @example Duration.fromObject({years: 2, days: 3}).days //=> 3\n   * @return {number}\n   */\n  get(unit) {\n    return this[Duration.normalizeUnit(unit)];\n  }\n\n  /**\n   * \"Set\" the values of specified units. Return a newly-constructed Duration.\n   * @param {object} values - a mapping of units to numbers\n   * @example dur.set({ years: 2017 })\n   * @example dur.set({ hours: 8, minutes: 30 })\n   * @return {Duration}\n   */\n  set(values) {\n    const mixed = Object.assign(this.values, Util.normalizeObject(values, Duration.normalizeUnit));\n    return clone(this, { values: mixed });\n  }\n\n  /**\n   * \"Set\" the locale and/or numberingSystem.  Returns a newly-constructed Duration.\n   * @example dur.reconfigure({ locale: 'en-UK' })\n   * @return {Duration}\n   */\n  reconfigure({ locale, numberingSystem, conversionAccuracy } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem }),\n      opts = { loc };\n\n    if (conversionAccuracy) {\n      opts.conversionAccuracy = conversionAccuracy;\n    }\n\n    return clone(this, opts);\n  }\n\n  /**\n   * Return the length of the duration in the specified unit.\n   * @param {string} unit - a unit such as 'minutes' or 'days'\n   * @example Duration.fromObject({years: 1}).as('days') //=> 365\n   * @example Duration.fromObject({years: 1}).as('months') //=> 12\n   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5\n   * @return {number}\n   */\n  as(unit) {\n    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;\n  }\n\n  /**\n   * Reduce this Duration to its canonical representation in its current units.\n   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }\n   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }\n   * @return {Duration}\n   */\n  normalize() {\n    if (!this.isValid) return this;\n\n    const neg = isHighOrderNegative(this.values),\n      dur = neg ? this.negate() : this,\n      shifted = dur.shiftTo(...Object.keys(this.values));\n    return neg ? shifted.negate() : shifted;\n  }\n\n  /**\n   * Convert this Duration into its representation in a different set of units.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }\n   * @return {Duration}\n   */\n  shiftTo(...units) {\n    if (!this.isValid) return this;\n\n    if (units.length === 0) {\n      return this;\n    }\n\n    units = units.map(Duration.normalizeUnit);\n\n    const built = {},\n      accumulated = {},\n      vals = this.toObject();\n    let lastUnit;\n\n    for (const k of orderedUnits) {\n      if (units.indexOf(k) >= 0) {\n        built[k] = 0;\n        lastUnit = k;\n\n        // anything we haven't boiled down yet should get boiled to this unit\n        for (const ak in accumulated) {\n          if (accumulated.hasOwnProperty(ak)) {\n            built[k] += this.matrix[ak][k] * accumulated[ak];\n          }\n          delete accumulated[ak];\n        }\n\n        // plus anything that's already in this unit\n        if (Util.isNumber(vals[k])) {\n          built[k] += vals[k];\n        }\n\n        // plus anything further down the chain that should be rolled up in to this\n        for (const down in vals) {\n          if (orderedUnits.indexOf(down) > orderedUnits.indexOf(k)) {\n            const conv = this.matrix[k][down],\n              added = Math.floor(vals[down] / conv);\n            built[k] += added;\n            vals[down] -= added * conv;\n          }\n        }\n        // otherwise, keep it in the wings to boil it later\n      } else if (Util.isNumber(vals[k])) {\n        accumulated[k] = vals[k];\n      }\n    }\n\n    // anything leftover becomes the decimal for the last unit\n    if (lastUnit) {\n      for (const key in accumulated) {\n        if (accumulated.hasOwnProperty(key)) {\n          built[lastUnit] += accumulated[key] / this.matrix[lastUnit][key];\n        }\n      }\n    }\n\n    return clone(this, { values: built }, true);\n  }\n\n  /**\n   * Return the negative of this Duration.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }\n   * @return {Duration}\n   */\n  negate() {\n    if (!this.isValid) return this;\n    const negated = {};\n    for (const k of Object.keys(this.values)) {\n      negated[k] = -this.values[k];\n    }\n    return Duration.fromObject(negated);\n  }\n\n  /**\n   * Get the years.\n   * @return {number}\n   */\n  get years() {\n    return this.isValid ? this.values.years || 0 : NaN;\n  }\n\n  /**\n   * Get the months.\n   * @return {number}\n   */\n  get months() {\n    return this.isValid ? this.values.months || 0 : NaN;\n  }\n\n  /**\n   * Get the weeks\n   * @return {number}\n   */\n  get weeks() {\n    return this.isValid ? this.values.weeks || 0 : NaN;\n  }\n\n  /**\n   * Get the days.\n   * @return {number\n   */\n  get days() {\n    return this.isValid ? this.values.days || 0 : NaN;\n  }\n\n  /**\n   * Get the hours.\n   * @return {number}\n   */\n  get hours() {\n    return this.isValid ? this.values.hours || 0 : NaN;\n  }\n\n  /**\n   * Get the minutes.\n   * @return {number}\n   */\n  get minutes() {\n    return this.isValid ? this.values.minutes || 0 : NaN;\n  }\n\n  /**\n   * Get the seconds.\n   * @return {number}\n   */\n  get seconds() {\n    return this.isValid ? this.values.seconds || 0 : NaN;\n  }\n\n  /**\n   * Get the milliseconds.\n   * @return {number}\n   */\n  get milliseconds() {\n    return this.isValid ? this.values.milliseconds || 0 : NaN;\n  }\n\n  /**\n   * Returns whether the Duration is invalid. Invalid durations are returned by diff operations\n   * on invalid DateTimes or Intervals.\n   * @return {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an explanation of why this Duration became invalid, or null if the Duration is valid\n   * @return {string}\n   */\n  get invalidReason() {\n    return this.invalidReason;\n  }\n\n  /**\n   * Equality check\n   * Two Durations are equal iff they have the same units and the same values for each unit.\n   * @param {Duration} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    for (const u of orderedUnits) {\n      if (this.values[u] !== other.values[u]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { Util } from './impl/util';\nimport { DateTime } from './datetime';\nimport { Duration } from './duration';\nimport { Settings } from './settings';\nimport { InvalidArgumentError, InvalidIntervalError } from './errors';\n\nconst INVALID = 'Invalid Interval';\n\nfunction validateStartEnd(start, end) {\n  return !!start && !!end && start.isValid && end.isValid && start <= end;\n}\n\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link fromDateTimes}, {@link after}, {@link before}, or {@link fromISO}.\n * * **Accessors** Use {@link start} and {@link end} to get the start and end.\n * * **Interogation** To analyze the Interval, use {@link count}, {@link length}, {@link hasSame}, {@link contains}, {@link isAfter}, or {@link isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link set}, {@link splitAt}, {@link splitBy}, {@link divideEqually}, {@link merge}, {@link xor}, {@link union}, {@link intersection}, or {@link difference}.\n * * **Comparison** To compare this Interval to another one, use {@link equals}, {@link overlaps}, {@link abutsStart}, {@link abutsEnd}, {@link engulfs}\n * * **Output*** To convert the Interval into other representations, see {@link toString}, {@link toISO}, {@link toFormat}, and {@link toDuration}.\n */\nexport class Interval {\n  /**\n   * @private\n   */\n  constructor(config) {\n    Object.defineProperty(this, 's', { value: config.start, enumerable: true });\n    Object.defineProperty(this, 'e', { value: config.end, enumerable: true });\n    Object.defineProperty(this, 'invalidReason', {\n      value: config.invalidReason || null,\n      enumerable: false\n    });\n  }\n\n  /**\n   * Create an invalid Interval.\n   * @return {Interval}\n   */\n  static invalid(reason) {\n    if (!reason) {\n      throw new InvalidArgumentError('need to specify a reason the DateTime is invalid');\n    }\n    if (Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(reason);\n    } else {\n      return new Interval({ invalidReason: reason });\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|object|Date} start\n   * @param {DateTime|object|Date} end\n   * @return {Interval}\n   */\n  static fromDateTimes(start, end) {\n    const builtStart = Util.friendlyDateTime(start),\n      builtEnd = Util.friendlyDateTime(end);\n\n    return new Interval({\n      start: builtStart,\n      end: builtEnd,\n      invalidReason: validateStartEnd(builtStart, builtEnd) ? null : 'invalid endpoints'\n    });\n  }\n\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|object|Date} start\n   * @param {Duration|number|object} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static after(start, duration) {\n    const dur = Util.friendlyDuration(duration),\n      dt = Util.friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|object|Date} end\n   * @param {Duration|number|object} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static before(end, duration) {\n    const dur = Util.friendlyDuration(duration),\n      dt = Util.friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n\n  /**\n   * Create an Interval from an ISO 8601 string\n   * @param {string} string - the ISO string to parse\n   * @param {object} opts - options to pass {@see DateTime.fromISO}\n   * @return {Interval}\n   */\n  static fromISO(string, opts) {\n    if (string) {\n      const [s, e] = string.split(/\\//);\n      if (s && e) {\n        return Interval.fromDateTimes(DateTime.fromISO(s, opts), DateTime.fromISO(e, opts));\n      }\n    }\n    return Interval.invalid('invalid ISO format');\n  }\n\n  /**\n   * Returns the start of the Interval\n   * @return {DateTime}\n   */\n  get start() {\n    return this.isValid ? this.s : null;\n  }\n\n  /**\n   * Returns the end of the Interval\n   * @return {DateTime}\n   */\n  get end() {\n    return this.isValid ? this.e : null;\n  }\n\n  /**\n   * Returns whether this Interval's end is at least its start, i.e. that the Interval isn't 'backwards'.\n   * @return {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n   * @return {string}\n   */\n  get invalidReason() {\n    return this.invalidReason;\n  }\n\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n   * @return {number}\n   */\n  length(unit = 'milliseconds') {\n    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;\n  }\n\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\n   * @return {number}\n   */\n  count(unit = 'milliseconds') {\n    if (!this.isValid) return NaN;\n    const start = this.start.startOf(unit),\n      end = this.end.startOf(unit);\n    return Math.floor(end.diff(start, unit).get(unit)) + 1;\n  }\n\n  /**\n   * Returns whether this Interval's start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */\n  hasSame(unit) {\n    return this.isValid ? this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */\n  isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n\n  /**\n   * Return this Interval's start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n\n  /**\n   * Return this Interval's end is before the specified DateTime.\n   * @param {Datetime} dateTime\n   * @return {boolean}\n   */\n  isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e.plus(1) < dateTime;\n  }\n\n  /**\n   * Return this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n\n  /**\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */\n  set({ start, end } = {}) {\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...DateTimes} dateTimes - the unit of time to count.\n   * @return {[Interval]}\n   */\n  splitAt(...dateTimes) {\n    if (!this.isValid) return [];\n    const sorted = dateTimes.map(Util.friendlyDateTime).sort(),\n      results = [];\n    let { s } = this,\n      i = 0;\n\n    while (s < this.e) {\n      const added = sorted[i] || this.e,\n        next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|number|object} duration - The length of each resulting interval.\n   * @return {[Interval]}\n   */\n  splitBy(duration) {\n    if (!this.isValid) return [];\n    const dur = Util.friendlyDuration(duration),\n      results = [];\n    let { s } = this,\n      added,\n      next;\n\n    while (s < this.e) {\n      added = s.plus(dur);\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {[Interval]}\n   */\n  divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n\n  /**\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n\n  /**\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n\n  /**\n   * Return whether this Interval engulfs the start and end of the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  equals(other) {\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  intersection(other) {\n    if (!this.isValid) return this;\n    const s = this.s > other.s ? this.s : other.s,\n      e = this.e < other.e ? this.e : other.e;\n\n    if (s > e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  union(other) {\n    if (!this.isValid) return this;\n    const s = this.s < other.s ? this.s : other.s,\n      e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n\n  /**\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * @param {[Interval]} intervals\n   * @return {[Interval]}\n   */\n  static merge(intervals) {\n    const [found, final] = intervals.sort((a, b) => a.s - b.s).reduce(([sofar, current], item) => {\n      if (!current) {\n        return [sofar, item];\n      } else if (current.overlaps(item) || current.abutsStart(item)) {\n        return [sofar, current.union(item)];\n      } else {\n        return [sofar.concat([current]), item];\n      }\n    }, [[], null]);\n    if (final) {\n      found.push(final);\n    }\n    return found;\n  }\n\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {[Interval]} intervals\n   * @return {[Interval]}\n   */\n  static xor(intervals) {\n    let start = null,\n      currentCount = 0;\n    const results = [],\n      ends = intervals.map(i => [{ time: i.s, type: 's' }, { time: i.e, type: 'e' }]),\n      arr = Util.flatten(ends).sort((a, b) => a.time - b.time);\n\n    for (const i of arr) {\n      currentCount += i.type === 's' ? 1 : -1;\n\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n\n        start = null;\n      }\n    }\n\n    return Interval.merge(results);\n  }\n\n  /**\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {Interval}\n   */\n  difference(...intervals) {\n    return Interval.xor([this].concat(intervals))\n      .map(i => this.intersection(i))\n      .filter(i => i && !i.isEmpty());\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */\n  toString() {\n    if (!this.isValid) return INVALID;\n    return `[${this.s.toISO()} – ${this.e.toISO()})`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {object} opts - The same options as {@link DateTime.toISO}\n   * @return {string}\n   */\n  toISO(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format string.\n   * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime.toFormat} for details.\n   * @param {object} opts - options\n   * @param {string} [opts.separator =  ' – '] - a separator to place between the start and end representations\n   * @return {string}\n   */\n  toFormat(dateFormat, { separator = ' – ' } = {}) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;\n  }\n\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */\n  toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n    return this.e.diff(this.s, unit, opts);\n  }\n}\n","import { Util } from './util';\nimport { Formatter } from './formatter';\nimport { FixedOffsetZone } from '../zones/fixedOffsetZone';\nimport { IANAZone } from '../zones/IANAZone';\n\nfunction intUnit(regex, post = i => i) {\n  return { regex, deser: ([s]) => post(parseInt(s, 10)) };\n}\n\nfunction oneOf(strings, startIndex) {\n  return {\n    regex: RegExp(strings.join('|')),\n    deser: ([s]) => strings.indexOf(s) + startIndex\n  };\n}\n\nfunction offset(regex, groups) {\n  return { regex, deser: ([, h, m]) => Util.signedOffset(h, m), groups };\n}\n\nfunction simple(regex) {\n  return { regex, deser: ([s]) => s };\n}\n\nfunction unitForToken(token, loc) {\n  const one = /\\d/,\n    two = /\\d\\d/,\n    three = /\\d{3}/,\n    four = /\\d{4}/,\n    oneOrTwo = /\\d\\d?/,\n    oneToThree = /\\d\\d{2}?/,\n    twoToFour = /\\d\\d\\d{2}?/,\n    literal = t => ({ regex: RegExp(t.val), deser: ([s]) => s, literal: true }),\n    unitate = t => {\n      if (token.literal) {\n        return literal(t);\n      }\n\n      switch (t.val) {\n        // era\n        case 'G':\n          return oneOf(loc.eras('short'), 0);\n        case 'GG':\n          return oneOf(loc.eras('long'), 0);\n        // years\n        case 'yyyy':\n          return intUnit(four);\n        case 'yy':\n          return intUnit(twoToFour, Util.untruncateYear);\n        // months\n        case 'M':\n          return intUnit(oneOrTwo);\n        case 'MM':\n          return intUnit(two);\n        case 'MMM':\n          return oneOf(loc.months('short', true), 1);\n        case 'MMMM':\n          return oneOf(loc.months('long', true), 1);\n        case 'L':\n          return intUnit(oneOrTwo);\n        case 'LL':\n          return intUnit(two);\n        case 'LLL':\n          return oneOf(loc.months('short', false), 1);\n        case 'LLLL':\n          return oneOf(loc.months('long', false), 1);\n        // dates\n        case 'd':\n          return intUnit(oneOrTwo);\n        case 'dd':\n          return intUnit(two);\n        // ordinals\n        case 'o':\n          return intUnit(oneToThree);\n        case 'ooo':\n          return intUnit(three);\n        // time\n        case 'HH':\n          return intUnit(two);\n        case 'H':\n          return intUnit(oneOrTwo);\n        case 'hh':\n          return intUnit(two);\n        case 'h':\n          return intUnit(oneOrTwo);\n        case 'mm':\n          return intUnit(two);\n        case 'm':\n          return intUnit(oneOrTwo);\n        case 's':\n          return intUnit(oneOrTwo);\n        case 'ss':\n          return intUnit(two);\n        case 'S':\n          return intUnit(oneToThree);\n        case 'SSS':\n          return intUnit(three);\n        // meridiem\n        case 'a':\n          return oneOf(loc.meridiems(), 0);\n        // weekYear (k)\n        case 'kkkk':\n          return intUnit(four);\n        case 'kk':\n          return intUnit(twoToFour, Util.untruncateYear);\n        // weekNumber (W)\n        case 'W':\n          return intUnit(oneOrTwo);\n        case 'WW':\n          return intUnit(two);\n        // weekdays\n        case 'E':\n        case 'c':\n          return intUnit(one);\n        case 'EEE':\n          return oneOf(loc.weekdays('short', true), 1);\n        case 'EEEE':\n          return oneOf(loc.weekdays('long', true), 1);\n        case 'ccc':\n          return oneOf(loc.weekdays('short', false), 1);\n        case 'cccc':\n          return oneOf(loc.weekdays('long', false), 1);\n        // offset/zone\n        case 'Z':\n        case 'ZZ':\n          return offset(/([+-]\\d{1,2})(?::(\\d{2}))?/, 2);\n        case 'ZZZ':\n          return offset(/([+-]\\d{1,2})(\\d{2})?/, 2);\n        // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing\n        // because we don't have any way to figure out what they are\n        case 'z':\n          return simple(/[A-Za-z_]+\\/[A-Za-z_]+/);\n        default:\n          return literal(t);\n      }\n    },\n    unit = unitate(token);\n  unit.token = token;\n  return unit;\n}\n\nfunction buildRegex(units) {\n  return [units.map(u => u.regex).reduce((f, r) => `${f}(${r.source})`, ''), units];\n}\n\nfunction match(input, regex, handlers) {\n  const matches = input.match(regex);\n\n  if (matches) {\n    const all = {};\n    let matchIndex = 1;\n    for (const i in handlers) {\n      if (handlers.hasOwnProperty(i)) {\n        const h = handlers[i],\n          groups = h.groups ? h.groups + 1 : 1;\n        if (!h.literal && h.token) {\n          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));\n        }\n        matchIndex += groups;\n      }\n    }\n    return all;\n  } else {\n    return {};\n  }\n}\n\nfunction dateTimeFromMatches(matches) {\n  const toField = token => {\n    switch (token) {\n      case 'S':\n        return 'millisecond';\n      case 's':\n        return 'second';\n      case 'm':\n        return 'minute';\n      case 'h':\n      case 'H':\n        return 'hour';\n      case 'd':\n        return 'day';\n      case 'o':\n        return 'ordinal';\n      case 'L':\n      case 'M':\n        return 'month';\n      case 'y':\n        return 'year';\n      case 'E':\n      case 'c':\n        return 'weekday';\n      case 'W':\n        return 'weekNumber';\n      case 'k':\n        return 'weekYear';\n      default:\n        return null;\n    }\n  };\n\n  let zone;\n  if (!Util.isUndefined(matches.Z)) {\n    zone = new FixedOffsetZone(matches.Z);\n  } else if (!Util.isUndefined(matches.z)) {\n    zone = new IANAZone(matches.z);\n  } else {\n    zone = null;\n  }\n\n  if (!Util.isUndefined(matches.h) && matches.a === 1) {\n    matches.h += 12;\n  }\n\n  if (matches.G === 0 && matches.y) {\n    matches.y = -matches.y;\n  }\n\n  const vals = Object.keys(matches).reduce((r, k) => {\n    const f = toField(k);\n    if (f) {\n      r[f] = matches[k];\n    }\n\n    return r;\n  }, {});\n\n  return [vals, zone];\n}\n\n/**\n * @private\n */\n\nexport class TokenParser {\n  constructor(loc) {\n    Object.defineProperty(this, 'loc', { value: loc, enumerable: true });\n  }\n\n  explainParse(input, format) {\n    const tokens = Formatter.parseFormat(format),\n      units = tokens.map(t => unitForToken(t, this.loc)),\n      [regex, handlers] = buildRegex(units),\n      matches = match(input, regex, handlers),\n      [result, zone] = matches ? dateTimeFromMatches(matches) : [null, null];\n\n    return { input, tokens, regex, matches, result, zone };\n  }\n\n  parseDateTime(input, format) {\n    const { result, zone } = this.explainParse(input, format);\n    return [result, zone];\n  }\n}\n","import { Util } from './util';\n\nconst nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],\n  leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];\n\nfunction dayOfWeek(year, month, day) {\n  const js = new Date(Date.UTC(year, month - 1, day)).getUTCDay();\n  return js === 0 ? 7 : js;\n}\n\nfunction lastWeekNumber(weekYear) {\n  const p1 =\n      (weekYear +\n        Math.floor(weekYear / 4) -\n        Math.floor(weekYear / 100) +\n        Math.floor(weekYear / 400)) %\n      7,\n    last = weekYear - 1,\n    p2 = (last + Math.floor(last / 4) - Math.floor(last / 100) + Math.floor(last / 400)) % 7;\n  return p1 === 4 || p2 === 3 ? 53 : 52;\n}\n\nfunction computeOrdinal(year, month, day) {\n  return day + (Util.isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];\n}\n\nfunction uncomputeOrdinal(year, ordinal) {\n  const table = Util.isLeapYear(year) ? leapLadder : nonLeapLadder,\n    month0 = table.findIndex(i => i < ordinal),\n    day = ordinal - table[month0];\n  return { month: month0 + 1, day };\n}\n\n/**\n * @private\n */\n\nexport class Conversions {\n  static gregorianToWeek(gregObj) {\n    const { year, month, day } = gregObj,\n      ordinal = computeOrdinal(year, month, day),\n      weekday = dayOfWeek(year, month, day);\n\n    let weekNumber = Math.floor((ordinal - weekday + 10) / 7),\n      weekYear;\n\n    if (weekNumber < 1) {\n      weekYear = year - 1;\n      weekNumber = lastWeekNumber(weekYear);\n    } else if (weekNumber > lastWeekNumber(year)) {\n      weekYear = year + 1;\n      weekNumber = 1;\n    } else {\n      weekYear = year;\n    }\n\n    return Object.assign({ weekYear, weekNumber, weekday }, Util.timeObject(gregObj));\n  }\n\n  static weekToGregorian(weekData) {\n    const { weekYear, weekNumber, weekday } = weekData,\n      weekdayOfJan4 = dayOfWeek(weekYear, 1, 4),\n      daysInYear = Util.daysInYear(weekYear);\n    let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3,\n      year;\n\n    if (ordinal < 1) {\n      year = weekYear - 1;\n      ordinal += Util.daysInYear(year);\n    } else if (ordinal > daysInYear) {\n      year = weekYear + 1;\n      ordinal -= Util.daysInYear(year);\n    } else {\n      year = weekYear;\n    }\n\n    const { month, day } = uncomputeOrdinal(year, ordinal);\n\n    return Object.assign({ year, month, day }, Util.timeObject(weekData));\n  }\n\n  static gregorianToOrdinal(gregData) {\n    const { year, month, day } = gregData,\n      ordinal = computeOrdinal(year, month, day);\n\n    return Object.assign({ year, ordinal }, Util.timeObject(gregData));\n  }\n\n  static ordinalToGregorian(ordinalData) {\n    const { year, ordinal } = ordinalData,\n      { month, day } = uncomputeOrdinal(year, ordinal);\n\n    return Object.assign({ year, month, day }, Util.timeObject(ordinalData));\n  }\n\n  static hasInvalidWeekData(obj) {\n    const validYear = Util.isNumber(obj.weekYear),\n      validWeek = Util.numberBetween(obj.weekNumber, 1, lastWeekNumber(obj.weekYear)),\n      validWeekday = Util.numberBetween(obj.weekday, 1, 7);\n\n    if (!validYear) {\n      return 'weekYear out of range';\n    } else if (!validWeek) {\n      return 'week out of range';\n    } else if (!validWeekday) {\n      return 'weekday out of range';\n    } else return false;\n  }\n\n  static hasInvalidOrdinalData(obj) {\n    const validYear = Util.isNumber(obj.year),\n      validOrdinal = Util.numberBetween(obj.ordinal, 1, Util.daysInYear(obj.year));\n\n    if (!validYear) {\n      return 'year out of range';\n    } else if (!validOrdinal) {\n      return 'ordinal out of range';\n    } else return false;\n  }\n\n  static hasInvalidGregorianData(obj) {\n    const validYear = Util.isNumber(obj.year),\n      validMonth = Util.numberBetween(obj.month, 1, 12),\n      validDay = Util.numberBetween(obj.day, 1, Util.daysInMonth(obj.year, obj.month));\n\n    if (!validYear) {\n      return 'year out of range';\n    } else if (!validMonth) {\n      return 'month out of range';\n    } else if (!validDay) {\n      return 'day out of range';\n    } else return false;\n  }\n\n  static hasInvalidTimeData(obj) {\n    const validHour = Util.numberBetween(obj.hour, 0, 23),\n      validMinute = Util.numberBetween(obj.minute, 0, 59),\n      validSecond = Util.numberBetween(obj.second, 0, 59),\n      validMillisecond = Util.numberBetween(obj.millisecond, 0, 999);\n\n    if (!validHour) {\n      return 'hour out of range';\n    } else if (!validMinute) {\n      return 'minute out of range';\n    } else if (!validSecond) {\n      return 'second out of range';\n    } else if (!validMillisecond) {\n      return 'millisecond out of range';\n    } else return false;\n  }\n}\n","import { Duration } from './duration';\nimport { Interval } from './interval';\nimport { Settings } from './settings';\nimport { Formatter } from './impl/formatter';\nimport { FixedOffsetZone } from './zones/fixedOffsetZone';\nimport { LocalZone } from './zones/localZone';\nimport { Locale } from './impl/locale';\nimport { Util } from './impl/util';\nimport { RegexParser } from './impl/regexParser';\nimport { TokenParser } from './impl/tokenParser';\nimport { Conversions } from './impl/conversions';\nimport {\n  InvalidArgumentError,\n  ConflictingSpecificationError,\n  InvalidUnitError,\n  InvalidDateTimeError\n} from './errors';\n\nconst INVALID = 'Invalid DateTime',\n  UNSUPPORTED_ZONE = 'unsupported zone';\n\nfunction possiblyCachedWeekData(dt) {\n  if (dt.weekData === null) {\n    dt.weekData = Conversions.gregorianToWeek(dt.c);\n  }\n  return dt.weekData;\n}\n\nfunction clone(inst, alts = {}) {\n  const current = {\n    ts: inst.ts,\n    zone: inst.zone,\n    c: inst.c,\n    o: inst.o,\n    loc: inst.loc,\n    invalidReason: inst.invalidReason\n  };\n  return new DateTime(Object.assign({}, current, alts, { old: current }));\n}\n\nfunction fixOffset(localTS, o, tz) {\n  // Our UTC time is just a guess because our offset is just a guess\n  let utcGuess = localTS - o * 60 * 1000;\n\n  // Test whether the zone matches the offset for this ts\n  const o2 = tz.offset(utcGuess);\n\n  // If so, offset didn't change and we're done\n  if (o === o2) {\n    return [utcGuess, o];\n  }\n\n  // If not, change the ts by the difference in the offset\n  utcGuess -= (o2 - o) * 60 * 1000;\n\n  // If that gives us the local time we want, we're done\n  const o3 = tz.offset(utcGuess);\n  if (o2 === o3) {\n    return [utcGuess, o2];\n  }\n\n  // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time\n  return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];\n}\n\nfunction tsToObj(ts, offset) {\n  ts += offset * 60 * 1000;\n\n  const d = new Date(ts);\n\n  return {\n    year: d.getUTCFullYear(),\n    month: d.getUTCMonth() + 1,\n    day: d.getUTCDate(),\n    hour: d.getUTCHours(),\n    minute: d.getUTCMinutes(),\n    second: d.getUTCSeconds(),\n    millisecond: d.getUTCMilliseconds()\n  };\n}\n\nfunction objToLocalTS(obj) {\n  let d = Date.UTC(\n    obj.year,\n    obj.month - 1,\n    obj.day,\n    obj.hour,\n    obj.minute,\n    obj.second,\n    obj.millisecond\n  );\n\n  // javascript is stupid and i hate it\n  if (obj.year < 100 && obj.year >= 0) {\n    d = new Date(d);\n    d.setFullYear(obj.year);\n  }\n  return +d;\n}\n\nfunction objToTS(obj, offset, zone) {\n  return fixOffset(objToLocalTS(obj), offset, zone);\n}\n\nfunction adjustTime(inst, dur) {\n  const oPre = inst.o,\n    c = Object.assign({}, inst.c, {\n      year: inst.c.year + dur.years,\n      month: inst.c.month + dur.months,\n      day: inst.c.day + dur.days + dur.weeks * 7\n    }),\n    millisToAdd = Duration.fromObject({\n      hours: dur.hours,\n      minutes: dur.minutes,\n      seconds: dur.seconds,\n      milliseconds: dur.milliseconds\n    }).as('milliseconds'),\n    localTS = objToLocalTS(c);\n\n  let [ts, o] = fixOffset(localTS, oPre, inst.zone);\n\n  if (millisToAdd !== 0) {\n    ts += millisToAdd;\n    // that could have changed the offset by going over a DST, but we want to keep the ts the same\n    o = inst.zone.offset(ts);\n  }\n\n  return { ts, o };\n}\n\nfunction parseDataToDateTime(parsed, parsedZone, opts = {}) {\n  const { setZone, zone } = opts;\n  if (parsed && Object.keys(parsed).length !== 0) {\n    const interpretationZone = parsedZone || zone,\n      inst = DateTime.fromObject(\n        Object.assign(parsed, opts, {\n          zone: interpretationZone\n        })\n      );\n    return setZone ? inst : inst.setZone(zone);\n  } else {\n    return DateTime.invalid(UNSUPPORTED_ZONE);\n  }\n}\n\nfunction formatMaybe(dt, format) {\n  return dt.isValid\n    ? Formatter.create(Locale.create('en')).formatDateTimeFromString(dt, format)\n    : null;\n}\n\nconst defaultUnitValues = {\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  },\n  defaultWeekUnitValues = {\n    weekNumber: 1,\n    weekday: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  },\n  defaultOrdinalUnitValues = {\n    ordinal: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  };\n\nfunction isoTimeFormat(dateTime, suppressSecs, suppressMillis) {\n  return suppressSecs && dateTime.second === 0 && dateTime.millisecond === 0\n    ? 'HH:mmZ'\n    : suppressMillis && dateTime.millisecond === 0 ? 'HH:mm:ssZZ' : 'HH:mm:ss.SSSZZ';\n}\n\nconst orderedUnits = ['year', 'month', 'day', 'hour', 'minute', 'second', 'millisecond'];\n\nconst orderedWeekUnits = [\n  'weekYear',\n  'weekNumber',\n  'weekday',\n  'hour',\n  'minute',\n  'second',\n  'millisecond'\n];\n\nconst orderedOrdinalUnits = ['year', 'ordinal', 'hour', 'minute', 'second', 'millisecond'];\n\nfunction normalizeUnit(unit, ignoreUnknown = false) {\n  const normalized = {\n    year: 'year',\n    years: 'year',\n    month: 'month',\n    months: 'month',\n    day: 'day',\n    days: 'day',\n    hour: 'hour',\n    hours: 'hour',\n    minute: 'minute',\n    minutes: 'minute',\n    second: 'second',\n    seconds: 'second',\n    millisecond: 'millisecond',\n    milliseconds: 'millisecond',\n    weekday: 'weekday',\n    weekdays: 'weekday',\n    weeknumber: 'weekNumber',\n    weeksnumber: 'weekNumber',\n    weeknumbers: 'weekNumber',\n    weekyear: 'weekYear',\n    weekyears: 'weekYear',\n    ordinal: 'ordinal'\n  }[unit ? unit.toLowerCase() : unit];\n\n  if (!ignoreUnknown && !normalized) throw new InvalidUnitError(unit);\n\n  return normalized;\n}\n\n/**\n * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.\n *\n * A DateTime comprises of:\n * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.\n * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).\n * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.\n *\n * Here is a brief overview of the most commonly used functionality it provides:\n *\n * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link local}, {@link utc}, and (most flexibly) {@link fromObject}. To create one from a standard string format, use {@link fromISO}, {@link fromHTTP}, and {@link fromRFC2822}. To create one from a custom string format, use {@link fromString}. To create one from a native JS date, use {@link fromJSDate}.\n * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link toObject}), use the {@link year}, {@link month},\n * {@link day}, {@link hour}, {@link minute}, {@link second}, {@link millisecond} accessors.\n * * **Week calendar**: For ISO week calendar attributes, see the {@link weekYear}, {@link weekNumber}, and {@link weekday} accessors.\n * * **Configuration** See the {@link locale} and {@link numberingSystem} accessors.\n * * **Transformation**: To transform the DateTime into other DateTimes, use {@link set}, {@link reconfigure}, {@link setZone}, {@link setLocale}, {@link plus}, {@link minus}, {@link endOf}, {@link startOf}, {@link toUTC}, and {@link toLocal}.\n * * **Output**: To convert the DateTime to other representations, use the {@link toJSON}, {@link toISO}, {@link toHTTP}, {@link toObject}, {@link toRFC2822}, {@link toString}, {@link toLocaleString}, {@link toFormat}, and {@link valueOf}.\n *\n * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.\n */\nexport class DateTime {\n  /**\n   * @access private\n   */\n  constructor(config = {}) {\n    const zone = config.zone || Settings.defaultZone,\n      invalidReason = config.invalidReason || (zone.isValid ? null : UNSUPPORTED_ZONE);\n\n    Object.defineProperty(this, 'ts', {\n      value: config.ts || Settings.now(),\n      enumerable: true\n    });\n\n    Object.defineProperty(this, 'zone', {\n      value: zone,\n      enumerable: true\n    });\n\n    Object.defineProperty(this, 'loc', {\n      value: config.loc || Locale.create(),\n      enumerable: true\n    });\n\n    Object.defineProperty(this, 'invalidReason', {\n      value: invalidReason,\n      enumerable: false\n    });\n\n    Object.defineProperty(this, 'weekData', {\n      writable: true, // !!!\n      value: null,\n      enumerable: false\n    });\n\n    if (!invalidReason) {\n      const unchanged =\n          config.old && config.old.ts === this.ts && config.old.zone.equals(this.zone),\n        c = unchanged ? config.old.c : tsToObj(this.ts, this.zone.offset(this.ts)),\n        o = unchanged ? config.old.o : this.zone.offset(this.ts);\n\n      Object.defineProperty(this, 'c', { value: c });\n      Object.defineProperty(this, 'o', { value: o });\n    }\n  }\n\n  // CONSTRUCT\n\n  /**\n   * Create a local DateTime\n   * @param {number} year - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, i.e. a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, i.e. a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, i.e. a number between 0 and 999\n   * @example DateTime.local()                            //~> now\n   * @example DateTime.local(2017)                        //~> 2017-01-01T00:00:00\n   * @example DateTime.local(2017, 3)                     //~> 2017-03-01T00:00:00\n   * @example DateTime.local(2017, 3, 12)                 //~> 2017-03-12T00:00:00\n   * @example DateTime.local(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00\n   * @example DateTime.local(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.675\n   * @return {DateTime}\n   */\n  static local(year, month, day, hour, minute, second, millisecond) {\n    if (Util.isUndefined(year)) {\n      return new DateTime({ ts: Settings.now() });\n    } else {\n      return DateTime.fromObject({\n        year,\n        month,\n        day,\n        hour,\n        minute,\n        second,\n        millisecond,\n        zone: Settings.defaultZone\n      });\n    }\n  }\n\n  /**\n   * Create a DateTime in UTC\n   * @param {number} year - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, i.e. a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, i.e. a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, i.e. a number between 0 and 999\n   * @example DateTime.utc()                            //~> now\n   * @example DateTime.utc(2017)                        //~> 2017-01-01T00:00:00Z\n   * @example DateTime.utc(2017, 3)                     //~> 2017-03-01T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12)                 //~> 2017-03-12T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.675Z\n   * @return {DateTime}\n   */\n  static utc(year, month, day, hour, minute, second, millisecond) {\n    if (Util.isUndefined(year)) {\n      return new DateTime({\n        ts: Settings.now(),\n        zone: FixedOffsetZone.utcInstance\n      });\n    } else {\n      return DateTime.fromObject({\n        year,\n        month,\n        day,\n        hour,\n        minute,\n        second,\n        millisecond,\n        zone: FixedOffsetZone.utcInstance\n      });\n    }\n  }\n\n  /**\n   * Create an DateTime from a Javascript Date object. Uses the default zone.\n   * @param {Date|Any} date - a Javascript Date object\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @return {DateTime}\n   */\n  static fromJSDate(date, options = {}) {\n    return new DateTime({\n      ts: new Date(date).valueOf(),\n      zone: Util.normalizeZone(options.zone),\n      loc: Locale.fromObject(options)\n    });\n  }\n\n  /**\n   * Create an DateTime from a count of epoch milliseconds. Uses the default zone.\n   * @param {number} milliseconds - a number of milliseconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @param {string} [options.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromMillis(milliseconds, options = {}) {\n    return new DateTime({\n      ts: milliseconds,\n      zone: Util.normalizeZone(options.zone),\n      loc: Locale.fromObject(options)\n    });\n  }\n\n  /**\n   * Create an DateTime from a Javascript object with keys like 'year' and 'hour' with reasonable defaults.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.year - a year, such as 1987\n   * @param {number} obj.month - a month, 1-12\n   * @param {number} obj.day - a day of the month, 1-31, depending on the month\n   * @param {number} obj.ordinal - day of the year, 1-365 or 366\n   * @param {number} obj.weekYear - an ISO week year\n   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year\n   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday\n   * @param {number} obj.hour - hour of the day, 0-23\n   * @param {number} obj.minute - minute of the hour, 0-59\n   * @param {number} obj.second - second of the minute, 0-59\n   * @param {number} obj.millisecond - millisecond of the second, 0-999\n   * @param {string|Zone} [obj.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()\n   * @param {string} [obj.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} obj.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} obj.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'\n   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01T00'\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'utc' }),\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'local' })\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'America/New_York' })\n   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'\n   * @return {DateTime}\n   */\n  static fromObject(obj) {\n    const zoneToUse = Util.normalizeZone(obj.zone);\n    if (!zoneToUse.isValid) {\n      return DateTime.invalid(UNSUPPORTED_ZONE);\n    }\n\n    const tsNow = Settings.now(),\n      offsetProvis = zoneToUse.offset(tsNow),\n      normalized = Util.normalizeObject(obj, normalizeUnit, true),\n      containsOrdinal = !Util.isUndefined(normalized.ordinal),\n      containsGregorYear = !Util.isUndefined(normalized.year),\n      containsGregorMD = !Util.isUndefined(normalized.month) || !Util.isUndefined(normalized.day),\n      containsGregor = containsGregorYear || containsGregorMD,\n      definiteWeekDef = normalized.weekYear || normalized.weekNumber,\n      loc = Locale.fromObject(obj);\n\n    // cases:\n    // just a weekday -> this week's instance of that weekday, no worries\n    // (gregorian data or ordinal) + (weekYear or weekNumber) -> error\n    // (gregorian month or day) + ordinal -> error\n    // otherwise just use weeks or ordinals or gregorian, depending on what's specified\n\n    if ((containsGregor || containsOrdinal) && definiteWeekDef) {\n      throw new ConflictingSpecificationError(\n        \"Can't mix weekYear/weekNumber units with year/month/day or ordinals\"\n      );\n    }\n\n    if (containsGregorMD && containsOrdinal) {\n      throw new ConflictingSpecificationError(\"Can't mix ordinal dates with month/day\");\n    }\n\n    const useWeekData = definiteWeekDef || (normalized.weekday && !containsGregor);\n\n    // configure ourselves to deal with gregorian dates or week stuff\n    let units,\n      defaultValues,\n      objNow = tsToObj(tsNow, offsetProvis);\n    if (useWeekData) {\n      units = orderedWeekUnits;\n      defaultValues = defaultWeekUnitValues;\n      objNow = Conversions.gregorianToWeek(objNow);\n    } else if (containsOrdinal) {\n      units = orderedOrdinalUnits;\n      defaultValues = defaultOrdinalUnitValues;\n      objNow = Conversions.gregorianToOrdinal(objNow);\n    } else {\n      units = orderedUnits;\n      defaultValues = defaultUnitValues;\n    }\n\n    // set default values for missing stuff\n    let foundFirst = false;\n    for (const u of units) {\n      const v = normalized[u];\n      if (!Util.isUndefined(v)) {\n        foundFirst = true;\n      } else if (foundFirst) {\n        normalized[u] = defaultValues[u];\n      } else {\n        normalized[u] = objNow[u];\n      }\n    }\n\n    // make sure the values we have are in range\n    const higherOrderInvalid = useWeekData\n        ? Conversions.hasInvalidWeekData(normalized)\n        : containsOrdinal\n          ? Conversions.hasInvalidOrdinalData(normalized)\n          : Conversions.hasInvalidGregorianData(normalized),\n      invalidReason = higherOrderInvalid || Conversions.hasInvalidTimeData(normalized);\n\n    if (invalidReason) {\n      return DateTime.invalid(invalidReason);\n    }\n\n    // compute the actual time\n    const gregorian = useWeekData\n        ? Conversions.weekToGregorian(normalized)\n        : containsOrdinal ? Conversions.ordinalToGregorian(normalized) : normalized,\n      [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse),\n      inst = new DateTime({\n        ts: tsFinal,\n        zone: zoneToUse,\n        o: offsetFinal,\n        loc\n      });\n\n    // gregorian data + weekday serves only to validate\n    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {\n      return DateTime.invalid('mismatched weekday');\n    }\n\n    return inst;\n  }\n\n  /**\n   * Create a DateTime from an ISO 8601 string\n   * @param {string} text - the ISO string\n   * @param {Object} opts - options to affect the creation\n   * @param {boolean} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc')\n   * @example DateTime.fromISO('2016-W05-4')\n   * @return {DateTime}\n   */\n  static fromISO(text, opts = {}) {\n    const [vals, parsedZone] = RegexParser.parseISODate(text);\n    return parseDataToDateTime(vals, parsedZone, opts);\n  }\n\n  /**\n   * Create a DateTime from an RFC 2822 string\n   * @param {string} text - the RFC 2822 string\n   * @param {Object} opts - options to affect the creation\n   * @param {boolean} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')\n   * @example DateTime.fromRFC2822('Tue, 25 Nov 2016 13:23:12 +0600')\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')\n   * @return {DateTime}\n   */\n  static fromRFC2822(text, opts = {}) {\n    const [vals, parsedZone] = RegexParser.parseRFC2822Date(text);\n    return parseDataToDateTime(vals, parsedZone, opts);\n  }\n\n  /**\n   * Create a DateTime from an HTTP header date\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @param {string} text - the HTTP header date\n   * @param {object} options - options to affect the creation\n   * @param {boolean} [options.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [options.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.\n   * @param {string} [options.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')\n   * @return {DateTime}\n   */\n  static fromHTTP(text, options = {}) {\n    const [vals, parsedZone] = RegexParser.parseHTTPDate(text);\n    return parseDataToDateTime(vals, parsedZone, options);\n  }\n\n  /**\n   * Create a DateTime from an input string and format string\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see description)\n   * @param {Object} options - options to affect the creation\n   * @param {boolean} [options.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [options.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [options.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} options.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromString(text, fmt, options = {}) {\n    const { locale = null, numberingSystem = null } = options,\n      parser = new TokenParser(Locale.fromOpts({ locale, numberingSystem })),\n      [vals, parsedZone] = parser.parseDateTime(text, fmt);\n    return parseDataToDateTime(vals, parsedZone, options);\n  }\n\n  /**\n   * Create an invalid DateTime.\n   * @return {DateTime}\n   */\n  static invalid(reason) {\n    if (!reason) {\n      throw new InvalidArgumentError('need to specify a reason the DateTime is invalid');\n    }\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDateTimeError(reason);\n    } else {\n      return new DateTime({ invalidReason: reason });\n    }\n  }\n\n  // INFO\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7\n   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4\n   * @return {number}\n   */\n  get(unit) {\n    return this[unit];\n  }\n\n  /**\n   * Returns whether the DateTime is valid. Invalid DateTimes occur when:\n   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30\n   * * The DateTime was created by an operation on another invalid date\n   * @return {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid\n   * @return {string}\n   */\n  get invalidReason() {\n    return this.invalidReason;\n  }\n\n  /**\n   * Get the locale of a DateTime, such 'en-UK'. The locale is used when formatting the DateTime\n   *\n   * @return {string}\n   */\n  get locale() {\n    return this.loc.locale;\n  }\n\n  /**\n   * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime\n   *\n   * @return {string}\n   */\n  get numberingSystem() {\n    return this.loc.numberingSystem;\n  }\n\n  /**\n   * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime\n   *\n   * @return {string}\n   */\n  get outputCalendar() {\n    return this.loc.outputCalendar;\n  }\n\n  /**\n   * Get the name of the time zone.\n   * @return {String}\n   */\n  get zoneName() {\n    return this.zone.name;\n  }\n\n  /**\n   * Get the year\n   * @example DateTime.local(2017, 5, 25).year //=> 2017\n   * @return {number}\n   */\n  get year() {\n    return this.isValid ? this.c.year : NaN;\n  }\n\n  /**\n   * Get the month (1-12).\n   * @example DateTime.local(2017, 5, 25).month //=> 5\n   * @return {number}\n   */\n  get month() {\n    return this.isValid ? this.c.month : NaN;\n  }\n\n  /**\n   * Get the day of the month (1-30ish).\n   * @example DateTime.local(2017, 5, 25).day //=> 25\n   * @return {number}\n   */\n  get day() {\n    return this.isValid ? this.c.day : NaN;\n  }\n\n  /**\n   * Get the hour of the day (0-23).\n   * @example DateTime.local(2017, 5, 25, 9).hour //=> 9\n   * @return {number}\n   */\n  get hour() {\n    return this.isValid ? this.c.hour : NaN;\n  }\n\n  /**\n   * Get the minute of the hour (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30\n   * @return {number}\n   */\n  get minute() {\n    return this.isValid ? this.c.minute : NaN;\n  }\n\n  /**\n   * Get the second of the minute (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52\n   * @return {number}\n   */\n  get second() {\n    return this.isValid ? this.c.second : NaN;\n  }\n\n  /**\n   * Get the millisecond of the second (0-999).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654\n   * @return {number}\n   */\n  get millisecond() {\n    return this.isValid ? this.c.millisecond : NaN;\n  }\n\n  /**\n   * Get the week year\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 11, 31).weekYear //=> 2015\n   * @return {number}\n   */\n  get weekYear() {\n    return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;\n  }\n\n  /**\n   * Get the week number of the week year (1-52ish).\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2017, 5, 25).weekNumber //=> 21\n   * @return {number}\n   */\n  get weekNumber() {\n    return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;\n  }\n\n  /**\n   * Get the day of the week.\n   * 1 is Monday and 7 is Sunday\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 11, 31).weekday //=> 4\n   * @return {number}\n   */\n  get weekday() {\n    return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;\n  }\n\n  /**\n   * Get the ordinal (i.e. the day of the year)\n   * @example DateTime.local(2017, 5, 25).ordinal //=> 145\n   * @return {number|DateTime}\n   */\n  get ordinal() {\n    return this.isValid ? Conversions.gregorianToOrdinal(this.c).ordinal : NaN;\n  }\n\n  /**\n   * Get the UTC offset of this DateTime in minutes\n   * @example DateTime.local().offset //=> -240\n   * @example DateTime.utc().offset //=> 0\n   * @return {number}\n   */\n  get offset() {\n    return this.isValid ? this.zone.offset(this.ts) : NaN;\n  }\n\n  /**\n   * Get the short human name for the zone's current offset, for example \"EST\" or \"EDT\".\n   * @return {String}\n   */\n  get offsetNameShort() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: 'short',\n        locale: this.locale\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the long human name for the zone's current offset, for example \"Eastern Standard Time\" or \"Eastern Daylight Time\".\n   * Is locale-aware.\n   * @return {String}\n   */\n  get offsetNameLong() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: 'long',\n        locale: this.locale\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get whether this zone's offset ever changes, as in a DST.\n   * @return {boolean}\n   */\n  get isOffsetFixed() {\n    return this.zone.universal;\n  }\n\n  /**\n   * Get whether the DateTime is in a DST.\n   * @return {boolean}\n   */\n  get isInDST() {\n    if (this.isOffsetFixed) {\n      return false;\n    } else {\n      return (\n        this.offset > this.set({ month: 1 }).offset || this.offset > this.set({ month: 5 }).offset\n      );\n    }\n  }\n\n  /**\n   * Returns true if this DateTime is in a leap year, false otherwise\n   * @example DateTime.local(2016).isInLeapYear //=> true\n   * @example DateTime.local(2013).isInLeapYear //=> false\n   * @return {boolean}\n   */\n  get isInLeapYear() {\n    return Util.isLeapYear(this.year);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's month\n   * @example DateTime.local(2016, 2).daysInMonth //=> 29\n   * @example DateTime.local(2016, 3).days //=> 31\n   * @return {number}\n   */\n  get daysInMonth() {\n    return Util.daysInMonth(this.year, this.month);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's year\n   * @example DateTime.local(2016).daysInYear //=> 366\n   * @example DateTime.local(2013).daysInYear //=> 365\n   * @return {number}\n   */\n  get daysInYear() {\n    return this.isValid ? Util.daysInYear(this.year) : NaN;\n  }\n\n  /**\n   * Returns the resolved Intl options for this DateTime.\n   * This is useful in understanding the behavior of parsing and formatting methods\n   * @param {object} opts - the same options as toLocaleString\n   * @return {object}\n   */\n  resolvedLocaleOpts(opts = {}) {\n    const { locale, numberingSystem, calendar } = Formatter.create(\n      this.loc.clone(opts),\n      opts\n    ).resolvedOptions(this);\n    return { locale, numberingSystem, outputCalendar: calendar };\n  }\n\n  // TRANSFORM\n\n  /**\n   * \"Set\" the DateTime's zone to UTC. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to {@link setZone}('utc')\n   * @param {number} [offset=0] - optionally, an offset from UTC in minutes\n   * @param {object} [opts={}] - options to pass to `setZone()`\n   * @return {DateTime}\n   */\n  toUTC(offset = 0, opts = {}) {\n    return this.setZone(FixedOffsetZone.instance(offset), opts);\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to `setZone('local')`\n   * @return {DateTime}\n   */\n  toLocal() {\n    return this.setZone(new LocalZone());\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.\n   *\n   * By default, the setter keeps the underlying time the same (as in, the same UTC timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link plus}. You may wish to use {@link toLocal} and {@link toUTC} which provide simple convenience wrappers for commonly used zones.\n   * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'utc+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link Zone} class.\n   * @param {object} opts - options\n   * @param {boolean} [opts.keepCalendarTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.\n   * @return {DateTime}\n   */\n  setZone(zone, { keepCalendarTime = false } = {}) {\n    zone = Util.normalizeZone(zone);\n    if (zone.equals(this.zone)) {\n      return this;\n    } else if (!zone.isValid) {\n      return DateTime.invalid(UNSUPPORTED_ZONE);\n    } else {\n      const newTS = keepCalendarTime\n        ? this.ts + (this.o - zone.offset(this.ts)) * 60 * 1000\n        : this.ts;\n      return clone(this, { ts: newTS, zone });\n    }\n  }\n\n  /**\n   * \"Set\" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.\n   * @param {object} properties - the properties to set\n   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-uk' })\n   * @return {DateTime}\n   */\n  reconfigure({ locale, numberingSystem, outputCalendar } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem, outputCalendar });\n    return clone(this, { loc });\n  }\n\n  /**\n   * \"Set\" the locale. Returns a newly-constructed DateTime.\n   * Just a convenient alias for reconfigure({ locale })\n   * @example DateTime.local(2017, 5, 25).setLocale('en-uk')\n   * @return {DateTime}\n   */\n  setLocale(locale) {\n    return this.reconfigure({ locale });\n  }\n\n  /**\n   * \"Set\" the values of specified units. Returns a newly-constructed DateTime.\n   * @param {object} values - a mapping of units to numbers\n   * @example dt.set({ year: 2017 })\n   * @example dt.set({ hour: 8, minute: 30 })\n   * @example dt.set({ weekday: 5 })\n   * @example dt.set({ year: 2005, ordinal: 234 })\n   * @example dt.set({ outputCalendar: 'beng', zone: 'utc' })\n   * @return {DateTime}\n   */\n  set(values) {\n    const normalized = Util.normalizeObject(values, normalizeUnit),\n      settingWeekStuff =\n        !Util.isUndefined(normalized.weekYear) ||\n        !Util.isUndefined(normalized.weekNumber) ||\n        !Util.isUndefined(normalized.weekday);\n\n    let mixed;\n    if (settingWeekStuff) {\n      mixed = Conversions.weekToGregorian(\n        Object.assign(Conversions.gregorianToWeek(this.c), normalized)\n      );\n    } else if (!Util.isUndefined(normalized.ordinal)) {\n      mixed = Conversions.ordinalToGregorian(\n        Object.assign(Conversions.gregorianToOrdinal(this.c), normalized)\n      );\n    } else {\n      mixed = Object.assign(this.toObject(), normalized);\n\n      // if we didn't set the day but we ended up on an overflow date,\n      // use the last day of the right month\n      if (Util.isUndefined(normalized.day)) {\n        mixed.day = Math.min(Util.daysInMonth(mixed.year, mixed.month), mixed.day);\n      }\n    }\n\n    const [ts, o] = objToTS(mixed, this.o, this.zone);\n    return clone(this, { ts, o });\n  }\n\n  /**\n   * Add a period of time to this DateTime and return the resulting DateTime\n   *\n   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.\n   * @param {Duration|number|object} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @example DateTime.local().plus(123) //~> in 123 milliseconds\n   * @example DateTime.local().plus({ minutes: 15 }) //~> in 15 minutes\n   * @example DateTime.local().plus({ days: 1 }) //~> this time tomorrow\n   * @example DateTime.local().plus({ hours: 3, minutes: 13 }) //~> in 1 hr, 13 min\n   * @example DateTime.local().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 1 hr, 13 min\n   * @return {DateTime}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n    const dur = Util.friendlyDuration(duration);\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * Subtract a period of time to this DateTime and return the resulting DateTime\n   * See {@link plus}\n   * @param {Duration|number|object} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   @return {DateTime}\n  */\n  minus(duration) {\n    if (!this.isValid) return this;\n    const dur = Util.friendlyDuration(duration).negate();\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * \"Set\" this DateTime to the beginning of a unit of time.\n   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'month', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'\n   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'\n   * @return {DateTime}\n   */\n  startOf(unit) {\n    if (!this.isValid) return this;\n    const o = {},\n      normalizedUnit = Duration.normalizeUnit(unit);\n    switch (normalizedUnit) {\n      case 'years':\n        o.month = 1;\n      // falls through\n      case 'months':\n        o.day = 1;\n      // falls through\n      case 'weeks':\n      case 'days':\n        o.hour = 0;\n      // falls through\n      case 'hours':\n        o.minute = 0;\n      // falls through\n      case 'minutes':\n        o.second = 0;\n      // falls through\n      case 'seconds':\n        o.millisecond = 0;\n        break;\n      default:\n        throw new InvalidUnitError(unit);\n    }\n\n    if (normalizedUnit === 'weeks') {\n      o.weekday = 1;\n    }\n\n    return this.set(o);\n  }\n\n  /**\n   * \"Set\" this DateTime to the end (i.e. the last millisecond) of a unit of time\n   * @param {string} unit - The unit to go to the end of. Can be 'year', 'month', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-03T00:00:00.000-05:00'\n   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'\n   * @return {DateTime}\n   */\n  endOf(unit) {\n    return this.isValid\n      ? this.startOf(unit)\n          .plus({ [unit]: 1 })\n          .minus(1)\n      : this;\n  }\n\n  // OUTPUT\n\n  /**\n   * Returns a string representation of this DateTime formatted according to the specified format string.\n   * **You may not want this.** See {@link toLocaleString} for a more flexible formatting tool. See the documentation for the specific format tokens supported.\n   * @param {string} fmt - the format string\n   * @param {object} opts - options\n   * @param {boolean} opts.round - round numerical values\n   * @example DateTime.local().toFormat('yyyy LLL dd') //=> '2017 avr. 22'\n   * @example DateTime.local().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 Apr 22'\n   * @example DateTime.local().toFormat(\"HH 'hours and' mm 'minutes'\") //=> '20 hours and 55 minutes'\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc, opts).formatDateTimeFromString(this, fmt)\n      : INVALID;\n  }\n\n  /**\n   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.\n   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation.\n   * of the DateTime in the assigned locale.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param opts {object} - Intl.DateTimeFormat constructor options\n   * @example DateTime.local().toLocaleString(); //=> 4/20/2017\n   * @example DateTime.local().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'\n   * @example DateTime.local().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'\n   * @example DateTime.local().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'\n   * @example DateTime.local().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'\n   * @example DateTime.local().toLocaleString({weekday: 'long', month: 'long', day: '2-digit'}); //=> 'Thu, Apr 20'\n   * @example DateTime.local().toLocaleString({weekday: 'long', month: 'long', day: '2-digit', hour: '2-digit', minute: '2-digit'}); //=> 'Thu, Apr 20, 11:27'\n   * @example DateTime.local().toLocaleString({hour: '2-digit', minute: '2-digit'}); //=> '11:32'\n   * @return {string}\n   */\n  toLocaleString(opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.clone(opts), opts).formatDateTime(this)\n      : INVALID;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime\n   * @param {object} opts - options\n   * @param {boolean} opts.suppressMilliseconds - exclude milliseconds from the format if they're 0\n   * @param {boolean} opts.supressSeconds - exclude seconds from the format if they're 0\n   * @example DateTime.utc(1982, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'\n   * @example DateTime.local().toISO() //=> '2017-04-22T20:47:05.335-04:00'\n   * @return {string}\n   */\n  toISO({ suppressMilliseconds = false, suppressSeconds = false } = {}) {\n    const f = `yyyy-MM-dd'T'${isoTimeFormat(this, suppressSeconds, suppressMilliseconds)}`;\n    return formatMaybe(this, f);\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's date component\n   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '07:34:19.361Z'\n   * @return {string}\n   */\n  toISODate() {\n    return formatMaybe(this, 'yyyy-MM-dd');\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's week date\n   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'\n   * @return {string}\n   */\n  toISOWeekDate() {\n    return formatMaybe(this, \"kkkk-'W'WW-c\");\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's time component\n   * @param {object} opts - options\n   * @param {boolean} opts.suppressMilliseconds - exclude milliseconds from the format if they're 0\n   * @param {boolean} opts.supressSeconds - exclude seconds from the format if they're 0\n   * @example DateTime.utc().hour(7).minute(34).toISOTime() //=> '07:34:19.361Z'\n   * @example DateTime.utc().hour(7).minute(34).toISOTime({ suppressSeconds: true }) //=> '07:34Z'\n   * @return {string}\n   */\n  toISOTime({ suppressMilliseconds = false, suppressSeconds = false } = {}) {\n    return formatMaybe(this, isoTimeFormat(this, suppressSeconds, suppressMilliseconds));\n  }\n\n  /**\n   * Returns an RFC 2822-compatible string representation of this DateTime, always in UTC\n   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'\n   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'\n   * @return {string}\n   */\n  toRFC2822() {\n    return formatMaybe(this, 'EEE, dd LLL yyyy hh:mm:ss ZZZ');\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in HTTP headers.\n   * Specifically, the string conforms to RFC 1123.\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'\n   * @return {string}\n   */\n  toHTTP() {\n    return formatMaybe(this.toUTC(), \"EEE, dd LLL yyyy hh:mm:ss 'GMT'\");\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for debugging\n   * @return {string}\n   */\n  toString() {\n    return this.isValid ? this.toISO() : INVALID;\n  }\n\n  /**\n   * Returns the epoch milliseconds of this DateTime\n   * @return {number}\n   */\n  valueOf() {\n    return this.isValid ? this.ts : NaN;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns a Javascript object with this DateTime's year, month, day, and so on.\n   * @param opts - options for generating the object\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\n   * @example DateTime.local().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }\n   * @return {object}\n   */\n  toObject(opts = {}) {\n    if (!this.isValid) return {};\n\n    const base = Object.assign({}, this.c);\n\n    if (opts.includeConfig) {\n      base.outputCalendar = this.outputCalendar;\n      base.numberingSystem = this.loc.numberingSystem;\n      base.locale = this.loc.locale;\n    }\n    return base;\n  }\n\n  /**\n   * Returns a Javascript Date equivalent to this DateTime.\n   * @return {object}\n   */\n  toJSDate() {\n    return new Date(this.isValid ? this.ts : NaN);\n  }\n\n  // COMPARE\n\n  /**\n   * Return the difference between two DateTimes as a Duration.\n   * @param {DateTime} otherDateTime - the DateTime to compare this one to\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example\n   * var i1 = DateTime.fromISO('1982-05-25T09:45'),\n   *     i2 = DateTime.fromISO('1983-10-14T10:30');\n   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }\n   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }\n   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }\n   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }\n   * @return {Duration}\n   */\n  diff(otherDateTime, unit = 'milliseconds', opts = {}) {\n    if (!this.isValid) return this;\n\n    const units = Util.maybeArray(unit).map(Duration.normalizeUnit);\n\n    const flipped = otherDateTime.valueOf() > this.valueOf(),\n      post = flipped ? otherDateTime : this,\n      accum = {};\n\n    let cursor = flipped ? this : otherDateTime,\n      lowestOrder = null;\n\n    if (units.indexOf('years') >= 0) {\n      let dYear = post.year - cursor.year;\n\n      cursor = cursor.set({ year: post.year });\n\n      if (cursor > post) {\n        cursor = cursor.minus({ years: 1 });\n        dYear -= 1;\n      }\n\n      accum.years = dYear;\n      lowestOrder = 'years';\n    }\n\n    if (units.indexOf('months') >= 0) {\n      const dYear = post.year - cursor.year;\n      let dMonth = post.month - cursor.month + dYear * 12;\n\n      cursor = cursor.set({ year: post.year, month: post.month });\n\n      if (cursor > post) {\n        cursor = cursor.minus({ months: 1 });\n        dMonth -= 1;\n      }\n\n      accum.months = dMonth;\n      lowestOrder = 'months';\n    }\n\n    const computeDayDelta = () => {\n      const utcDayStart = dt =>\n          dt\n            .toUTC(0, { keepCalendarTime: true })\n            .startOf('day')\n            .valueOf(),\n        ms = utcDayStart(post) - utcDayStart(cursor);\n      return Math.floor(Duration.fromMilliseconds(ms, opts).shiftTo('days').days);\n    };\n\n    if (units.indexOf('weeks') >= 0) {\n      const days = computeDayDelta();\n      let weeks = (days - days % 7) / 7;\n      cursor = cursor.plus({ weeks });\n\n      if (cursor > post) {\n        cursor.minus({ weeks: 1 });\n        weeks -= 1;\n      }\n\n      accum.weeks = weeks;\n      lowestOrder = 'weeks';\n    }\n\n    if (units.indexOf('days') >= 0) {\n      let days = computeDayDelta();\n      cursor = cursor.set({\n        year: post.year,\n        month: post.month,\n        day: post.day\n      });\n\n      if (cursor > post) {\n        cursor.minus({ days: 1 });\n        days -= 1;\n      }\n\n      accum.days = days;\n      lowestOrder = 'days';\n    }\n\n    const remaining = Duration.fromMilliseconds(post - cursor, opts),\n      moreUnits = units.filter(\n        u => ['hours', 'minutes', 'seconds', 'milliseconds'].indexOf(u) >= 0\n      ),\n      shiftTo = moreUnits.length > 0 ? moreUnits : [lowestOrder],\n      shifted = remaining.shiftTo(...shiftTo),\n      merged = shifted.plus(Duration.fromObject(Object.assign(accum, opts)));\n\n    return flipped ? merged.negate() : merged;\n  }\n\n  /**\n   * Return the difference between this DateTime and right now.\n   * See {@link diff}\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  diffNow(unit, opts) {\n    return this.isValid ? this.diff(DateTime.local(), unit, opts) : this;\n  }\n\n  /**\n   * Return an Interval spanning between this DateTime and another DateTime\n   * @param {DateTime} otherDateTime - the other end point of the Interval\n   * @return {Duration}\n   */\n  until(otherDateTime) {\n    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;\n  }\n\n  /**\n   * Return whether this DateTime is in the same unit of time as another DateTime\n   * @param {DateTime} otherDateTime - the other DateTime\n   * @param {string} unit - the unit of time to check sameness on\n   * @example DateTime.local().hasSame(otherDT, 'day'); //~> true if both the same calendar day\n   * @return {boolean}\n   */\n  hasSame(otherDateTime, unit) {\n    if (!this.isValid) return false;\n    if (unit === 'millisecond') {\n      return this.valueOf() === otherDateTime.valueOf();\n    } else {\n      const inputMs = otherDateTime.valueOf();\n      return this.startOf(unit) <= inputMs && inputMs <= this.endOf(unit);\n    }\n  }\n\n  /**\n   * Equality check\n   * Two DateTimes are equal iff they represent the same millisecond\n   * @param {DateTime} other - the other DateTime\n   * @return {boolean}\n   */\n  equals(other) {\n    return this.isValid && other.isValid\n      ? this.valueOf() === other.valueOf() &&\n          this.zone.equals(other.zone) &&\n          this.loc.equals(other.loc)\n      : false;\n  }\n\n  /**\n   * Return the min of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum\n   * @return {DateTime}\n   */\n  static min(...dateTimes) {\n    return Util.bestBy(dateTimes, i => i.valueOf(), Math.min);\n  }\n\n  /**\n   * Return the max of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum\n   * @return {DateTime}\n   */\n  static max(...dateTimes) {\n    return Util.bestBy(dateTimes, i => i.valueOf(), Math.max);\n  }\n\n  // MISC\n\n  /**\n   * Explain how a string would be parsed by fromString()\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see description)\n   * @param {object} options - options taken by fromString()\n   * @return {object}\n   */\n  static fromStringExplain(text, fmt, options = {}) {\n    const parser = new TokenParser(Locale.fromOpts(options));\n    return parser.explainParse(text, fmt);\n  }\n\n  // FORMAT PRESETS\n\n  /**\n   * {@link toLocaleString} format like 10/14/1983\n   */\n  static get DATE_SHORT() {\n    return {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Oct 14, 1983'\n   */\n  static get DATE_MED() {\n    return {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'October 14, 1983'\n   */\n  static get DATE_FULL() {\n    return {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Tuesday, October 14, 1983'\n   */\n  static get DATE_HUGE() {\n    return {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      weekday: 'long'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.\n   */\n  static get TIME_SIMPLE() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.\n   */\n  static get TIME_WITH_SECONDS() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.\n   */\n  static get TIME_WITH_SHORT_OFFSET() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      timeZoneName: 'short'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   */\n  static get TIME_WITH_LONG_OFFSET() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      timeZoneName: 'long'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30', always 24-hour.\n   */\n  static get TIME_24_SIMPLE() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      hour12: false\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23', always 24-hour.\n   */\n  static get TIME_24_WITH_SECONDS() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 EDT', always 24-hour.\n   */\n  static get TIME_24_WITH_SHORT_OFFSET() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false,\n      timeZoneName: 'short'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.\n   */\n  static get TIME_24_WITH_LONG_OFFSET() {\n    return {\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      hour12: false,\n      timeZoneName: 'long'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_SHORT() {\n    return {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_SHORT_WITH_SECONDS() {\n    return {\n      year: 'numeric',\n      month: 'numeric',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_MED() {\n    return {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_MED_WITH_SECONDS() {\n    return {\n      year: 'numeric',\n      month: 'short',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_FULL() {\n    return {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit',\n      timeZoneName: 'short'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'October 14, 1983, 9:303 AM EDT'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_FULL_WITH_SECONDS() {\n    return {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      timeZoneName: 'short'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_HUGE() {\n    return {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      weekday: 'long',\n      hour: 'numeric',\n      minute: '2-digit',\n      timeZoneName: 'long'\n    };\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_HUGE_WITH_SECONDS() {\n    return {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric',\n      weekday: 'long',\n      hour: 'numeric',\n      minute: '2-digit',\n      second: '2-digit',\n      timeZoneName: 'long'\n    };\n  }\n}\n","import { DateTime } from './datetime';\nimport { Settings } from './settings';\nimport { Locale } from './impl/locale';\nimport { Util } from './impl/util';\n\n/**\n * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.\n */\nexport class Info {\n  /**\n   * Return whether the specified zone contains a DST.\n   * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.\n   * @return {boolean}\n   */\n  static hasDST(zone = Settings.defaultZone) {\n    return (\n      !zone.universal &&\n      DateTime.local()\n        .setZone(zone)\n        .set({ month: 1 }).offset !==\n        DateTime.local()\n          .setZone(zone)\n          .set({ month: 5 }).offset\n    );\n  }\n\n  /**\n   * Return an array of standalone month names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {object} opts - options\n   * @param {string} [opts.locale='en'] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @example Info.months()[0] //=> 'January'\n   * @example Info.months('short')[0] //=> 'Jan'\n   * @example Info.months('numeric')[0] //=> '1'\n   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'\n   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'\n   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'\n   * @return {[string]}\n   */\n  static months(\n    length = 'long',\n    { locale = 'en', numberingSystem = null, outputCalendar = 'gregory' } = {}\n  ) {\n    return new Locale(locale, numberingSystem, outputCalendar).months(length);\n  }\n\n  /**\n   * Return an array of format month names.\n   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that\n   * changes the string.\n   * See {@link months}\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {object} opts - options\n   * @param {string} [opts.locale='en'] - the locale code\n   * @param {string} [opts.numbering=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @return {[string]}\n   */\n  static monthsFormat(\n    length = 'long',\n    { locale = 'en', numberingSystem = null, outputCalendar = 'gregory' } = {}\n  ) {\n    return new Locale(locale, numberingSystem, outputCalendar).months(length, true);\n  }\n\n  /**\n   * Return an array of standalone week names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the month representation, such as \"narrow\", \"short\", \"long\".\n   * @param {object} opts - options\n   * @param {string} [opts.locale='en'] - the locale code\n   * @param {string} [opts.numbering=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @example Info.weekdays()[0] //=> 'Monday'\n   * @example Info.weekdays('short')[0] //=> 'Mon'\n   * @example Info.weekdays('short', 'fr-CA')[0] //=> 'lun.'\n   * @example Info.weekdays('short', 'ar')[0] //=> 'الاثنين'\n   * @return {[string]}\n   */\n  static weekdays(length = 'long', { locale = 'en', numberingSystem = null } = {}) {\n    return new Locale(locale, numberingSystem, null).weekdays(length);\n  }\n\n  /**\n   * Return an array of format week names.\n   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that\n   * changes the string.\n   * See {@link weekdays}\n   * @param {string} [length='long'] - the length of the month representation, such as \"narrow\", \"short\", \"long\".\n   * @param {object} opts - options\n   * @param {string} [opts.locale='en'] - the locale code\n   * @param {string} [opts.numbering=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @return {[string]}\n   */\n  static weekdaysFormat(length = 'long', { locale = 'en', numberingSystem = null } = {}) {\n    return new Locale(locale, numberingSystem, null).weekdays(length, true);\n  }\n\n  /**\n   * Return an array of meridiems.\n   * @param {object} opts - options\n   * @param {string} [opts.locale='en'] - the locale code\n   * @example Info.meridiems() //=> [ 'AM', 'PM' ]\n   * @example Info.meridiems('de') //=> [ 'vorm.', 'nachm.' ]\n   * @return {[string]}\n   */\n  static meridiems({ locale = 'en' } = {}) {\n    return new Locale(locale).meridiems();\n  }\n\n  /**\n   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.\n   * @param {string} [length='short'] - the length of the era representation, such as \"short\" or \"long\".\n   * @param {object} opts - options\n   * @param {string} [opts.locale='en'] - the locale code\n   * @example Info.eras() //=> [ 'BC', 'AD' ]\n   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]\n   * @example Info.eras('long', 'fr') //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]\n   * @return {[string]}\n   */\n  static eras(length = 'short', { locale = 'en' } = {}) {\n    return new Locale(locale, null, 'gregory').eras(length);\n  }\n\n  /**\n   * Return the set of available features in this environment.\n   * Some features of Luxon are not available in all environments. For example, on older browsers, timezone support is not available. Use this function to figure out if that's the case.\n   * Keys:\n   * * `timezones`: whether this environment supports IANA timezones\n   * * `intlTokens`: whether this environment supports internationalized token-based formatting/parsing\n   * * `intl`: whether this environment supports general internationalization\n   * @example Info.feature() //=> { intl: true, intlTokens: false, timezones: true }\n   * @return {object}\n   */\n  static features() {\n    let intl = false,\n      intlTokens = false,\n      zones = false;\n\n    if (Util.isUndefined(Intl) && Util.isUndefined(Util.DateTimeFormat)) {\n      intl = true;\n\n      intlTokens = Util.isUndefined(Intl.DateTimeFormat.prototype.formatToParts);\n\n      try {\n        Intl.DateTimeFormat({ timeZone: 'America/New_York' });\n        zones = true;\n      } catch (e) {\n        zones = false;\n      }\n    }\n\n    return { intl, intlTokens, zones };\n  }\n}\n"],"names":["LuxonError","Error","InvalidDateTimeError","reason","InvalidIntervalError","InvalidDurationError","ConflictingSpecificationError","InvalidUnitError","unit","InvalidArgumentError","ZoneIsAbstract","Zone","ts","otherZone","singleton","LocalZone","format","locale","Util","parseZoneInfo","Date","getTimezoneOffset","type","isUndefined","Intl","DateTimeFormat","resolvedOptions","timeZone","typeToPos","hackyOffset","dtf","date","parsed","exec","formatted","fMonth","fDay","fYear","fHour","fMinute","fSecond","partsOffset","formatToParts","filled","i","length","value","pos","parseInt","isValid","zone","e","IANAZone","s","match","name","zoneName","valid","asUTC","UTC","asTS","valueOf","FixedOffsetZone","offset","utcInstance","r","signedOffset","fixed","hours","minutes","Math","abs","sign","base","number","pad","now","defaultZone","instance","throwOnInvalid","Settings","n","z","normalizeZone","t","duration","isNumber","Duration","fromMilliseconds","Object","fromObject","dateTimeish","DateTime","fromJSDate","thing","Array","isArray","o","bottom","top","input","repeat","slice","ceil","floor","dt","arr","reduce","flat","toFlatten","concat","flatten","by","compare","best","next","pair","apply","obj","keys","a","k","year","isLeapYear","month","offsetFormat","intl","modified","assign","timeZoneName","prototype","find","m","toLowerCase","without","included","diffed","substring","trimmed","replace","isString","lowered","isValidSpecier","parseSpecifier","normalizer","ignoreUnknown","normalized","u","hasOwnProperty","v","Number","isNaN","mapped","pick","offHourStr","offMinuteStr","offHour","offMin","offMinSigned","English","monthsNarrow","monthsShort","monthsLong","weekdaysNarrow","weekdaysShort","weekdaysLong","localeCache","Map","intlConfigString","numberingSystem","outputCalendar","loc","map","l","mapMonths","f","ms","utc","push","mapWeekdays","Locale","opts","create","localeR","numberingSystemR","outputCalendarR","cacheKey","cached","get","fresh","set","numbering","defineProperty","enumerable","standalone","startsWith","alts","getOwnPropertyNames","knownEnglish","english","months","day","formatStr","monthsCache","extract","weekdays","weekday","weekdaysCache","meridiems","meridiemCache","hour","hour12","eras","era","eraCache","intlOpts","field","dtFormatter","df","d","results","matching","realIntlOpts","useGrouping","padTo","minimumIntegerDigits","round","maximumFractionDigits","NumberFormat","universal","asIfUTC","toJSDate","other","stringifyTokens","splits","tokenToString","token","literal","val","Formatter","formatOpts","fmt","current","currentFull","bracketed","c","charAt","p","numberFormatter","string","formatOffset","isOffsetFixed","allowZ","towardZero","num","RangeError","outputCal","millisecond","second","minute","offsetNameShort","offsetNameLong","toString","weekYear","weekNumber","ordinal","formatDateTime","DATE_SHORT","DATE_MED","DATE_FULL","DATE_HUGE","TIME_SIMPLE","TIME_WITH_SECONDS","TIME_WITH_SHORT_OFFSET","TIME_WITH_LONG_OFFSET","TIME_24_SIMPLE","TIME_24_WITH_SECONDS","TIME_24_WITH_SHORT_OFFSET","TIME_24_WITH_LONG_OFFSET","DATETIME_SHORT","DATETIME_MED","DATETIME_FULL","DATETIME_HUGE","DATETIME_SHORT_WITH_SECONDS","DATETIME_MED_WITH_SECONDS","DATETIME_FULL_WITH_SECONDS","DATETIME_HUGE_WITH_SECONDS","parseFormat","dur","tokenToField","lildur","tokens","realTokens","found","collapsed","shiftTo","filter","combineRegexes","regexes","full","source","RegExp","combineExtractors","extractors","ex","mergedVals","mergedZone","cursor","parse","patterns","regex","extractor","simpleParse","ret","isoTimeRegex","extractISOYmd","isoYmdRegex","extractISOWeekData","isoWeekRegex","isoOrdinalRegex","extractISOOrdinalData","extractISOTime","local","fullOffset","item","isoDuration","extractISODuration","yearStr","monthStr","dayStr","hourStr","minuteStr","secondStr","obsOffsets","fromStrings","weekdayStr","result","untrucateYear","indexOf","rfc2822","extractRFC2822","obsOffset","milOffset","preprocessRFC2822","trim","rfc1123","rfc850","ascii","extractRFC1123Or850","extractASCII","RegexParser","INVALID","lowOrderMatrix","seconds","milliseconds","casualMatrix","daysInYearAccurate","daysInMonthAccurate","accurateMatrix","orderedUnits","clone","clear","conf","values","conversionAccuracy","isHighOrderNegative","config","accurate","invalidReason","formatDurationFromString","includeConfig","norm","normalize","negate","years","days","weeks","toISO","friendlyDuration","plus","normalizeUnit","mixed","normalizeObject","NaN","neg","shifted","units","built","accumulated","vals","toObject","lastUnit","ak","matrix","down","conv","added","key","negated","count","text","parseISODuration","validateStartEnd","start","end","Interval","toDuration","startOf","diff","minus","hasSame","dateTime","fromDateTimes","dateTimes","sorted","friendlyDateTime","sort","numberOfParts","splitBy","equals","intervals","xor","intersection","isEmpty","dateFormat","separator","toFormat","invalid","builtStart","builtEnd","split","fromISO","b","sofar","overlaps","abutsStart","union","final","currentCount","ends","time","merge","intUnit","post","deser","oneOf","strings","startIndex","join","groups","h","simple","unitForToken","one","two","three","four","oneOrTwo","oneToThree","twoToFour","unitate","untruncateYear","buildRegex","handlers","matches","all","matchIndex","dateTimeFromMatches","toField","Z","G","y","TokenParser","explainParse","nonLeapLadder","leapLadder","dayOfWeek","js","getUTCDay","lastWeekNumber","p1","last","p2","computeOrdinal","uncomputeOrdinal","table","month0","findIndex","Conversions","gregObj","timeObject","weekData","weekdayOfJan4","daysInYear","gregData","ordinalData","validYear","validWeek","numberBetween","validWeekday","validOrdinal","validMonth","validDay","daysInMonth","validHour","validMinute","validSecond","validMillisecond","UNSUPPORTED_ZONE","possiblyCachedWeekData","gregorianToWeek","inst","old","fixOffset","localTS","tz","utcGuess","o2","o3","min","max","tsToObj","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","objToLocalTS","setFullYear","objToTS","adjustTime","oPre","millisToAdd","as","parseDataToDateTime","parsedZone","setZone","interpretationZone","formatMaybe","formatDateTimeFromString","defaultUnitValues","defaultWeekUnitValues","defaultOrdinalUnitValues","isoTimeFormat","suppressSecs","suppressMillis","orderedWeekUnits","orderedOrdinalUnits","unchanged","calendar","keepCalendarTime","newTS","reconfigure","settingWeekStuff","weekToGregorian","ordinalToGregorian","gregorianToOrdinal","normalizedUnit","suppressMilliseconds","suppressSeconds","toUTC","otherDateTime","maybeArray","flipped","accum","lowestOrder","dYear","dMonth","computeDayDelta","utcDayStart","remaining","moreUnits","merged","inputMs","endOf","offsetName","options","zoneToUse","tsNow","offsetProvis","containsOrdinal","containsGregorYear","containsGregorMD","containsGregor","definiteWeekDef","useWeekData","defaultValues","objNow","foundFirst","higherOrderInvalid","hasInvalidWeekData","hasInvalidOrdinalData","hasInvalidGregorianData","hasInvalidTimeData","gregorian","tsFinal","offsetFinal","parseISODate","parseRFC2822Date","parseHTTPDate","parser","fromOpts","parseDateTime","bestBy","Info","intlTokens","zones"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjpudWxsLCJzb3VyY2VzIjpbIi9Vc2Vycy9pc2FhYy9jb2RlL2x1eG9uL3NyYy9lcnJvcnMuanMiLCIvVXNlcnMvaXNhYWMvY29kZS9sdXhvbi9zcmMvem9uZS5qcyIsIi9Vc2Vycy9pc2FhYy9jb2RlL2x1eG9uL3NyYy96b25lcy9sb2NhbFpvbmUuanMiLCIvVXNlcnMvaXNhYWMvY29kZS9sdXhvbi9zcmMvem9uZXMvSUFOQVpvbmUuanMiLCIvVXNlcnMvaXNhYWMvY29kZS9sdXhvbi9zcmMvem9uZXMvZml4ZWRPZmZzZXRab25lLmpzIiwiL1VzZXJzL2lzYWFjL2NvZGUvbHV4b24vc3JjL3NldHRpbmdzLmpzIiwiL1VzZXJzL2lzYWFjL2NvZGUvbHV4b24vc3JjL2ltcGwvdXRpbC5qcyIsIi9Vc2Vycy9pc2FhYy9jb2RlL2x1eG9uL3NyYy9pbXBsL2VuZ2xpc2guanMiLCIvVXNlcnMvaXNhYWMvY29kZS9sdXhvbi9zcmMvaW1wbC9sb2NhbGUuanMiLCIvVXNlcnMvaXNhYWMvY29kZS9sdXhvbi9zcmMvaW1wbC9mb3JtYXR0ZXIuanMiLCIvVXNlcnMvaXNhYWMvY29kZS9sdXhvbi9zcmMvaW1wbC9yZWdleFBhcnNlci5qcyIsIi9Vc2Vycy9pc2FhYy9jb2RlL2x1eG9uL3NyYy9kdXJhdGlvbi5qcyIsIi9Vc2Vycy9pc2FhYy9jb2RlL2x1eG9uL3NyYy9pbnRlcnZhbC5qcyIsIi9Vc2Vycy9pc2FhYy9jb2RlL2x1eG9uL3NyYy9pbXBsL3Rva2VuUGFyc2VyLmpzIiwiL1VzZXJzL2lzYWFjL2NvZGUvbHV4b24vc3JjL2ltcGwvY29udmVyc2lvbnMuanMiLCIvVXNlcnMvaXNhYWMvY29kZS9sdXhvbi9zcmMvZGF0ZXRpbWUuanMiLCIvVXNlcnMvaXNhYWMvY29kZS9sdXhvbi9zcmMvaW5mby5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyB0aGVzZSBhcmVuJ3QgcmVhbGx5IHByaXZhdGUsIGJ1dCBub3IgYXJlIHRoZXkgcmVhbGx5IHVzZWZ1bCB0byBkb2N1bWVudFxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIEx1eG9uRXJyb3IgZXh0ZW5kcyBFcnJvciB7fVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnZhbGlkRGF0ZVRpbWVFcnJvciBleHRlbmRzIEx1eG9uRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihyZWFzb24pIHtcbiAgICBzdXBlcihgSW52YWxpZCBEYXRlVGltZTogJHtyZWFzb259YCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY2xhc3MgSW52YWxpZEludGVydmFsRXJyb3IgZXh0ZW5kcyBMdXhvbkVycm9yIHtcbiAgY29uc3RydWN0b3IocmVhc29uKSB7XG4gICAgc3VwZXIoYEludmFsaWQgSW50ZXJ2YWw6ICR7cmVhc29ufWApO1xuICB9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNsYXNzIEludmFsaWREdXJhdGlvbkVycm9yIGV4dGVuZHMgTHV4b25FcnJvciB7XG4gIGNvbnN0cnVjdG9yKHJlYXNvbikge1xuICAgIHN1cGVyKGBJbnZhbGlkIER1cmF0aW9uOiAke3JlYXNvbn1gKTtcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjbGFzcyBDb25mbGljdGluZ1NwZWNpZmljYXRpb25FcnJvciBleHRlbmRzIEx1eG9uRXJyb3Ige31cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY2xhc3MgSW52YWxpZFVuaXRFcnJvciBleHRlbmRzIEx1eG9uRXJyb3Ige1xuICBjb25zdHJ1Y3Rvcih1bml0KSB7XG4gICAgc3VwZXIoYEludmFsaWQgdW5pdCAke3VuaXR9YCk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY2xhc3MgSW52YWxpZEFyZ3VtZW50RXJyb3IgZXh0ZW5kcyBMdXhvbkVycm9yIHt9XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNsYXNzIFpvbmVJc0Fic3RyYWN0IGV4dGVuZHMgTHV4b25FcnJvciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCdab25lIGlzIGFuIGFic3RyYWN0IGNsYXNzJyk7XG4gIH1cbn1cbiIsIi8qIGVzbGludCBuby11bnVzZWQtdmFyczogXCJvZmZcIiAqL1xuaW1wb3J0IHsgWm9uZUlzQWJzdHJhY3QgfSBmcm9tICcuL2Vycm9ycyc7XG5cbi8qKlxuICogQGludGVyZmFjZVxuKi9cbmV4cG9ydCBjbGFzcyBab25lIHtcbiAgLyoqXG4gICAqIFRoZSB0eXBlIG9mIHpvbmVcbiAgICogQGFic3RyYWN0XG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGdldCB0eXBlKCkge1xuICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFRoZSBuYW1lIG9mIHRoaXMgem9uZS5cbiAgICogQGFic3RyYWN0XG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGdldCBuYW1lKCkge1xuICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGUgb2Zmc2V0IGlzIGtub3duIHRvIGJlIGZpeGVkIGZvciB0aGUgd2hvbGUgeWVhci5cbiAgICogQGFic3RyYWN0XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgdW5pdmVyc2FsKCkge1xuICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIG9mZnNldCdzIGNvbW1vbiBuYW1lIChzdWNoIGFzIEVTVCkgYXQgdGhlIHNwZWNpZmllZCB0aW1lc3RhbXBcbiAgICogQGFic3RyYWN0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0cyAtIEVwb2NoIG1pbGxpc2Vjb25kcyBmb3Igd2hpY2ggdG8gZ2V0IHRoZSBuYW1lXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gT3B0aW9ucyB0byBhZmZlY3QgdGhlIGZvcm1hdFxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5mb3JtYXQgLSBXaGF0IHN0eWxlIG9mIG9mZnNldCB0byByZXR1cm4uIEFjY2VwdHMgJ2xvbmcnIG9yICdzaG9ydCcuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRpb25zLmxvY2FsZUNvZGUgLSBXaGF0IGxvY2FsZSB0byByZXR1cm4gdGhlIG9mZnNldCBuYW1lIGluLiBEZWZhdWx0cyB0byB1cy1lblxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBzdGF0aWMgb2Zmc2V0TmFtZSh0cywgeyBmb3JtYXQgPSAnbG9uZycsIGxvY2FsZUNvZGUgPSAnZW4tdXMnIH0gPSB7fSkge1xuICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgb2Zmc2V0IGluIG1pbnV0ZXMgZm9yIHRoaXMgem9uZSBhdCB0aGUgc3BlY2lmaWVkIHRpbWVzdGFtcC5cbiAgICogQGFic3RyYWN0XG4gICAqIEBwYXJhbSB7bnVtYmVyfSB0cyAtIEVwb2NoIG1pbGxpc2Vjb25kcyBmb3Igd2hpY2ggdG8gY29tcHV0ZSB0aGUgb2Zmc2V0XG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIG9mZnNldCh0cykge1xuICAgIHRocm93IG5ldyBab25lSXNBYnN0cmFjdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgWm9uZSBpcyBlcXVhbCB0byBhbm90aGVyIHpvbmVyXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAcGFyYW0ge1pvbmV9IG90aGVyWm9uZSAtIHRoZSB6b25lIHRvIGNvbXBhcmVcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGVxdWFscyhvdGhlclpvbmUpIHtcbiAgICB0aHJvdyBuZXcgWm9uZUlzQWJzdHJhY3QoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIFpvbmUgaXMgdmFsaWQuXG4gICAqIEBhYnN0cmFjdFxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGlzVmFsaWQoKSB7XG4gICAgdGhyb3cgbmV3IFpvbmVJc0Fic3RyYWN0KCk7XG4gIH1cbn1cbiIsImltcG9ydCB7IFV0aWwgfSBmcm9tICcuLi9pbXBsL3V0aWwnO1xuaW1wb3J0IHsgWm9uZSB9IGZyb20gJy4uL3pvbmUnO1xuXG5sZXQgc2luZ2xldG9uID0gbnVsbDtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmV4cG9ydCBjbGFzcyBMb2NhbFpvbmUgZXh0ZW5kcyBab25lIHtcbiAgc3RhdGljIGdldCBpbnN0YW5jZSgpIHtcbiAgICBpZiAoc2luZ2xldG9uID09PSBudWxsKSB7XG4gICAgICBzaW5nbGV0b24gPSBuZXcgTG9jYWxab25lKCk7XG4gICAgfVxuICAgIHJldHVybiBzaW5nbGV0b247XG4gIH1cblxuICBnZXQgdHlwZSgpIHtcbiAgICByZXR1cm4gJ2xvY2FsJztcbiAgfVxuXG4gIGdldCBuYW1lKCkge1xuICAgIGlmIChVdGlsLmlzVW5kZWZpbmVkKEludGwpICYmIFV0aWwuaXNVbmRlZmluZWQoSW50bC5EYXRlVGltZUZvcm1hdCkpIHtcbiAgICAgIHJldHVybiBuZXcgSW50bC5EYXRlVGltZUZvcm1hdCgpLnJlc29sdmVkT3B0aW9ucygpLnRpbWVab25lO1xuICAgIH0gZWxzZSByZXR1cm4gJ2xvY2FsJztcbiAgfVxuXG4gIGdldCB1bml2ZXJzYWwoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgb2Zmc2V0TmFtZSh0cywgeyBmb3JtYXQgPSAnbG9uZycsIGxvY2FsZSA9ICdlbi11cycgfSA9IHt9KSB7XG4gICAgcmV0dXJuIFV0aWwucGFyc2Vab25lSW5mbyh0cywgZm9ybWF0LCBsb2NhbGUgfHwgJ2VuLXVzJyk7XG4gIH1cblxuICBvZmZzZXQodHMpIHtcbiAgICByZXR1cm4gLW5ldyBEYXRlKHRzKS5nZXRUaW1lem9uZU9mZnNldCgpO1xuICB9XG5cbiAgZXF1YWxzKG90aGVyWm9uZSkge1xuICAgIHJldHVybiBvdGhlclpvbmUudHlwZSA9PT0gJ2xvY2FsJztcbiAgfVxuXG4gIGdldCBpc1ZhbGlkKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG4iLCJpbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi4vaW1wbC91dGlsJztcbmltcG9ydCB7IFpvbmUgfSBmcm9tICcuLi96b25lJztcblxuY29uc3QgdHlwZVRvUG9zID0ge1xuICB5ZWFyOiAwLFxuICBtb250aDogMSxcbiAgZGF5OiAyLFxuICBob3VyOiAzLFxuICBtaW51dGU6IDQsXG4gIHNlY29uZDogNVxufTtcblxuZnVuY3Rpb24gaGFja3lPZmZzZXQoZHRmLCBkYXRlKSB7XG4gIGNvbnN0IGZvcm1hdHRlZCA9IGR0Zi5mb3JtYXQoZGF0ZSksXG4gICAgcGFyc2VkID0gLyhcXGQrKVxcLyhcXGQrKVxcLyhcXGQrKSwgKFxcZCspOihcXGQrKTooXFxkKykvLmV4ZWMoZm9ybWF0dGVkKSxcbiAgICBbLCBmTW9udGgsIGZEYXksIGZZZWFyLCBmSG91ciwgZk1pbnV0ZSwgZlNlY29uZF0gPSBwYXJzZWQ7XG4gIHJldHVybiBbZlllYXIsIGZNb250aCwgZkRheSwgZkhvdXIsIGZNaW51dGUsIGZTZWNvbmRdO1xufVxuXG5mdW5jdGlvbiBwYXJ0c09mZnNldChkdGYsIGRhdGUpIHtcbiAgY29uc3QgZm9ybWF0dGVkID0gZHRmLmZvcm1hdFRvUGFydHMoZGF0ZSksXG4gICAgZmlsbGVkID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZm9ybWF0dGVkLmxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgeyB0eXBlLCB2YWx1ZSB9ID0gZm9ybWF0dGVkW2ldLFxuICAgICAgcG9zID0gdHlwZVRvUG9zW3R5cGVdO1xuXG4gICAgaWYgKCFVdGlsLmlzVW5kZWZpbmVkKHBvcykpIHtcbiAgICAgIGZpbGxlZFtwb3NdID0gcGFyc2VJbnQodmFsdWUsIDEwKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZpbGxlZDtcbn1cblxuZnVuY3Rpb24gaXNWYWxpZCh6b25lKSB7XG4gIHRyeSB7XG4gICAgbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoJ2VuLXVzJywgeyB0aW1lWm9uZTogem9uZSB9KS5mb3JtYXQoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuZXhwb3J0IGNsYXNzIElBTkFab25lIGV4dGVuZHMgWm9uZSB7XG4gIHN0YXRpYyBpc1ZhbGlkU3BlY2llcihzKSB7XG4gICAgcmV0dXJuIHMgJiYgcy5tYXRjaCgvW2Etel9dK1xcL1thLXpfXSsvaSk7XG4gIH1cblxuICBjb25zdHJ1Y3RvcihuYW1lKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLnpvbmVOYW1lID0gbmFtZTtcbiAgICB0aGlzLnZhbGlkID0gaXNWYWxpZChuYW1lKTtcbiAgfVxuXG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiAnaWFuYSc7XG4gIH1cblxuICBnZXQgbmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy56b25lTmFtZTtcbiAgfVxuXG4gIGdldCB1bml2ZXJzYWwoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgb2Zmc2V0TmFtZSh0cywgeyBmb3JtYXQgPSAnbG9uZycsIGxvY2FsZSA9ICdlbi11cycgfSA9IHt9KSB7XG4gICAgcmV0dXJuIFV0aWwucGFyc2Vab25lSW5mbyh0cywgZm9ybWF0LCBsb2NhbGUgfHwgJ2VuLXVzJywgdGhpcy56b25lTmFtZSk7XG4gIH1cblxuICBvZmZzZXQodHMpIHtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUodHMpLFxuICAgICAgZHRmID0gbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQoJ2VuLXVzJywge1xuICAgICAgICBob3VyMTI6IGZhbHNlLFxuICAgICAgICB0aW1lWm9uZTogdGhpcy56b25lTmFtZSxcbiAgICAgICAgeWVhcjogJ251bWVyaWMnLFxuICAgICAgICBtb250aDogJzItZGlnaXQnLFxuICAgICAgICBkYXk6ICcyLWRpZ2l0JyxcbiAgICAgICAgaG91cjogJzItZGlnaXQnLFxuICAgICAgICBtaW51dGU6ICcyLWRpZ2l0JyxcbiAgICAgICAgc2Vjb25kOiAnMi1kaWdpdCdcbiAgICAgIH0pLFxuICAgICAgW2ZZZWFyLCBmTW9udGgsIGZEYXksIGZIb3VyLCBmTWludXRlLCBmU2Vjb25kXSA9IGR0Zi5mb3JtYXRUb1BhcnRzXG4gICAgICAgID8gcGFydHNPZmZzZXQoZHRmLCBkYXRlKVxuICAgICAgICA6IGhhY2t5T2Zmc2V0KGR0ZiwgZGF0ZSksXG4gICAgICBhc1VUQyA9IERhdGUuVVRDKGZZZWFyLCBmTW9udGggLSAxLCBmRGF5LCBmSG91ciwgZk1pbnV0ZSwgZlNlY29uZCk7XG4gICAgbGV0IGFzVFMgPSBkYXRlLnZhbHVlT2YoKTtcbiAgICBhc1RTIC09IGFzVFMgJSAxMDAwO1xuICAgIHJldHVybiAoYXNVVEMgLSBhc1RTKSAvICg2MCAqIDEwMDApO1xuICB9XG5cbiAgZXF1YWxzKG90aGVyWm9uZSkge1xuICAgIHJldHVybiBvdGhlclpvbmUudHlwZSA9PT0gJ2lhbmEnICYmIG90aGVyWm9uZS56b25lTmFtZSA9PT0gdGhpcy56b25lTmFtZTtcbiAgfVxuXG4gIGdldCBpc1ZhbGlkKCkge1xuICAgIHJldHVybiB0aGlzLnZhbGlkO1xuICB9XG59XG4iLCJpbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi4vaW1wbC91dGlsJztcbmltcG9ydCB7IFpvbmUgfSBmcm9tICcuLi96b25lJztcblxubGV0IHNpbmdsZXRvbiA9IG51bGw7XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5leHBvcnQgY2xhc3MgRml4ZWRPZmZzZXRab25lIGV4dGVuZHMgWm9uZSB7XG4gIHN0YXRpYyBnZXQgdXRjSW5zdGFuY2UoKSB7XG4gICAgaWYgKHNpbmdsZXRvbiA9PT0gbnVsbCkge1xuICAgICAgc2luZ2xldG9uID0gbmV3IEZpeGVkT2Zmc2V0Wm9uZSgwKTtcbiAgICB9XG4gICAgcmV0dXJuIHNpbmdsZXRvbjtcbiAgfVxuXG4gIHN0YXRpYyBpbnN0YW5jZShvZmZzZXQpIHtcbiAgICByZXR1cm4gb2Zmc2V0ID09PSAwID8gRml4ZWRPZmZzZXRab25lLnV0Y0luc3RhbmNlIDogbmV3IEZpeGVkT2Zmc2V0Wm9uZShvZmZzZXQpO1xuICB9XG5cbiAgc3RhdGljIHBhcnNlU3BlY2lmaWVyKHMpIHtcbiAgICBpZiAocykge1xuICAgICAgY29uc3QgciA9IHMubWF0Y2goL151dGMoPzooWystXVxcZHsxLDJ9KSg/OjooXFxkezJ9KSk/KT8kL2kpO1xuICAgICAgaWYgKHIpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBGaXhlZE9mZnNldFpvbmUoVXRpbC5zaWduZWRPZmZzZXQoclsxXSwgclsyXSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKG9mZnNldCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5maXhlZCA9IG9mZnNldDtcbiAgfVxuXG4gIGdldCB0eXBlKCkge1xuICAgIHJldHVybiAnZml4ZWQnO1xuICB9XG5cbiAgZ2V0IG5hbWUoKSB7XG4gICAgY29uc3QgaG91cnMgPSB0aGlzLmZpeGVkIC8gNjAsXG4gICAgICBtaW51dGVzID0gTWF0aC5hYnModGhpcy5maXhlZCAlIDYwKSxcbiAgICAgIHNpZ24gPSBob3VycyA+IDAgPyAnKycgOiAnLScsXG4gICAgICBiYXNlID0gc2lnbiArIE1hdGguYWJzKGhvdXJzKSxcbiAgICAgIG51bWJlciA9IG1pbnV0ZXMgPiAwID8gYCR7YmFzZX06JHtVdGlsLnBhZChtaW51dGVzLCAyKX1gIDogYmFzZTtcblxuICAgIHJldHVybiB0aGlzLmZpeGVkID09PSAwID8gJ1VUQycgOiBgVVRDJHtudW1iZXJ9YDtcbiAgfVxuXG4gIG9mZnNldE5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMubmFtZSgpO1xuICB9XG5cbiAgZ2V0IHVuaXZlcnNhbCgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIG9mZnNldCgpIHtcbiAgICByZXR1cm4gdGhpcy5maXhlZDtcbiAgfVxuXG4gIGVxdWFscyhvdGhlclpvbmUpIHtcbiAgICByZXR1cm4gb3RoZXJab25lLnR5cGUgPT09ICdmaXhlZCcgJiYgb3RoZXJab25lLmZpeGVkID09PSB0aGlzLmZpeGVkO1xuICB9XG5cbiAgZ2V0IGlzVmFsaWQoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cbiIsImltcG9ydCB7IExvY2FsWm9uZSB9IGZyb20gJy4vem9uZXMvbG9jYWxab25lJztcbmltcG9ydCB7IFV0aWwgfSBmcm9tICcuL2ltcGwvdXRpbCc7XG5cbmxldCBub3cgPSAoKSA9PiBuZXcgRGF0ZSgpLnZhbHVlT2YoKSxcbiAgZGVmYXVsdFpvbmUgPSBMb2NhbFpvbmUuaW5zdGFuY2UsXG4gIHRocm93T25JbnZhbGlkID0gZmFsc2U7XG5cbi8qKlxuICogU2V0dGluZ3MgY29udGFpbnMgc3RhdGljIGdldHRlcnMgYW5kIHNldHRlcnMgdGhhdCBjb250cm9sIEx1eG9uJ3Mgb3ZlcmFsbCBiZWhhdmlvci4gTHV4b24gaXMgYSBzaW1wbGUgbGlicmFyeSB3aXRoIGZldyBvcHRpb25zLCBidXQgdGhlIG9uZXMgaXQgZG9lcyBoYXZlIGxpdmUgaGVyZS5cbiAqL1xuZXhwb3J0IGNsYXNzIFNldHRpbmdzIHtcbiAgLyoqXG4gICAqIEdldCB0aGUgY2FsbGJhY2sgZm9yIHJldHVybmluZyB0aGUgY3VycmVudCB0aW1lc3RhbXAuXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICovXG4gIHN0YXRpYyBnZXQgbm93KCkge1xuICAgIHJldHVybiBub3c7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBjYWxsYmFjayBmb3IgcmV0dXJuaW5nIHRoZSBjdXJyZW50IHRpbWVzdGFtcC5cbiAgICogQHR5cGUge2Z1bmN0aW9ufVxuICAgKi9cbiAgc3RhdGljIHNldCBub3cobikge1xuICAgIG5vdyA9IG47XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBkZWZhdWx0IHRpbWUgem9uZSB0byBjcmVhdGUgRGF0ZVRpbWVzIGluLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIGdldCBkZWZhdWx0Wm9uZU5hbWUoKSB7XG4gICAgcmV0dXJuIGRlZmF1bHRab25lLm5hbWU7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBkZWZhdWx0IHRpbWUgem9uZSB0byBjcmVhdGUgRGF0ZVRpbWVzIGluLlxuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIHNldCBkZWZhdWx0Wm9uZU5hbWUoeikge1xuICAgIGRlZmF1bHRab25lID0gVXRpbC5ub3JtYWxpemVab25lKHopO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZGVmYXVsdCB0aW1lIHpvbmUgb2JqZWN0IHRvIGNyZWF0ZSBEYXRlVGltZXMgaW4uXG4gICAqIEB0eXBlIHtab25lfVxuICAgKi9cbiAgc3RhdGljIGdldCBkZWZhdWx0Wm9uZSgpIHtcbiAgICByZXR1cm4gZGVmYXVsdFpvbmU7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHdoZXRoZXIgTHV4b24gd2lsbCB0aHJvdyB3aGVuIGl0IGVuY291bnRlcnMgaW52YWxpZCBEYXRlVGltZXMsIER1cmF0aW9ucywgb3IgSW50ZXJ2YWxzXG4gICAqIEB0eXBlIHtab25lfVxuICAgKi9cbiAgc3RhdGljIGdldCB0aHJvd09uSW52YWxpZCgpIHtcbiAgICByZXR1cm4gdGhyb3dPbkludmFsaWQ7XG4gIH1cblxuICAvKipcbiAgICogU2V0IHdoZXRoZXIgTHV4b24gd2lsbCB0aHJvdyB3aGVuIGl0IGVuY291bnRlcnMgaW52YWxpZCBEYXRlVGltZXMsIER1cmF0aW9ucywgb3IgSW50ZXJ2YWxzXG4gICAqIEB0eXBlIHtab25lfVxuICAgKi9cbiAgc3RhdGljIHNldCB0aHJvd09uSW52YWxpZCh0KSB7XG4gICAgdGhyb3dPbkludmFsaWQgPSB0O1xuICB9XG59XG4iLCJpbXBvcnQgeyBEdXJhdGlvbiB9IGZyb20gJy4uL2R1cmF0aW9uJztcbmltcG9ydCB7IERhdGVUaW1lIH0gZnJvbSAnLi4vZGF0ZXRpbWUnO1xuaW1wb3J0IHsgWm9uZSB9IGZyb20gJy4uL3pvbmUnO1xuaW1wb3J0IHsgTG9jYWxab25lIH0gZnJvbSAnLi4vem9uZXMvbG9jYWxab25lJztcbmltcG9ydCB7IElBTkFab25lIH0gZnJvbSAnLi4vem9uZXMvSUFOQVpvbmUnO1xuaW1wb3J0IHsgRml4ZWRPZmZzZXRab25lIH0gZnJvbSAnLi4vem9uZXMvZml4ZWRPZmZzZXRab25lJztcbmltcG9ydCB7IFNldHRpbmdzIH0gZnJvbSAnLi4vc2V0dGluZ3MnO1xuaW1wb3J0IHsgSW52YWxpZEFyZ3VtZW50RXJyb3IgfSBmcm9tICcuLi9lcnJvcnMnO1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cblxuZXhwb3J0IGNsYXNzIFV0aWwge1xuICBzdGF0aWMgZnJpZW5kbHlEdXJhdGlvbihkdXJhdGlvbikge1xuICAgIGlmIChVdGlsLmlzTnVtYmVyKGR1cmF0aW9uKSkge1xuICAgICAgcmV0dXJuIER1cmF0aW9uLmZyb21NaWxsaXNlY29uZHMoZHVyYXRpb24pO1xuICAgIH0gZWxzZSBpZiAoZHVyYXRpb24gaW5zdGFuY2VvZiBEdXJhdGlvbikge1xuICAgICAgcmV0dXJuIGR1cmF0aW9uO1xuICAgIH0gZWxzZSBpZiAoZHVyYXRpb24gaW5zdGFuY2VvZiBPYmplY3QpIHtcbiAgICAgIHJldHVybiBEdXJhdGlvbi5mcm9tT2JqZWN0KGR1cmF0aW9uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCdVbmtub3duIGR1cmF0aW9uIGFyZ3VtZW50Jyk7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGZyaWVuZGx5RGF0ZVRpbWUoZGF0ZVRpbWVpc2gpIHtcbiAgICBpZiAoZGF0ZVRpbWVpc2ggaW5zdGFuY2VvZiBEYXRlVGltZSkge1xuICAgICAgcmV0dXJuIGRhdGVUaW1laXNoO1xuICAgIH0gZWxzZSBpZiAoZGF0ZVRpbWVpc2gudmFsdWVPZiAmJiBVdGlsLmlzTnVtYmVyKGRhdGVUaW1laXNoLnZhbHVlT2YoKSkpIHtcbiAgICAgIHJldHVybiBEYXRlVGltZS5mcm9tSlNEYXRlKGRhdGVUaW1laXNoKTtcbiAgICB9IGVsc2UgaWYgKGRhdGVUaW1laXNoIGluc3RhbmNlb2YgT2JqZWN0KSB7XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbU9iamVjdChkYXRlVGltZWlzaCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignVW5rbm93biBkYXRldGltZSBhcmd1bWVudCcpO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBtYXliZUFycmF5KHRoaW5nKSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodGhpbmcpID8gdGhpbmcgOiBbdGhpbmddO1xuICB9XG5cbiAgc3RhdGljIGlzVW5kZWZpbmVkKG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIG8gPT09ICd1bmRlZmluZWQnO1xuICB9XG5cbiAgc3RhdGljIGlzTnVtYmVyKG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIG8gPT09ICdudW1iZXInO1xuICB9XG5cbiAgc3RhdGljIGlzU3RyaW5nKG8pIHtcbiAgICByZXR1cm4gdHlwZW9mIG8gPT09ICdzdHJpbmcnO1xuICB9XG5cbiAgc3RhdGljIG51bWJlckJldHdlZW4odGhpbmcsIGJvdHRvbSwgdG9wKSB7XG4gICAgcmV0dXJuIFV0aWwuaXNOdW1iZXIodGhpbmcpICYmIHRoaW5nID49IGJvdHRvbSAmJiB0aGluZyA8PSB0b3A7XG4gIH1cblxuICBzdGF0aWMgcGFkKGlucHV0LCBuID0gMikge1xuICAgIHJldHVybiAoJzAnLnJlcGVhdChuKSArIGlucHV0KS5zbGljZSgtbik7XG4gIH1cblxuICBzdGF0aWMgdG93YXJkWmVybyhpbnB1dCkge1xuICAgIHJldHVybiBpbnB1dCA8IDAgPyBNYXRoLmNlaWwoaW5wdXQpIDogTWF0aC5mbG9vcihpbnB1dCk7XG4gIH1cblxuICAvLyBEYXRlVGltZSAtPiBKUyBkYXRlIHN1Y2ggdGhhdCB0aGUgZGF0ZSdzIFVUQyB0aW1lIGlzIHRoZSBkYXRldGltZXMncyBsb2NhbCB0aW1lXG4gIHN0YXRpYyBhc0lmVVRDKGR0KSB7XG4gICAgY29uc3QgdHMgPSBkdC50cyAtIGR0Lm9mZnNldDtcbiAgICByZXR1cm4gbmV3IERhdGUodHMpO1xuICB9XG5cbiAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMTUwMzAxMTdcbiAgc3RhdGljIGZsYXR0ZW4oYXJyKSB7XG4gICAgcmV0dXJuIGFyci5yZWR1Y2UoXG4gICAgICAoZmxhdCwgdG9GbGF0dGVuKSA9PlxuICAgICAgICBmbGF0LmNvbmNhdChBcnJheS5pc0FycmF5KHRvRmxhdHRlbikgPyBVdGlsLmZsYXR0ZW4odG9GbGF0dGVuKSA6IHRvRmxhdHRlbiksXG4gICAgICBbXVxuICAgICk7XG4gIH1cblxuICBzdGF0aWMgYmVzdEJ5KGFyciwgYnksIGNvbXBhcmUpIHtcbiAgICByZXR1cm4gYXJyLnJlZHVjZSgoYmVzdCwgbmV4dCkgPT4ge1xuICAgICAgY29uc3QgcGFpciA9IFtieShuZXh0KSwgbmV4dF07XG4gICAgICBpZiAoIWJlc3QpIHtcbiAgICAgICAgcmV0dXJuIHBhaXI7XG4gICAgICB9IGVsc2UgaWYgKGNvbXBhcmUuYXBwbHkobnVsbCwgW2Jlc3RbMF0sIHBhaXJbMF1dKSA9PT0gYmVzdFswXSkge1xuICAgICAgICByZXR1cm4gYmVzdDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBwYWlyO1xuICAgICAgfVxuICAgIH0sIG51bGwpWzFdO1xuICB9XG5cbiAgc3RhdGljIHBpY2sob2JqLCBrZXlzKSB7XG4gICAgcmV0dXJuIGtleXMucmVkdWNlKChhLCBrKSA9PiB7XG4gICAgICBhW2tdID0gb2JqW2tdO1xuICAgICAgcmV0dXJuIGE7XG4gICAgfSwge30pO1xuICB9XG5cbiAgc3RhdGljIGlzTGVhcFllYXIoeWVhcikge1xuICAgIHJldHVybiB5ZWFyICUgNCA9PT0gMCAmJiAoeWVhciAlIDEwMCAhPT0gMCB8fCB5ZWFyICUgNDAwID09PSAwKTtcbiAgfVxuXG4gIHN0YXRpYyBkYXlzSW5ZZWFyKHllYXIpIHtcbiAgICByZXR1cm4gVXRpbC5pc0xlYXBZZWFyKHllYXIpID8gMzY2IDogMzY1O1xuICB9XG5cbiAgc3RhdGljIGRheXNJbk1vbnRoKHllYXIsIG1vbnRoKSB7XG4gICAgaWYgKG1vbnRoID09PSAyKSB7XG4gICAgICByZXR1cm4gVXRpbC5pc0xlYXBZZWFyKHllYXIpID8gMjkgOiAyODtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFszMSwgbnVsbCwgMzEsIDMwLCAzMSwgMzAsIDMxLCAzMSwgMzAsIDMxLCAzMCwgMzFdW21vbnRoIC0gMV07XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIHBhcnNlWm9uZUluZm8odHMsIG9mZnNldEZvcm1hdCwgbG9jYWxlLCB0aW1lWm9uZSA9IG51bGwpIHtcbiAgICBjb25zdCBkYXRlID0gbmV3IERhdGUodHMpLFxuICAgICAgaW50bCA9IHtcbiAgICAgICAgaG91cjEyOiBmYWxzZSxcbiAgICAgICAgLy8gYXZvaWQgQU0vUE1cbiAgICAgICAgeWVhcjogJ251bWVyaWMnLFxuICAgICAgICBtb250aDogJzItZGlnaXQnLFxuICAgICAgICBkYXk6ICcyLWRpZ2l0JyxcbiAgICAgICAgaG91cjogJzItZGlnaXQnLFxuICAgICAgICBtaW51dGU6ICcyLWRpZ2l0J1xuICAgICAgfTtcblxuICAgIGlmICh0aW1lWm9uZSkge1xuICAgICAgaW50bC50aW1lWm9uZSA9IHRpbWVab25lO1xuICAgIH1cblxuICAgIGNvbnN0IG1vZGlmaWVkID0gT2JqZWN0LmFzc2lnbih7IHRpbWVab25lTmFtZTogb2Zmc2V0Rm9ybWF0IH0sIGludGwpO1xuXG4gICAgaWYgKEludGwuRGF0ZVRpbWVGb3JtYXQucHJvdG90eXBlLmZvcm1hdFRvUGFydHMpIHtcbiAgICAgIGNvbnN0IHBhcnNlZCA9IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KGxvY2FsZSwgbW9kaWZpZWQpXG4gICAgICAgIC5mb3JtYXRUb1BhcnRzKGRhdGUpXG4gICAgICAgIC5maW5kKG0gPT4gbS50eXBlLnRvTG93ZXJDYXNlKCkgPT09ICd0aW1lem9uZW5hbWUnKTtcbiAgICAgIHJldHVybiBwYXJzZWQgPyBwYXJzZWQudmFsdWUgOiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0aGlzIHByb2JhYmx5IGRvZXNuJ3Qgd29yayBmb3IgYWxsIGxvY2FsZXNcbiAgICAgIGNvbnN0IHdpdGhvdXQgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUsIGludGwpLmZvcm1hdChkYXRlKSxcbiAgICAgICAgaW5jbHVkZWQgPSBuZXcgSW50bC5EYXRlVGltZUZvcm1hdChsb2NhbGUsIG1vZGlmaWVkKS5mb3JtYXQoZGF0ZSksXG4gICAgICAgIGRpZmZlZCA9IGluY2x1ZGVkLnN1YnN0cmluZyh3aXRob3V0Lmxlbmd0aCksXG4gICAgICAgIHRyaW1tZWQgPSBkaWZmZWQucmVwbGFjZSgvXlssIF0rLywgJycpO1xuXG4gICAgICByZXR1cm4gdHJpbW1lZDtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgbm9ybWFsaXplWm9uZShpbnB1dCkge1xuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIFpvbmUpIHtcbiAgICAgIHJldHVybiBpbnB1dDtcbiAgICB9IGVsc2UgaWYgKFV0aWwuaXNTdHJpbmcoaW5wdXQpKSB7XG4gICAgICBjb25zdCBsb3dlcmVkID0gaW5wdXQudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChsb3dlcmVkID09PSAnbG9jYWwnKSByZXR1cm4gTG9jYWxab25lLmluc3RhbmNlO1xuICAgICAgZWxzZSBpZiAobG93ZXJlZCA9PT0gJ3V0YycpIHJldHVybiBGaXhlZE9mZnNldFpvbmUudXRjSW5zdGFuY2U7XG4gICAgICBlbHNlIGlmIChJQU5BWm9uZS5pc1ZhbGlkU3BlY2llcihsb3dlcmVkKSkgcmV0dXJuIG5ldyBJQU5BWm9uZShpbnB1dCk7XG4gICAgICBlbHNlIHJldHVybiBGaXhlZE9mZnNldFpvbmUucGFyc2VTcGVjaWZpZXIobG93ZXJlZCkgfHwgU2V0dGluZ3MuZGVmYXVsdFpvbmU7XG4gICAgfSBlbHNlIGlmIChVdGlsLmlzTnVtYmVyKGlucHV0KSkge1xuICAgICAgcmV0dXJuIEZpeGVkT2Zmc2V0Wm9uZS5pbnN0YW5jZShpbnB1dCk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdvYmplY3QnICYmIGlucHV0Lm9mZnNldCkge1xuICAgICAgLy8gVGhpcyBpcyBkdW1iLCBidXQgdGhlIGluc3RhbmNlb2YgY2hlY2sgYWJvdmUgZG9lc24ndCBzZWVtIHRvIHJlYWxseSB3b3JrXG4gICAgICAvLyBzbyB3ZSdyZSBkdWNrIGNoZWNraW5nIGl0XG4gICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBTZXR0aW5ncy5kZWZhdWx0Wm9uZTtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgbm9ybWFsaXplT2JqZWN0KG9iaiwgbm9ybWFsaXplciwgaWdub3JlVW5rbm93biA9IGZhbHNlKSB7XG4gICAgY29uc3Qgbm9ybWFsaXplZCA9IHt9O1xuICAgIGZvciAoY29uc3QgdSBpbiBvYmopIHtcbiAgICAgIGlmIChvYmouaGFzT3duUHJvcGVydHkodSkpIHtcbiAgICAgICAgY29uc3QgdiA9IG9ialt1XTtcbiAgICAgICAgaWYgKHYgIT09IG51bGwgJiYgIVV0aWwuaXNVbmRlZmluZWQodikgJiYgIU51bWJlci5pc05hTih2KSkge1xuICAgICAgICAgIGNvbnN0IG1hcHBlZCA9IG5vcm1hbGl6ZXIodSwgaWdub3JlVW5rbm93bik7XG4gICAgICAgICAgaWYgKG1hcHBlZCkge1xuICAgICAgICAgICAgbm9ybWFsaXplZFttYXBwZWRdID0gdjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5vcm1hbGl6ZWQ7XG4gIH1cblxuICBzdGF0aWMgdGltZU9iamVjdChvYmopIHtcbiAgICByZXR1cm4gVXRpbC5waWNrKG9iaiwgWydob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLCAnbWlsbGlzZWNvbmQnXSk7XG4gIH1cblxuICBzdGF0aWMgdW50cnVjYXRlWWVhcih5ZWFyKSB7XG4gICAgcmV0dXJuIHllYXIgPiA2MCA/IDE5MDAgKyB5ZWFyIDogMjAwMCArIHllYXI7XG4gIH1cblxuICAvLyBzaWduZWRPZmZzZXQoJy01JywgJzMwJykgLT4gLTMzMFxuICBzdGF0aWMgc2lnbmVkT2Zmc2V0KG9mZkhvdXJTdHIsIG9mZk1pbnV0ZVN0cikge1xuICAgIGNvbnN0IG9mZkhvdXIgPSBwYXJzZUludChvZmZIb3VyU3RyLCAxMCkgfHwgMCxcbiAgICAgIG9mZk1pbiA9IHBhcnNlSW50KG9mZk1pbnV0ZVN0ciwgMTApIHx8IDAsXG4gICAgICBvZmZNaW5TaWduZWQgPSBvZmZIb3VyIDwgMCA/IC1vZmZNaW4gOiBvZmZNaW47XG4gICAgcmV0dXJuIG9mZkhvdXIgKiA2MCArIG9mZk1pblNpZ25lZDtcbiAgfVxufVxuIiwiLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmV4cG9ydCBjbGFzcyBFbmdsaXNoIHtcbiAgc3RhdGljIGdldCBtb250aHNMb25nKCkge1xuICAgIHJldHVybiBbXG4gICAgICAnSmFudWFyeScsXG4gICAgICAnRmVicnVhcnknLFxuICAgICAgJ01hcmNoJyxcbiAgICAgICdBcHJpbCcsXG4gICAgICAnTWF5JyxcbiAgICAgICdKdW5lJyxcbiAgICAgICdKdWx5JyxcbiAgICAgICdBdWd1c3QnLFxuICAgICAgJ1NlcHRlbWJlcicsXG4gICAgICAnT2N0b2JlcicsXG4gICAgICAnTm92ZW1iZXInLFxuICAgICAgJ0RlY2VtYmVyJ1xuICAgIF07XG4gIH1cblxuICBzdGF0aWMgZ2V0IG1vbnRoc1Nob3J0KCkge1xuICAgIHJldHVybiBbJ0phbicsICdGZWInLCAnTWFyJywgJ0FwcicsICdNYXknLCAnSnVuJywgJ0p1bCcsICdBdWcnLCAnU2VwJywgJ09jdCcsICdOb3YnLCAnRGVjJ107XG4gIH1cblxuICBzdGF0aWMgZ2V0IG1vbnRoc05hcnJvdygpIHtcbiAgICByZXR1cm4gWydKJywgJ0YnLCAnTScsICdBJywgJ00nLCAnSicsICdKJywgJ0EnLCAnUycsICdPJywgJ04nLCAnRCddO1xuICB9XG5cbiAgc3RhdGljIG1vbnRocyhsZW5ndGgpIHtcbiAgICBzd2l0Y2ggKGxlbmd0aCkge1xuICAgICAgY2FzZSAnbmFycm93JzpcbiAgICAgICAgcmV0dXJuIEVuZ2xpc2gubW9udGhzTmFycm93O1xuICAgICAgY2FzZSAnc2hvcnQnOlxuICAgICAgICByZXR1cm4gRW5nbGlzaC5tb250aHNTaG9ydDtcbiAgICAgIGNhc2UgJ2xvbmcnOlxuICAgICAgICByZXR1cm4gRW5nbGlzaC5tb250aHNMb25nO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgc3RhdGljIGdldCB3ZWVrZGF5c0xvbmcoKSB7XG4gICAgcmV0dXJuIFsnTW9uZGF5JywgJ1R1ZXNkYXknLCAnV2VkbmVzZGF5JywgJ1RodXJzZGF5JywgJ0ZyaWRheScsICdTYXR1cmRheScsICdTdW5kYXknXTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgd2Vla2RheXNTaG9ydCgpIHtcbiAgICByZXR1cm4gWydNb24nLCAnVHVlJywgJ1dlZCcsICdUaHUnLCAnRnJpJywgJ1NhdCcsICdTdW4nXTtcbiAgfVxuXG4gIHN0YXRpYyBnZXQgd2Vla2RheXNOYXJyb3coKSB7XG4gICAgcmV0dXJuIFsnTScsICdUJywgJ1cnLCAnVCcsICdGJywgJ1MnLCAnUyddO1xuICB9XG5cbiAgc3RhdGljIHdlZWtkYXlzKGxlbmd0aCkge1xuICAgIHN3aXRjaCAobGVuZ3RoKSB7XG4gICAgICBjYXNlICduYXJyb3cnOlxuICAgICAgICByZXR1cm4gRW5nbGlzaC53ZWVrZGF5c05hcnJvdztcbiAgICAgIGNhc2UgJ3Nob3J0JzpcbiAgICAgICAgcmV0dXJuIEVuZ2xpc2gud2Vla2RheXNTaG9ydDtcbiAgICAgIGNhc2UgJ2xvbmcnOlxuICAgICAgICByZXR1cm4gRW5nbGlzaC53ZWVrZGF5c0xvbmc7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICBzdGF0aWMgZ2V0IG1lcmlkaWVtcygpIHtcbiAgICByZXR1cm4gWydBTScsICdQTSddO1xuICB9XG5cbiAgc3RhdGljIGVyYXMobGVuZ3RoKSB7XG4gICAgcmV0dXJuIGxlbmd0aCA9PT0gJ3Nob3J0JyA/IFsnQkMnLCAnQUQnXSA6IFsnQmVmb3JlIENocmlzdCcsICdBbm5vIERvbWluaSddO1xuICB9XG59XG4iLCJpbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCB7IEVuZ2xpc2ggfSBmcm9tICcuL2VuZ2xpc2gnO1xuaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tICcuLi9kYXRldGltZSc7XG5cbmNvbnN0IGxvY2FsZUNhY2hlID0gbmV3IE1hcCgpO1xuXG5mdW5jdGlvbiBpbnRsQ29uZmlnU3RyaW5nKGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhcikge1xuICBsZXQgbG9jID0gbG9jYWxlIHx8IG5ldyBJbnRsLkRhdGVUaW1lRm9ybWF0KCkucmVzb2x2ZWRPcHRpb25zKCkubG9jYWxlO1xuICBsb2MgPSBBcnJheS5pc0FycmF5KGxvY2FsZSkgPyBsb2NhbGUgOiBbbG9jYWxlXTtcblxuICBpZiAob3V0cHV0Q2FsZW5kYXIgfHwgbnVtYmVyaW5nU3lzdGVtKSB7XG4gICAgbG9jID0gbG9jLm1hcChsID0+IHtcbiAgICAgIGwgKz0gJy11JztcblxuICAgICAgaWYgKG91dHB1dENhbGVuZGFyKSB7XG4gICAgICAgIGwgKz0gJy1jYS0nICsgb3V0cHV0Q2FsZW5kYXI7XG4gICAgICB9XG5cbiAgICAgIGlmIChudW1iZXJpbmdTeXN0ZW0pIHtcbiAgICAgICAgbCArPSAnLW51LScgKyBudW1iZXJpbmdTeXN0ZW07XG4gICAgICB9XG4gICAgICByZXR1cm4gbDtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gbG9jO1xufVxuXG5mdW5jdGlvbiBtYXBNb250aHMoZikge1xuICBjb25zdCBtcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMTsgaSA8PSAxMjsgaSsrKSB7XG4gICAgY29uc3QgZHQgPSBEYXRlVGltZS51dGMoMjAxNiwgaSwgMSk7XG4gICAgbXMucHVzaChmKGR0KSk7XG4gIH1cbiAgcmV0dXJuIG1zO1xufVxuXG5mdW5jdGlvbiBtYXBXZWVrZGF5cyhmKSB7XG4gIGNvbnN0IG1zID0gW107XG4gIGZvciAobGV0IGkgPSAxOyBpIDw9IDc7IGkrKykge1xuICAgIGNvbnN0IGR0ID0gRGF0ZVRpbWUudXRjKDIwMTYsIDExLCAxMyArIGkpO1xuICAgIG1zLnB1c2goZihkdCkpO1xuICB9XG4gIHJldHVybiBtcztcbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmV4cG9ydCBjbGFzcyBMb2NhbGUge1xuICBzdGF0aWMgZnJvbU9wdHMob3B0cykge1xuICAgIHJldHVybiBMb2NhbGUuY3JlYXRlKG9wdHMubG9jYWxlLCBvcHRzLm51bWJlcmluZ1N5c3RlbSwgb3B0cy5vdXRwdXRDYWxlbmRhcik7XG4gIH1cblxuICBzdGF0aWMgY3JlYXRlKGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhcikge1xuICAgIGNvbnN0IGxvY2FsZVIgPSBsb2NhbGUgfHwgJ2VuLXVzJyxcbiAgICAgIG51bWJlcmluZ1N5c3RlbVIgPSBudW1iZXJpbmdTeXN0ZW0gfHwgbnVsbCxcbiAgICAgIG91dHB1dENhbGVuZGFyUiA9IG91dHB1dENhbGVuZGFyIHx8IG51bGwsXG4gICAgICBjYWNoZUtleSA9IGAke2xvY2FsZVJ9fCR7bnVtYmVyaW5nU3lzdGVtUn18JHtvdXRwdXRDYWxlbmRhclJ9YCxcbiAgICAgIGNhY2hlZCA9IGxvY2FsZUNhY2hlLmdldChjYWNoZUtleSk7XG5cbiAgICBpZiAoY2FjaGVkKSB7XG4gICAgICByZXR1cm4gY2FjaGVkO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBmcmVzaCA9IG5ldyBMb2NhbGUobG9jYWxlUiwgbnVtYmVyaW5nU3lzdGVtUiwgb3V0cHV0Q2FsZW5kYXJSKTtcbiAgICAgIGxvY2FsZUNhY2hlLnNldChjYWNoZUtleSwgZnJlc2gpO1xuICAgICAgcmV0dXJuIGZyZXNoO1xuICAgIH1cbiAgfVxuXG4gIHN0YXRpYyBmcm9tT2JqZWN0KHsgbG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyIH0gPSB7fSkge1xuICAgIHJldHVybiBMb2NhbGUuY3JlYXRlKGxvY2FsZSwgbnVtYmVyaW5nU3lzdGVtLCBvdXRwdXRDYWxlbmRhcik7XG4gIH1cblxuICBjb25zdHJ1Y3Rvcihsb2NhbGUsIG51bWJlcmluZywgb3V0cHV0Q2FsZW5kYXIpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2xvY2FsZScsIHsgdmFsdWU6IGxvY2FsZSwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ251bWJlcmluZ1N5c3RlbScsIHtcbiAgICAgIHZhbHVlOiBudW1iZXJpbmcgfHwgbnVsbCxcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ291dHB1dENhbGVuZGFyJywge1xuICAgICAgdmFsdWU6IG91dHB1dENhbGVuZGFyIHx8IG51bGwsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdpbnRsJywge1xuICAgICAgdmFsdWU6IGludGxDb25maWdTdHJpbmcodGhpcy5sb2NhbGUsIHRoaXMubnVtYmVyaW5nU3lzdGVtLCB0aGlzLm91dHB1dENhbGVuZGFyKSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgfSk7XG5cbiAgICAvLyBjYWNoZWQgdXNlZnVsbmVzc1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnd2Vla2RheXNDYWNoZScsIHtcbiAgICAgIHZhbHVlOiB7IGZvcm1hdDoge30sIHN0YW5kYWxvbmU6IHt9IH0sXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbW9udGhzQ2FjaGUnLCB7XG4gICAgICB2YWx1ZTogeyBmb3JtYXQ6IHt9LCBzdGFuZGFsb25lOiB7fSB9LFxuICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ21lcmlkaWVtQ2FjaGUnLCB7XG4gICAgICB2YWx1ZTogbnVsbCxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2VyYUNhY2hlJywge1xuICAgICAgdmFsdWU6IHt9LFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAga25vd25FbmdsaXNoKCkge1xuICAgIHJldHVybiAoXG4gICAgICAodGhpcy5sb2NhbGUgPT09ICdlbicgfHxcbiAgICAgICAgSW50bC5EYXRlVGltZUZvcm1hdCh0aGlzLmludGwpXG4gICAgICAgICAgLnJlc29sdmVkT3B0aW9ucygpXG4gICAgICAgICAgLmxvY2FsZS5zdGFydHNXaXRoKCdlbi1VUycpKSAmJlxuICAgICAgdGhpcy5udW1iZXJpbmdTeXN0ZW0gPT09IG51bGwgJiZcbiAgICAgICh0aGlzLm91dHB1dENhbGVuZGFyID09PSBudWxsIHx8IHRoaXMub3V0cHV0Q2FsZW5kYXIgPT09ICdsYXRuJylcbiAgICApO1xuICB9XG5cbiAgY2xvbmUoYWx0cykge1xuICAgIGlmICghYWx0cyB8fCBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhhbHRzKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gTG9jYWxlLmNyZWF0ZShcbiAgICAgICAgYWx0cy5sb2NhbGUgfHwgdGhpcy5sb2NhbGUsXG4gICAgICAgIGFsdHMubnVtYmVyaW5nU3lzdGVtIHx8IHRoaXMubnVtYmVyaW5nU3lzdGVtLFxuICAgICAgICBhbHRzLm91dHB1dENhbGVuZGFyIHx8IHRoaXMub3V0cHV0Q2FsZW5kYXJcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgbW9udGhzKGxlbmd0aCwgZm9ybWF0ID0gZmFsc2UpIHtcbiAgICBpZiAodGhpcy5rbm93bkVuZ2xpc2goKSkge1xuICAgICAgY29uc3QgZW5nbGlzaCA9IEVuZ2xpc2gubW9udGhzKGxlbmd0aCk7XG4gICAgICBpZiAoZW5nbGlzaCkge1xuICAgICAgICByZXR1cm4gZW5nbGlzaDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBpbnRsID0gZm9ybWF0ID8geyBtb250aDogbGVuZ3RoLCBkYXk6ICdudW1lcmljJyB9IDogeyBtb250aDogbGVuZ3RoIH0sXG4gICAgICBmb3JtYXRTdHIgPSBmb3JtYXQgPyAnZm9ybWF0JyA6ICdzdGFuZGFsb25lJztcbiAgICBpZiAoIXRoaXMubW9udGhzQ2FjaGVbZm9ybWF0U3RyXVtsZW5ndGhdKSB7XG4gICAgICB0aGlzLm1vbnRoc0NhY2hlW2Zvcm1hdFN0cl1bbGVuZ3RoXSA9IG1hcE1vbnRocyhkdCA9PiB0aGlzLmV4dHJhY3QoZHQsIGludGwsICdtb250aCcpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMubW9udGhzQ2FjaGVbZm9ybWF0U3RyXVtsZW5ndGhdO1xuICB9XG5cbiAgd2Vla2RheXMobGVuZ3RoLCBmb3JtYXQgPSBmYWxzZSkge1xuICAgIGlmICh0aGlzLmtub3duRW5nbGlzaCgpKSB7XG4gICAgICBjb25zdCBlbmdsaXNoID0gRW5nbGlzaC53ZWVrZGF5cyhsZW5ndGgpO1xuICAgICAgaWYgKGVuZ2xpc2gpIHtcbiAgICAgICAgcmV0dXJuIGVuZ2xpc2g7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgaW50bCA9IGZvcm1hdFxuICAgICAgICA/IHsgd2Vla2RheTogbGVuZ3RoLCB5ZWFyOiAnbnVtZXJpYycsIG1vbnRoOiAnbG9uZycsIGRheTogJ251bWVyaWMnIH1cbiAgICAgICAgOiB7IHdlZWtkYXk6IGxlbmd0aCB9LFxuICAgICAgZm9ybWF0U3RyID0gZm9ybWF0ID8gJ2Zvcm1hdCcgOiAnc3RhbmRhbG9uZSc7XG4gICAgaWYgKCF0aGlzLndlZWtkYXlzQ2FjaGVbZm9ybWF0U3RyXVtsZW5ndGhdKSB7XG4gICAgICB0aGlzLndlZWtkYXlzQ2FjaGVbZm9ybWF0U3RyXVtsZW5ndGhdID0gbWFwV2Vla2RheXMoZHQgPT4gdGhpcy5leHRyYWN0KGR0LCBpbnRsLCAnd2Vla2RheScpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMud2Vla2RheXNDYWNoZVtmb3JtYXRTdHJdW2xlbmd0aF07XG4gIH1cblxuICBtZXJpZGllbXMoKSB7XG4gICAgaWYgKHRoaXMua25vd25FbmdsaXNoKCkpIHtcbiAgICAgIHJldHVybiBFbmdsaXNoLm1lcmlkaWVtcztcbiAgICB9XG5cbiAgICAvLyBJbiB0aGVvcnkgdGhlcmUgY291bGQgYmUgYXJpYml0cmFyeSBkYXkgcGVyaW9kcy4gV2UncmUgZ29ubmEgYXNzdW1lIHRoZXJlIGFyZSBleGFjdGx5IHR3b1xuICAgIC8vIGZvciBBTSBhbmQgUE0uIFRoaXMgaXMgcHJvYmFibHkgd3JvbmcsIGJ1dCBpdCdzIG1ha2VzIHBhcnNpbmcgd2F5IGVhc2llci5cbiAgICBpZiAoIXRoaXMubWVyaWRpZW1DYWNoZSkge1xuICAgICAgY29uc3QgaW50bCA9IHsgaG91cjogJ251bWVyaWMnLCBob3VyMTI6IHRydWUgfTtcbiAgICAgIHRoaXMubWVyaWRpZW1DYWNoZSA9IFtEYXRlVGltZS51dGMoMjAxNiwgMTEsIDEzLCA5KSwgRGF0ZVRpbWUudXRjKDIwMTYsIDExLCAxMywgMTkpXS5tYXAoZHQgPT5cbiAgICAgICAgdGhpcy5leHRyYWN0KGR0LCBpbnRsLCAnZGF5cGVyaW9kJylcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubWVyaWRpZW1DYWNoZTtcbiAgfVxuXG4gIGVyYXMobGVuZ3RoKSB7XG4gICAgaWYgKHRoaXMua25vd25FbmdsaXNoKCkpIHtcbiAgICAgIHJldHVybiBFbmdsaXNoLmVyYXMobGVuZ3RoKTtcbiAgICB9XG5cbiAgICBjb25zdCBpbnRsID0geyBlcmE6IGxlbmd0aCB9O1xuXG4gICAgLy8gVGhpcyBpcyB1dHRlciBidWxsc2hpdC4gRGlmZmVyZW50IGNhbGVuZGFycyBhcmUgZ29pbmcgdG8gZGVmaW5lIGVyYXMgdG90YWxseSBkaWZmZXJlbnRseS4gV2hhdCBJIG5lZWQgaXMgdGhlIG1pbmltdW0gc2V0IG9mIGRhdGVzXG4gICAgLy8gdG8gZGVmaW5pdGVseSBlbnVtZXJhdGUgdGhlbS5cbiAgICBpZiAoIXRoaXMuZXJhQ2FjaGVbbGVuZ3RoXSkge1xuICAgICAgdGhpcy5lcmFDYWNoZVtsZW5ndGhdID0gW0RhdGVUaW1lLnV0YygtNDAsIDEsIDEpLCBEYXRlVGltZS51dGMoMjAxNywgMSwgMSldLm1hcChkdCA9PlxuICAgICAgICB0aGlzLmV4dHJhY3QoZHQsIGludGwsICdlcmEnKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5lcmFDYWNoZVtsZW5ndGhdO1xuICB9XG5cbiAgZXh0cmFjdChkdCwgaW50bE9wdHMsIGZpZWxkKSB7XG4gICAgY29uc3QgW2RmLCBkXSA9IHRoaXMuZHRGb3JtYXR0ZXIoZHQsIGludGxPcHRzKSxcbiAgICAgIHJlc3VsdHMgPSBkZi5mb3JtYXRUb1BhcnRzKGQpLFxuICAgICAgbWF0Y2hpbmcgPSByZXN1bHRzLmZpbmQobSA9PiBtLnR5cGUudG9Mb3dlckNhc2UoKSA9PT0gZmllbGQpO1xuXG4gICAgcmV0dXJuIG1hdGNoaW5nID8gbWF0Y2hpbmcudmFsdWUgOiBudWxsO1xuICB9XG5cbiAgbnVtYmVyRm9ybWF0dGVyKG9wdHMgPSB7fSwgaW50bE9wdHMgPSB7fSkge1xuICAgIGNvbnN0IHJlYWxJbnRsT3B0cyA9IE9iamVjdC5hc3NpZ24oeyB1c2VHcm91cGluZzogZmFsc2UgfSwgaW50bE9wdHMpO1xuXG4gICAgaWYgKG9wdHMucGFkVG8gPiAwKSB7XG4gICAgICByZWFsSW50bE9wdHMubWluaW11bUludGVnZXJEaWdpdHMgPSBvcHRzLnBhZFRvO1xuICAgIH1cblxuICAgIGlmIChvcHRzLnJvdW5kKSB7XG4gICAgICByZWFsSW50bE9wdHMubWF4aW11bUZyYWN0aW9uRGlnaXRzID0gMDtcbiAgICB9XG5cbiAgICByZXR1cm4gbmV3IEludGwuTnVtYmVyRm9ybWF0KHRoaXMuaW50bCwgcmVhbEludGxPcHRzKTtcbiAgfVxuXG4gIGR0Rm9ybWF0dGVyKGR0LCBpbnRsT3B0cyA9IHt9KSB7XG4gICAgbGV0IGQsIHo7XG5cbiAgICBpZiAoZHQuem9uZS51bml2ZXJzYWwpIHtcbiAgICAgIC8vIGlmIHdlIGhhdmUgYSBmaXhlZC1vZmZzZXQgem9uZSB0aGF0IGlzbid0IGFjdHVhbGx5IFVUQyxcbiAgICAgIC8vIChsaWtlIFVUQys4KSwgd2UgbmVlZCB0byBtYWtlIGRvIHdpdGgganVzdCBkaXNwbGF5aW5nXG4gICAgICAvLyB0aGUgdGltZSBpbiBVVEM7IHRoZSBmb3JtYXR0ZXIgaG93IHRvIGhhbmRsZSBVVEMrOFxuICAgICAgZCA9IFV0aWwuYXNJZlVUQyhkdCk7XG4gICAgICB6ID0gJ1VUQyc7XG4gICAgfSBlbHNlIGlmIChkdC56b25lLnR5cGUgPT09ICdsb2NhbCcpIHtcbiAgICAgIGQgPSBkdC50b0pTRGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkID0gZHQudG9KU0RhdGUoKTtcbiAgICAgIHogPSBkdC56b25lLm5hbWU7XG4gICAgfVxuXG4gICAgY29uc3QgcmVhbEludGxPcHRzID0gT2JqZWN0LmFzc2lnbih7fSwgaW50bE9wdHMpO1xuICAgIGlmICh6KSB7XG4gICAgICByZWFsSW50bE9wdHMudGltZVpvbmUgPSB6O1xuICAgIH1cblxuICAgIHJldHVybiBbbmV3IEludGwuRGF0ZVRpbWVGb3JtYXQodGhpcy5pbnRsLCByZWFsSW50bE9wdHMpLCBkXTtcbiAgfVxuXG4gIGVxdWFscyhvdGhlcikge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmxvY2FsZSA9PT0gb3RoZXIubG9jYWxlICYmXG4gICAgICB0aGlzLm51bWJlcmluZ1N5c3RlbSA9PT0gb3RoZXIubnVtYmVyaW5nU3lzdGVtICYmXG4gICAgICB0aGlzLm91dHB1dENhbGVuZGFyID09PSBvdGhlci5vdXRwdXRDYWxlbmRhclxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCB7IFV0aWwgfSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tICcuLi9kYXRldGltZSc7XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeVRva2VucyhzcGxpdHMsIHRva2VuVG9TdHJpbmcpIHtcbiAgbGV0IHMgPSAnJztcbiAgZm9yIChjb25zdCB0b2tlbiBvZiBzcGxpdHMpIHtcbiAgICBpZiAodG9rZW4ubGl0ZXJhbCkge1xuICAgICAgcyArPSB0b2tlbi52YWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHMgKz0gdG9rZW5Ub1N0cmluZyh0b2tlbi52YWwpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcztcbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmV4cG9ydCBjbGFzcyBGb3JtYXR0ZXIge1xuICBzdGF0aWMgY3JlYXRlKGxvY2FsZSwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3QgZm9ybWF0T3B0cyA9IE9iamVjdC5hc3NpZ24oe30sIHsgcm91bmQ6IHRydWUgfSwgb3B0cyk7XG4gICAgcmV0dXJuIG5ldyBGb3JtYXR0ZXIobG9jYWxlLCBmb3JtYXRPcHRzKTtcbiAgfVxuXG4gIHN0YXRpYyBwYXJzZUZvcm1hdChmbXQpIHtcbiAgICBsZXQgY3VycmVudCA9IG51bGwsXG4gICAgICBjdXJyZW50RnVsbCA9ICcnLFxuICAgICAgYnJhY2tldGVkID0gZmFsc2U7XG4gICAgY29uc3Qgc3BsaXRzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmbXQubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGMgPSBmbXQuY2hhckF0KGkpO1xuICAgICAgaWYgKGMgPT09IFwiJ1wiKSB7XG4gICAgICAgIGlmIChjdXJyZW50RnVsbC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgc3BsaXRzLnB1c2goeyBsaXRlcmFsOiBicmFja2V0ZWQsIHZhbDogY3VycmVudEZ1bGwgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCA9IG51bGw7XG4gICAgICAgIGN1cnJlbnRGdWxsID0gJyc7XG4gICAgICAgIGJyYWNrZXRlZCA9ICFicmFja2V0ZWQ7XG4gICAgICB9IGVsc2UgaWYgKGJyYWNrZXRlZCkge1xuICAgICAgICBjdXJyZW50RnVsbCArPSBjO1xuICAgICAgfSBlbHNlIGlmIChjID09PSBjdXJyZW50KSB7XG4gICAgICAgIGN1cnJlbnRGdWxsICs9IGM7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoY3VycmVudEZ1bGwubGVuZ3RoID4gMCkge1xuICAgICAgICAgIHNwbGl0cy5wdXNoKHsgbGl0ZXJhbDogZmFsc2UsIHZhbDogY3VycmVudEZ1bGwgfSk7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudEZ1bGwgPSBjO1xuICAgICAgICBjdXJyZW50ID0gYztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoY3VycmVudEZ1bGwubGVuZ3RoID4gMCkge1xuICAgICAgc3BsaXRzLnB1c2goeyBsaXRlcmFsOiBicmFja2V0ZWQsIHZhbDogY3VycmVudEZ1bGwgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHNwbGl0cztcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKGxvY2FsZSwgZm9ybWF0T3B0cykge1xuICAgIHRoaXMub3B0cyA9IGZvcm1hdE9wdHM7XG4gICAgdGhpcy5sb2MgPSBsb2NhbGU7XG4gIH1cblxuICBmb3JtYXREYXRlVGltZShkdCwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3QgW2RmLCBkXSA9IHRoaXMubG9jLmR0Rm9ybWF0dGVyKGR0LCBPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9wdHMsIG9wdHMpKTtcbiAgICByZXR1cm4gZGYuZm9ybWF0KGQpO1xuICB9XG5cbiAgZm9ybWF0RGF0ZVRpbWVQYXJ0cyhkdCwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3QgW2RmLCBkXSA9IHRoaXMubG9jLmR0Rm9ybWF0dGVyKGR0LCBPYmplY3QuYXNzaWduKHt9LCB0aGlzLm9wdHMsIG9wdHMpKTtcbiAgICByZXR1cm4gZGYuZm9ybWF0KGQpO1xuICB9XG5cbiAgcmVzb2x2ZWRPcHRpb25zKGR0LCBvcHRzID0ge30pIHtcbiAgICBjb25zdCBbZGYsIGRdID0gdGhpcy5sb2MuZHRGb3JtYXR0ZXIoZHQsIE9iamVjdC5hc3NpZ24oe30sIHRoaXMub3B0cywgb3B0cykpO1xuICAgIHJldHVybiBkZi5yZXNvbHZlZE9wdGlvbnMoZCk7XG4gIH1cblxuICBudW0obiwgcCA9IDApIHtcbiAgICBjb25zdCBvcHRzID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5vcHRzKTtcblxuICAgIGlmIChwID4gMCkge1xuICAgICAgb3B0cy5wYWRUbyA9IHA7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubG9jLm51bWJlckZvcm1hdHRlcihvcHRzKS5mb3JtYXQobik7XG4gIH1cblxuICBmb3JtYXREYXRlVGltZUZyb21TdHJpbmcoZHQsIGZtdCkge1xuICAgIGNvbnN0IHN0cmluZyA9IChvcHRzLCBleHRyYWN0KSA9PiB0aGlzLmxvYy5leHRyYWN0KGR0LCBvcHRzLCBleHRyYWN0KSxcbiAgICAgIGZvcm1hdE9mZnNldCA9IG9wdHMgPT4ge1xuICAgICAgICBpZiAoZHQuaXNPZmZzZXRGaXhlZCAmJiBkdC5vZmZzZXQgPT09IDAgJiYgb3B0cy5hbGxvd1opIHtcbiAgICAgICAgICByZXR1cm4gJ1onO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgaG91cnMgPSBVdGlsLnRvd2FyZFplcm8oZHQub2Zmc2V0IC8gNjApLFxuICAgICAgICAgIG1pbnV0ZXMgPSBNYXRoLmFicyhkdC5vZmZzZXQgJSA2MCksXG4gICAgICAgICAgc2lnbiA9IGhvdXJzID49IDAgPyAnKycgOiAnLScsXG4gICAgICAgICAgYmFzZSA9IGAke3NpZ259JHtNYXRoLmFicyhob3Vycyl9YDtcblxuICAgICAgICBzd2l0Y2ggKG9wdHMuZm9ybWF0KSB7XG4gICAgICAgICAgY2FzZSAnc2hvcnQnOlxuICAgICAgICAgICAgcmV0dXJuIGAke3NpZ259JHt0aGlzLm51bShNYXRoLmFicyhob3VycyksIDIpfToke3RoaXMubnVtKG1pbnV0ZXMsIDIpfWA7XG4gICAgICAgICAgY2FzZSAnbmFycm93JzpcbiAgICAgICAgICAgIHJldHVybiBtaW51dGVzID4gMCA/IGAke2Jhc2V9OiR7bWludXRlc31gIDogYmFzZTtcbiAgICAgICAgICBjYXNlICd0ZWNoaWUnOlxuICAgICAgICAgICAgcmV0dXJuIGAke3NpZ259JHt0aGlzLm51bShNYXRoLmFicyhob3VycyksIDIpfSR7dGhpcy5udW0obWludXRlcywgMil9YDtcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYFZhbHVlIGZvcm1hdCAke29wdHMuZm9ybWF0fSBpcyBvdXQgb2YgcmFuZ2UgZm9yIHByb3BlcnR5IGZvcm1hdGApO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdG9rZW5Ub1N0cmluZyA9IHRva2VuID0+IHtcbiAgICAgICAgY29uc3Qgb3V0cHV0Q2FsID0gdGhpcy5sb2Mub3V0cHV0Q2FsZW5kYXI7XG5cbiAgICAgICAgLy8gV2hlcmUgcG9zc2libGU6IGh0dHA6Ly9jbGRyLnVuaWNvZGUub3JnL3RyYW5zbGF0aW9uL2RhdGUtdGltZSNUT0MtU3RhbmQtQWxvbmUtdnMuLUZvcm1hdC1TdHlsZXNcbiAgICAgICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgICAgIC8vIG1zXG4gICAgICAgICAgY2FzZSAnUyc6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQubWlsbGlzZWNvbmQpO1xuICAgICAgICAgIGNhc2UgJ1NTUyc6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQubWlsbGlzZWNvbmQsIDMpO1xuICAgICAgICAgIC8vIHNlY29uZHNcbiAgICAgICAgICBjYXNlICdzJzpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5zZWNvbmQpO1xuICAgICAgICAgIGNhc2UgJ3NzJzpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5zZWNvbmQsIDIpO1xuICAgICAgICAgIC8vIG1pbnV0ZXNcbiAgICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5taW51dGUpO1xuICAgICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5taW51dGUsIDIpO1xuICAgICAgICAgIC8vIGhvdXJzXG4gICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQuaG91ciA9PT0gMTIgPyAxMiA6IGR0LmhvdXIgJSAxMik7XG4gICAgICAgICAgY2FzZSAnaGgnOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LmhvdXIgPT09IDEyID8gMTIgOiBkdC5ob3VyICUgMTIsIDIpO1xuICAgICAgICAgIGNhc2UgJ0gnOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LmhvdXIpO1xuICAgICAgICAgIGNhc2UgJ0hIJzpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC5ob3VyLCAyKTtcbiAgICAgICAgICAvLyBvZmZzZXRcbiAgICAgICAgICBjYXNlICdaJzpcbiAgICAgICAgICAgIC8vIGxpa2UgKzZcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRPZmZzZXQoeyBmb3JtYXQ6ICduYXJyb3cnLCBhbGxvd1o6IHRydWUgfSk7XG4gICAgICAgICAgY2FzZSAnWlonOlxuICAgICAgICAgICAgLy8gbGlrZSArMDY6MDBcbiAgICAgICAgICAgIHJldHVybiBmb3JtYXRPZmZzZXQoeyBmb3JtYXQ6ICdzaG9ydCcsIGFsbG93WjogdHJ1ZSB9KTtcbiAgICAgICAgICBjYXNlICdaWlonOlxuICAgICAgICAgICAgLy8gbGlrZSArMDYwMFxuICAgICAgICAgICAgcmV0dXJuIGZvcm1hdE9mZnNldCh7IGZvcm1hdDogJ3RlY2hpZScsIGFsbG93WjogZmFsc2UgfSk7XG4gICAgICAgICAgY2FzZSAnWlpaWic6XG4gICAgICAgICAgICAvLyBsaWtlIEVTVFxuICAgICAgICAgICAgcmV0dXJuIGR0Lm9mZnNldE5hbWVTaG9ydDtcbiAgICAgICAgICBjYXNlICdaWlpaWic6XG4gICAgICAgICAgICAvLyBsaWtlIEVhc3Rlcm4gU3RhbmRhcmQgVGltZVxuICAgICAgICAgICAgcmV0dXJuIGR0Lm9mZnNldE5hbWVMb25nO1xuICAgICAgICAgIC8vIHpvbmVcbiAgICAgICAgICBjYXNlICd6JzpcbiAgICAgICAgICAgIHJldHVybiBkdC56b25lTmFtZTtcbiAgICAgICAgICAvLyBsaWtlIEFtZXJpY2EvTmV3X1lvcmtcbiAgICAgICAgICAvLyBtZXJpZGllbXNcbiAgICAgICAgICBjYXNlICdhJzpcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcoeyBob3VyOiAnbnVtZXJpYycsIGhvdXIxMjogdHJ1ZSB9LCAnZGF5cGVyaW9kJyk7XG4gICAgICAgICAgLy8gZGF0ZXNcbiAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXRDYWwgPyBzdHJpbmcoeyBkYXk6ICdudW1lcmljJyB9LCAnZGF5JykgOiB0aGlzLm51bShkdC5kYXkpO1xuICAgICAgICAgIGNhc2UgJ2RkJzpcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXRDYWwgPyBzdHJpbmcoeyBkYXk6ICcyLWRpZ2l0JyB9LCAnZGF5JykgOiB0aGlzLm51bShkdC5kYXksIDIpO1xuICAgICAgICAgIC8vIHdlZWtkYXlzIC0gZm9ybWF0XG4gICAgICAgICAgY2FzZSAnYyc6XG4gICAgICAgICAgICAvLyBsaWtlIDFcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC53ZWVrZGF5KTtcbiAgICAgICAgICBjYXNlICdjY2MnOlxuICAgICAgICAgICAgLy8gbGlrZSAnVHVlcydcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcoeyB3ZWVrZGF5OiAnc2hvcnQnIH0sICd3ZWVrZGF5Jyk7XG4gICAgICAgICAgY2FzZSAnY2NjYyc6XG4gICAgICAgICAgICAvLyBsaWtlICdUdWVzZGF5J1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZyh7IHdlZWtkYXk6ICdsb25nJyB9LCAnd2Vla2RheScpO1xuICAgICAgICAgIGNhc2UgJ2NjY2NjJzpcbiAgICAgICAgICAgIC8vIGxpa2UgJ1QnXG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nKHsgd2Vla2RheTogJ25hcnJvdycgfSwgJ3dlZWtkYXknKTtcbiAgICAgICAgICAvLyB3ZWVrZGF5cyAtIHN0YW5kYWxvbmVcbiAgICAgICAgICBjYXNlICdFJzpcbiAgICAgICAgICAgIC8vIGxpa2UgMVxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LndlZWtkYXkpO1xuICAgICAgICAgIGNhc2UgJ0VFRSc6XG4gICAgICAgICAgICAvLyBsaWtlICdUdWVzJ1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZyh7IHdlZWtkYXk6ICdzaG9ydCcsIG1vbnRoOiAnbG9uZycsIGRheTogJ251bWVyaWMnIH0sICd3ZWVrZGF5Jyk7XG4gICAgICAgICAgY2FzZSAnRUVFRSc6XG4gICAgICAgICAgICAvLyBsaWtlICdUdWVzZGF5J1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZyh7IHdlZWtkYXk6ICdsb25nJywgbW9udGg6ICdsb25nJywgZGF5OiAnbnVtZXJpYycgfSwgJ3dlZWtkYXknKTtcbiAgICAgICAgICBjYXNlICdFRUVFRSc6XG4gICAgICAgICAgICAvLyBsaWtlICdUJ1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZyh7IHdlZWtkYXk6ICduYXJyb3cnLCBtb250aDogJ2xvbmcnLCBkYXk6ICdudW1lcmljJyB9LCAnd2Vla2RheScpO1xuICAgICAgICAgIC8vIG1vbnRocyAtIGZvcm1hdFxuICAgICAgICAgIGNhc2UgJ0wnOlxuICAgICAgICAgICAgLy8gbGlrZSAxXG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nKHsgbW9udGg6ICdudW1lcmljJywgZGF5OiAnbnVtZXJpYycgfSwgJ21vbnRoJyk7XG4gICAgICAgICAgY2FzZSAnTEwnOlxuICAgICAgICAgICAgLy8gbGlrZSAwMSwgZG9lc24ndCBzZWVtIHRvIHdvcmtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcoeyBtb250aDogJzItZGlnaXQnLCBkYXk6ICdudW1lcmljJyB9LCAnbW9udGgnKTtcbiAgICAgICAgICBjYXNlICdMTEwnOlxuICAgICAgICAgICAgLy8gbGlrZSBKYW5cbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcoeyBtb250aDogJ3Nob3J0JywgZGF5OiAnbnVtZXJpYycgfSwgJ21vbnRoJyk7XG4gICAgICAgICAgY2FzZSAnTExMTCc6XG4gICAgICAgICAgICAvLyBsaWtlIEphbnVhcnlcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmcoeyBtb250aDogJ2xvbmcnIH0sICdtb250aCcpO1xuICAgICAgICAgIGNhc2UgJ0xMTExMJzpcbiAgICAgICAgICAgIC8vIGxpa2UgSlxuICAgICAgICAgICAgcmV0dXJuIHN0cmluZyh7IG1vbnRoOiAnbmFycm93JyB9LCAnbW9udGgnKTtcbiAgICAgICAgICAvLyBtb250aHMgLSBzdGFuZGFsb25lXG4gICAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgICAvLyBsaWtlIDFcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXRDYWwgPyBzdHJpbmcoeyBtb250aDogJ251bWVyaWMnIH0sICdtb250aCcpIDogdGhpcy5udW0oZHQubW9udGgpO1xuICAgICAgICAgIGNhc2UgJ01NJzpcbiAgICAgICAgICAgIC8vIGxpa2UgMDFcbiAgICAgICAgICAgIHJldHVybiBvdXRwdXRDYWwgPyBzdHJpbmcoeyBtb250aDogJzItZGlnaXQnIH0sICdtb250aCcpIDogdGhpcy5udW0oZHQubW9udGgsIDIpO1xuICAgICAgICAgIGNhc2UgJ01NTSc6XG4gICAgICAgICAgICAvLyBsaWtlIEphblxuICAgICAgICAgICAgcmV0dXJuIHN0cmluZyh7IG1vbnRoOiAnc2hvcnQnLCBkYXk6ICdudW1lcmljJyB9LCAnbW9udGgnKTtcbiAgICAgICAgICBjYXNlICdNTU1NJzpcbiAgICAgICAgICAgIC8vIGxpa2UgSmFudWFyeVxuICAgICAgICAgICAgcmV0dXJuIHN0cmluZyh7IG1vbnRoOiAnbG9uZycsIGRheTogJ251bWVyaWMnIH0sICdtb250aCcpO1xuICAgICAgICAgIGNhc2UgJ01NTU1NJzpcbiAgICAgICAgICAgIC8vIGxpa2UgSlxuICAgICAgICAgICAgcmV0dXJuIHN0cmluZyh7IG1vbnRoOiAnbmFycm93JyB9LCAnbW9udGgnKTtcbiAgICAgICAgICAvLyB5ZWFyc1xuICAgICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgICAgLy8gbGlrZSAyMDE0XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0Q2FsID8gc3RyaW5nKHsgeWVhcjogJ251bWVyaWMnIH0sICd5ZWFyJykgOiB0aGlzLm51bShkdC55ZWFyKTtcbiAgICAgICAgICBjYXNlICd5eSc6XG4gICAgICAgICAgICAvLyBsaWtlIDE0XG4gICAgICAgICAgICByZXR1cm4gb3V0cHV0Q2FsXG4gICAgICAgICAgICAgID8gc3RyaW5nKHsgeWVhcjogJzItZGlnaXQnIH0sICd5ZWFyJylcbiAgICAgICAgICAgICAgOiB0aGlzLm51bShkdC55ZWFyLnRvU3RyaW5nKCkuc2xpY2UoLTIpLCAyKTtcbiAgICAgICAgICBjYXNlICd5eXl5JzpcbiAgICAgICAgICAgIC8vIGxpa2UgMDAxMlxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dENhbCA/IHN0cmluZyh7IHllYXI6ICdudW1lcmljJyB9LCAneWVhcicpIDogdGhpcy5udW0oZHQueWVhciwgNCk7XG4gICAgICAgICAgLy8gZXJhc1xuICAgICAgICAgIGNhc2UgJ0cnOlxuICAgICAgICAgICAgLy8gbGlrZSBBRFxuICAgICAgICAgICAgcmV0dXJuIHN0cmluZyh7IGVyYTogJ3Nob3J0JyB9LCAnZXJhJyk7XG4gICAgICAgICAgY2FzZSAnR0cnOlxuICAgICAgICAgICAgLy8gbGlrZSBBbm5vIERvbWluaVxuICAgICAgICAgICAgcmV0dXJuIHN0cmluZyh7IGVyYTogJ2xvbmcnIH0sICdlcmEnKTtcbiAgICAgICAgICBjYXNlICdHR0dHRyc6XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5nKHsgZXJhOiAnbmFycm93JyB9LCAnZXJhJyk7XG4gICAgICAgICAgY2FzZSAna2snOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LndlZWtZZWFyLnRvU3RyaW5nKCkuc2xpY2UoLTIpLCAyKTtcbiAgICAgICAgICBjYXNlICdra2trJzpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm51bShkdC53ZWVrWWVhciwgNCk7XG4gICAgICAgICAgY2FzZSAnVyc6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQud2Vla051bWJlcik7XG4gICAgICAgICAgY2FzZSAnV1cnOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0LndlZWtOdW1iZXIsIDIpO1xuICAgICAgICAgIGNhc2UgJ28nOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubnVtKGR0Lm9yZGluYWwpO1xuICAgICAgICAgIGNhc2UgJ29vbyc6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5udW0oZHQub3JkaW5hbCwgMyk7XG4gICAgICAgICAgLy8gbWFjcm9zXG4gICAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXREYXRlVGltZShkdCwgRGF0ZVRpbWUuREFURV9TSE9SVCk7XG4gICAgICAgICAgY2FzZSAnREQnOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0RGF0ZVRpbWUoZHQsIERhdGVUaW1lLkRBVEVfTUVEKTtcbiAgICAgICAgICBjYXNlICdEREQnOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0RGF0ZVRpbWUoZHQsIERhdGVUaW1lLkRBVEVfRlVMTCk7XG4gICAgICAgICAgY2FzZSAnRERERCc6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXREYXRlVGltZShkdCwgRGF0ZVRpbWUuREFURV9IVUdFKTtcbiAgICAgICAgICBjYXNlICd0JzpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdERhdGVUaW1lKGR0LCBEYXRlVGltZS5USU1FX1NJTVBMRSk7XG4gICAgICAgICAgY2FzZSAndHQnOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0RGF0ZVRpbWUoZHQsIERhdGVUaW1lLlRJTUVfV0lUSF9TRUNPTkRTKTtcbiAgICAgICAgICBjYXNlICd0dHQnOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0RGF0ZVRpbWUoZHQsIERhdGVUaW1lLlRJTUVfV0lUSF9TSE9SVF9PRkZTRVQpO1xuICAgICAgICAgIGNhc2UgJ3R0dHQnOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0RGF0ZVRpbWUoZHQsIERhdGVUaW1lLlRJTUVfV0lUSF9MT05HX09GRlNFVCk7XG4gICAgICAgICAgY2FzZSAnVCc6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXREYXRlVGltZShkdCwgRGF0ZVRpbWUuVElNRV8yNF9TSU1QTEUpO1xuICAgICAgICAgIGNhc2UgJ1RUJzpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdERhdGVUaW1lKGR0LCBEYXRlVGltZS5USU1FXzI0X1dJVEhfU0VDT05EUyk7XG4gICAgICAgICAgY2FzZSAnVFRUJzpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdERhdGVUaW1lKGR0LCBEYXRlVGltZS5USU1FXzI0X1dJVEhfU0hPUlRfT0ZGU0VUKTtcbiAgICAgICAgICBjYXNlICdUVFRUJzpcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvcm1hdERhdGVUaW1lKGR0LCBEYXRlVGltZS5USU1FXzI0X1dJVEhfTE9OR19PRkZTRVQpO1xuICAgICAgICAgIGNhc2UgJ2YnOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0RGF0ZVRpbWUoZHQsIERhdGVUaW1lLkRBVEVUSU1FX1NIT1JUKTtcbiAgICAgICAgICBjYXNlICdmZic6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXREYXRlVGltZShkdCwgRGF0ZVRpbWUuREFURVRJTUVfTUVEKTtcbiAgICAgICAgICBjYXNlICdmZmYnOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0RGF0ZVRpbWUoZHQsIERhdGVUaW1lLkRBVEVUSU1FX0ZVTEwpO1xuICAgICAgICAgIGNhc2UgJ2ZmZmYnOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0RGF0ZVRpbWUoZHQsIERhdGVUaW1lLkRBVEVUSU1FX0hVR0UpO1xuICAgICAgICAgIGNhc2UgJ0YnOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0RGF0ZVRpbWUoZHQsIERhdGVUaW1lLkRBVEVUSU1FX1NIT1JUX1dJVEhfU0VDT05EUyk7XG4gICAgICAgICAgY2FzZSAnRkYnOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0RGF0ZVRpbWUoZHQsIERhdGVUaW1lLkRBVEVUSU1FX01FRF9XSVRIX1NFQ09ORFMpO1xuICAgICAgICAgIGNhc2UgJ0ZGRic6XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mb3JtYXREYXRlVGltZShkdCwgRGF0ZVRpbWUuREFURVRJTUVfRlVMTF9XSVRIX1NFQ09ORFMpO1xuICAgICAgICAgIGNhc2UgJ0ZGRkYnOlxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0RGF0ZVRpbWUoZHQsIERhdGVUaW1lLkRBVEVUSU1FX0hVR0VfV0lUSF9TRUNPTkRTKTtcblxuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gdG9rZW47XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICByZXR1cm4gc3RyaW5naWZ5VG9rZW5zKEZvcm1hdHRlci5wYXJzZUZvcm1hdChmbXQpLCB0b2tlblRvU3RyaW5nKTtcbiAgfVxuXG4gIGZvcm1hdER1cmF0aW9uKCkge31cblxuICBmb3JtYXREdXJhdGlvbkZyb21TdHJpbmcoZHVyLCBmbXQpIHtcbiAgICBjb25zdCB0b2tlblRvRmllbGQgPSB0b2tlbiA9PiB7XG4gICAgICAgIHN3aXRjaCAodG9rZW5bMF0pIHtcbiAgICAgICAgICBjYXNlICdTJzpcbiAgICAgICAgICAgIHJldHVybiAnbWlsbGlzZWNvbmQnO1xuICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgcmV0dXJuICdzZWNvbmQnO1xuICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgcmV0dXJuICdtaW51dGUnO1xuICAgICAgICAgIGNhc2UgJ2gnOlxuICAgICAgICAgICAgcmV0dXJuICdob3VyJztcbiAgICAgICAgICBjYXNlICdkJzpcbiAgICAgICAgICAgIHJldHVybiAnZGF5JztcbiAgICAgICAgICBjYXNlICdNJzpcbiAgICAgICAgICAgIHJldHVybiAnbW9udGgnO1xuICAgICAgICAgIGNhc2UgJ3knOlxuICAgICAgICAgICAgcmV0dXJuICd5ZWFyJztcbiAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0b2tlblRvU3RyaW5nID0gbGlsZHVyID0+IHRva2VuID0+IHtcbiAgICAgICAgY29uc3QgbWFwcGVkID0gdG9rZW5Ub0ZpZWxkKHRva2VuKTtcbiAgICAgICAgaWYgKG1hcHBlZCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLm51bShsaWxkdXIuZ2V0KG1hcHBlZCksIHRva2VuLmxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIHRva2VuO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdG9rZW5zID0gRm9ybWF0dGVyLnBhcnNlRm9ybWF0KGZtdCksXG4gICAgICByZWFsVG9rZW5zID0gdG9rZW5zLnJlZHVjZShcbiAgICAgICAgKGZvdW5kLCB7IGxpdGVyYWwsIHZhbCB9KSA9PiAobGl0ZXJhbCA/IGZvdW5kIDogZm91bmQuY29uY2F0KHZhbCkpLFxuICAgICAgICBbXVxuICAgICAgKSxcbiAgICAgIGNvbGxhcHNlZCA9IGR1ci5zaGlmdFRvKC4uLnJlYWxUb2tlbnMubWFwKHRva2VuVG9GaWVsZCkuZmlsdGVyKHQgPT4gdCkpO1xuICAgIHJldHVybiBzdHJpbmdpZnlUb2tlbnModG9rZW5zLCB0b2tlblRvU3RyaW5nKGNvbGxhcHNlZCkpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi91dGlsJztcbmltcG9ydCB7IEVuZ2xpc2ggfSBmcm9tICcuL2VuZ2xpc2gnO1xuaW1wb3J0IHsgRml4ZWRPZmZzZXRab25lIH0gZnJvbSAnLi4vem9uZXMvZml4ZWRPZmZzZXRab25lJztcblxuZnVuY3Rpb24gY29tYmluZVJlZ2V4ZXMoLi4ucmVnZXhlcykge1xuICBjb25zdCBmdWxsID0gcmVnZXhlcy5yZWR1Y2UoKGYsIHIpID0+IGYgKyByLnNvdXJjZSwgJycpO1xuICByZXR1cm4gUmVnRXhwKGZ1bGwpO1xufVxuXG5mdW5jdGlvbiBjb21iaW5lRXh0cmFjdG9ycyguLi5leHRyYWN0b3JzKSB7XG4gIHJldHVybiBtID0+XG4gICAgZXh0cmFjdG9yc1xuICAgICAgLnJlZHVjZShcbiAgICAgICAgKFttZXJnZWRWYWxzLCBtZXJnZWRab25lLCBjdXJzb3JdLCBleCkgPT4ge1xuICAgICAgICAgIGNvbnN0IFt2YWwsIHpvbmUsIG5leHRdID0gZXgobSwgY3Vyc29yKTtcbiAgICAgICAgICByZXR1cm4gW09iamVjdC5hc3NpZ24obWVyZ2VkVmFscywgdmFsKSwgbWVyZ2VkWm9uZSB8fCB6b25lLCBuZXh0XTtcbiAgICAgICAgfSxcbiAgICAgICAgW3t9LCBudWxsLCAxXVxuICAgICAgKVxuICAgICAgLnNsaWNlKDAsIDIpO1xufVxuXG5mdW5jdGlvbiBwYXJzZShzLCAuLi5wYXR0ZXJucykge1xuICBpZiAocyA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtudWxsLCBudWxsXTtcbiAgfVxuICBmb3IgKGNvbnN0IFtyZWdleCwgZXh0cmFjdG9yXSBvZiBwYXR0ZXJucykge1xuICAgIGNvbnN0IG0gPSByZWdleC5leGVjKHMpO1xuICAgIGlmIChtKSB7XG4gICAgICByZXR1cm4gZXh0cmFjdG9yKG0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gW251bGwsIG51bGxdO1xufVxuXG5mdW5jdGlvbiBzaW1wbGVQYXJzZSguLi5rZXlzKSB7XG4gIHJldHVybiAobWF0Y2gsIGN1cnNvcikgPT4ge1xuICAgIGNvbnN0IHJldCA9IHt9O1xuICAgIGxldCBpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJldFtrZXlzW2ldXSA9IHBhcnNlSW50KG1hdGNoW2N1cnNvciArIGldKTtcbiAgICB9XG4gICAgcmV0dXJuIFtyZXQsIG51bGwsIGN1cnNvciArIGldO1xuICB9O1xufVxuXG4vLyBJU08gcGFyc2luZ1xuY29uc3QgaXNvVGltZVJlZ2V4ID0gLyg/OlQoXFxkXFxkKSg/Ojo/KFxcZFxcZCkoPzo6PyhcXGRcXGQpKD86Wy4sXShcXGRcXGRcXGQpKT8pPyk/KD86KFopfChbKy1dXFxkXFxkKSg/Ojo/KFxcZFxcZCkpPyk/KT8kLyxcbiAgZXh0cmFjdElTT1ltZCA9IHNpbXBsZVBhcnNlKCd5ZWFyJywgJ21vbnRoJywgJ2RheScpLFxuICBpc29ZbWRSZWdleCA9IC9eKFsrLV0/XFxkezZ9fFxcZHs0fSktPyhcXGRcXGQpLT8oXFxkXFxkKS8sXG4gIGV4dHJhY3RJU09XZWVrRGF0YSA9IHNpbXBsZVBhcnNlKCd3ZWVrWWVhcicsICd3ZWVrTnVtYmVyJywgJ3dlZWtEYXknKSxcbiAgaXNvV2Vla1JlZ2V4ID0gL14oXFxkezR9KS0/VyhcXGRcXGQpLT8oXFxkKS8sXG4gIGlzb09yZGluYWxSZWdleCA9IC9eKFxcZHs0fSktPyhcXGR7M30pLyxcbiAgZXh0cmFjdElTT09yZGluYWxEYXRhID0gc2ltcGxlUGFyc2UoJ3llYXInLCAnb3JkaW5hbCcpO1xuXG5mdW5jdGlvbiBleHRyYWN0SVNPVGltZShtYXRjaCwgY3Vyc29yKSB7XG4gIGNvbnN0IGxvY2FsID0gIW1hdGNoW2N1cnNvciArIDRdICYmICFtYXRjaFtjdXJzb3IgKyA1XSxcbiAgICBmdWxsT2Zmc2V0ID0gVXRpbC5zaWduZWRPZmZzZXQobWF0Y2hbY3Vyc29yICsgNV0sIG1hdGNoW2N1cnNvciArIDZdKSxcbiAgICBpdGVtID0ge1xuICAgICAgaG91cjogcGFyc2VJbnQobWF0Y2hbY3Vyc29yXSkgfHwgMCxcbiAgICAgIG1pbnV0ZTogcGFyc2VJbnQobWF0Y2hbY3Vyc29yICsgMV0pIHx8IDAsXG4gICAgICBzZWNvbmQ6IHBhcnNlSW50KG1hdGNoW2N1cnNvciArIDJdKSB8fCAwLFxuICAgICAgbWlsbGlzZWNvbmQ6IHBhcnNlSW50KG1hdGNoW2N1cnNvciArIDNdKSB8fCAwXG4gICAgfSxcbiAgICB6b25lID0gbG9jYWwgPyBudWxsIDogbmV3IEZpeGVkT2Zmc2V0Wm9uZShmdWxsT2Zmc2V0KTtcblxuICByZXR1cm4gW2l0ZW0sIHpvbmUsIGN1cnNvciArIDddO1xufVxuXG4vLyBJU08gZHVyYXRpb24gcGFyc2luZ1xuXG5jb25zdCBpc29EdXJhdGlvbiA9IC9eUCg/OihcXGQrKVkpPyg/OihcXGQrKU0pPyg/OihcXGQrKUQpPyg/OlQoPzooXFxkKylIKT8oPzooXFxkKylNKT8oPzooXFxkKylTKT8pPyQvO1xuXG5mdW5jdGlvbiBleHRyYWN0SVNPRHVyYXRpb24obWF0Y2gpIHtcbiAgY29uc3QgWywgeWVhclN0ciwgbW9udGhTdHIsIGRheVN0ciwgaG91clN0ciwgbWludXRlU3RyLCBzZWNvbmRTdHJdID0gbWF0Y2g7XG5cbiAgcmV0dXJuIHtcbiAgICB5ZWFyOiBwYXJzZUludCh5ZWFyU3RyKSxcbiAgICBtb250aDogcGFyc2VJbnQobW9udGhTdHIpLFxuICAgIGRheTogcGFyc2VJbnQoZGF5U3RyKSxcbiAgICBob3VyOiBwYXJzZUludChob3VyU3RyKSxcbiAgICBtaW51dGU6IHBhcnNlSW50KG1pbnV0ZVN0ciksXG4gICAgc2Vjb25kOiBwYXJzZUludChzZWNvbmRTdHIpXG4gIH07XG59XG5cbi8vIFRoZXNlIGFyZSBhIGxpdHRsZSBicmFpbmRlYWQuIEVEVCAqc2hvdWxkKiB0ZWxsIHVzIHRoYXQgd2UncmUgaW4sIHNheSwgQW1lcmljYS9OZXdfWW9ya1xuLy8gYW5kIG5vdCBqdXN0IHRoYXQgd2UncmUgaW4gLTI0MCAqcmlnaHQgbm93Ki4gQnV0IHNpbmNlIEkgZG9uJ3QgdGhpbmsgdGhlc2UgYXJlIHVzZWQgdGhhdCBvZnRlblxuLy8gSSdtIGp1c3QgZ29pbmcgdG8gaWdub3JlIHRoYXRcbmNvbnN0IG9ic09mZnNldHMgPSB7XG4gIEdNVDogMCxcbiAgRURUOiAtNCAqIDYwLFxuICBFU1Q6IC01ICogNjAsXG4gIENEVDogLTUgKiA2MCxcbiAgQ1NUOiAtNiAqIDYwLFxuICBNRFQ6IC02ICogNjAsXG4gIE1TVDogLTcgKiA2MCxcbiAgUERUOiAtNyAqIDYwLFxuICBQU1Q6IC04ICogNjBcbn07XG5cbmZ1bmN0aW9uIGZyb21TdHJpbmdzKHdlZWtkYXlTdHIsIHllYXJTdHIsIG1vbnRoU3RyLCBkYXlTdHIsIGhvdXJTdHIsIG1pbnV0ZVN0ciwgc2Vjb25kU3RyKSB7XG4gIGNvbnN0IHJlc3VsdCA9IHtcbiAgICB5ZWFyOiB5ZWFyU3RyLmxlbmd0aCA9PT0gMiA/IFV0aWwudW50cnVjYXRlWWVhcihwYXJzZUludCh5ZWFyU3RyKSkgOiBwYXJzZUludCh5ZWFyU3RyKSxcbiAgICBtb250aDogRW5nbGlzaC5tb250aHNTaG9ydC5pbmRleE9mKG1vbnRoU3RyKSArIDEsXG4gICAgZGF5OiBwYXJzZUludChkYXlTdHIpLFxuICAgIGhvdXI6IHBhcnNlSW50KGhvdXJTdHIpLFxuICAgIG1pbnV0ZTogcGFyc2VJbnQobWludXRlU3RyKVxuICB9O1xuXG4gIGlmIChzZWNvbmRTdHIpIHJlc3VsdC5zZWNvbmQgPSBwYXJzZUludChzZWNvbmRTdHIpO1xuICBpZiAod2Vla2RheVN0cikge1xuICAgIHJlc3VsdC53ZWVrZGF5ID1cbiAgICAgIHdlZWtkYXlTdHIubGVuZ3RoID4gM1xuICAgICAgICA/IEVuZ2xpc2gud2Vla2RheXNMb25nLmluZGV4T2Yod2Vla2RheVN0cikgKyAxXG4gICAgICAgIDogRW5nbGlzaC53ZWVrZGF5c1Nob3J0LmluZGV4T2Yod2Vla2RheVN0cikgKyAxO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLy8gUkZDIDI4MjIvNTMyMlxuY29uc3QgcmZjMjgyMiA9IC9eKD86KE1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1biksXFxzKT8oXFxkezEsMn0pXFxzKEphbnxGZWJ8TWFyfEFwcnxNYXl8SnVufEp1bHxBdWd8U2VwfE9jdHxOb3Z8RGVjKVxccyhcXGR7Miw0fSlcXHMoXFxkXFxkKTooXFxkXFxkKSg/OjooXFxkXFxkKSk/XFxzKD86KFVUfEdNVHxbRUNNUF1bU0RdVCl8KFtael0pfCg/OihbKy1dXFxkXFxkKShcXGRcXGQpKSkkLztcblxuZnVuY3Rpb24gZXh0cmFjdFJGQzI4MjIobWF0Y2gpIHtcbiAgY29uc3QgW1xuICAgICAgLFxuICAgICAgd2Vla2RheVN0cixcbiAgICAgIGRheVN0cixcbiAgICAgIG1vbnRoU3RyLFxuICAgICAgeWVhclN0cixcbiAgICAgIGhvdXJTdHIsXG4gICAgICBtaW51dGVTdHIsXG4gICAgICBzZWNvbmRTdHIsXG4gICAgICBvYnNPZmZzZXQsXG4gICAgICBtaWxPZmZzZXQsXG4gICAgICBvZmZIb3VyU3RyLFxuICAgICAgb2ZmTWludXRlU3RyXG4gICAgXSA9IG1hdGNoLFxuICAgIHJlc3VsdCA9IGZyb21TdHJpbmdzKHdlZWtkYXlTdHIsIHllYXJTdHIsIG1vbnRoU3RyLCBkYXlTdHIsIGhvdXJTdHIsIG1pbnV0ZVN0ciwgc2Vjb25kU3RyKTtcblxuICBsZXQgb2Zmc2V0O1xuICBpZiAob2JzT2Zmc2V0KSB7XG4gICAgb2Zmc2V0ID0gb2JzT2Zmc2V0c1tvYnNPZmZzZXRdO1xuICB9IGVsc2UgaWYgKG1pbE9mZnNldCkge1xuICAgIG9mZnNldCA9IDA7XG4gIH0gZWxzZSB7XG4gICAgb2Zmc2V0ID0gVXRpbC5zaWduZWRPZmZzZXQob2ZmSG91clN0ciwgb2ZmTWludXRlU3RyKTtcbiAgfVxuXG4gIHJldHVybiBbcmVzdWx0LCBuZXcgRml4ZWRPZmZzZXRab25lKG9mZnNldCldO1xufVxuXG5mdW5jdGlvbiBwcmVwcm9jZXNzUkZDMjgyMihzKSB7XG4gIC8vIFJlbW92ZSBjb21tZW50cyBhbmQgZm9sZGluZyB3aGl0ZXNwYWNlIGFuZCByZXBsYWNlIG11bHRpcGxlLXNwYWNlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG4gIHJldHVybiBzXG4gICAgLnJlcGxhY2UoL1xcKFteKV0qXFwpfFtcXG5cXHRdL2csICcgJylcbiAgICAucmVwbGFjZSgvKFxcc1xccyspL2csICcgJylcbiAgICAudHJpbSgpO1xufVxuXG4vLyBodHRwIGRhdGVcblxuY29uc3QgcmZjMTEyMyA9IC9eKE1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1biksIChcXGRcXGQpIChKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYykgKFxcZHs0fSkgKFxcZFxcZCk6KFxcZFxcZCk6KFxcZFxcZCkgR01UJC8sXG4gIHJmYzg1MCA9IC9eKE1vbmRheXxUdWVzZGF5fFdlZHNkYXl8VGh1cnNkYXl8RnJpZGF5fFNhdHVyZGF5fFN1bmRheSksIChcXGRcXGQpLShKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYyktKFxcZFxcZCkgKFxcZFxcZCk6KFxcZFxcZCk6KFxcZFxcZCkgR01UJC8sXG4gIGFzY2lpID0gL14oTW9ufFR1ZXxXZWR8VGh1fEZyaXxTYXR8U3VuKSAoSmFufEZlYnxNYXJ8QXByfE1heXxKdW58SnVsfEF1Z3xTZXB8T2N0fE5vdnxEZWMpICggXFxkfFxcZFxcZCkgKFxcZFxcZCk6KFxcZFxcZCk6KFxcZFxcZCkgKFxcZHs0fSkkLztcblxuZnVuY3Rpb24gZXh0cmFjdFJGQzExMjNPcjg1MChtYXRjaCkge1xuICBjb25zdCBbLCB3ZWVrZGF5U3RyLCBkYXlTdHIsIG1vbnRoU3RyLCB5ZWFyU3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0cl0gPSBtYXRjaCxcbiAgICByZXN1bHQgPSBmcm9tU3RyaW5ncyh3ZWVrZGF5U3RyLCB5ZWFyU3RyLCBtb250aFN0ciwgZGF5U3RyLCBob3VyU3RyLCBtaW51dGVTdHIsIHNlY29uZFN0cik7XG4gIHJldHVybiBbcmVzdWx0LCBGaXhlZE9mZnNldFpvbmUudXRjSW5zdGFuY2VdO1xufVxuXG5mdW5jdGlvbiBleHRyYWN0QVNDSUkobWF0Y2gpIHtcbiAgY29uc3QgWywgd2Vla2RheVN0ciwgbW9udGhTdHIsIGRheVN0ciwgaG91clN0ciwgbWludXRlU3RyLCBzZWNvbmRTdHIsIHllYXJTdHJdID0gbWF0Y2gsXG4gICAgcmVzdWx0ID0gZnJvbVN0cmluZ3Mod2Vla2RheVN0ciwgeWVhclN0ciwgbW9udGhTdHIsIGRheVN0ciwgaG91clN0ciwgbWludXRlU3RyLCBzZWNvbmRTdHIpO1xuICByZXR1cm4gW3Jlc3VsdCwgRml4ZWRPZmZzZXRab25lLnV0Y0luc3RhbmNlXTtcbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmV4cG9ydCBjbGFzcyBSZWdleFBhcnNlciB7XG4gIHN0YXRpYyBwYXJzZUlTT0RhdGUocykge1xuICAgIHJldHVybiBwYXJzZShcbiAgICAgIHMsXG4gICAgICBbY29tYmluZVJlZ2V4ZXMoaXNvWW1kUmVnZXgsIGlzb1RpbWVSZWdleCksIGNvbWJpbmVFeHRyYWN0b3JzKGV4dHJhY3RJU09ZbWQsIGV4dHJhY3RJU09UaW1lKV0sXG4gICAgICBbXG4gICAgICAgIGNvbWJpbmVSZWdleGVzKGlzb1dlZWtSZWdleCwgaXNvVGltZVJlZ2V4KSxcbiAgICAgICAgY29tYmluZUV4dHJhY3RvcnMoZXh0cmFjdElTT1dlZWtEYXRhLCBleHRyYWN0SVNPVGltZSlcbiAgICAgIF0sXG4gICAgICBbXG4gICAgICAgIGNvbWJpbmVSZWdleGVzKGlzb09yZGluYWxSZWdleCwgaXNvVGltZVJlZ2V4KSxcbiAgICAgICAgY29tYmluZUV4dHJhY3RvcnMoZXh0cmFjdElTT09yZGluYWxEYXRhLCBleHRyYWN0SVNPVGltZSlcbiAgICAgIF1cbiAgICApO1xuICB9XG5cbiAgc3RhdGljIHBhcnNlUkZDMjgyMkRhdGUocykge1xuICAgIHJldHVybiBwYXJzZShwcmVwcm9jZXNzUkZDMjgyMihzKSwgW3JmYzI4MjIsIGV4dHJhY3RSRkMyODIyXSk7XG4gIH1cblxuICBzdGF0aWMgcGFyc2VIVFRQRGF0ZShzKSB7XG4gICAgcmV0dXJuIHBhcnNlKFxuICAgICAgcyxcbiAgICAgIFtyZmMxMTIzLCBleHRyYWN0UkZDMTEyM09yODUwXSxcbiAgICAgIFtyZmM4NTAsIGV4dHJhY3RSRkMxMTIzT3I4NTBdLFxuICAgICAgW2FzY2lpLCBleHRyYWN0QVNDSUldXG4gICAgKTtcbiAgfVxuXG4gIHN0YXRpYyBwYXJzZUlTT0R1cmF0aW9uKHMpIHtcbiAgICByZXR1cm4gcGFyc2UocywgW2lzb0R1cmF0aW9uLCBleHRyYWN0SVNPRHVyYXRpb25dKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgVXRpbCB9IGZyb20gJy4vaW1wbC91dGlsJztcbmltcG9ydCB7IExvY2FsZSB9IGZyb20gJy4vaW1wbC9sb2NhbGUnO1xuaW1wb3J0IHsgRm9ybWF0dGVyIH0gZnJvbSAnLi9pbXBsL2Zvcm1hdHRlcic7XG5pbXBvcnQgeyBSZWdleFBhcnNlciB9IGZyb20gJy4vaW1wbC9yZWdleFBhcnNlcic7XG5pbXBvcnQgeyBTZXR0aW5ncyB9IGZyb20gJy4vc2V0dGluZ3MnO1xuaW1wb3J0IHsgSW52YWxpZEFyZ3VtZW50RXJyb3IsIEludmFsaWREdXJhdGlvbkVycm9yLCBJbnZhbGlkVW5pdEVycm9yIH0gZnJvbSAnLi9lcnJvcnMnO1xuXG5jb25zdCBJTlZBTElEID0gJ0ludmFsaWQgRHVyYXRpb24nO1xuXG5jb25zdCBsb3dPcmRlck1hdHJpeCA9IHtcbiAgICB3ZWVrczoge1xuICAgICAgZGF5czogNyxcbiAgICAgIGhvdXJzOiA3ICogMjQsXG4gICAgICBtaW51dGVzOiA3ICogMjQgKiA2MCxcbiAgICAgIHNlY29uZHM6IDcgKiAyNCAqIDYwICogNjAsXG4gICAgICBtaWxsaXNlY29uZHM6IDcgKiAyNCAqIDYwICogNjAgKiAxMDAwXG4gICAgfSxcbiAgICBkYXlzOiB7XG4gICAgICBob3VyczogMjQsXG4gICAgICBtaW51dGVzOiAyNCAqIDYwLFxuICAgICAgc2Vjb25kczogMjQgKiA2MCAqIDYwLFxuICAgICAgbWlsbGlzZWNvbmRzOiAyNCAqIDYwICogNjAgKiAxMDAwXG4gICAgfSxcbiAgICBob3VyczogeyBtaW51dGVzOiA2MCwgc2Vjb25kczogNjAgKiA2MCwgbWlsbGlzZWNvbmRzOiA2MCAqIDYwICogMTAwMCB9LFxuICAgIG1pbnV0ZXM6IHsgc2Vjb25kczogNjAsIG1pbGxpc2Vjb25kczogNjAgKiAxMDAwIH0sXG4gICAgc2Vjb25kczogeyBtaWxsaXNlY29uZHM6IDEwMDAgfVxuICB9LFxuICBjYXN1YWxNYXRyaXggPSBPYmplY3QuYXNzaWduKFxuICAgIHtcbiAgICAgIHllYXJzOiB7XG4gICAgICAgIG1vbnRoczogMTIsXG4gICAgICAgIHdlZWtzOiA1MixcbiAgICAgICAgZGF5czogMzY1LFxuICAgICAgICBob3VyczogMzY1ICogMjQsXG4gICAgICAgIG1pbnV0ZXM6IDM2NSAqIDI0ICogNjAsXG4gICAgICAgIHNlY29uZHM6IDM2NSAqIDI0ICogNjAgKiA2MCxcbiAgICAgICAgbWlsbGlzZWNvbmRzOiAzNjUgKiAyNCAqIDYwICogNjAgKiAxMDAwXG4gICAgICB9LFxuICAgICAgbW9udGhzOiB7XG4gICAgICAgIHdlZWtzOiA0LFxuICAgICAgICBkYXlzOiAzMCxcbiAgICAgICAgaG91cnM6IDMwICogMjQsXG4gICAgICAgIG1pbnV0ZXM6IDMwICogMjQgKiA2MCxcbiAgICAgICAgc2Vjb25kczogMzAgKiAyNCAqIDYwICogNjAsXG4gICAgICAgIG1pbGxpc2Vjb25kczogMzAgKiAyNCAqIDYwICogNjAgKiAxMDAwXG4gICAgICB9XG4gICAgfSxcbiAgICBsb3dPcmRlck1hdHJpeFxuICApLFxuICBkYXlzSW5ZZWFyQWNjdXJhdGUgPSAxNDYwOTcuMCAvIDQwMCxcbiAgZGF5c0luTW9udGhBY2N1cmF0ZSA9IDE0NjA5Ny4wIC8gNDgwMCxcbiAgYWNjdXJhdGVNYXRyaXggPSBPYmplY3QuYXNzaWduKFxuICAgIHtcbiAgICAgIHllYXJzOiB7XG4gICAgICAgIG1vbnRoczogMTIsXG4gICAgICAgIHdlZWtzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgLyA3LFxuICAgICAgICBkYXlzOiBkYXlzSW5ZZWFyQWNjdXJhdGUsXG4gICAgICAgIGhvdXJzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCxcbiAgICAgICAgbWludXRlczogZGF5c0luWWVhckFjY3VyYXRlICogMjQgKiA2MCxcbiAgICAgICAgc2Vjb25kczogZGF5c0luWWVhckFjY3VyYXRlICogMjQgKiA2MCAqIDYwLFxuICAgICAgICBtaWxsaXNlY29uZHM6IGRheXNJblllYXJBY2N1cmF0ZSAqIDI0ICogNjAgKiA2MCAqIDEwMDBcbiAgICAgIH0sXG4gICAgICBtb250aHM6IHtcbiAgICAgICAgd2Vla3M6IGRheXNJbk1vbnRoQWNjdXJhdGUgLyA3LFxuICAgICAgICBkYXlzOiBkYXlzSW5Nb250aEFjY3VyYXRlLFxuICAgICAgICBob3VyczogZGF5c0luWWVhckFjY3VyYXRlICogMjQsXG4gICAgICAgIG1pbnV0ZXM6IGRheXNJblllYXJBY2N1cmF0ZSAqIDI0ICogNjAsXG4gICAgICAgIHNlY29uZHM6IGRheXNJblllYXJBY2N1cmF0ZSAqIDI0ICogNjAgKiA2MCxcbiAgICAgICAgbWlsbGlzZWNvbmRzOiBkYXlzSW5ZZWFyQWNjdXJhdGUgKiAyNCAqIDYwICogNjAgKiAxMDAwXG4gICAgICB9XG4gICAgfSxcbiAgICBsb3dPcmRlck1hdHJpeFxuICApO1xuXG5jb25zdCBvcmRlcmVkVW5pdHMgPSBbXG4gICd5ZWFycycsXG4gICdtb250aHMnLFxuICAnd2Vla3MnLFxuICAnZGF5cycsXG4gICdob3VycycsXG4gICdtaW51dGVzJyxcbiAgJ3NlY29uZHMnLFxuICAnbWlsbGlzZWNvbmRzJ1xuXTtcblxuZnVuY3Rpb24gY2xvbmUoZHVyLCBhbHRzLCBjbGVhciA9IGZhbHNlKSB7XG4gIC8vIGRlZXAgbWVyZ2UgZm9yIHZhbHNcbiAgY29uc3QgY29uZiA9IHtcbiAgICB2YWx1ZXM6IGNsZWFyID8gYWx0cy52YWx1ZXMgOiBPYmplY3QuYXNzaWduKGR1ci52YWx1ZXMsIGFsdHMudmFsdWVzIHx8IHt9KSxcbiAgICBsb2M6IGR1ci5sb2MuY2xvbmUoYWx0cy5sb2MpLFxuICAgIGNvbnZlcnNpb25BY2N1cmFjeTogYWx0cy5jb252ZXJzaW9uQWNjdXJhY3kgfHwgZHVyLmNvbnZlcnNpb25BY2N1cmFjeVxuICB9O1xuICByZXR1cm4gbmV3IER1cmF0aW9uKGNvbmYpO1xufVxuXG5mdW5jdGlvbiBpc0hpZ2hPcmRlck5lZ2F0aXZlKG9iaikge1xuICAvLyBvbmx5IHJ1bGUgaXMgdGhhdCB0aGUgaGlnaGVzdC1vcmRlciBwYXJ0IG11c3QgYmUgbm9uLW5lZ2F0aXZlXG4gIGZvciAoY29uc3QgayBvZiBvcmRlcmVkVW5pdHMpIHtcbiAgICBpZiAob2JqW2tdKSByZXR1cm4gb2JqW2tdIDwgMDtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogQSBEdXJhdGlvbiBvYmplY3QgcmVwcmVzZW50cyBhIHBlcmlvZCBvZiB0aW1lLCBsaWtlIFwiMiBtb250aHNcIiBvciBcIjEgZGF5LCAxIGhvdXJcIi4gQ29uY2VwdHVhbGx5LCBpdCdzIGp1c3QgYSBtYXAgb2YgdW5pdHMgdG8gdGhlaXIgcXVhbnRpdGllcywgYWNjb21wYW5pZWQgYnkgc29tZSBhZGRpdGlvbmFsIGNvbmZpZ3VyYXRpb24gYW5kIG1ldGhvZHMgZm9yIGNyZWF0aW5nLCBwYXJzaW5nLCBpbnRlcnJvZ2F0aW5nLCB0cmFuc2Zvcm1pbmcsIGFuZCBmb3JtYXR0aW5nIHRoZW0uIFRoZXkgY2FuIGJlIHVzZWQgb24gdGhlaXIgb3duIG9yIGluIGNvbmp1bmN0aW9uIHdpdGggb3RoZXIgTHV4b24gdHlwZXM7IGZvciBleGFtcGxlLCB5b3UgY2FuIHVzZSB7QGxpbmsgRGF0ZVRpbWUucGx1c30gdG8gYWRkIGEgRHVyYXRpb24gb2JqZWN0IHRvIGEgRGF0ZVRpbWUsIHByb2R1Y2luZyBhbm90aGVyIERhdGVUaW1lLlxuICpcbiAqIEhlcmUgaXMgYSBicmllZiBvdmVydmlldyBvZiBjb21tb25seSB1c2VkIG1ldGhvZHMgYW5kIGdldHRlcnMgaW4gRHVyYXRpb246XG4gKlxuICogKiAqKkNyZWF0aW9uKiogVG8gY3JlYXRlIGEgRHVyYXRpb24sIHVzZSB7QGxpbmsgZnJvbU1pbGxpc2Vjb25kc30sIHtAbGluayBmcm9tT2JqZWN0fSwgb3Ige0BsaW5rIGZyb21JU099LlxuICogKiAqKlVuaXQgdmFsdWVzKiogU2VlIHRoZSB7QGxpbmsgeWVhcnN9LCB7QGxpbmsgbW9udGhzfSwge0BsaW5rIHdlZWtzfSwge0BsaW5rIGRheXN9LCB7QGxpbmsgaG91cnN9LCB7QGxpbmsgbWludXRlc30sIHtAbGluayBzZWNvbmRzfSwge0BsaW5rIG1pbGxpc2Vjb25kc30gYWNjZXNzb3JzLlxuICogKiAqKkNvbmZpZ3VyYXRpb24qKiBTZWUgIHtAbGluayBsb2NhbGV9IGFuZCB7QGxpbmsgbnVtYmVyaW5nU3lzdGVtfSBhY2Nlc3NvcnMuXG4gKiAqICoqVHJhbnNmb3JtYXRpb24qKiBUbyBjcmVhdGUgbmV3IER1cmF0aW9ucyBvdXQgb2Ygb2xkIG9uZXMgdXNlIHtAbGluayBwbHVzfSwge0BsaW5rIG1pbnVzfSwge0BsaW5rIG5vcm1hbGl6ZX0sIHtAbGluayBzZXR9LCB7QGxpbmsgcmVjb25maWd1cmV9LCB7QGxpbmsgc2hpZnRUb30sIGFuZCB7QGxpbmsgbmVnYXRlfS5cbiAqICogKipPdXRwdXQqKiBUbyBjb252ZXJ0IHRoZSBEdXJhdGlvbiBpbnRvIG90aGVyIHJlcHJlc2VudGF0aW9ucywgc2VlIHtAbGluayBhc30sIHtAbGluayB0b0lTT30sIHtAbGluayB0b0Zvcm1hdH0sIGFuZCB7QGxpbmsgdG9KU09OfVxuICpcbiAqIFRoZXJlJ3MgYXJlIG1vcmUgbWV0aG9kcyBkb2N1bWVudGVkIGJlbG93LiBJbiBhZGRpdGlvbiwgZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gc3VidGxlciB0b3BpY3MgbGlrZSBpbnRlcm5hdGlvbmFsaXphdGlvbiBhbmQgdmFsaWRpdHksIHNlZSB0aGUgZXh0ZXJuYWwgZG9jdW1lbnRhdGlvbi5cbiAqL1xuZXhwb3J0IGNsYXNzIER1cmF0aW9uIHtcbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICBjb25zdCBhY2N1cmF0ZSA9IGNvbmZpZy5jb252ZXJzaW9uQWNjdXJhY3kgPT09ICdsb25ndGVybScgfHwgZmFsc2U7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3ZhbHVlcycsIHtcbiAgICAgIHZhbHVlOiBjb25maWcudmFsdWVzLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbG9jJywge1xuICAgICAgdmFsdWU6IGNvbmZpZy5sb2MgfHwgTG9jYWxlLmNyZWF0ZSgpLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnY29udmVyc2lvbkFjY3VyYWN5Jywge1xuICAgICAgdmFsdWU6IGFjY3VyYXRlID8gJ2xvbmd0ZXJtJyA6ICdjYXN1YWwnLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnaW52YWxpZFJlYXNvbicsIHtcbiAgICAgIHZhbHVlOiBjb25maWcuaW52YWxpZFJlYXNvbiB8fCBudWxsLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ21hdHJpeCcsIHtcbiAgICAgIHZhbHVlOiBhY2N1cmF0ZSA/IGFjY3VyYXRlTWF0cml4IDogY2FzdWFsTWF0cml4LFxuICAgICAgZW51bWVyYWJsZTogZmFsc2VcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgRHVyYXRpb24gZnJvbSBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjb3VudCBvZiBtaWxsaXNlY29uZHNcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIGZvciBwYXJzaW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb2JqLmxvY2FsZT0nZW4tVVMnXSAtIHRoZSBsb2NhbGUgdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvYmoubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb2JqLmNvbnZlcnNpb25BY2N1cmFjeT0nY2FzdWFsJ10gLSB0aGUgY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlXG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cbiAgc3RhdGljIGZyb21NaWxsaXNlY29uZHMoY291bnQsIG9wdHMpIHtcbiAgICByZXR1cm4gRHVyYXRpb24uZnJvbU9iamVjdChPYmplY3QuYXNzaWduKHsgbWlsbGlzZWNvbmRzOiBjb3VudCB9LCBvcHRzKSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGFuIERhdGVUaW1lIGZyb20gYSBKYXZhc2NyaXB0IG9iamVjdCB3aXRoIGtleXMgbGlrZSAneWVhcnMnIGFuZCAnaG91cnMnLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqIC0gdGhlIG9iamVjdCB0byBjcmVhdGUgdGhlIERhdGVUaW1lIGZyb21cbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai55ZWFyc1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLm1vbnRoc1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLndlZWtzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmouZGF5c1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLmhvdXJzXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoubWludXRlc1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLnNlY29uZHNcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5taWxsaXNlY29uZHNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvYmoubG9jYWxlPSdlbi1VUyddIC0gdGhlIGxvY2FsZSB0byB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9iai5udW1iZXJpbmdTeXN0ZW0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbSB0byB1c2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvYmouY29udmVyc2lvbkFjY3VyYWN5PSdjYXN1YWwnXSAtIHRoZSBjb252ZXJzaW9uIHN5c3RlbSB0byB1c2VcbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICBzdGF0aWMgZnJvbU9iamVjdChvYmopIHtcbiAgICByZXR1cm4gbmV3IER1cmF0aW9uKHtcbiAgICAgIHZhbHVlczogVXRpbC5ub3JtYWxpemVPYmplY3Qob2JqLCBEdXJhdGlvbi5ub3JtYWxpemVVbml0LCB0cnVlKSxcbiAgICAgIGxvYzogTG9jYWxlLmZyb21PYmplY3Qob2JqKSxcbiAgICAgIGNvbnZlcnNpb25BY2N1cmFjeTogb2JqLmNvbnZlcnNpb25BY2N1cmFjeVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYW4gSVNPIDg2MDEgZHVyYXRpb24gc3RyaW5nLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIHRleHQgdG8gcGFyc2VcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIGZvciBwYXJzaW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb2JqLmxvY2FsZT0nZW4tVVMnXSAtIHRoZSBsb2NhbGUgdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvYmoubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gdXNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb2JqLmNvbnZlcnNpb25BY2N1cmFjeT0nY2FzdWFsJ10gLSB0aGUgY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjRHVyYXRpb25zXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21JU08oJ1AzWTZNNERUMTJIMzBNNVMnKS50b09iamVjdCgpIC8vPT4geyB5ZWFyczogMywgbW9udGhzOiA2LCBkYXk6IDQsIGhvdXJzOiAxMiwgbWludXRlczogMzAsIHNlY29uZHM6IDUgfVxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tSVNPKCdQVDIzSCcpLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAyMyB9XG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21JU08oJ1A1WTNNJykudG9PYmplY3QoKSAvLz0+IHsgeWVhcnM6IDUsIG1vbnRoczogMyB9XG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cbiAgc3RhdGljIGZyb21JU08odGV4dCwgb3B0cykge1xuICAgIGNvbnN0IG9iaiA9IE9iamVjdC5hc3NpZ24oUmVnZXhQYXJzZXIucGFyc2VJU09EdXJhdGlvbih0ZXh0KSwgb3B0cyk7XG4gICAgcmV0dXJuIER1cmF0aW9uLmZyb21PYmplY3Qob2JqKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gaW52YWxpZCBEdXJhdGlvbi5cbiAgICogQHBhcmFtIHtzdHJpbmd9IHJlYXNvbiAtIHJlYXNvbiB0aGlzIGlzIGludmFsaWRcbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICBzdGF0aWMgaW52YWxpZChyZWFzb24pIHtcbiAgICBpZiAoIXJlYXNvbikge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRBcmd1bWVudEVycm9yKCduZWVkIHRvIHNwZWNpZnkgYSByZWFzb24gdGhlIERhdGVUaW1lIGlzIGludmFsaWQnKTtcbiAgICB9XG4gICAgaWYgKFNldHRpbmdzLnRocm93T25JbnZhbGlkKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZER1cmF0aW9uRXJyb3IocmVhc29uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBEdXJhdGlvbih7IGludmFsaWRSZWFzb246IHJlYXNvbiB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQHByaXZhdGVcbiAgICovXG4gIHN0YXRpYyBub3JtYWxpemVVbml0KHVuaXQsIGlnbm9yZVVua25vd24gPSBmYWxzZSkge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWQgPSB7XG4gICAgICB5ZWFyOiAneWVhcnMnLFxuICAgICAgeWVhcnM6ICd5ZWFycycsXG4gICAgICBtb250aDogJ21vbnRocycsXG4gICAgICBtb250aHM6ICdtb250aHMnLFxuICAgICAgd2VlazogJ3dlZWtzJyxcbiAgICAgIHdlZWtzOiAnd2Vla3MnLFxuICAgICAgZGF5OiAnZGF5cycsXG4gICAgICBkYXlzOiAnZGF5cycsXG4gICAgICBob3VyOiAnaG91cnMnLFxuICAgICAgaG91cnM6ICdob3VycycsXG4gICAgICBtaW51dGU6ICdtaW51dGVzJyxcbiAgICAgIG1pbnV0ZXM6ICdtaW51dGVzJyxcbiAgICAgIHNlY29uZDogJ3NlY29uZHMnLFxuICAgICAgc2Vjb25kczogJ3NlY29uZHMnLFxuICAgICAgbWlsbGlzZWNvbmQ6ICdtaWxsaXNlY29uZHMnLFxuICAgICAgbWlsbGlzZWNvbmRzOiAnbWlsbGlzZWNvbmRzJ1xuICAgIH1bdW5pdCA/IHVuaXQudG9Mb3dlckNhc2UoKSA6IHVuaXRdO1xuXG4gICAgaWYgKCFpZ25vcmVVbmtub3duICYmICFub3JtYWxpemVkKSB0aHJvdyBuZXcgSW52YWxpZFVuaXRFcnJvcih1bml0KTtcblxuICAgIHJldHVybiBub3JtYWxpemVkO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCAgdGhlIGxvY2FsZSBvZiBhIER1cmF0aW9uLCBzdWNoICdlbi1VSydcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IGxvY2FsZSgpIHtcbiAgICByZXR1cm4gdGhpcy5sb2MubG9jYWxlO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbnVtYmVyaW5nIHN5c3RlbSBvZiBhIER1cmF0aW9uLCBzdWNoICdiZW5nJy4gVGhlIG51bWJlcmluZyBzeXN0ZW0gaXMgdXNlZCB3aGVuIGZvcm1hdHRpbmcgdGhlIER1cmF0aW9uXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGdldCBudW1iZXJpbmdTeXN0ZW0oKSB7XG4gICAgcmV0dXJuIHRoaXMubG9jLm51bWJlcmluZ1N5c3RlbTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRHVyYXRpb24gZm9ybWF0dGVkIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGZvcm1hdCBzdHJpbmcuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBmbXQgLSB0aGUgZm9ybWF0IHN0cmluZ1xuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtib29sZWFufSBvcHRzLnJvdW5kIC0gcm91bmQgbnVtZXJpY2FsIHZhbHVlc1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b0Zvcm1hdChmbXQsIG9wdHMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWRcbiAgICAgID8gRm9ybWF0dGVyLmNyZWF0ZSh0aGlzLmxvYywgb3B0cykuZm9ybWF0RHVyYXRpb25Gcm9tU3RyaW5nKHRoaXMsIGZtdClcbiAgICAgIDogSU5WQUxJRDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgSmF2YXNjcmlwdCBvYmplY3Qgd2l0aCB0aGlzIER1cmF0aW9uJ3MgdmFsdWVzLlxuICAgKiBAcGFyYW0gb3B0cyAtIG9wdGlvbnMgZm9yIGdlbmVyYXRpbmcgdGhlIG9iamVjdFxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmluY2x1ZGVDb25maWc9ZmFsc2VdIC0gaW5jbHVkZSBjb25maWd1cmF0aW9uIGF0dHJpYnV0ZXMgaW4gdGhlIG91dHB1dFxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgeWVhcnM6IDEsIGRheXM6IDYsIHNlY29uZHM6IDIgfSkudG9PYmplY3QoKSAvLz0+IHsgeWVhcnM6IDEsIGRheXM6IDYsIHNlY29uZHM6IDIgfVxuICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAqL1xuICB0b09iamVjdChvcHRzID0ge30pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHt9O1xuXG4gICAgY29uc3QgYmFzZSA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMudmFsdWVzKTtcblxuICAgIGlmIChvcHRzLmluY2x1ZGVDb25maWcpIHtcbiAgICAgIGJhc2UuY29udmVyc2lvbkFjY3VyYWN5ID0gdGhpcy5jb252ZXJzaW9uQWNjdXJhY3k7XG4gICAgICBiYXNlLm51bWJlcmluZ1N5c3RlbSA9IHRoaXMubG9jLm51bWJlcmluZ1N5c3RlbTtcbiAgICAgIGJhc2UubG9jYWxlID0gdGhpcy5sb2MubG9jYWxlO1xuICAgIH1cbiAgICByZXR1cm4gYmFzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxLWNvbXBsaWFudCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEdXJhdGlvbi5cbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fODYwMSNEdXJhdGlvbnNcbiAgICogRHVyYXRpb24uZnJvbU9iamVjdCh7IHllYXJzOiAzLCBzZWNvbmRzOiA0NSB9KS50b0lTTygpIC8vPT4gJ1AzWVQ0NVMnXG4gICAqIER1cmF0aW9uLmZyb21PYmplY3QoeyBtb250aHM6IDQsIHNlY29uZHM6IDQ1IH0pLnRvSVNPKCkgLy89PiAnUDRNVDQ1UydcbiAgICogRHVyYXRpb24uZnJvbU9iamVjdCh7IG1vbnRoczogNSB9KS50b0lTTygpIC8vPT4gJ1A1TSdcbiAgICogRHVyYXRpb24uZnJvbU9iamVjdCh7IG1pbnV0ZXM6IDUgfSkudG9JU08oKSAvLz0+ICdQVDVNJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b0lTTygpIHtcbiAgICAvLyB3ZSBjb3VsZCB1c2UgdGhlIGZvcm1hdHRlciwgYnV0IHRoaXMgaXMgYW4gZWFzaWVyIHdheSB0byBnZXQgdGhlIG1pbmltdW0gc3RyaW5nXG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBudWxsO1xuXG4gICAgbGV0IHMgPSAnUCcsXG4gICAgICBub3JtID0gdGhpcy5ub3JtYWxpemUoKTtcblxuICAgIC8vIElTTyBkdXJhdGlvbnMgYXJlIGFsd2F5cyBwb3NpdGl2ZSwgc28gdGFrZSB0aGUgYWJzb2x1dGUgdmFsdWVcbiAgICBub3JtID0gaXNIaWdoT3JkZXJOZWdhdGl2ZShub3JtLnZhbHVlcykgPyBub3JtLm5lZ2F0ZSgpIDogbm9ybTtcblxuICAgIGlmIChub3JtLnllYXJzID4gMCkgcyArPSBub3JtLnllYXJzICsgJ1knO1xuICAgIGlmIChub3JtLm1vbnRocyA+IDApIHMgKz0gbm9ybS5tb250aHMgKyAnTSc7XG4gICAgaWYgKG5vcm0uZGF5cyA+IDAgfHwgbm9ybS53ZWVrcyA+IDApIHMgKz0gbm9ybS5kYXlzICsgbm9ybS53ZWVrcyAqIDcgKyAnRCc7XG4gICAgaWYgKG5vcm0uaG91cnMgPiAwIHx8IG5vcm0ubWludXRlcyA+IDAgfHwgbm9ybS5zZWNvbmRzID4gMCB8fCBub3JtLm1pbGxpc2Vjb25kcyA+IDApIHMgKz0gJ1QnO1xuICAgIGlmIChub3JtLmhvdXJzID4gMCkgcyArPSBub3JtLmhvdXJzICsgJ0gnO1xuICAgIGlmIChub3JtLm1pbnV0ZXMgPiAwKSBzICs9IG5vcm0ubWludXRlcyArICdNJztcbiAgICBpZiAobm9ybS5zZWNvbmRzID4gMCkgcyArPSBub3JtLnNlY29uZHMgKyAnUyc7XG4gICAgcmV0dXJuIHM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIER1cmF0aW9uIGFwcHJvcHJpYXRlIGZvciB1c2UgaW4gSlNPTi5cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnRvSVNPKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIER1cmF0aW9uIGFwcHJvcHJpYXRlIGZvciB1c2UgaW4gZGVidWdnaW5nLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy50b0lTTygpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1ha2UgdGhpcyBEdXJhdGlvbiBsb25nZXIgYnkgdGhlIHNwZWNpZmllZCBhbW91bnQuIFJldHVybiBhIG5ld2x5LWNvbnN0cnVjdGVkIER1cmF0aW9uLlxuICAgKiBAcGFyYW0ge0R1cmF0aW9ufG51bWJlcnxvYmplY3R9IGR1cmF0aW9uIC0gVGhlIGFtb3VudCB0byBhZGQuIEVpdGhlciBhIEx1eG9uIER1cmF0aW9uLCBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIHRoZSBvYmplY3QgYXJndW1lbnQgdG8gRHVyYXRpb24uZnJvbU9iamVjdCgpXG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cbiAgcGx1cyhkdXJhdGlvbikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcblxuICAgIGNvbnN0IGR1ciA9IFV0aWwuZnJpZW5kbHlEdXJhdGlvbihkdXJhdGlvbiksXG4gICAgICByZXN1bHQgPSB7fTtcblxuICAgIGZvciAoY29uc3QgayBvZiBvcmRlcmVkVW5pdHMpIHtcbiAgICAgIGNvbnN0IHZhbCA9IGR1ci5nZXQoaykgKyB0aGlzLmdldChrKTtcbiAgICAgIGlmICh2YWwgIT09IDApIHtcbiAgICAgICAgcmVzdWx0W2tdID0gdmFsO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjbG9uZSh0aGlzLCB7IHZhbHVlczogcmVzdWx0IH0sIHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1ha2UgdGhpcyBEdXJhdGlvbiBzaG9ydGVyIGJ5IHRoZSBzcGVjaWZpZWQgYW1vdW50LiBSZXR1cm4gYSBuZXdseS1jb25zdHJ1Y3RlZCBEdXJhdGlvbi5cbiAgICogQHBhcmFtIHtEdXJhdGlvbnxudW1iZXJ8b2JqZWN0fSBkdXJhdGlvbiAtIFRoZSBhbW91bnQgdG8gc3VidHJhY3QuIEVpdGhlciBhIEx1eG9uIER1cmF0aW9uLCBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIHRoZSBvYmplY3QgYXJndW1lbnQgdG8gRHVyYXRpb24uZnJvbU9iamVjdCgpXG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cbiAgbWludXMoZHVyYXRpb24pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG5cbiAgICBjb25zdCBkdXIgPSBVdGlsLmZyaWVuZGx5RHVyYXRpb24oZHVyYXRpb24pO1xuICAgIHJldHVybiB0aGlzLnBsdXMoZHVyLm5lZ2F0ZSgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHZhbHVlIG9mIHVuaXQuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1bml0IC0gYSB1bml0IHN1Y2ggYXMgJ21pbnV0ZScgb3IgJ2RheSdcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7eWVhcnM6IDIsIGRheXM6IDN9KS55ZWFycyAvLz0+IDJcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7eWVhcnM6IDIsIGRheXM6IDN9KS5tb250aHMgLy89PiAwXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3Qoe3llYXJzOiAyLCBkYXlzOiAzfSkuZGF5cyAvLz0+IDNcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0KHVuaXQpIHtcbiAgICByZXR1cm4gdGhpc1tEdXJhdGlvbi5ub3JtYWxpemVVbml0KHVuaXQpXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBcIlNldFwiIHRoZSB2YWx1ZXMgb2Ygc3BlY2lmaWVkIHVuaXRzLiBSZXR1cm4gYSBuZXdseS1jb25zdHJ1Y3RlZCBEdXJhdGlvbi5cbiAgICogQHBhcmFtIHtvYmplY3R9IHZhbHVlcyAtIGEgbWFwcGluZyBvZiB1bml0cyB0byBudW1iZXJzXG4gICAqIEBleGFtcGxlIGR1ci5zZXQoeyB5ZWFyczogMjAxNyB9KVxuICAgKiBAZXhhbXBsZSBkdXIuc2V0KHsgaG91cnM6IDgsIG1pbnV0ZXM6IDMwIH0pXG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cbiAgc2V0KHZhbHVlcykge1xuICAgIGNvbnN0IG1peGVkID0gT2JqZWN0LmFzc2lnbih0aGlzLnZhbHVlcywgVXRpbC5ub3JtYWxpemVPYmplY3QodmFsdWVzLCBEdXJhdGlvbi5ub3JtYWxpemVVbml0KSk7XG4gICAgcmV0dXJuIGNsb25lKHRoaXMsIHsgdmFsdWVzOiBtaXhlZCB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBcIlNldFwiIHRoZSBsb2NhbGUgYW5kL29yIG51bWJlcmluZ1N5c3RlbS4gIFJldHVybnMgYSBuZXdseS1jb25zdHJ1Y3RlZCBEdXJhdGlvbi5cbiAgICogQGV4YW1wbGUgZHVyLnJlY29uZmlndXJlKHsgbG9jYWxlOiAnZW4tVUsnIH0pXG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cbiAgcmVjb25maWd1cmUoeyBsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgY29udmVyc2lvbkFjY3VyYWN5IH0gPSB7fSkge1xuICAgIGNvbnN0IGxvYyA9IHRoaXMubG9jLmNsb25lKHsgbG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0gfSksXG4gICAgICBvcHRzID0geyBsb2MgfTtcblxuICAgIGlmIChjb252ZXJzaW9uQWNjdXJhY3kpIHtcbiAgICAgIG9wdHMuY29udmVyc2lvbkFjY3VyYWN5ID0gY29udmVyc2lvbkFjY3VyYWN5O1xuICAgIH1cblxuICAgIHJldHVybiBjbG9uZSh0aGlzLCBvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgZHVyYXRpb24gaW4gdGhlIHNwZWNpZmllZCB1bml0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIGEgdW5pdCBzdWNoIGFzICdtaW51dGVzJyBvciAnZGF5cydcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7eWVhcnM6IDF9KS5hcygnZGF5cycpIC8vPT4gMzY1XG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3Qoe3llYXJzOiAxfSkuYXMoJ21vbnRocycpIC8vPT4gMTJcbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7aG91cnM6IDYwfSkuYXMoJ2RheXMnKSAvLz0+IDIuNVxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBhcyh1bml0KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuc2hpZnRUbyh1bml0KS5nZXQodW5pdCkgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogUmVkdWNlIHRoaXMgRHVyYXRpb24gdG8gaXRzIGNhbm9uaWNhbCByZXByZXNlbnRhdGlvbiBpbiBpdHMgY3VycmVudCB1bml0cy5cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IHllYXJzOiAyLCBkYXlzOiA1MDAwIH0pLm5vcm1hbGl6ZSgpLnRvT2JqZWN0KCkgLy89PiB7IHllYXJzOiAxNSwgZGF5czogMjU1IH1cbiAgICogQGV4YW1wbGUgRHVyYXRpb24uZnJvbU9iamVjdCh7IGhvdXJzOiAxMiwgbWludXRlczogLTQ1IH0pLm5vcm1hbGl6ZSgpLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAxMSwgbWludXRlczogMTUgfVxuICAgKiBAcmV0dXJuIHtEdXJhdGlvbn1cbiAgICovXG4gIG5vcm1hbGl6ZSgpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHRoaXM7XG5cbiAgICBjb25zdCBuZWcgPSBpc0hpZ2hPcmRlck5lZ2F0aXZlKHRoaXMudmFsdWVzKSxcbiAgICAgIGR1ciA9IG5lZyA/IHRoaXMubmVnYXRlKCkgOiB0aGlzLFxuICAgICAgc2hpZnRlZCA9IGR1ci5zaGlmdFRvKC4uLk9iamVjdC5rZXlzKHRoaXMudmFsdWVzKSk7XG4gICAgcmV0dXJuIG5lZyA/IHNoaWZ0ZWQubmVnYXRlKCkgOiBzaGlmdGVkO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgdGhpcyBEdXJhdGlvbiBpbnRvIGl0cyByZXByZXNlbnRhdGlvbiBpbiBhIGRpZmZlcmVudCBzZXQgb2YgdW5pdHMuXG4gICAqIEBleGFtcGxlIER1cmF0aW9uLmZyb21PYmplY3QoeyBob3VyczogMSwgc2Vjb25kczogMzAgfSkuc2hpZnRUbygnbWludXRlcycsICdtaWxsaXNlY29uZHMnKS50b09iamVjdCgpIC8vPT4geyBtaW51dGVzOiA2MCwgbWlsbGlzZWNvbmRzOiAzMDAwMCB9XG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cbiAgc2hpZnRUbyguLi51bml0cykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcblxuICAgIGlmICh1bml0cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHVuaXRzID0gdW5pdHMubWFwKER1cmF0aW9uLm5vcm1hbGl6ZVVuaXQpO1xuXG4gICAgY29uc3QgYnVpbHQgPSB7fSxcbiAgICAgIGFjY3VtdWxhdGVkID0ge30sXG4gICAgICB2YWxzID0gdGhpcy50b09iamVjdCgpO1xuICAgIGxldCBsYXN0VW5pdDtcblxuICAgIGZvciAoY29uc3QgayBvZiBvcmRlcmVkVW5pdHMpIHtcbiAgICAgIGlmICh1bml0cy5pbmRleE9mKGspID49IDApIHtcbiAgICAgICAgYnVpbHRba10gPSAwO1xuICAgICAgICBsYXN0VW5pdCA9IGs7XG5cbiAgICAgICAgLy8gYW55dGhpbmcgd2UgaGF2ZW4ndCBib2lsZWQgZG93biB5ZXQgc2hvdWxkIGdldCBib2lsZWQgdG8gdGhpcyB1bml0XG4gICAgICAgIGZvciAoY29uc3QgYWsgaW4gYWNjdW11bGF0ZWQpIHtcbiAgICAgICAgICBpZiAoYWNjdW11bGF0ZWQuaGFzT3duUHJvcGVydHkoYWspKSB7XG4gICAgICAgICAgICBidWlsdFtrXSArPSB0aGlzLm1hdHJpeFtha11ba10gKiBhY2N1bXVsYXRlZFtha107XG4gICAgICAgICAgfVxuICAgICAgICAgIGRlbGV0ZSBhY2N1bXVsYXRlZFtha107XG4gICAgICAgIH1cblxuICAgICAgICAvLyBwbHVzIGFueXRoaW5nIHRoYXQncyBhbHJlYWR5IGluIHRoaXMgdW5pdFxuICAgICAgICBpZiAoVXRpbC5pc051bWJlcih2YWxzW2tdKSkge1xuICAgICAgICAgIGJ1aWx0W2tdICs9IHZhbHNba107XG4gICAgICAgIH1cblxuICAgICAgICAvLyBwbHVzIGFueXRoaW5nIGZ1cnRoZXIgZG93biB0aGUgY2hhaW4gdGhhdCBzaG91bGQgYmUgcm9sbGVkIHVwIGluIHRvIHRoaXNcbiAgICAgICAgZm9yIChjb25zdCBkb3duIGluIHZhbHMpIHtcbiAgICAgICAgICBpZiAob3JkZXJlZFVuaXRzLmluZGV4T2YoZG93bikgPiBvcmRlcmVkVW5pdHMuaW5kZXhPZihrKSkge1xuICAgICAgICAgICAgY29uc3QgY29udiA9IHRoaXMubWF0cml4W2tdW2Rvd25dLFxuICAgICAgICAgICAgICBhZGRlZCA9IE1hdGguZmxvb3IodmFsc1tkb3duXSAvIGNvbnYpO1xuICAgICAgICAgICAgYnVpbHRba10gKz0gYWRkZWQ7XG4gICAgICAgICAgICB2YWxzW2Rvd25dIC09IGFkZGVkICogY29udjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gb3RoZXJ3aXNlLCBrZWVwIGl0IGluIHRoZSB3aW5ncyB0byBib2lsIGl0IGxhdGVyXG4gICAgICB9IGVsc2UgaWYgKFV0aWwuaXNOdW1iZXIodmFsc1trXSkpIHtcbiAgICAgICAgYWNjdW11bGF0ZWRba10gPSB2YWxzW2tdO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGFueXRoaW5nIGxlZnRvdmVyIGJlY29tZXMgdGhlIGRlY2ltYWwgZm9yIHRoZSBsYXN0IHVuaXRcbiAgICBpZiAobGFzdFVuaXQpIHtcbiAgICAgIGZvciAoY29uc3Qga2V5IGluIGFjY3VtdWxhdGVkKSB7XG4gICAgICAgIGlmIChhY2N1bXVsYXRlZC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgYnVpbHRbbGFzdFVuaXRdICs9IGFjY3VtdWxhdGVkW2tleV0gLyB0aGlzLm1hdHJpeFtsYXN0VW5pdF1ba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBjbG9uZSh0aGlzLCB7IHZhbHVlczogYnVpbHQgfSwgdHJ1ZSk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBuZWdhdGl2ZSBvZiB0aGlzIER1cmF0aW9uLlxuICAgKiBAZXhhbXBsZSBEdXJhdGlvbi5mcm9tT2JqZWN0KHsgaG91cnM6IDEsIHNlY29uZHM6IDMwIH0pLm5lZ2F0ZSgpLnRvT2JqZWN0KCkgLy89PiB7IGhvdXJzOiAtMSwgc2Vjb25kczogLTMwIH1cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICBuZWdhdGUoKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuICAgIGNvbnN0IG5lZ2F0ZWQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGsgb2YgT2JqZWN0LmtleXModGhpcy52YWx1ZXMpKSB7XG4gICAgICBuZWdhdGVkW2tdID0gLXRoaXMudmFsdWVzW2tdO1xuICAgIH1cbiAgICByZXR1cm4gRHVyYXRpb24uZnJvbU9iamVjdChuZWdhdGVkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHllYXJzLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgeWVhcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudmFsdWVzLnllYXJzIHx8IDAgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBtb250aHMuXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldCBtb250aHMoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudmFsdWVzLm1vbnRocyB8fCAwIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgd2Vla3NcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IHdlZWtzKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy53ZWVrcyB8fCAwIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZGF5cy5cbiAgICogQHJldHVybiB7bnVtYmVyXG4gICAqL1xuICBnZXQgZGF5cygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMuZGF5cyB8fCAwIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgaG91cnMuXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldCBob3VycygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMuaG91cnMgfHwgMCA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG1pbnV0ZXMuXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldCBtaW51dGVzKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy5taW51dGVzIHx8IDAgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBzZWNvbmRzLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgc2Vjb25kcygpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy52YWx1ZXMuc2Vjb25kcyB8fCAwIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbWlsbGlzZWNvbmRzLlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgbWlsbGlzZWNvbmRzKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnZhbHVlcy5taWxsaXNlY29uZHMgfHwgMCA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIER1cmF0aW9uIGlzIGludmFsaWQuIEludmFsaWQgZHVyYXRpb25zIGFyZSByZXR1cm5lZCBieSBkaWZmIG9wZXJhdGlvbnNcbiAgICogb24gaW52YWxpZCBEYXRlVGltZXMgb3IgSW50ZXJ2YWxzLlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGlzVmFsaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW52YWxpZFJlYXNvbiA9PT0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGV4cGxhbmF0aW9uIG9mIHdoeSB0aGlzIER1cmF0aW9uIGJlY2FtZSBpbnZhbGlkLCBvciBudWxsIGlmIHRoZSBEdXJhdGlvbiBpcyB2YWxpZFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgaW52YWxpZFJlYXNvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnZhbGlkUmVhc29uO1xuICB9XG5cbiAgLyoqXG4gICAqIEVxdWFsaXR5IGNoZWNrXG4gICAqIFR3byBEdXJhdGlvbnMgYXJlIGVxdWFsIGlmZiB0aGV5IGhhdmUgdGhlIHNhbWUgdW5pdHMgYW5kIHRoZSBzYW1lIHZhbHVlcyBmb3IgZWFjaCB1bml0LlxuICAgKiBAcGFyYW0ge0R1cmF0aW9ufSBvdGhlclxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgZXF1YWxzKG90aGVyKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQgfHwgIW90aGVyLmlzVmFsaWQpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IHUgb2Ygb3JkZXJlZFVuaXRzKSB7XG4gICAgICBpZiAodGhpcy52YWx1ZXNbdV0gIT09IG90aGVyLnZhbHVlc1t1XSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG59XG4iLCJpbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi9pbXBsL3V0aWwnO1xuaW1wb3J0IHsgRGF0ZVRpbWUgfSBmcm9tICcuL2RhdGV0aW1lJztcbmltcG9ydCB7IER1cmF0aW9uIH0gZnJvbSAnLi9kdXJhdGlvbic7XG5pbXBvcnQgeyBTZXR0aW5ncyB9IGZyb20gJy4vc2V0dGluZ3MnO1xuaW1wb3J0IHsgSW52YWxpZEFyZ3VtZW50RXJyb3IsIEludmFsaWRJbnRlcnZhbEVycm9yIH0gZnJvbSAnLi9lcnJvcnMnO1xuXG5jb25zdCBJTlZBTElEID0gJ0ludmFsaWQgSW50ZXJ2YWwnO1xuXG5mdW5jdGlvbiB2YWxpZGF0ZVN0YXJ0RW5kKHN0YXJ0LCBlbmQpIHtcbiAgcmV0dXJuICEhc3RhcnQgJiYgISFlbmQgJiYgc3RhcnQuaXNWYWxpZCAmJiBlbmQuaXNWYWxpZCAmJiBzdGFydCA8PSBlbmQ7XG59XG5cbi8qKlxuICogQW4gSW50ZXJ2YWwgb2JqZWN0IHJlcHJlc2VudHMgYSBoYWxmLW9wZW4gaW50ZXJ2YWwgb2YgdGltZSwgd2hlcmUgZWFjaCBlbmRwb2ludCBpcyBhIHtAbGluayBEYXRlVGltZX0uIENvbmNlcHR1YWxseSwgaXQncyBhIGNvbnRhaW5lciBmb3IgdGhvc2UgdHdvIGVuZHBvaW50cywgYWNjb21wYW5pZWQgYnkgbWV0aG9kcyBmb3IgY3JlYXRpbmcsIHBhcnNpbmcsIGludGVycm9nYXRpbmcsIGNvbXBhcmluZywgdHJhbnNmb3JtaW5nLCBhbmQgZm9ybWF0dGluZyB0aGVtLlxuICpcbiAqIEhlcmUgaXMgYSBicmllZiBvdmVydmlldyBvZiB0aGUgbW9zdCBjb21tb25seSB1c2VkIG1ldGhvZHMgYW5kIGdldHRlcnMgaW4gSW50ZXJ2YWw6XG4gKlxuICogKiAqKkNyZWF0aW9uKiogVG8gY3JlYXRlIGFuIEludGVydmFsLCB1c2Uge0BsaW5rIGZyb21EYXRlVGltZXN9LCB7QGxpbmsgYWZ0ZXJ9LCB7QGxpbmsgYmVmb3JlfSwgb3Ige0BsaW5rIGZyb21JU099LlxuICogKiAqKkFjY2Vzc29ycyoqIFVzZSB7QGxpbmsgc3RhcnR9IGFuZCB7QGxpbmsgZW5kfSB0byBnZXQgdGhlIHN0YXJ0IGFuZCBlbmQuXG4gKiAqICoqSW50ZXJvZ2F0aW9uKiogVG8gYW5hbHl6ZSB0aGUgSW50ZXJ2YWwsIHVzZSB7QGxpbmsgY291bnR9LCB7QGxpbmsgbGVuZ3RofSwge0BsaW5rIGhhc1NhbWV9LCB7QGxpbmsgY29udGFpbnN9LCB7QGxpbmsgaXNBZnRlcn0sIG9yIHtAbGluayBpc0JlZm9yZX0uXG4gKiAqICoqVHJhbnNmb3JtYXRpb24qKiBUbyBjcmVhdGUgb3RoZXIgSW50ZXJ2YWxzIG91dCBvZiB0aGlzIG9uZSwgdXNlIHtAbGluayBzZXR9LCB7QGxpbmsgc3BsaXRBdH0sIHtAbGluayBzcGxpdEJ5fSwge0BsaW5rIGRpdmlkZUVxdWFsbHl9LCB7QGxpbmsgbWVyZ2V9LCB7QGxpbmsgeG9yfSwge0BsaW5rIHVuaW9ufSwge0BsaW5rIGludGVyc2VjdGlvbn0sIG9yIHtAbGluayBkaWZmZXJlbmNlfS5cbiAqICogKipDb21wYXJpc29uKiogVG8gY29tcGFyZSB0aGlzIEludGVydmFsIHRvIGFub3RoZXIgb25lLCB1c2Uge0BsaW5rIGVxdWFsc30sIHtAbGluayBvdmVybGFwc30sIHtAbGluayBhYnV0c1N0YXJ0fSwge0BsaW5rIGFidXRzRW5kfSwge0BsaW5rIGVuZ3VsZnN9XG4gKiAqICoqT3V0cHV0KioqIFRvIGNvbnZlcnQgdGhlIEludGVydmFsIGludG8gb3RoZXIgcmVwcmVzZW50YXRpb25zLCBzZWUge0BsaW5rIHRvU3RyaW5nfSwge0BsaW5rIHRvSVNPfSwge0BsaW5rIHRvRm9ybWF0fSwgYW5kIHtAbGluayB0b0R1cmF0aW9ufS5cbiAqL1xuZXhwb3J0IGNsYXNzIEludGVydmFsIHtcbiAgLyoqXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3MnLCB7IHZhbHVlOiBjb25maWcuc3RhcnQsIGVudW1lcmFibGU6IHRydWUgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdlJywgeyB2YWx1ZTogY29uZmlnLmVuZCwgZW51bWVyYWJsZTogdHJ1ZSB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2ludmFsaWRSZWFzb24nLCB7XG4gICAgICB2YWx1ZTogY29uZmlnLmludmFsaWRSZWFzb24gfHwgbnVsbCxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGFuIGludmFsaWQgSW50ZXJ2YWwuXG4gICAqIEByZXR1cm4ge0ludGVydmFsfVxuICAgKi9cbiAgc3RhdGljIGludmFsaWQocmVhc29uKSB7XG4gICAgaWYgKCFyZWFzb24pIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkQXJndW1lbnRFcnJvcignbmVlZCB0byBzcGVjaWZ5IGEgcmVhc29uIHRoZSBEYXRlVGltZSBpcyBpbnZhbGlkJyk7XG4gICAgfVxuICAgIGlmIChTZXR0aW5ncy50aHJvd09uSW52YWxpZCkge1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRJbnRlcnZhbEVycm9yKHJlYXNvbik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgSW50ZXJ2YWwoeyBpbnZhbGlkUmVhc29uOiByZWFzb24gfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBJbnRlcnZhbCBmcm9tIGEgc3RhcnQgRGF0ZVRpbWUgYW5kIGFuIGVuZCBEYXRlVGltZS4gSW5jbHVzaXZlIG9mIHRoZSBzdGFydCBidXQgbm90IHRoZSBlbmQuXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV8b2JqZWN0fERhdGV9IHN0YXJ0XG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV8b2JqZWN0fERhdGV9IGVuZFxuICAgKiBAcmV0dXJuIHtJbnRlcnZhbH1cbiAgICovXG4gIHN0YXRpYyBmcm9tRGF0ZVRpbWVzKHN0YXJ0LCBlbmQpIHtcbiAgICBjb25zdCBidWlsdFN0YXJ0ID0gVXRpbC5mcmllbmRseURhdGVUaW1lKHN0YXJ0KSxcbiAgICAgIGJ1aWx0RW5kID0gVXRpbC5mcmllbmRseURhdGVUaW1lKGVuZCk7XG5cbiAgICByZXR1cm4gbmV3IEludGVydmFsKHtcbiAgICAgIHN0YXJ0OiBidWlsdFN0YXJ0LFxuICAgICAgZW5kOiBidWlsdEVuZCxcbiAgICAgIGludmFsaWRSZWFzb246IHZhbGlkYXRlU3RhcnRFbmQoYnVpbHRTdGFydCwgYnVpbHRFbmQpID8gbnVsbCA6ICdpbnZhbGlkIGVuZHBvaW50cydcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gSW50ZXJ2YWwgZnJvbSBhIHN0YXJ0IERhdGVUaW1lIGFuZCBhIER1cmF0aW9uIHRvIGV4dGVuZCB0by5cbiAgICogQHBhcmFtIHtEYXRlVGltZXxvYmplY3R8RGF0ZX0gc3RhcnRcbiAgICogQHBhcmFtIHtEdXJhdGlvbnxudW1iZXJ8b2JqZWN0fSBkdXJhdGlvbiAtIHRoZSBsZW5ndGggb2YgdGhlIEludGVydmFsLlxuICAgKiBAcmV0dXJuIHtJbnRlcnZhbH1cbiAgICovXG4gIHN0YXRpYyBhZnRlcihzdGFydCwgZHVyYXRpb24pIHtcbiAgICBjb25zdCBkdXIgPSBVdGlsLmZyaWVuZGx5RHVyYXRpb24oZHVyYXRpb24pLFxuICAgICAgZHQgPSBVdGlsLmZyaWVuZGx5RGF0ZVRpbWUoc3RhcnQpO1xuICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0LCBkdC5wbHVzKGR1cikpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBJbnRlcnZhbCBmcm9tIGFuIGVuZCBEYXRlVGltZSBhbmQgYSBEdXJhdGlvbiB0byBleHRlbmQgYmFja3dhcmRzIHRvLlxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfG9iamVjdHxEYXRlfSBlbmRcbiAgICogQHBhcmFtIHtEdXJhdGlvbnxudW1iZXJ8b2JqZWN0fSBkdXJhdGlvbiAtIHRoZSBsZW5ndGggb2YgdGhlIEludGVydmFsLlxuICAgKiBAcmV0dXJuIHtJbnRlcnZhbH1cbiAgICovXG4gIHN0YXRpYyBiZWZvcmUoZW5kLCBkdXJhdGlvbikge1xuICAgIGNvbnN0IGR1ciA9IFV0aWwuZnJpZW5kbHlEdXJhdGlvbihkdXJhdGlvbiksXG4gICAgICBkdCA9IFV0aWwuZnJpZW5kbHlEYXRlVGltZShlbmQpO1xuICAgIHJldHVybiBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0Lm1pbnVzKGR1ciksIGR0KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gSW50ZXJ2YWwgZnJvbSBhbiBJU08gODYwMSBzdHJpbmdcbiAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyAtIHRoZSBJU08gc3RyaW5nIHRvIHBhcnNlXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIC0gb3B0aW9ucyB0byBwYXNzIHtAc2VlIERhdGVUaW1lLmZyb21JU099XG4gICAqIEByZXR1cm4ge0ludGVydmFsfVxuICAgKi9cbiAgc3RhdGljIGZyb21JU08oc3RyaW5nLCBvcHRzKSB7XG4gICAgaWYgKHN0cmluZykge1xuICAgICAgY29uc3QgW3MsIGVdID0gc3RyaW5nLnNwbGl0KC9cXC8vKTtcbiAgICAgIGlmIChzICYmIGUpIHtcbiAgICAgICAgcmV0dXJuIEludGVydmFsLmZyb21EYXRlVGltZXMoRGF0ZVRpbWUuZnJvbUlTTyhzLCBvcHRzKSwgRGF0ZVRpbWUuZnJvbUlTTyhlLCBvcHRzKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBJbnRlcnZhbC5pbnZhbGlkKCdpbnZhbGlkIElTTyBmb3JtYXQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBzdGFydCBvZiB0aGUgSW50ZXJ2YWxcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICBnZXQgc3RhcnQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMucyA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgZW5kIG9mIHRoZSBJbnRlcnZhbFxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIGdldCBlbmQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuZSA6IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB3aGV0aGVyIHRoaXMgSW50ZXJ2YWwncyBlbmQgaXMgYXQgbGVhc3QgaXRzIHN0YXJ0LCBpLmUuIHRoYXQgdGhlIEludGVydmFsIGlzbid0ICdiYWNrd2FyZHMnLlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgZ2V0IGlzVmFsaWQoKSB7XG4gICAgcmV0dXJuIHRoaXMuaW52YWxpZFJlYXNvbiA9PT0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGV4cGxhbmF0aW9uIG9mIHdoeSB0aGlzIEludGVydmFsIGJlY2FtZSBpbnZhbGlkLCBvciBudWxsIGlmIHRoZSBJbnRlcnZhbCBpcyB2YWxpZFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgaW52YWxpZFJlYXNvbigpIHtcbiAgICByZXR1cm4gdGhpcy5pbnZhbGlkUmVhc29uO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGxlbmd0aCBvZiB0aGUgSW50ZXJ2YWwgaW4gdGhlIHNwZWNpZmllZCB1bml0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIHRoZSB1bml0IChzdWNoIGFzICdob3Vycycgb3IgJ2RheXMnKSB0byByZXR1cm4gdGhlIGxlbmd0aCBpbi5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgbGVuZ3RoKHVuaXQgPSAnbWlsbGlzZWNvbmRzJykge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnRvRHVyYXRpb24oLi4uW3VuaXRdKS5nZXQodW5pdCkgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgY291bnQgb2YgbWludXRlcywgaG91cnMsIGRheXMsIG1vbnRocywgb3IgeWVhcnMgaW5jbHVkZWQgaW4gdGhlIEludGVydmFsLCBldmVuIGluIHBhcnQuXG4gICAqIFVubGlrZSB7QGxpbmsgbGVuZ3RofSB0aGlzIGNvdW50cyBzZWN0aW9ucyBvZiB0aGUgY2FsZW5kYXIsIG5vdCBwZXJpb2RzIG9mIHRpbWUsIGUuZy4gc3BlY2lmeWluZyAnZGF5J1xuICAgKiBhc2tzICd3aGF0IGRhdGVzIGFyZSBpbmNsdWRlZCBpbiB0aGlzIGludGVydmFsPycsIG5vdCAnaG93IG1hbnkgZGF5cyBsb25nIGlzIHRoaXMgaW50ZXJ2YWw/J1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW3VuaXQ9J21pbGxpc2Vjb25kcyddIC0gdGhlIHVuaXQgb2YgdGltZSB0byBjb3VudC5cbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgY291bnQodW5pdCA9ICdtaWxsaXNlY29uZHMnKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBOYU47XG4gICAgY29uc3Qgc3RhcnQgPSB0aGlzLnN0YXJ0LnN0YXJ0T2YodW5pdCksXG4gICAgICBlbmQgPSB0aGlzLmVuZC5zdGFydE9mKHVuaXQpO1xuICAgIHJldHVybiBNYXRoLmZsb29yKGVuZC5kaWZmKHN0YXJ0LCB1bml0KS5nZXQodW5pdCkpICsgMTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhpcyBJbnRlcnZhbCdzIHN0YXJ0IGFuZCBlbmQgYXJlIGJvdGggaW4gdGhlIHNhbWUgdW5pdCBvZiB0aW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1bml0IC0gdGhlIHVuaXQgb2YgdGltZSB0byBjaGVjayBzYW1lbmVzcyBvblxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaGFzU2FtZSh1bml0KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuZS5taW51cygxKS5oYXNTYW1lKHRoaXMucywgdW5pdCkgOiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsIGhhcyB0aGUgc2FtZSBzdGFydCBhbmQgZW5kIERhdGVUaW1lcy5cbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGlzRW1wdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMucy52YWx1ZU9mKCkgPT09IHRoaXMuZS52YWx1ZU9mKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoaXMgSW50ZXJ2YWwncyBzdGFydCBpcyBhZnRlciB0aGUgc3BlY2lmaWVkIERhdGVUaW1lLlxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfSBkYXRlVGltZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNBZnRlcihkYXRlVGltZSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRoaXMucyA+IGRhdGVUaW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGlzIEludGVydmFsJ3MgZW5kIGlzIGJlZm9yZSB0aGUgc3BlY2lmaWVkIERhdGVUaW1lLlxuICAgKiBAcGFyYW0ge0RhdGV0aW1lfSBkYXRlVGltZVxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgaXNCZWZvcmUoZGF0ZVRpbWUpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0aGlzLmUucGx1cygxKSA8IGRhdGVUaW1lO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGlzIEludGVydmFsIGNvbnRhaW5zIHRoZSBzcGVjaWZpZWQgRGF0ZVRpbWUuXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV9IGRhdGVUaW1lXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBjb250YWlucyhkYXRlVGltZSkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuIHRoaXMucyA8PSBkYXRlVGltZSAmJiB0aGlzLmUgPiBkYXRlVGltZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBcIlNldHNcIiB0aGUgc3RhcnQgYW5kL29yIGVuZCBkYXRlcy4gUmV0dXJucyBhIG5ld2x5LWNvbnN0cnVjdGVkIEludGVydmFsLlxuICAgKiBAcGFyYW0ge29iamVjdH0gdmFsdWVzIC0gdGhlIHZhbHVlcyB0byBzZXRcbiAgICogQHBhcmFtIHtEYXRlVGltZX0gdmFsdWVzLnN0YXJ0IC0gdGhlIHN0YXJ0aW5nIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7RGF0ZVRpbWV9IHZhbHVlcy5lbmQgLSB0aGUgZW5kaW5nIERhdGVUaW1lXG4gICAqIEByZXR1cm4ge0ludGVydmFsfVxuICAgKi9cbiAgc2V0KHsgc3RhcnQsIGVuZCB9ID0ge30pIHtcbiAgICByZXR1cm4gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhzdGFydCB8fCB0aGlzLnMsIGVuZCB8fCB0aGlzLmUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFNwbGl0IHRoaXMgSW50ZXJ2YWwgYXQgZWFjaCBvZiB0aGUgc3BlY2lmaWVkIERhdGVUaW1lc1xuICAgKiBAcGFyYW0gey4uLkRhdGVUaW1lc30gZGF0ZVRpbWVzIC0gdGhlIHVuaXQgb2YgdGltZSB0byBjb3VudC5cbiAgICogQHJldHVybiB7W0ludGVydmFsXX1cbiAgICovXG4gIHNwbGl0QXQoLi4uZGF0ZVRpbWVzKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBbXTtcbiAgICBjb25zdCBzb3J0ZWQgPSBkYXRlVGltZXMubWFwKFV0aWwuZnJpZW5kbHlEYXRlVGltZSkuc29ydCgpLFxuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgIGxldCB7IHMgfSA9IHRoaXMsXG4gICAgICBpID0gMDtcblxuICAgIHdoaWxlIChzIDwgdGhpcy5lKSB7XG4gICAgICBjb25zdCBhZGRlZCA9IHNvcnRlZFtpXSB8fCB0aGlzLmUsXG4gICAgICAgIG5leHQgPSArYWRkZWQgPiArdGhpcy5lID8gdGhpcy5lIDogYWRkZWQ7XG4gICAgICByZXN1bHRzLnB1c2goSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhzLCBuZXh0KSk7XG4gICAgICBzID0gbmV4dDtcbiAgICAgIGkgKz0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGxpdCB0aGlzIEludGVydmFsIGludG8gc21hbGxlciBJbnRlcnZhbHMsIGVhY2ggb2YgdGhlIHNwZWNpZmllZCBsZW5ndGguXG4gICAqIExlZnQgb3ZlciB0aW1lIGlzIGdyb3VwZWQgaW50byBhIHNtYWxsZXIgaW50ZXJ2YWxcbiAgICogQHBhcmFtIHtEdXJhdGlvbnxudW1iZXJ8b2JqZWN0fSBkdXJhdGlvbiAtIFRoZSBsZW5ndGggb2YgZWFjaCByZXN1bHRpbmcgaW50ZXJ2YWwuXG4gICAqIEByZXR1cm4ge1tJbnRlcnZhbF19XG4gICAqL1xuICBzcGxpdEJ5KGR1cmF0aW9uKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBbXTtcbiAgICBjb25zdCBkdXIgPSBVdGlsLmZyaWVuZGx5RHVyYXRpb24oZHVyYXRpb24pLFxuICAgICAgcmVzdWx0cyA9IFtdO1xuICAgIGxldCB7IHMgfSA9IHRoaXMsXG4gICAgICBhZGRlZCxcbiAgICAgIG5leHQ7XG5cbiAgICB3aGlsZSAocyA8IHRoaXMuZSkge1xuICAgICAgYWRkZWQgPSBzLnBsdXMoZHVyKTtcbiAgICAgIG5leHQgPSArYWRkZWQgPiArdGhpcy5lID8gdGhpcy5lIDogYWRkZWQ7XG4gICAgICByZXN1bHRzLnB1c2goSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhzLCBuZXh0KSk7XG4gICAgICBzID0gbmV4dDtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0cztcbiAgfVxuXG4gIC8qKlxuICAgKiBTcGxpdCB0aGlzIEludGVydmFsIGludG8gdGhlIHNwZWNpZmllZCBudW1iZXIgb2Ygc21hbGxlciBpbnRlcnZhbHMuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBudW1iZXJPZlBhcnRzIC0gVGhlIG51bWJlciBvZiBJbnRlcnZhbHMgdG8gZGl2aWRlIHRoZSBJbnRlcnZhbCBpbnRvLlxuICAgKiBAcmV0dXJuIHtbSW50ZXJ2YWxdfVxuICAgKi9cbiAgZGl2aWRlRXF1YWxseShudW1iZXJPZlBhcnRzKSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBbXTtcbiAgICByZXR1cm4gdGhpcy5zcGxpdEJ5KHRoaXMubGVuZ3RoKCkgLyBudW1iZXJPZlBhcnRzKS5zbGljZSgwLCBudW1iZXJPZlBhcnRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsIG92ZXJsYXBzIHdpdGggdGhlIHNwZWNpZmllZCBJbnRlcnZhbFxuICAgKiBAcGFyYW0ge0ludGVydmFsfSBvdGhlclxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgb3ZlcmxhcHMob3RoZXIpIHtcbiAgICByZXR1cm4gdGhpcy5lID4gb3RoZXIucyAmJiB0aGlzLnMgPCBvdGhlci5lO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgSW50ZXJ2YWwncyBlbmQgaXMgYWRqYWNlbnQgdG8gdGhlIHNwZWNpZmllZCBJbnRlcnZhbCdzIHN0YXJ0LlxuICAgKiBAcGFyYW0ge0ludGVydmFsfSBvdGhlclxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgYWJ1dHNTdGFydChvdGhlcikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuICt0aGlzLmUgPT09ICtvdGhlci5zO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgSW50ZXJ2YWwncyBzdGFydCBpcyBhZGphY2VudCB0byB0aGUgc3BlY2lmaWVkIEludGVydmFsJ3MgZW5kLlxuICAgKiBAcGFyYW0ge0ludGVydmFsfSBvdGhlclxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgYWJ1dHNFbmQob3RoZXIpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiArb3RoZXIuZSA9PT0gK3RoaXMucztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsIGVuZ3VsZnMgdGhlIHN0YXJ0IGFuZCBlbmQgb2YgdGhlIHNwZWNpZmllZCBJbnRlcnZhbC5cbiAgICogQHBhcmFtIHtJbnRlcnZhbH0gb3RoZXJcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGVuZ3VsZnMob3RoZXIpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIGZhbHNlO1xuICAgIHJldHVybiB0aGlzLnMgPD0gb3RoZXIucyAmJiB0aGlzLmUgPj0gb3RoZXIuZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gd2hldGhlciB0aGlzIEludGVydmFsIGhhcyB0aGUgc2FtZSBzdGFydCBhbmQgZW5kIGFzIHRoZSBzcGVjaWZpZWQgSW50ZXJ2YWwuXG4gICAqIEBwYXJhbSB7SW50ZXJ2YWx9IG90aGVyXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBlcXVhbHMob3RoZXIpIHtcbiAgICByZXR1cm4gdGhpcy5zLmVxdWFscyhvdGhlci5zKSAmJiB0aGlzLmUuZXF1YWxzKG90aGVyLmUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhbiBJbnRlcnZhbCByZXByZXNlbnRpbmcgdGhlIGludGVyc2VjdGlvbiBvZiB0aGlzIEludGVydmFsIGFuZCB0aGUgc3BlY2lmaWVkIEludGVydmFsLlxuICAgKiBTcGVjaWZpY2FsbHksIHRoZSByZXN1bHRpbmcgSW50ZXJ2YWwgaGFzIHRoZSBtYXhpbXVtIHN0YXJ0IHRpbWUgYW5kIHRoZSBtaW5pbXVtIGVuZCB0aW1lIG9mIHRoZSB0d28gSW50ZXJ2YWxzLlxuICAgKiBAcGFyYW0ge0ludGVydmFsfSBvdGhlclxuICAgKiBAcmV0dXJuIHtJbnRlcnZhbH1cbiAgICovXG4gIGludGVyc2VjdGlvbihvdGhlcikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICBjb25zdCBzID0gdGhpcy5zID4gb3RoZXIucyA/IHRoaXMucyA6IG90aGVyLnMsXG4gICAgICBlID0gdGhpcy5lIDwgb3RoZXIuZSA/IHRoaXMuZSA6IG90aGVyLmU7XG5cbiAgICBpZiAocyA+IGUpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhzLCBlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGFuIEludGVydmFsIHJlcHJlc2VudGluZyB0aGUgdW5pb24gb2YgdGhpcyBJbnRlcnZhbCBhbmQgdGhlIHNwZWNpZmllZCBJbnRlcnZhbC5cbiAgICogU3BlY2lmaWNhbGx5LCB0aGUgcmVzdWx0aW5nIEludGVydmFsIGhhcyB0aGUgbWluaW11bSBzdGFydCB0aW1lIGFuZCB0aGUgbWF4aW11bSBlbmQgdGltZSBvZiB0aGUgdHdvIEludGVydmFscy5cbiAgICogQHBhcmFtIHtJbnRlcnZhbH0gb3RoZXJcbiAgICogQHJldHVybiB7SW50ZXJ2YWx9XG4gICAqL1xuICB1bmlvbihvdGhlcikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICBjb25zdCBzID0gdGhpcy5zIDwgb3RoZXIucyA/IHRoaXMucyA6IG90aGVyLnMsXG4gICAgICBlID0gdGhpcy5lID4gb3RoZXIuZSA/IHRoaXMuZSA6IG90aGVyLmU7XG4gICAgcmV0dXJuIEludGVydmFsLmZyb21EYXRlVGltZXMocywgZSk7XG4gIH1cblxuICAvKipcbiAgICogTWVyZ2UgYW4gYXJyYXkgb2YgSW50ZXJ2YWxzIGludG8gYSBlcXVpdmFsZW50IG1pbmltYWwgc2V0IG9mIEludGVydmFscy5cbiAgICogQ29tYmluZXMgb3ZlcmxhcHBpbmcgYW5kIGFkamFjZW50IEludGVydmFscy5cbiAgICogQHBhcmFtIHtbSW50ZXJ2YWxdfSBpbnRlcnZhbHNcbiAgICogQHJldHVybiB7W0ludGVydmFsXX1cbiAgICovXG4gIHN0YXRpYyBtZXJnZShpbnRlcnZhbHMpIHtcbiAgICBjb25zdCBbZm91bmQsIGZpbmFsXSA9IGludGVydmFscy5zb3J0KChhLCBiKSA9PiBhLnMgLSBiLnMpLnJlZHVjZSgoW3NvZmFyLCBjdXJyZW50XSwgaXRlbSkgPT4ge1xuICAgICAgaWYgKCFjdXJyZW50KSB7XG4gICAgICAgIHJldHVybiBbc29mYXIsIGl0ZW1dO1xuICAgICAgfSBlbHNlIGlmIChjdXJyZW50Lm92ZXJsYXBzKGl0ZW0pIHx8IGN1cnJlbnQuYWJ1dHNTdGFydChpdGVtKSkge1xuICAgICAgICByZXR1cm4gW3NvZmFyLCBjdXJyZW50LnVuaW9uKGl0ZW0pXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBbc29mYXIuY29uY2F0KFtjdXJyZW50XSksIGl0ZW1dO1xuICAgICAgfVxuICAgIH0sIFtbXSwgbnVsbF0pO1xuICAgIGlmIChmaW5hbCkge1xuICAgICAgZm91bmQucHVzaChmaW5hbCk7XG4gICAgfVxuICAgIHJldHVybiBmb3VuZDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gYXJyYXkgb2YgSW50ZXJ2YWxzIHJlcHJlc2VudGluZyB0aGUgc3BhbnMgb2YgdGltZSB0aGF0IG9ubHkgYXBwZWFyIGluIG9uZSBvZiB0aGUgc3BlY2lmaWVkIEludGVydmFscy5cbiAgICogQHBhcmFtIHtbSW50ZXJ2YWxdfSBpbnRlcnZhbHNcbiAgICogQHJldHVybiB7W0ludGVydmFsXX1cbiAgICovXG4gIHN0YXRpYyB4b3IoaW50ZXJ2YWxzKSB7XG4gICAgbGV0IHN0YXJ0ID0gbnVsbCxcbiAgICAgIGN1cnJlbnRDb3VudCA9IDA7XG4gICAgY29uc3QgcmVzdWx0cyA9IFtdLFxuICAgICAgZW5kcyA9IGludGVydmFscy5tYXAoaSA9PiBbeyB0aW1lOiBpLnMsIHR5cGU6ICdzJyB9LCB7IHRpbWU6IGkuZSwgdHlwZTogJ2UnIH1dKSxcbiAgICAgIGFyciA9IFV0aWwuZmxhdHRlbihlbmRzKS5zb3J0KChhLCBiKSA9PiBhLnRpbWUgLSBiLnRpbWUpO1xuXG4gICAgZm9yIChjb25zdCBpIG9mIGFycikge1xuICAgICAgY3VycmVudENvdW50ICs9IGkudHlwZSA9PT0gJ3MnID8gMSA6IC0xO1xuXG4gICAgICBpZiAoY3VycmVudENvdW50ID09PSAxKSB7XG4gICAgICAgIHN0YXJ0ID0gaS50aW1lO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHN0YXJ0ICYmICtzdGFydCAhPT0gK2kudGltZSkge1xuICAgICAgICAgIHJlc3VsdHMucHVzaChJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKHN0YXJ0LCBpLnRpbWUpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXJ0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gSW50ZXJ2YWwubWVyZ2UocmVzdWx0cyk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGFuIEludGVydmFsIHJlcHJlc2VudGluZyB0aGUgc3BhbiBvZiB0aW1lIGluIHRoaXMgSW50ZXJ2YWwgdGhhdCBkb2Vzbid0IG92ZXJsYXAgd2l0aCBhbnkgb2YgdGhlIHNwZWNpZmllZCBJbnRlcnZhbHMuXG4gICAqIEBwYXJhbSB7Li4uSW50ZXJ2YWx9IGludGVydmFsc1xuICAgKiBAcmV0dXJuIHtJbnRlcnZhbH1cbiAgICovXG4gIGRpZmZlcmVuY2UoLi4uaW50ZXJ2YWxzKSB7XG4gICAgcmV0dXJuIEludGVydmFsLnhvcihbdGhpc10uY29uY2F0KGludGVydmFscykpXG4gICAgICAubWFwKGkgPT4gdGhpcy5pbnRlcnNlY3Rpb24oaSkpXG4gICAgICAuZmlsdGVyKGkgPT4gaSAmJiAhaS5pc0VtcHR5KCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBJbnRlcnZhbCBhcHByb3ByaWF0ZSBmb3IgZGVidWdnaW5nLlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b1N0cmluZygpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIElOVkFMSUQ7XG4gICAgcmV0dXJuIGBbJHt0aGlzLnMudG9JU08oKX0g4oCTICR7dGhpcy5lLnRvSVNPKCl9KWA7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgSW50ZXJ2YWwuXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPXzg2MDEjVGltZV9pbnRlcnZhbHNcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdHMgLSBUaGUgc2FtZSBvcHRpb25zIGFzIHtAbGluayBEYXRlVGltZS50b0lTT31cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9JU08ob3B0cykge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gSU5WQUxJRDtcbiAgICByZXR1cm4gYCR7dGhpcy5zLnRvSVNPKG9wdHMpfS8ke3RoaXMuZS50b0lTTyhvcHRzKX1gO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBJbnRlcnZhbCBmb3JtYXR0ZWQgYWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpZWQgZm9ybWF0IHN0cmluZy5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGRhdGVGb3JtYXQgLSB0aGUgZm9ybWF0IHN0cmluZy4gVGhpcyBzdHJpbmcgZm9ybWF0cyB0aGUgc3RhcnQgYW5kIGVuZCB0aW1lLiBTZWUge0BsaW5rIERhdGVUaW1lLnRvRm9ybWF0fSBmb3IgZGV0YWlscy5cbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5zZXBhcmF0b3IgPSAgJyDigJMgJ10gLSBhIHNlcGFyYXRvciB0byBwbGFjZSBiZXR3ZWVuIHRoZSBzdGFydCBhbmQgZW5kIHJlcHJlc2VudGF0aW9uc1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b0Zvcm1hdChkYXRlRm9ybWF0LCB7IHNlcGFyYXRvciA9ICcg4oCTICcgfSA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiBJTlZBTElEO1xuICAgIHJldHVybiBgJHt0aGlzLnMudG9Gb3JtYXQoZGF0ZUZvcm1hdCl9JHtzZXBhcmF0b3J9JHt0aGlzLmUudG9Gb3JtYXQoZGF0ZUZvcm1hdCl9YDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYSBEdXJhdGlvbiByZXByZXNlbnRpbmcgdGhlIHRpbWUgc3Bhbm5lZCBieSB0aGlzIGludGVydmFsLlxuICAgKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gW3VuaXQ9WydtaWxsaXNlY29uZHMnXV0gLSB0aGUgdW5pdCBvciB1bml0cyAoc3VjaCBhcyAnaG91cnMnIG9yICdkYXlzJykgdG8gaW5jbHVkZSBpbiB0aGUgZHVyYXRpb24uXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyB0aGF0IGFmZmVjdCB0aGUgY3JlYXRpb24gb2YgdGhlIER1cmF0aW9uXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5jb252ZXJzaW9uQWNjdXJhY3k9J2Nhc3VhbCddIC0gdGhlIGNvbnZlcnNpb24gc3lzdGVtIHRvIHVzZVxuICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0MSwgZHQyKS50b0R1cmF0aW9uKCkudG9PYmplY3QoKSAvLz0+IHsgbWlsbGlzZWNvbmRzOiA4ODQ4OTI1NyB9XG4gICAqIEBleGFtcGxlIEludGVydmFsLmZyb21EYXRlVGltZXMoZHQxLCBkdDIpLnRvRHVyYXRpb24oJ2RheXMnKS50b09iamVjdCgpIC8vPT4geyBkYXlzOiAxLjAyNDE4MTIxNTI3Nzc3NzggfVxuICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0MSwgZHQyKS50b0R1cmF0aW9uKFsnaG91cnMnLCAnbWludXRlcyddKS50b09iamVjdCgpIC8vPT4geyBob3VyczogMjQsIG1pbnV0ZXM6IDM0LjgyMDk1IH1cbiAgICogQGV4YW1wbGUgSW50ZXJ2YWwuZnJvbURhdGVUaW1lcyhkdDEsIGR0MikudG9EdXJhdGlvbihbJ2hvdXJzJywgJ21pbnV0ZXMnLCAnc2Vjb25kcyddKS50b09iamVjdCgpIC8vPT4geyBob3VyczogMjQsIG1pbnV0ZXM6IDM0LCBzZWNvbmRzOiA0OS4yNTcgfVxuICAgKiBAZXhhbXBsZSBJbnRlcnZhbC5mcm9tRGF0ZVRpbWVzKGR0MSwgZHQyKS50b0R1cmF0aW9uKCdzZWNvbmRzJykudG9PYmplY3QoKSAvLz0+IHsgc2Vjb25kczogODg0ODkuMjU3IH1cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICB0b0R1cmF0aW9uKHVuaXQsIG9wdHMpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIER1cmF0aW9uLmludmFsaWQodGhpcy5pbnZhbGlkUmVhc29uKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuZS5kaWZmKHRoaXMucywgdW5pdCwgb3B0cyk7XG4gIH1cbn1cbiIsImltcG9ydCB7IFV0aWwgfSBmcm9tICcuL3V0aWwnO1xuaW1wb3J0IHsgRm9ybWF0dGVyIH0gZnJvbSAnLi9mb3JtYXR0ZXInO1xuaW1wb3J0IHsgRml4ZWRPZmZzZXRab25lIH0gZnJvbSAnLi4vem9uZXMvZml4ZWRPZmZzZXRab25lJztcbmltcG9ydCB7IElBTkFab25lIH0gZnJvbSAnLi4vem9uZXMvSUFOQVpvbmUnO1xuXG5mdW5jdGlvbiBpbnRVbml0KHJlZ2V4LCBwb3N0ID0gaSA9PiBpKSB7XG4gIHJldHVybiB7IHJlZ2V4LCBkZXNlcjogKFtzXSkgPT4gcG9zdChwYXJzZUludChzLCAxMCkpIH07XG59XG5cbmZ1bmN0aW9uIG9uZU9mKHN0cmluZ3MsIHN0YXJ0SW5kZXgpIHtcbiAgcmV0dXJuIHtcbiAgICByZWdleDogUmVnRXhwKHN0cmluZ3Muam9pbignfCcpKSxcbiAgICBkZXNlcjogKFtzXSkgPT4gc3RyaW5ncy5pbmRleE9mKHMpICsgc3RhcnRJbmRleFxuICB9O1xufVxuXG5mdW5jdGlvbiBvZmZzZXQocmVnZXgsIGdyb3Vwcykge1xuICByZXR1cm4geyByZWdleCwgZGVzZXI6IChbLCBoLCBtXSkgPT4gVXRpbC5zaWduZWRPZmZzZXQoaCwgbSksIGdyb3VwcyB9O1xufVxuXG5mdW5jdGlvbiBzaW1wbGUocmVnZXgpIHtcbiAgcmV0dXJuIHsgcmVnZXgsIGRlc2VyOiAoW3NdKSA9PiBzIH07XG59XG5cbmZ1bmN0aW9uIHVuaXRGb3JUb2tlbih0b2tlbiwgbG9jKSB7XG4gIGNvbnN0IG9uZSA9IC9cXGQvLFxuICAgIHR3byA9IC9cXGRcXGQvLFxuICAgIHRocmVlID0gL1xcZHszfS8sXG4gICAgZm91ciA9IC9cXGR7NH0vLFxuICAgIG9uZU9yVHdvID0gL1xcZFxcZD8vLFxuICAgIG9uZVRvVGhyZWUgPSAvXFxkXFxkezJ9Py8sXG4gICAgdHdvVG9Gb3VyID0gL1xcZFxcZFxcZHsyfT8vLFxuICAgIGxpdGVyYWwgPSB0ID0+ICh7IHJlZ2V4OiBSZWdFeHAodC52YWwpLCBkZXNlcjogKFtzXSkgPT4gcywgbGl0ZXJhbDogdHJ1ZSB9KSxcbiAgICB1bml0YXRlID0gdCA9PiB7XG4gICAgICBpZiAodG9rZW4ubGl0ZXJhbCkge1xuICAgICAgICByZXR1cm4gbGl0ZXJhbCh0KTtcbiAgICAgIH1cblxuICAgICAgc3dpdGNoICh0LnZhbCkge1xuICAgICAgICAvLyBlcmFcbiAgICAgICAgY2FzZSAnRyc6XG4gICAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5lcmFzKCdzaG9ydCcpLCAwKTtcbiAgICAgICAgY2FzZSAnR0cnOlxuICAgICAgICAgIHJldHVybiBvbmVPZihsb2MuZXJhcygnbG9uZycpLCAwKTtcbiAgICAgICAgLy8geWVhcnNcbiAgICAgICAgY2FzZSAneXl5eSc6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQoZm91cik7XG4gICAgICAgIGNhc2UgJ3l5JzpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdCh0d29Ub0ZvdXIsIFV0aWwudW50cnVuY2F0ZVllYXIpO1xuICAgICAgICAvLyBtb250aHNcbiAgICAgICAgY2FzZSAnTSc6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pO1xuICAgICAgICBjYXNlICdNTSc6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTtcbiAgICAgICAgY2FzZSAnTU1NJzpcbiAgICAgICAgICByZXR1cm4gb25lT2YobG9jLm1vbnRocygnc2hvcnQnLCB0cnVlKSwgMSk7XG4gICAgICAgIGNhc2UgJ01NTU0nOlxuICAgICAgICAgIHJldHVybiBvbmVPZihsb2MubW9udGhzKCdsb25nJywgdHJ1ZSksIDEpO1xuICAgICAgICBjYXNlICdMJzpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7XG4gICAgICAgIGNhc2UgJ0xMJzpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pO1xuICAgICAgICBjYXNlICdMTEwnOlxuICAgICAgICAgIHJldHVybiBvbmVPZihsb2MubW9udGhzKCdzaG9ydCcsIGZhbHNlKSwgMSk7XG4gICAgICAgIGNhc2UgJ0xMTEwnOlxuICAgICAgICAgIHJldHVybiBvbmVPZihsb2MubW9udGhzKCdsb25nJywgZmFsc2UpLCAxKTtcbiAgICAgICAgLy8gZGF0ZXNcbiAgICAgICAgY2FzZSAnZCc6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQob25lT3JUd28pO1xuICAgICAgICBjYXNlICdkZCc6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQodHdvKTtcbiAgICAgICAgLy8gb3JkaW5hbHNcbiAgICAgICAgY2FzZSAnbyc6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQob25lVG9UaHJlZSk7XG4gICAgICAgIGNhc2UgJ29vbyc6XG4gICAgICAgICAgcmV0dXJuIGludFVuaXQodGhyZWUpO1xuICAgICAgICAvLyB0aW1lXG4gICAgICAgIGNhc2UgJ0hIJzpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pO1xuICAgICAgICBjYXNlICdIJzpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7XG4gICAgICAgIGNhc2UgJ2hoJzpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pO1xuICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7XG4gICAgICAgIGNhc2UgJ21tJzpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdCh0d28pO1xuICAgICAgICBjYXNlICdtJzpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdChvbmVPclR3byk7XG4gICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcbiAgICAgICAgY2FzZSAnc3MnOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7XG4gICAgICAgIGNhc2UgJ1MnOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KG9uZVRvVGhyZWUpO1xuICAgICAgICBjYXNlICdTU1MnOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KHRocmVlKTtcbiAgICAgICAgLy8gbWVyaWRpZW1cbiAgICAgICAgY2FzZSAnYSc6XG4gICAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy5tZXJpZGllbXMoKSwgMCk7XG4gICAgICAgIC8vIHdlZWtZZWFyIChrKVxuICAgICAgICBjYXNlICdra2trJzpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdChmb3VyKTtcbiAgICAgICAgY2FzZSAna2snOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KHR3b1RvRm91ciwgVXRpbC51bnRydW5jYXRlWWVhcik7XG4gICAgICAgIC8vIHdlZWtOdW1iZXIgKFcpXG4gICAgICAgIGNhc2UgJ1cnOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KG9uZU9yVHdvKTtcbiAgICAgICAgY2FzZSAnV1cnOlxuICAgICAgICAgIHJldHVybiBpbnRVbml0KHR3byk7XG4gICAgICAgIC8vIHdlZWtkYXlzXG4gICAgICAgIGNhc2UgJ0UnOlxuICAgICAgICBjYXNlICdjJzpcbiAgICAgICAgICByZXR1cm4gaW50VW5pdChvbmUpO1xuICAgICAgICBjYXNlICdFRUUnOlxuICAgICAgICAgIHJldHVybiBvbmVPZihsb2Mud2Vla2RheXMoJ3Nob3J0JywgdHJ1ZSksIDEpO1xuICAgICAgICBjYXNlICdFRUVFJzpcbiAgICAgICAgICByZXR1cm4gb25lT2YobG9jLndlZWtkYXlzKCdsb25nJywgdHJ1ZSksIDEpO1xuICAgICAgICBjYXNlICdjY2MnOlxuICAgICAgICAgIHJldHVybiBvbmVPZihsb2Mud2Vla2RheXMoJ3Nob3J0JywgZmFsc2UpLCAxKTtcbiAgICAgICAgY2FzZSAnY2NjYyc6XG4gICAgICAgICAgcmV0dXJuIG9uZU9mKGxvYy53ZWVrZGF5cygnbG9uZycsIGZhbHNlKSwgMSk7XG4gICAgICAgIC8vIG9mZnNldC96b25lXG4gICAgICAgIGNhc2UgJ1onOlxuICAgICAgICBjYXNlICdaWic6XG4gICAgICAgICAgcmV0dXJuIG9mZnNldCgvKFsrLV1cXGR7MSwyfSkoPzo6KFxcZHsyfSkpPy8sIDIpO1xuICAgICAgICBjYXNlICdaWlonOlxuICAgICAgICAgIHJldHVybiBvZmZzZXQoLyhbKy1dXFxkezEsMn0pKFxcZHsyfSk/LywgMik7XG4gICAgICAgIC8vIHdlIGRvbid0IHN1cHBvcnQgWlpaWiAoUFNUKSBvciBaWlpaWiAoUGFjaWZpYyBTdGFuZGFyZCBUaW1lKSBpbiBwYXJzaW5nXG4gICAgICAgIC8vIGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSBhbnkgd2F5IHRvIGZpZ3VyZSBvdXQgd2hhdCB0aGV5IGFyZVxuICAgICAgICBjYXNlICd6JzpcbiAgICAgICAgICByZXR1cm4gc2ltcGxlKC9bQS1aYS16X10rXFwvW0EtWmEtel9dKy8pO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiBsaXRlcmFsKHQpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdW5pdCA9IHVuaXRhdGUodG9rZW4pO1xuICB1bml0LnRva2VuID0gdG9rZW47XG4gIHJldHVybiB1bml0O1xufVxuXG5mdW5jdGlvbiBidWlsZFJlZ2V4KHVuaXRzKSB7XG4gIHJldHVybiBbdW5pdHMubWFwKHUgPT4gdS5yZWdleCkucmVkdWNlKChmLCByKSA9PiBgJHtmfSgke3Iuc291cmNlfSlgLCAnJyksIHVuaXRzXTtcbn1cblxuZnVuY3Rpb24gbWF0Y2goaW5wdXQsIHJlZ2V4LCBoYW5kbGVycykge1xuICBjb25zdCBtYXRjaGVzID0gaW5wdXQubWF0Y2gocmVnZXgpO1xuXG4gIGlmIChtYXRjaGVzKSB7XG4gICAgY29uc3QgYWxsID0ge307XG4gICAgbGV0IG1hdGNoSW5kZXggPSAxO1xuICAgIGZvciAoY29uc3QgaSBpbiBoYW5kbGVycykge1xuICAgICAgaWYgKGhhbmRsZXJzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgIGNvbnN0IGggPSBoYW5kbGVyc1tpXSxcbiAgICAgICAgICBncm91cHMgPSBoLmdyb3VwcyA/IGguZ3JvdXBzICsgMSA6IDE7XG4gICAgICAgIGlmICghaC5saXRlcmFsICYmIGgudG9rZW4pIHtcbiAgICAgICAgICBhbGxbaC50b2tlbi52YWxbMF1dID0gaC5kZXNlcihtYXRjaGVzLnNsaWNlKG1hdGNoSW5kZXgsIG1hdGNoSW5kZXggKyBncm91cHMpKTtcbiAgICAgICAgfVxuICAgICAgICBtYXRjaEluZGV4ICs9IGdyb3VwcztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFsbDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4ge307XG4gIH1cbn1cblxuZnVuY3Rpb24gZGF0ZVRpbWVGcm9tTWF0Y2hlcyhtYXRjaGVzKSB7XG4gIGNvbnN0IHRvRmllbGQgPSB0b2tlbiA9PiB7XG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgY2FzZSAnUyc6XG4gICAgICAgIHJldHVybiAnbWlsbGlzZWNvbmQnO1xuICAgICAgY2FzZSAncyc6XG4gICAgICAgIHJldHVybiAnc2Vjb25kJztcbiAgICAgIGNhc2UgJ20nOlxuICAgICAgICByZXR1cm4gJ21pbnV0ZSc7XG4gICAgICBjYXNlICdoJzpcbiAgICAgIGNhc2UgJ0gnOlxuICAgICAgICByZXR1cm4gJ2hvdXInO1xuICAgICAgY2FzZSAnZCc6XG4gICAgICAgIHJldHVybiAnZGF5JztcbiAgICAgIGNhc2UgJ28nOlxuICAgICAgICByZXR1cm4gJ29yZGluYWwnO1xuICAgICAgY2FzZSAnTCc6XG4gICAgICBjYXNlICdNJzpcbiAgICAgICAgcmV0dXJuICdtb250aCc7XG4gICAgICBjYXNlICd5JzpcbiAgICAgICAgcmV0dXJuICd5ZWFyJztcbiAgICAgIGNhc2UgJ0UnOlxuICAgICAgY2FzZSAnYyc6XG4gICAgICAgIHJldHVybiAnd2Vla2RheSc7XG4gICAgICBjYXNlICdXJzpcbiAgICAgICAgcmV0dXJuICd3ZWVrTnVtYmVyJztcbiAgICAgIGNhc2UgJ2snOlxuICAgICAgICByZXR1cm4gJ3dlZWtZZWFyJztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgfTtcblxuICBsZXQgem9uZTtcbiAgaWYgKCFVdGlsLmlzVW5kZWZpbmVkKG1hdGNoZXMuWikpIHtcbiAgICB6b25lID0gbmV3IEZpeGVkT2Zmc2V0Wm9uZShtYXRjaGVzLlopO1xuICB9IGVsc2UgaWYgKCFVdGlsLmlzVW5kZWZpbmVkKG1hdGNoZXMueikpIHtcbiAgICB6b25lID0gbmV3IElBTkFab25lKG1hdGNoZXMueik7XG4gIH0gZWxzZSB7XG4gICAgem9uZSA9IG51bGw7XG4gIH1cblxuICBpZiAoIVV0aWwuaXNVbmRlZmluZWQobWF0Y2hlcy5oKSAmJiBtYXRjaGVzLmEgPT09IDEpIHtcbiAgICBtYXRjaGVzLmggKz0gMTI7XG4gIH1cblxuICBpZiAobWF0Y2hlcy5HID09PSAwICYmIG1hdGNoZXMueSkge1xuICAgIG1hdGNoZXMueSA9IC1tYXRjaGVzLnk7XG4gIH1cblxuICBjb25zdCB2YWxzID0gT2JqZWN0LmtleXMobWF0Y2hlcykucmVkdWNlKChyLCBrKSA9PiB7XG4gICAgY29uc3QgZiA9IHRvRmllbGQoayk7XG4gICAgaWYgKGYpIHtcbiAgICAgIHJbZl0gPSBtYXRjaGVzW2tdO1xuICAgIH1cblxuICAgIHJldHVybiByO1xuICB9LCB7fSk7XG5cbiAgcmV0dXJuIFt2YWxzLCB6b25lXTtcbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5cbmV4cG9ydCBjbGFzcyBUb2tlblBhcnNlciB7XG4gIGNvbnN0cnVjdG9yKGxvYykge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbG9jJywgeyB2YWx1ZTogbG9jLCBlbnVtZXJhYmxlOiB0cnVlIH0pO1xuICB9XG5cbiAgZXhwbGFpblBhcnNlKGlucHV0LCBmb3JtYXQpIHtcbiAgICBjb25zdCB0b2tlbnMgPSBGb3JtYXR0ZXIucGFyc2VGb3JtYXQoZm9ybWF0KSxcbiAgICAgIHVuaXRzID0gdG9rZW5zLm1hcCh0ID0+IHVuaXRGb3JUb2tlbih0LCB0aGlzLmxvYykpLFxuICAgICAgW3JlZ2V4LCBoYW5kbGVyc10gPSBidWlsZFJlZ2V4KHVuaXRzKSxcbiAgICAgIG1hdGNoZXMgPSBtYXRjaChpbnB1dCwgcmVnZXgsIGhhbmRsZXJzKSxcbiAgICAgIFtyZXN1bHQsIHpvbmVdID0gbWF0Y2hlcyA/IGRhdGVUaW1lRnJvbU1hdGNoZXMobWF0Y2hlcykgOiBbbnVsbCwgbnVsbF07XG5cbiAgICByZXR1cm4geyBpbnB1dCwgdG9rZW5zLCByZWdleCwgbWF0Y2hlcywgcmVzdWx0LCB6b25lIH07XG4gIH1cblxuICBwYXJzZURhdGVUaW1lKGlucHV0LCBmb3JtYXQpIHtcbiAgICBjb25zdCB7IHJlc3VsdCwgem9uZSB9ID0gdGhpcy5leHBsYWluUGFyc2UoaW5wdXQsIGZvcm1hdCk7XG4gICAgcmV0dXJuIFtyZXN1bHQsIHpvbmVdO1xuICB9XG59XG4iLCJpbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi91dGlsJztcblxuY29uc3Qgbm9uTGVhcExhZGRlciA9IFswLCAzMSwgNTksIDkwLCAxMjAsIDE1MSwgMTgxLCAyMTIsIDI0MywgMjczLCAzMDQsIDMzNF0sXG4gIGxlYXBMYWRkZXIgPSBbMCwgMzEsIDYwLCA5MSwgMTIxLCAxNTIsIDE4MiwgMjEzLCAyNDQsIDI3NCwgMzA1LCAzMzVdO1xuXG5mdW5jdGlvbiBkYXlPZldlZWsoeWVhciwgbW9udGgsIGRheSkge1xuICBjb25zdCBqcyA9IG5ldyBEYXRlKERhdGUuVVRDKHllYXIsIG1vbnRoIC0gMSwgZGF5KSkuZ2V0VVRDRGF5KCk7XG4gIHJldHVybiBqcyA9PT0gMCA/IDcgOiBqcztcbn1cblxuZnVuY3Rpb24gbGFzdFdlZWtOdW1iZXIod2Vla1llYXIpIHtcbiAgY29uc3QgcDEgPVxuICAgICAgKHdlZWtZZWFyICtcbiAgICAgICAgTWF0aC5mbG9vcih3ZWVrWWVhciAvIDQpIC1cbiAgICAgICAgTWF0aC5mbG9vcih3ZWVrWWVhciAvIDEwMCkgK1xuICAgICAgICBNYXRoLmZsb29yKHdlZWtZZWFyIC8gNDAwKSkgJVxuICAgICAgNyxcbiAgICBsYXN0ID0gd2Vla1llYXIgLSAxLFxuICAgIHAyID0gKGxhc3QgKyBNYXRoLmZsb29yKGxhc3QgLyA0KSAtIE1hdGguZmxvb3IobGFzdCAvIDEwMCkgKyBNYXRoLmZsb29yKGxhc3QgLyA0MDApKSAlIDc7XG4gIHJldHVybiBwMSA9PT0gNCB8fCBwMiA9PT0gMyA/IDUzIDogNTI7XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVPcmRpbmFsKHllYXIsIG1vbnRoLCBkYXkpIHtcbiAgcmV0dXJuIGRheSArIChVdGlsLmlzTGVhcFllYXIoeWVhcikgPyBsZWFwTGFkZGVyIDogbm9uTGVhcExhZGRlcilbbW9udGggLSAxXTtcbn1cblxuZnVuY3Rpb24gdW5jb21wdXRlT3JkaW5hbCh5ZWFyLCBvcmRpbmFsKSB7XG4gIGNvbnN0IHRhYmxlID0gVXRpbC5pc0xlYXBZZWFyKHllYXIpID8gbGVhcExhZGRlciA6IG5vbkxlYXBMYWRkZXIsXG4gICAgbW9udGgwID0gdGFibGUuZmluZEluZGV4KGkgPT4gaSA8IG9yZGluYWwpLFxuICAgIGRheSA9IG9yZGluYWwgLSB0YWJsZVttb250aDBdO1xuICByZXR1cm4geyBtb250aDogbW9udGgwICsgMSwgZGF5IH07XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuXG5leHBvcnQgY2xhc3MgQ29udmVyc2lvbnMge1xuICBzdGF0aWMgZ3JlZ29yaWFuVG9XZWVrKGdyZWdPYmopIHtcbiAgICBjb25zdCB7IHllYXIsIG1vbnRoLCBkYXkgfSA9IGdyZWdPYmosXG4gICAgICBvcmRpbmFsID0gY29tcHV0ZU9yZGluYWwoeWVhciwgbW9udGgsIGRheSksXG4gICAgICB3ZWVrZGF5ID0gZGF5T2ZXZWVrKHllYXIsIG1vbnRoLCBkYXkpO1xuXG4gICAgbGV0IHdlZWtOdW1iZXIgPSBNYXRoLmZsb29yKChvcmRpbmFsIC0gd2Vla2RheSArIDEwKSAvIDcpLFxuICAgICAgd2Vla1llYXI7XG5cbiAgICBpZiAod2Vla051bWJlciA8IDEpIHtcbiAgICAgIHdlZWtZZWFyID0geWVhciAtIDE7XG4gICAgICB3ZWVrTnVtYmVyID0gbGFzdFdlZWtOdW1iZXIod2Vla1llYXIpO1xuICAgIH0gZWxzZSBpZiAod2Vla051bWJlciA+IGxhc3RXZWVrTnVtYmVyKHllYXIpKSB7XG4gICAgICB3ZWVrWWVhciA9IHllYXIgKyAxO1xuICAgICAgd2Vla051bWJlciA9IDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdlZWtZZWFyID0geWVhcjtcbiAgICB9XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7IHdlZWtZZWFyLCB3ZWVrTnVtYmVyLCB3ZWVrZGF5IH0sIFV0aWwudGltZU9iamVjdChncmVnT2JqKSk7XG4gIH1cblxuICBzdGF0aWMgd2Vla1RvR3JlZ29yaWFuKHdlZWtEYXRhKSB7XG4gICAgY29uc3QgeyB3ZWVrWWVhciwgd2Vla051bWJlciwgd2Vla2RheSB9ID0gd2Vla0RhdGEsXG4gICAgICB3ZWVrZGF5T2ZKYW40ID0gZGF5T2ZXZWVrKHdlZWtZZWFyLCAxLCA0KSxcbiAgICAgIGRheXNJblllYXIgPSBVdGlsLmRheXNJblllYXIod2Vla1llYXIpO1xuICAgIGxldCBvcmRpbmFsID0gd2Vla051bWJlciAqIDcgKyB3ZWVrZGF5IC0gd2Vla2RheU9mSmFuNCAtIDMsXG4gICAgICB5ZWFyO1xuXG4gICAgaWYgKG9yZGluYWwgPCAxKSB7XG4gICAgICB5ZWFyID0gd2Vla1llYXIgLSAxO1xuICAgICAgb3JkaW5hbCArPSBVdGlsLmRheXNJblllYXIoeWVhcik7XG4gICAgfSBlbHNlIGlmIChvcmRpbmFsID4gZGF5c0luWWVhcikge1xuICAgICAgeWVhciA9IHdlZWtZZWFyICsgMTtcbiAgICAgIG9yZGluYWwgLT0gVXRpbC5kYXlzSW5ZZWFyKHllYXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB5ZWFyID0gd2Vla1llYXI7XG4gICAgfVxuXG4gICAgY29uc3QgeyBtb250aCwgZGF5IH0gPSB1bmNvbXB1dGVPcmRpbmFsKHllYXIsIG9yZGluYWwpO1xuXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oeyB5ZWFyLCBtb250aCwgZGF5IH0sIFV0aWwudGltZU9iamVjdCh3ZWVrRGF0YSkpO1xuICB9XG5cbiAgc3RhdGljIGdyZWdvcmlhblRvT3JkaW5hbChncmVnRGF0YSkge1xuICAgIGNvbnN0IHsgeWVhciwgbW9udGgsIGRheSB9ID0gZ3JlZ0RhdGEsXG4gICAgICBvcmRpbmFsID0gY29tcHV0ZU9yZGluYWwoeWVhciwgbW9udGgsIGRheSk7XG5cbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbih7IHllYXIsIG9yZGluYWwgfSwgVXRpbC50aW1lT2JqZWN0KGdyZWdEYXRhKSk7XG4gIH1cblxuICBzdGF0aWMgb3JkaW5hbFRvR3JlZ29yaWFuKG9yZGluYWxEYXRhKSB7XG4gICAgY29uc3QgeyB5ZWFyLCBvcmRpbmFsIH0gPSBvcmRpbmFsRGF0YSxcbiAgICAgIHsgbW9udGgsIGRheSB9ID0gdW5jb21wdXRlT3JkaW5hbCh5ZWFyLCBvcmRpbmFsKTtcblxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKHsgeWVhciwgbW9udGgsIGRheSB9LCBVdGlsLnRpbWVPYmplY3Qob3JkaW5hbERhdGEpKTtcbiAgfVxuXG4gIHN0YXRpYyBoYXNJbnZhbGlkV2Vla0RhdGEob2JqKSB7XG4gICAgY29uc3QgdmFsaWRZZWFyID0gVXRpbC5pc051bWJlcihvYmoud2Vla1llYXIpLFxuICAgICAgdmFsaWRXZWVrID0gVXRpbC5udW1iZXJCZXR3ZWVuKG9iai53ZWVrTnVtYmVyLCAxLCBsYXN0V2Vla051bWJlcihvYmoud2Vla1llYXIpKSxcbiAgICAgIHZhbGlkV2Vla2RheSA9IFV0aWwubnVtYmVyQmV0d2VlbihvYmoud2Vla2RheSwgMSwgNyk7XG5cbiAgICBpZiAoIXZhbGlkWWVhcikge1xuICAgICAgcmV0dXJuICd3ZWVrWWVhciBvdXQgb2YgcmFuZ2UnO1xuICAgIH0gZWxzZSBpZiAoIXZhbGlkV2Vlaykge1xuICAgICAgcmV0dXJuICd3ZWVrIG91dCBvZiByYW5nZSc7XG4gICAgfSBlbHNlIGlmICghdmFsaWRXZWVrZGF5KSB7XG4gICAgICByZXR1cm4gJ3dlZWtkYXkgb3V0IG9mIHJhbmdlJztcbiAgICB9IGVsc2UgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3RhdGljIGhhc0ludmFsaWRPcmRpbmFsRGF0YShvYmopIHtcbiAgICBjb25zdCB2YWxpZFllYXIgPSBVdGlsLmlzTnVtYmVyKG9iai55ZWFyKSxcbiAgICAgIHZhbGlkT3JkaW5hbCA9IFV0aWwubnVtYmVyQmV0d2VlbihvYmoub3JkaW5hbCwgMSwgVXRpbC5kYXlzSW5ZZWFyKG9iai55ZWFyKSk7XG5cbiAgICBpZiAoIXZhbGlkWWVhcikge1xuICAgICAgcmV0dXJuICd5ZWFyIG91dCBvZiByYW5nZSc7XG4gICAgfSBlbHNlIGlmICghdmFsaWRPcmRpbmFsKSB7XG4gICAgICByZXR1cm4gJ29yZGluYWwgb3V0IG9mIHJhbmdlJztcbiAgICB9IGVsc2UgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3RhdGljIGhhc0ludmFsaWRHcmVnb3JpYW5EYXRhKG9iaikge1xuICAgIGNvbnN0IHZhbGlkWWVhciA9IFV0aWwuaXNOdW1iZXIob2JqLnllYXIpLFxuICAgICAgdmFsaWRNb250aCA9IFV0aWwubnVtYmVyQmV0d2VlbihvYmoubW9udGgsIDEsIDEyKSxcbiAgICAgIHZhbGlkRGF5ID0gVXRpbC5udW1iZXJCZXR3ZWVuKG9iai5kYXksIDEsIFV0aWwuZGF5c0luTW9udGgob2JqLnllYXIsIG9iai5tb250aCkpO1xuXG4gICAgaWYgKCF2YWxpZFllYXIpIHtcbiAgICAgIHJldHVybiAneWVhciBvdXQgb2YgcmFuZ2UnO1xuICAgIH0gZWxzZSBpZiAoIXZhbGlkTW9udGgpIHtcbiAgICAgIHJldHVybiAnbW9udGggb3V0IG9mIHJhbmdlJztcbiAgICB9IGVsc2UgaWYgKCF2YWxpZERheSkge1xuICAgICAgcmV0dXJuICdkYXkgb3V0IG9mIHJhbmdlJztcbiAgICB9IGVsc2UgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3RhdGljIGhhc0ludmFsaWRUaW1lRGF0YShvYmopIHtcbiAgICBjb25zdCB2YWxpZEhvdXIgPSBVdGlsLm51bWJlckJldHdlZW4ob2JqLmhvdXIsIDAsIDIzKSxcbiAgICAgIHZhbGlkTWludXRlID0gVXRpbC5udW1iZXJCZXR3ZWVuKG9iai5taW51dGUsIDAsIDU5KSxcbiAgICAgIHZhbGlkU2Vjb25kID0gVXRpbC5udW1iZXJCZXR3ZWVuKG9iai5zZWNvbmQsIDAsIDU5KSxcbiAgICAgIHZhbGlkTWlsbGlzZWNvbmQgPSBVdGlsLm51bWJlckJldHdlZW4ob2JqLm1pbGxpc2Vjb25kLCAwLCA5OTkpO1xuXG4gICAgaWYgKCF2YWxpZEhvdXIpIHtcbiAgICAgIHJldHVybiAnaG91ciBvdXQgb2YgcmFuZ2UnO1xuICAgIH0gZWxzZSBpZiAoIXZhbGlkTWludXRlKSB7XG4gICAgICByZXR1cm4gJ21pbnV0ZSBvdXQgb2YgcmFuZ2UnO1xuICAgIH0gZWxzZSBpZiAoIXZhbGlkU2Vjb25kKSB7XG4gICAgICByZXR1cm4gJ3NlY29uZCBvdXQgb2YgcmFuZ2UnO1xuICAgIH0gZWxzZSBpZiAoIXZhbGlkTWlsbGlzZWNvbmQpIHtcbiAgICAgIHJldHVybiAnbWlsbGlzZWNvbmQgb3V0IG9mIHJhbmdlJztcbiAgICB9IGVsc2UgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iLCJpbXBvcnQgeyBEdXJhdGlvbiB9IGZyb20gJy4vZHVyYXRpb24nO1xuaW1wb3J0IHsgSW50ZXJ2YWwgfSBmcm9tICcuL2ludGVydmFsJztcbmltcG9ydCB7IFNldHRpbmdzIH0gZnJvbSAnLi9zZXR0aW5ncyc7XG5pbXBvcnQgeyBGb3JtYXR0ZXIgfSBmcm9tICcuL2ltcGwvZm9ybWF0dGVyJztcbmltcG9ydCB7IEZpeGVkT2Zmc2V0Wm9uZSB9IGZyb20gJy4vem9uZXMvZml4ZWRPZmZzZXRab25lJztcbmltcG9ydCB7IExvY2FsWm9uZSB9IGZyb20gJy4vem9uZXMvbG9jYWxab25lJztcbmltcG9ydCB7IExvY2FsZSB9IGZyb20gJy4vaW1wbC9sb2NhbGUnO1xuaW1wb3J0IHsgVXRpbCB9IGZyb20gJy4vaW1wbC91dGlsJztcbmltcG9ydCB7IFJlZ2V4UGFyc2VyIH0gZnJvbSAnLi9pbXBsL3JlZ2V4UGFyc2VyJztcbmltcG9ydCB7IFRva2VuUGFyc2VyIH0gZnJvbSAnLi9pbXBsL3Rva2VuUGFyc2VyJztcbmltcG9ydCB7IENvbnZlcnNpb25zIH0gZnJvbSAnLi9pbXBsL2NvbnZlcnNpb25zJztcbmltcG9ydCB7XG4gIEludmFsaWRBcmd1bWVudEVycm9yLFxuICBDb25mbGljdGluZ1NwZWNpZmljYXRpb25FcnJvcixcbiAgSW52YWxpZFVuaXRFcnJvcixcbiAgSW52YWxpZERhdGVUaW1lRXJyb3Jcbn0gZnJvbSAnLi9lcnJvcnMnO1xuXG5jb25zdCBJTlZBTElEID0gJ0ludmFsaWQgRGF0ZVRpbWUnLFxuICBVTlNVUFBPUlRFRF9aT05FID0gJ3Vuc3VwcG9ydGVkIHpvbmUnO1xuXG5mdW5jdGlvbiBwb3NzaWJseUNhY2hlZFdlZWtEYXRhKGR0KSB7XG4gIGlmIChkdC53ZWVrRGF0YSA9PT0gbnVsbCkge1xuICAgIGR0LndlZWtEYXRhID0gQ29udmVyc2lvbnMuZ3JlZ29yaWFuVG9XZWVrKGR0LmMpO1xuICB9XG4gIHJldHVybiBkdC53ZWVrRGF0YTtcbn1cblxuZnVuY3Rpb24gY2xvbmUoaW5zdCwgYWx0cyA9IHt9KSB7XG4gIGNvbnN0IGN1cnJlbnQgPSB7XG4gICAgdHM6IGluc3QudHMsXG4gICAgem9uZTogaW5zdC56b25lLFxuICAgIGM6IGluc3QuYyxcbiAgICBvOiBpbnN0Lm8sXG4gICAgbG9jOiBpbnN0LmxvYyxcbiAgICBpbnZhbGlkUmVhc29uOiBpbnN0LmludmFsaWRSZWFzb25cbiAgfTtcbiAgcmV0dXJuIG5ldyBEYXRlVGltZShPYmplY3QuYXNzaWduKHt9LCBjdXJyZW50LCBhbHRzLCB7IG9sZDogY3VycmVudCB9KSk7XG59XG5cbmZ1bmN0aW9uIGZpeE9mZnNldChsb2NhbFRTLCBvLCB0eikge1xuICAvLyBPdXIgVVRDIHRpbWUgaXMganVzdCBhIGd1ZXNzIGJlY2F1c2Ugb3VyIG9mZnNldCBpcyBqdXN0IGEgZ3Vlc3NcbiAgbGV0IHV0Y0d1ZXNzID0gbG9jYWxUUyAtIG8gKiA2MCAqIDEwMDA7XG5cbiAgLy8gVGVzdCB3aGV0aGVyIHRoZSB6b25lIG1hdGNoZXMgdGhlIG9mZnNldCBmb3IgdGhpcyB0c1xuICBjb25zdCBvMiA9IHR6Lm9mZnNldCh1dGNHdWVzcyk7XG5cbiAgLy8gSWYgc28sIG9mZnNldCBkaWRuJ3QgY2hhbmdlIGFuZCB3ZSdyZSBkb25lXG4gIGlmIChvID09PSBvMikge1xuICAgIHJldHVybiBbdXRjR3Vlc3MsIG9dO1xuICB9XG5cbiAgLy8gSWYgbm90LCBjaGFuZ2UgdGhlIHRzIGJ5IHRoZSBkaWZmZXJlbmNlIGluIHRoZSBvZmZzZXRcbiAgdXRjR3Vlc3MgLT0gKG8yIC0gbykgKiA2MCAqIDEwMDA7XG5cbiAgLy8gSWYgdGhhdCBnaXZlcyB1cyB0aGUgbG9jYWwgdGltZSB3ZSB3YW50LCB3ZSdyZSBkb25lXG4gIGNvbnN0IG8zID0gdHoub2Zmc2V0KHV0Y0d1ZXNzKTtcbiAgaWYgKG8yID09PSBvMykge1xuICAgIHJldHVybiBbdXRjR3Vlc3MsIG8yXTtcbiAgfVxuXG4gIC8vIElmIGl0J3MgZGlmZmVyZW50LCB3ZSdyZSBpbiBhIGhvbGUgdGltZS4gVGhlIG9mZnNldCBoYXMgY2hhbmdlZCwgYnV0IHRoZSB3ZSBkb24ndCBhZGp1c3QgdGhlIHRpbWVcbiAgcmV0dXJuIFtsb2NhbFRTIC0gTWF0aC5taW4obzIsIG8zKSAqIDYwICogMTAwMCwgTWF0aC5tYXgobzIsIG8zKV07XG59XG5cbmZ1bmN0aW9uIHRzVG9PYmoodHMsIG9mZnNldCkge1xuICB0cyArPSBvZmZzZXQgKiA2MCAqIDEwMDA7XG5cbiAgY29uc3QgZCA9IG5ldyBEYXRlKHRzKTtcblxuICByZXR1cm4ge1xuICAgIHllYXI6IGQuZ2V0VVRDRnVsbFllYXIoKSxcbiAgICBtb250aDogZC5nZXRVVENNb250aCgpICsgMSxcbiAgICBkYXk6IGQuZ2V0VVRDRGF0ZSgpLFxuICAgIGhvdXI6IGQuZ2V0VVRDSG91cnMoKSxcbiAgICBtaW51dGU6IGQuZ2V0VVRDTWludXRlcygpLFxuICAgIHNlY29uZDogZC5nZXRVVENTZWNvbmRzKCksXG4gICAgbWlsbGlzZWNvbmQ6IGQuZ2V0VVRDTWlsbGlzZWNvbmRzKClcbiAgfTtcbn1cblxuZnVuY3Rpb24gb2JqVG9Mb2NhbFRTKG9iaikge1xuICBsZXQgZCA9IERhdGUuVVRDKFxuICAgIG9iai55ZWFyLFxuICAgIG9iai5tb250aCAtIDEsXG4gICAgb2JqLmRheSxcbiAgICBvYmouaG91cixcbiAgICBvYmoubWludXRlLFxuICAgIG9iai5zZWNvbmQsXG4gICAgb2JqLm1pbGxpc2Vjb25kXG4gICk7XG5cbiAgLy8gamF2YXNjcmlwdCBpcyBzdHVwaWQgYW5kIGkgaGF0ZSBpdFxuICBpZiAob2JqLnllYXIgPCAxMDAgJiYgb2JqLnllYXIgPj0gMCkge1xuICAgIGQgPSBuZXcgRGF0ZShkKTtcbiAgICBkLnNldEZ1bGxZZWFyKG9iai55ZWFyKTtcbiAgfVxuICByZXR1cm4gK2Q7XG59XG5cbmZ1bmN0aW9uIG9ialRvVFMob2JqLCBvZmZzZXQsIHpvbmUpIHtcbiAgcmV0dXJuIGZpeE9mZnNldChvYmpUb0xvY2FsVFMob2JqKSwgb2Zmc2V0LCB6b25lKTtcbn1cblxuZnVuY3Rpb24gYWRqdXN0VGltZShpbnN0LCBkdXIpIHtcbiAgY29uc3Qgb1ByZSA9IGluc3QubyxcbiAgICBjID0gT2JqZWN0LmFzc2lnbih7fSwgaW5zdC5jLCB7XG4gICAgICB5ZWFyOiBpbnN0LmMueWVhciArIGR1ci55ZWFycyxcbiAgICAgIG1vbnRoOiBpbnN0LmMubW9udGggKyBkdXIubW9udGhzLFxuICAgICAgZGF5OiBpbnN0LmMuZGF5ICsgZHVyLmRheXMgKyBkdXIud2Vla3MgKiA3XG4gICAgfSksXG4gICAgbWlsbGlzVG9BZGQgPSBEdXJhdGlvbi5mcm9tT2JqZWN0KHtcbiAgICAgIGhvdXJzOiBkdXIuaG91cnMsXG4gICAgICBtaW51dGVzOiBkdXIubWludXRlcyxcbiAgICAgIHNlY29uZHM6IGR1ci5zZWNvbmRzLFxuICAgICAgbWlsbGlzZWNvbmRzOiBkdXIubWlsbGlzZWNvbmRzXG4gICAgfSkuYXMoJ21pbGxpc2Vjb25kcycpLFxuICAgIGxvY2FsVFMgPSBvYmpUb0xvY2FsVFMoYyk7XG5cbiAgbGV0IFt0cywgb10gPSBmaXhPZmZzZXQobG9jYWxUUywgb1ByZSwgaW5zdC56b25lKTtcblxuICBpZiAobWlsbGlzVG9BZGQgIT09IDApIHtcbiAgICB0cyArPSBtaWxsaXNUb0FkZDtcbiAgICAvLyB0aGF0IGNvdWxkIGhhdmUgY2hhbmdlZCB0aGUgb2Zmc2V0IGJ5IGdvaW5nIG92ZXIgYSBEU1QsIGJ1dCB3ZSB3YW50IHRvIGtlZXAgdGhlIHRzIHRoZSBzYW1lXG4gICAgbyA9IGluc3Quem9uZS5vZmZzZXQodHMpO1xuICB9XG5cbiAgcmV0dXJuIHsgdHMsIG8gfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VEYXRhVG9EYXRlVGltZShwYXJzZWQsIHBhcnNlZFpvbmUsIG9wdHMgPSB7fSkge1xuICBjb25zdCB7IHNldFpvbmUsIHpvbmUgfSA9IG9wdHM7XG4gIGlmIChwYXJzZWQgJiYgT2JqZWN0LmtleXMocGFyc2VkKS5sZW5ndGggIT09IDApIHtcbiAgICBjb25zdCBpbnRlcnByZXRhdGlvblpvbmUgPSBwYXJzZWRab25lIHx8IHpvbmUsXG4gICAgICBpbnN0ID0gRGF0ZVRpbWUuZnJvbU9iamVjdChcbiAgICAgICAgT2JqZWN0LmFzc2lnbihwYXJzZWQsIG9wdHMsIHtcbiAgICAgICAgICB6b25lOiBpbnRlcnByZXRhdGlvblpvbmVcbiAgICAgICAgfSlcbiAgICAgICk7XG4gICAgcmV0dXJuIHNldFpvbmUgPyBpbnN0IDogaW5zdC5zZXRab25lKHpvbmUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBEYXRlVGltZS5pbnZhbGlkKFVOU1VQUE9SVEVEX1pPTkUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE1heWJlKGR0LCBmb3JtYXQpIHtcbiAgcmV0dXJuIGR0LmlzVmFsaWRcbiAgICA/IEZvcm1hdHRlci5jcmVhdGUoTG9jYWxlLmNyZWF0ZSgnZW4nKSkuZm9ybWF0RGF0ZVRpbWVGcm9tU3RyaW5nKGR0LCBmb3JtYXQpXG4gICAgOiBudWxsO1xufVxuXG5jb25zdCBkZWZhdWx0VW5pdFZhbHVlcyA9IHtcbiAgICBtb250aDogMSxcbiAgICBkYXk6IDEsXG4gICAgaG91cjogMCxcbiAgICBtaW51dGU6IDAsXG4gICAgc2Vjb25kOiAwLFxuICAgIG1pbGxpc2Vjb25kOiAwXG4gIH0sXG4gIGRlZmF1bHRXZWVrVW5pdFZhbHVlcyA9IHtcbiAgICB3ZWVrTnVtYmVyOiAxLFxuICAgIHdlZWtkYXk6IDEsXG4gICAgaG91cjogMCxcbiAgICBtaW51dGU6IDAsXG4gICAgc2Vjb25kOiAwLFxuICAgIG1pbGxpc2Vjb25kOiAwXG4gIH0sXG4gIGRlZmF1bHRPcmRpbmFsVW5pdFZhbHVlcyA9IHtcbiAgICBvcmRpbmFsOiAxLFxuICAgIGhvdXI6IDAsXG4gICAgbWludXRlOiAwLFxuICAgIHNlY29uZDogMCxcbiAgICBtaWxsaXNlY29uZDogMFxuICB9O1xuXG5mdW5jdGlvbiBpc29UaW1lRm9ybWF0KGRhdGVUaW1lLCBzdXBwcmVzc1NlY3MsIHN1cHByZXNzTWlsbGlzKSB7XG4gIHJldHVybiBzdXBwcmVzc1NlY3MgJiYgZGF0ZVRpbWUuc2Vjb25kID09PSAwICYmIGRhdGVUaW1lLm1pbGxpc2Vjb25kID09PSAwXG4gICAgPyAnSEg6bW1aJ1xuICAgIDogc3VwcHJlc3NNaWxsaXMgJiYgZGF0ZVRpbWUubWlsbGlzZWNvbmQgPT09IDAgPyAnSEg6bW06c3NaWicgOiAnSEg6bW06c3MuU1NTWlonO1xufVxuXG5jb25zdCBvcmRlcmVkVW5pdHMgPSBbJ3llYXInLCAnbW9udGgnLCAnZGF5JywgJ2hvdXInLCAnbWludXRlJywgJ3NlY29uZCcsICdtaWxsaXNlY29uZCddO1xuXG5jb25zdCBvcmRlcmVkV2Vla1VuaXRzID0gW1xuICAnd2Vla1llYXInLFxuICAnd2Vla051bWJlcicsXG4gICd3ZWVrZGF5JyxcbiAgJ2hvdXInLFxuICAnbWludXRlJyxcbiAgJ3NlY29uZCcsXG4gICdtaWxsaXNlY29uZCdcbl07XG5cbmNvbnN0IG9yZGVyZWRPcmRpbmFsVW5pdHMgPSBbJ3llYXInLCAnb3JkaW5hbCcsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLCAnbWlsbGlzZWNvbmQnXTtcblxuZnVuY3Rpb24gbm9ybWFsaXplVW5pdCh1bml0LCBpZ25vcmVVbmtub3duID0gZmFsc2UpIHtcbiAgY29uc3Qgbm9ybWFsaXplZCA9IHtcbiAgICB5ZWFyOiAneWVhcicsXG4gICAgeWVhcnM6ICd5ZWFyJyxcbiAgICBtb250aDogJ21vbnRoJyxcbiAgICBtb250aHM6ICdtb250aCcsXG4gICAgZGF5OiAnZGF5JyxcbiAgICBkYXlzOiAnZGF5JyxcbiAgICBob3VyOiAnaG91cicsXG4gICAgaG91cnM6ICdob3VyJyxcbiAgICBtaW51dGU6ICdtaW51dGUnLFxuICAgIG1pbnV0ZXM6ICdtaW51dGUnLFxuICAgIHNlY29uZDogJ3NlY29uZCcsXG4gICAgc2Vjb25kczogJ3NlY29uZCcsXG4gICAgbWlsbGlzZWNvbmQ6ICdtaWxsaXNlY29uZCcsXG4gICAgbWlsbGlzZWNvbmRzOiAnbWlsbGlzZWNvbmQnLFxuICAgIHdlZWtkYXk6ICd3ZWVrZGF5JyxcbiAgICB3ZWVrZGF5czogJ3dlZWtkYXknLFxuICAgIHdlZWtudW1iZXI6ICd3ZWVrTnVtYmVyJyxcbiAgICB3ZWVrc251bWJlcjogJ3dlZWtOdW1iZXInLFxuICAgIHdlZWtudW1iZXJzOiAnd2Vla051bWJlcicsXG4gICAgd2Vla3llYXI6ICd3ZWVrWWVhcicsXG4gICAgd2Vla3llYXJzOiAnd2Vla1llYXInLFxuICAgIG9yZGluYWw6ICdvcmRpbmFsJ1xuICB9W3VuaXQgPyB1bml0LnRvTG93ZXJDYXNlKCkgOiB1bml0XTtcblxuICBpZiAoIWlnbm9yZVVua25vd24gJiYgIW5vcm1hbGl6ZWQpIHRocm93IG5ldyBJbnZhbGlkVW5pdEVycm9yKHVuaXQpO1xuXG4gIHJldHVybiBub3JtYWxpemVkO1xufVxuXG4vKipcbiAqIEEgRGF0ZVRpbWUgaXMgYW4gaW1tdXRhYmxlIGRhdGEgc3RydWN0dXJlIHJlcHJlc2VudGluZyBhIHNwZWNpZmljIGRhdGUgYW5kIHRpbWUgYW5kIGFjY29tcGFueWluZyBtZXRob2RzLiBJdCBjb250YWlucyBjbGFzcyBhbmQgaW5zdGFuY2UgbWV0aG9kcyBmb3IgY3JlYXRpbmcsIHBhcnNpbmcsIGludGVycm9nYXRpbmcsIHRyYW5zZm9ybWluZywgYW5kIGZvcm1hdHRpbmcgdGhlbS5cbiAqXG4gKiBBIERhdGVUaW1lIGNvbXByaXNlcyBvZjpcbiAqICogQSB0aW1lc3RhbXAuIEVhY2ggRGF0ZVRpbWUgaW5zdGFuY2UgcmVmZXJzIHRvIGEgc3BlY2lmaWMgbWlsbGlzZWNvbmQgb2YgdGhlIFVuaXggZXBvY2guXG4gKiAqIEEgdGltZSB6b25lLiBFYWNoIGluc3RhbmNlIGlzIGNvbnNpZGVyZWQgaW4gdGhlIGNvbnRleHQgb2YgYSBzcGVjaWZpYyB6b25lIChieSBkZWZhdWx0IHRoZSBsb2NhbCBzeXN0ZW0ncyB6b25lKS5cbiAqICogQ29uZmlndXJhdGlvbiBwcm9wZXJ0aWVzIHRoYXQgZWZmZWN0IGhvdyBvdXRwdXQgc3RyaW5ncyBhcmUgZm9ybWF0dGVkLCBzdWNoIGFzIGBsb2NhbGVgLCBgbnVtYmVyaW5nU3lzdGVtYCwgYW5kIGBvdXRwdXRDYWxlbmRhcmAuXG4gKlxuICogSGVyZSBpcyBhIGJyaWVmIG92ZXJ2aWV3IG9mIHRoZSBtb3N0IGNvbW1vbmx5IHVzZWQgZnVuY3Rpb25hbGl0eSBpdCBwcm92aWRlczpcbiAqXG4gKiAqICoqQ3JlYXRpb24qKjogVG8gY3JlYXRlIGEgRGF0ZVRpbWUgZnJvbSBpdHMgY29tcG9uZW50cywgdXNlIG9uZSBvZiBpdHMgZmFjdG9yeSBjbGFzcyBtZXRob2RzOiB7QGxpbmsgbG9jYWx9LCB7QGxpbmsgdXRjfSwgYW5kIChtb3N0IGZsZXhpYmx5KSB7QGxpbmsgZnJvbU9iamVjdH0uIFRvIGNyZWF0ZSBvbmUgZnJvbSBhIHN0YW5kYXJkIHN0cmluZyBmb3JtYXQsIHVzZSB7QGxpbmsgZnJvbUlTT30sIHtAbGluayBmcm9tSFRUUH0sIGFuZCB7QGxpbmsgZnJvbVJGQzI4MjJ9LiBUbyBjcmVhdGUgb25lIGZyb20gYSBjdXN0b20gc3RyaW5nIGZvcm1hdCwgdXNlIHtAbGluayBmcm9tU3RyaW5nfS4gVG8gY3JlYXRlIG9uZSBmcm9tIGEgbmF0aXZlIEpTIGRhdGUsIHVzZSB7QGxpbmsgZnJvbUpTRGF0ZX0uXG4gKiAqICoqR3JlZ29yaWFuIGNhbGVuZGFyIGFuZCB0aW1lKio6IFRvIGV4YW1pbmUgdGhlIEdyZWdvcmlhbiBwcm9wZXJ0aWVzIG9mIGEgRGF0ZVRpbWUgaW5kaXZpZHVhbGx5IChpLmUgYXMgb3Bwb3NlZCB0byBjb2xsZWN0aXZlbHkgdGhyb3VnaCB7QGxpbmsgdG9PYmplY3R9KSwgdXNlIHRoZSB7QGxpbmsgeWVhcn0sIHtAbGluayBtb250aH0sXG4gKiB7QGxpbmsgZGF5fSwge0BsaW5rIGhvdXJ9LCB7QGxpbmsgbWludXRlfSwge0BsaW5rIHNlY29uZH0sIHtAbGluayBtaWxsaXNlY29uZH0gYWNjZXNzb3JzLlxuICogKiAqKldlZWsgY2FsZW5kYXIqKjogRm9yIElTTyB3ZWVrIGNhbGVuZGFyIGF0dHJpYnV0ZXMsIHNlZSB0aGUge0BsaW5rIHdlZWtZZWFyfSwge0BsaW5rIHdlZWtOdW1iZXJ9LCBhbmQge0BsaW5rIHdlZWtkYXl9IGFjY2Vzc29ycy5cbiAqICogKipDb25maWd1cmF0aW9uKiogU2VlIHRoZSB7QGxpbmsgbG9jYWxlfSBhbmQge0BsaW5rIG51bWJlcmluZ1N5c3RlbX0gYWNjZXNzb3JzLlxuICogKiAqKlRyYW5zZm9ybWF0aW9uKio6IFRvIHRyYW5zZm9ybSB0aGUgRGF0ZVRpbWUgaW50byBvdGhlciBEYXRlVGltZXMsIHVzZSB7QGxpbmsgc2V0fSwge0BsaW5rIHJlY29uZmlndXJlfSwge0BsaW5rIHNldFpvbmV9LCB7QGxpbmsgc2V0TG9jYWxlfSwge0BsaW5rIHBsdXN9LCB7QGxpbmsgbWludXN9LCB7QGxpbmsgZW5kT2Z9LCB7QGxpbmsgc3RhcnRPZn0sIHtAbGluayB0b1VUQ30sIGFuZCB7QGxpbmsgdG9Mb2NhbH0uXG4gKiAqICoqT3V0cHV0Kio6IFRvIGNvbnZlcnQgdGhlIERhdGVUaW1lIHRvIG90aGVyIHJlcHJlc2VudGF0aW9ucywgdXNlIHRoZSB7QGxpbmsgdG9KU09OfSwge0BsaW5rIHRvSVNPfSwge0BsaW5rIHRvSFRUUH0sIHtAbGluayB0b09iamVjdH0sIHtAbGluayB0b1JGQzI4MjJ9LCB7QGxpbmsgdG9TdHJpbmd9LCB7QGxpbmsgdG9Mb2NhbGVTdHJpbmd9LCB7QGxpbmsgdG9Gb3JtYXR9LCBhbmQge0BsaW5rIHZhbHVlT2Z9LlxuICpcbiAqIFRoZXJlJ3MgcGxlbnR5IG90aGVycyBkb2N1bWVudGVkIGJlbG93LiBJbiBhZGRpdGlvbiwgZm9yIG1vcmUgaW5mb3JtYXRpb24gb24gc3VidGxlciB0b3BpY3MgbGlrZSBpbnRlcm5hdGlvbmFsaXphdGlvbiwgdGltZSB6b25lcywgYWx0ZXJuYXRpdmUgY2FsZW5kYXJzLCB2YWxpZGl0eSwgYW5kIHNvIG9uLCBzZWUgdGhlIGV4dGVybmFsIGRvY3VtZW50YXRpb24uXG4gKi9cbmV4cG9ydCBjbGFzcyBEYXRlVGltZSB7XG4gIC8qKlxuICAgKiBAYWNjZXNzIHByaXZhdGVcbiAgICovXG4gIGNvbnN0cnVjdG9yKGNvbmZpZyA9IHt9KSB7XG4gICAgY29uc3Qgem9uZSA9IGNvbmZpZy56b25lIHx8IFNldHRpbmdzLmRlZmF1bHRab25lLFxuICAgICAgaW52YWxpZFJlYXNvbiA9IGNvbmZpZy5pbnZhbGlkUmVhc29uIHx8ICh6b25lLmlzVmFsaWQgPyBudWxsIDogVU5TVVBQT1JURURfWk9ORSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3RzJywge1xuICAgICAgdmFsdWU6IGNvbmZpZy50cyB8fCBTZXR0aW5ncy5ub3coKSxcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9KTtcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnem9uZScsIHtcbiAgICAgIHZhbHVlOiB6b25lLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH0pO1xuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdsb2MnLCB7XG4gICAgICB2YWx1ZTogY29uZmlnLmxvYyB8fCBMb2NhbGUuY3JlYXRlKCksXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2ludmFsaWRSZWFzb24nLCB7XG4gICAgICB2YWx1ZTogaW52YWxpZFJlYXNvbixcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlXG4gICAgfSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3dlZWtEYXRhJywge1xuICAgICAgd3JpdGFibGU6IHRydWUsIC8vICEhIVxuICAgICAgdmFsdWU6IG51bGwsXG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZVxuICAgIH0pO1xuXG4gICAgaWYgKCFpbnZhbGlkUmVhc29uKSB7XG4gICAgICBjb25zdCB1bmNoYW5nZWQgPVxuICAgICAgICAgIGNvbmZpZy5vbGQgJiYgY29uZmlnLm9sZC50cyA9PT0gdGhpcy50cyAmJiBjb25maWcub2xkLnpvbmUuZXF1YWxzKHRoaXMuem9uZSksXG4gICAgICAgIGMgPSB1bmNoYW5nZWQgPyBjb25maWcub2xkLmMgOiB0c1RvT2JqKHRoaXMudHMsIHRoaXMuem9uZS5vZmZzZXQodGhpcy50cykpLFxuICAgICAgICBvID0gdW5jaGFuZ2VkID8gY29uZmlnLm9sZC5vIDogdGhpcy56b25lLm9mZnNldCh0aGlzLnRzKTtcblxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdjJywgeyB2YWx1ZTogYyB9KTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbycsIHsgdmFsdWU6IG8gfSk7XG4gICAgfVxuICB9XG5cbiAgLy8gQ09OU1RSVUNUXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGxvY2FsIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5ZWFyIC0gVGhlIGNhbGVuZGFyIHllYXIuIElmIG9taXR0ZWQgKGFzIGluLCBjYWxsIGBsb2NhbCgpYCB3aXRoIG5vIGFyZ3VtZW50cyksIHRoZSBjdXJyZW50IHRpbWUgd2lsbCBiZSB1c2VkXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbbW9udGg9MV0gLSBUaGUgbW9udGgsIDEtaW5kZXhlZFxuICAgKiBAcGFyYW0ge251bWJlcn0gW2RheT0xXSAtIFRoZSBkYXkgb2YgdGhlIG1vbnRoXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbaG91cj0wXSAtIFRoZSBob3VyIG9mIHRoZSBkYXksIGluIDI0LWhvdXIgdGltZVxuICAgKiBAcGFyYW0ge251bWJlcn0gW21pbnV0ZT0wXSAtIFRoZSBtaW51dGUgb2YgdGhlIGhvdXIsIGkuZS4gYSBudW1iZXIgYmV0d2VlbiAwIGFuZCA1OVxuICAgKiBAcGFyYW0ge251bWJlcn0gW3NlY29uZD0wXSAtIFRoZSBzZWNvbmQgb2YgdGhlIG1pbnV0ZSwgaS5lLiBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDU5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbbWlsbGlzZWNvbmQ9MF0gLSBUaGUgbWlsbGlzZWNvbmQgb2YgdGhlIHNlY29uZCwgaS5lLiBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDk5OVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgpICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfj4gbm93XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcpICAgICAgICAgICAgICAgICAgICAgICAgLy9+PiAyMDE3LTAxLTAxVDAwOjAwOjAwXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDMpICAgICAgICAgICAgICAgICAgICAgLy9+PiAyMDE3LTAzLTAxVDAwOjAwOjAwXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDMsIDEyKSAgICAgICAgICAgICAgICAgLy9+PiAyMDE3LTAzLTEyVDAwOjAwOjAwXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDMsIDEyLCA1KSAgICAgICAgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjAwOjAwXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDMsIDEyLCA1LCA0NSkgICAgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjAwXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDMsIDEyLCA1LCA0NSwgMTApICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjEwXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDMsIDEyLCA1LCA0NSwgMTAsIDc2NSkgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjEwLjY3NVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIHN0YXRpYyBsb2NhbCh5ZWFyLCBtb250aCwgZGF5LCBob3VyLCBtaW51dGUsIHNlY29uZCwgbWlsbGlzZWNvbmQpIHtcbiAgICBpZiAoVXRpbC5pc1VuZGVmaW5lZCh5ZWFyKSkge1xuICAgICAgcmV0dXJuIG5ldyBEYXRlVGltZSh7IHRzOiBTZXR0aW5ncy5ub3coKSB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIERhdGVUaW1lLmZyb21PYmplY3Qoe1xuICAgICAgICB5ZWFyLFxuICAgICAgICBtb250aCxcbiAgICAgICAgZGF5LFxuICAgICAgICBob3VyLFxuICAgICAgICBtaW51dGUsXG4gICAgICAgIHNlY29uZCxcbiAgICAgICAgbWlsbGlzZWNvbmQsXG4gICAgICAgIHpvbmU6IFNldHRpbmdzLmRlZmF1bHRab25lXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgRGF0ZVRpbWUgaW4gVVRDXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5ZWFyIC0gVGhlIGNhbGVuZGFyIHllYXIuIElmIG9taXR0ZWQgKGFzIGluLCBjYWxsIGB1dGMoKWAgd2l0aCBubyBhcmd1bWVudHMpLCB0aGUgY3VycmVudCB0aW1lIHdpbGwgYmUgdXNlZFxuICAgKiBAcGFyYW0ge251bWJlcn0gW21vbnRoPTFdIC0gVGhlIG1vbnRoLCAxLWluZGV4ZWRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtkYXk9MV0gLSBUaGUgZGF5IG9mIHRoZSBtb250aFxuICAgKiBAcGFyYW0ge251bWJlcn0gW2hvdXI9MF0gLSBUaGUgaG91ciBvZiB0aGUgZGF5LCBpbiAyNC1ob3VyIHRpbWVcbiAgICogQHBhcmFtIHtudW1iZXJ9IFttaW51dGU9MF0gLSBUaGUgbWludXRlIG9mIHRoZSBob3VyLCBpLmUuIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgNTlcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtzZWNvbmQ9MF0gLSBUaGUgc2Vjb25kIG9mIHRoZSBtaW51dGUsIGkuZS4gYSBudW1iZXIgYmV0d2VlbiAwIGFuZCA1OVxuICAgKiBAcGFyYW0ge251bWJlcn0gW21pbGxpc2Vjb25kPTBdIC0gVGhlIG1pbGxpc2Vjb25kIG9mIHRoZSBzZWNvbmQsIGkuZS4gYSBudW1iZXIgYmV0d2VlbiAwIGFuZCA5OTlcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKCkgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9+PiBub3dcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTcpICAgICAgICAgICAgICAgICAgICAgICAgLy9+PiAyMDE3LTAxLTAxVDAwOjAwOjAwWlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNywgMykgICAgICAgICAgICAgICAgICAgICAvL34+IDIwMTctMDMtMDFUMDA6MDA6MDBaXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3LCAzLCAxMikgICAgICAgICAgICAgICAgIC8vfj4gMjAxNy0wMy0xMlQwMDowMDowMFpcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTcsIDMsIDEyLCA1KSAgICAgICAgICAgICAgLy9+PiAyMDE3LTAzLTEyVDA1OjAwOjAwWlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNywgMywgMTIsIDUsIDQ1KSAgICAgICAgICAvL34+IDIwMTctMDMtMTJUMDU6NDU6MDBaXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygyMDE3LCAzLCAxMiwgNSwgNDUsIDEwKSAgICAgIC8vfj4gMjAxNy0wMy0xMlQwNTo0NToxMFpcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUudXRjKDIwMTcsIDMsIDEyLCA1LCA0NSwgMTAsIDc2NSkgLy9+PiAyMDE3LTAzLTEyVDA1OjQ1OjEwLjY3NVpcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICBzdGF0aWMgdXRjKHllYXIsIG1vbnRoLCBkYXksIGhvdXIsIG1pbnV0ZSwgc2Vjb25kLCBtaWxsaXNlY29uZCkge1xuICAgIGlmIChVdGlsLmlzVW5kZWZpbmVkKHllYXIpKSB7XG4gICAgICByZXR1cm4gbmV3IERhdGVUaW1lKHtcbiAgICAgICAgdHM6IFNldHRpbmdzLm5vdygpLFxuICAgICAgICB6b25lOiBGaXhlZE9mZnNldFpvbmUudXRjSW5zdGFuY2VcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuZnJvbU9iamVjdCh7XG4gICAgICAgIHllYXIsXG4gICAgICAgIG1vbnRoLFxuICAgICAgICBkYXksXG4gICAgICAgIGhvdXIsXG4gICAgICAgIG1pbnV0ZSxcbiAgICAgICAgc2Vjb25kLFxuICAgICAgICBtaWxsaXNlY29uZCxcbiAgICAgICAgem9uZTogRml4ZWRPZmZzZXRab25lLnV0Y0luc3RhbmNlXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGFuIERhdGVUaW1lIGZyb20gYSBKYXZhc2NyaXB0IERhdGUgb2JqZWN0LiBVc2VzIHRoZSBkZWZhdWx0IHpvbmUuXG4gICAqIEBwYXJhbSB7RGF0ZXxBbnl9IGRhdGUgLSBhIEphdmFzY3JpcHQgRGF0ZSBvYmplY3RcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBjb25maWd1cmF0aW9uIG9wdGlvbnMgZm9yIHRoZSBEYXRlVGltZVxuICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfSBbb3B0aW9ucy56b25lPSdsb2NhbCddIC0gdGhlIHpvbmUgdG8gcGxhY2UgdGhlIERhdGVUaW1lIGludG9cbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICBzdGF0aWMgZnJvbUpTRGF0ZShkYXRlLCBvcHRpb25zID0ge30pIHtcbiAgICByZXR1cm4gbmV3IERhdGVUaW1lKHtcbiAgICAgIHRzOiBuZXcgRGF0ZShkYXRlKS52YWx1ZU9mKCksXG4gICAgICB6b25lOiBVdGlsLm5vcm1hbGl6ZVpvbmUob3B0aW9ucy56b25lKSxcbiAgICAgIGxvYzogTG9jYWxlLmZyb21PYmplY3Qob3B0aW9ucylcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYW4gRGF0ZVRpbWUgZnJvbSBhIGNvdW50IG9mIGVwb2NoIG1pbGxpc2Vjb25kcy4gVXNlcyB0aGUgZGVmYXVsdCB6b25lLlxuICAgKiBAcGFyYW0ge251bWJlcn0gbWlsbGlzZWNvbmRzIC0gYSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIHNpbmNlIDE5NzAgVVRDXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gY29uZmlndXJhdGlvbiBvcHRpb25zIGZvciB0aGUgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW29wdGlvbnMuem9uZT0nbG9jYWwnXSAtIHRoZSB6b25lIHRvIHBsYWNlIHRoZSBEYXRlVGltZSBpbnRvXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sb2NhbGU9J2VuLVVTJ10gLSBhIGxvY2FsZSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5vdXRwdXRDYWxlbmRhciAtIHRoZSBvdXRwdXQgY2FsZW5kYXIgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICBzdGF0aWMgZnJvbU1pbGxpcyhtaWxsaXNlY29uZHMsIG9wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiBuZXcgRGF0ZVRpbWUoe1xuICAgICAgdHM6IG1pbGxpc2Vjb25kcyxcbiAgICAgIHpvbmU6IFV0aWwubm9ybWFsaXplWm9uZShvcHRpb25zLnpvbmUpLFxuICAgICAgbG9jOiBMb2NhbGUuZnJvbU9iamVjdChvcHRpb25zKVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBEYXRlVGltZSBmcm9tIGEgSmF2YXNjcmlwdCBvYmplY3Qgd2l0aCBrZXlzIGxpa2UgJ3llYXInIGFuZCAnaG91cicgd2l0aCByZWFzb25hYmxlIGRlZmF1bHRzLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb2JqIC0gdGhlIG9iamVjdCB0byBjcmVhdGUgdGhlIERhdGVUaW1lIGZyb21cbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai55ZWFyIC0gYSB5ZWFyLCBzdWNoIGFzIDE5ODdcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5tb250aCAtIGEgbW9udGgsIDEtMTJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5kYXkgLSBhIGRheSBvZiB0aGUgbW9udGgsIDEtMzEsIGRlcGVuZGluZyBvbiB0aGUgbW9udGhcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai5vcmRpbmFsIC0gZGF5IG9mIHRoZSB5ZWFyLCAxLTM2NSBvciAzNjZcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai53ZWVrWWVhciAtIGFuIElTTyB3ZWVrIHllYXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai53ZWVrTnVtYmVyIC0gYW4gSVNPIHdlZWsgbnVtYmVyLCBiZXR3ZWVuIDEgYW5kIDUyIG9yIDUzLCBkZXBlbmRpbmcgb24gdGhlIHllYXJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG9iai53ZWVrZGF5IC0gYW4gSVNPIHdlZWtkYXksIDEtNywgd2hlcmUgMSBpcyBNb25kYXkgYW5kIDcgaXMgU3VuZGF5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmouaG91ciAtIGhvdXIgb2YgdGhlIGRheSwgMC0yM1xuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLm1pbnV0ZSAtIG1pbnV0ZSBvZiB0aGUgaG91ciwgMC01OVxuICAgKiBAcGFyYW0ge251bWJlcn0gb2JqLnNlY29uZCAtIHNlY29uZCBvZiB0aGUgbWludXRlLCAwLTU5XG4gICAqIEBwYXJhbSB7bnVtYmVyfSBvYmoubWlsbGlzZWNvbmQgLSBtaWxsaXNlY29uZCBvZiB0aGUgc2Vjb25kLCAwLTk5OVxuICAgKiBAcGFyYW0ge3N0cmluZ3xab25lfSBbb2JqLnpvbmU9J2xvY2FsJ10gLSBpbnRlcnByZXQgdGhlIG51bWJlcnMgaW4gdGhlIGNvbnRleHQgb2YgYSBwYXJ0aWN1bGFyIHpvbmUuIENhbiB0YWtlIGFueSB2YWx1ZSB0YWtlbiBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gc2V0Wm9uZSgpXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb2JqLmxvY2FsZT0nZW4tVVMnXSAtIGEgbG9jYWxlIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvYmoub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvYmoubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbU9iamVjdCh7IHllYXI6IDE5ODIsIG1vbnRoOiA1LCBkYXk6IDI1fSkudG9JU09EYXRlKCkgLy89PiAnMTk4Mi0wNS0yNSdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbU9iamVjdCh7IHllYXI6IDE5ODIgfSkudG9JU09EYXRlKCkgLy89PiAnMTk4Mi0wMS0wMVQwMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbU9iamVjdCh7IGhvdXI6IDEwLCBtaW51dGU6IDI2LCBzZWNvbmQ6IDYgfSkgLy9+PiB0b2RheSBhdCAxMDoyNjowNlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tT2JqZWN0KHsgaG91cjogMTAsIG1pbnV0ZTogMjYsIHNlY29uZDogNiwgem9uZTogJ3V0YycgfSksXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21PYmplY3QoeyBob3VyOiAxMCwgbWludXRlOiAyNiwgc2Vjb25kOiA2LCB6b25lOiAnbG9jYWwnIH0pXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21PYmplY3QoeyBob3VyOiAxMCwgbWludXRlOiAyNiwgc2Vjb25kOiA2LCB6b25lOiAnQW1lcmljYS9OZXdfWW9yaycgfSlcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbU9iamVjdCh7IHdlZWtZZWFyOiAyMDE2LCB3ZWVrTnVtYmVyOiAyLCB3ZWVrZGF5OiAzIH0pLnRvSVNPRGF0ZSgpIC8vPT4gJzIwMTYtMDEtMTMnXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc3RhdGljIGZyb21PYmplY3Qob2JqKSB7XG4gICAgY29uc3Qgem9uZVRvVXNlID0gVXRpbC5ub3JtYWxpemVab25lKG9iai56b25lKTtcbiAgICBpZiAoIXpvbmVUb1VzZS5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZChVTlNVUFBPUlRFRF9aT05FKTtcbiAgICB9XG5cbiAgICBjb25zdCB0c05vdyA9IFNldHRpbmdzLm5vdygpLFxuICAgICAgb2Zmc2V0UHJvdmlzID0gem9uZVRvVXNlLm9mZnNldCh0c05vdyksXG4gICAgICBub3JtYWxpemVkID0gVXRpbC5ub3JtYWxpemVPYmplY3Qob2JqLCBub3JtYWxpemVVbml0LCB0cnVlKSxcbiAgICAgIGNvbnRhaW5zT3JkaW5hbCA9ICFVdGlsLmlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQub3JkaW5hbCksXG4gICAgICBjb250YWluc0dyZWdvclllYXIgPSAhVXRpbC5pc1VuZGVmaW5lZChub3JtYWxpemVkLnllYXIpLFxuICAgICAgY29udGFpbnNHcmVnb3JNRCA9ICFVdGlsLmlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQubW9udGgpIHx8ICFVdGlsLmlzVW5kZWZpbmVkKG5vcm1hbGl6ZWQuZGF5KSxcbiAgICAgIGNvbnRhaW5zR3JlZ29yID0gY29udGFpbnNHcmVnb3JZZWFyIHx8IGNvbnRhaW5zR3JlZ29yTUQsXG4gICAgICBkZWZpbml0ZVdlZWtEZWYgPSBub3JtYWxpemVkLndlZWtZZWFyIHx8IG5vcm1hbGl6ZWQud2Vla051bWJlcixcbiAgICAgIGxvYyA9IExvY2FsZS5mcm9tT2JqZWN0KG9iaik7XG5cbiAgICAvLyBjYXNlczpcbiAgICAvLyBqdXN0IGEgd2Vla2RheSAtPiB0aGlzIHdlZWsncyBpbnN0YW5jZSBvZiB0aGF0IHdlZWtkYXksIG5vIHdvcnJpZXNcbiAgICAvLyAoZ3JlZ29yaWFuIGRhdGEgb3Igb3JkaW5hbCkgKyAod2Vla1llYXIgb3Igd2Vla051bWJlcikgLT4gZXJyb3JcbiAgICAvLyAoZ3JlZ29yaWFuIG1vbnRoIG9yIGRheSkgKyBvcmRpbmFsIC0+IGVycm9yXG4gICAgLy8gb3RoZXJ3aXNlIGp1c3QgdXNlIHdlZWtzIG9yIG9yZGluYWxzIG9yIGdyZWdvcmlhbiwgZGVwZW5kaW5nIG9uIHdoYXQncyBzcGVjaWZpZWRcblxuICAgIGlmICgoY29udGFpbnNHcmVnb3IgfHwgY29udGFpbnNPcmRpbmFsKSAmJiBkZWZpbml0ZVdlZWtEZWYpIHtcbiAgICAgIHRocm93IG5ldyBDb25mbGljdGluZ1NwZWNpZmljYXRpb25FcnJvcihcbiAgICAgICAgXCJDYW4ndCBtaXggd2Vla1llYXIvd2Vla051bWJlciB1bml0cyB3aXRoIHllYXIvbW9udGgvZGF5IG9yIG9yZGluYWxzXCJcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGNvbnRhaW5zR3JlZ29yTUQgJiYgY29udGFpbnNPcmRpbmFsKSB7XG4gICAgICB0aHJvdyBuZXcgQ29uZmxpY3RpbmdTcGVjaWZpY2F0aW9uRXJyb3IoXCJDYW4ndCBtaXggb3JkaW5hbCBkYXRlcyB3aXRoIG1vbnRoL2RheVwiKTtcbiAgICB9XG5cbiAgICBjb25zdCB1c2VXZWVrRGF0YSA9IGRlZmluaXRlV2Vla0RlZiB8fCAobm9ybWFsaXplZC53ZWVrZGF5ICYmICFjb250YWluc0dyZWdvcik7XG5cbiAgICAvLyBjb25maWd1cmUgb3Vyc2VsdmVzIHRvIGRlYWwgd2l0aCBncmVnb3JpYW4gZGF0ZXMgb3Igd2VlayBzdHVmZlxuICAgIGxldCB1bml0cyxcbiAgICAgIGRlZmF1bHRWYWx1ZXMsXG4gICAgICBvYmpOb3cgPSB0c1RvT2JqKHRzTm93LCBvZmZzZXRQcm92aXMpO1xuICAgIGlmICh1c2VXZWVrRGF0YSkge1xuICAgICAgdW5pdHMgPSBvcmRlcmVkV2Vla1VuaXRzO1xuICAgICAgZGVmYXVsdFZhbHVlcyA9IGRlZmF1bHRXZWVrVW5pdFZhbHVlcztcbiAgICAgIG9iak5vdyA9IENvbnZlcnNpb25zLmdyZWdvcmlhblRvV2VlayhvYmpOb3cpO1xuICAgIH0gZWxzZSBpZiAoY29udGFpbnNPcmRpbmFsKSB7XG4gICAgICB1bml0cyA9IG9yZGVyZWRPcmRpbmFsVW5pdHM7XG4gICAgICBkZWZhdWx0VmFsdWVzID0gZGVmYXVsdE9yZGluYWxVbml0VmFsdWVzO1xuICAgICAgb2JqTm93ID0gQ29udmVyc2lvbnMuZ3JlZ29yaWFuVG9PcmRpbmFsKG9iak5vdyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHVuaXRzID0gb3JkZXJlZFVuaXRzO1xuICAgICAgZGVmYXVsdFZhbHVlcyA9IGRlZmF1bHRVbml0VmFsdWVzO1xuICAgIH1cblxuICAgIC8vIHNldCBkZWZhdWx0IHZhbHVlcyBmb3IgbWlzc2luZyBzdHVmZlxuICAgIGxldCBmb3VuZEZpcnN0ID0gZmFsc2U7XG4gICAgZm9yIChjb25zdCB1IG9mIHVuaXRzKSB7XG4gICAgICBjb25zdCB2ID0gbm9ybWFsaXplZFt1XTtcbiAgICAgIGlmICghVXRpbC5pc1VuZGVmaW5lZCh2KSkge1xuICAgICAgICBmb3VuZEZpcnN0ID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoZm91bmRGaXJzdCkge1xuICAgICAgICBub3JtYWxpemVkW3VdID0gZGVmYXVsdFZhbHVlc1t1XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vcm1hbGl6ZWRbdV0gPSBvYmpOb3dbdV07XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gbWFrZSBzdXJlIHRoZSB2YWx1ZXMgd2UgaGF2ZSBhcmUgaW4gcmFuZ2VcbiAgICBjb25zdCBoaWdoZXJPcmRlckludmFsaWQgPSB1c2VXZWVrRGF0YVxuICAgICAgICA/IENvbnZlcnNpb25zLmhhc0ludmFsaWRXZWVrRGF0YShub3JtYWxpemVkKVxuICAgICAgICA6IGNvbnRhaW5zT3JkaW5hbFxuICAgICAgICAgID8gQ29udmVyc2lvbnMuaGFzSW52YWxpZE9yZGluYWxEYXRhKG5vcm1hbGl6ZWQpXG4gICAgICAgICAgOiBDb252ZXJzaW9ucy5oYXNJbnZhbGlkR3JlZ29yaWFuRGF0YShub3JtYWxpemVkKSxcbiAgICAgIGludmFsaWRSZWFzb24gPSBoaWdoZXJPcmRlckludmFsaWQgfHwgQ29udmVyc2lvbnMuaGFzSW52YWxpZFRpbWVEYXRhKG5vcm1hbGl6ZWQpO1xuXG4gICAgaWYgKGludmFsaWRSZWFzb24pIHtcbiAgICAgIHJldHVybiBEYXRlVGltZS5pbnZhbGlkKGludmFsaWRSZWFzb24pO1xuICAgIH1cblxuICAgIC8vIGNvbXB1dGUgdGhlIGFjdHVhbCB0aW1lXG4gICAgY29uc3QgZ3JlZ29yaWFuID0gdXNlV2Vla0RhdGFcbiAgICAgICAgPyBDb252ZXJzaW9ucy53ZWVrVG9HcmVnb3JpYW4obm9ybWFsaXplZClcbiAgICAgICAgOiBjb250YWluc09yZGluYWwgPyBDb252ZXJzaW9ucy5vcmRpbmFsVG9HcmVnb3JpYW4obm9ybWFsaXplZCkgOiBub3JtYWxpemVkLFxuICAgICAgW3RzRmluYWwsIG9mZnNldEZpbmFsXSA9IG9ialRvVFMoZ3JlZ29yaWFuLCBvZmZzZXRQcm92aXMsIHpvbmVUb1VzZSksXG4gICAgICBpbnN0ID0gbmV3IERhdGVUaW1lKHtcbiAgICAgICAgdHM6IHRzRmluYWwsXG4gICAgICAgIHpvbmU6IHpvbmVUb1VzZSxcbiAgICAgICAgbzogb2Zmc2V0RmluYWwsXG4gICAgICAgIGxvY1xuICAgICAgfSk7XG5cbiAgICAvLyBncmVnb3JpYW4gZGF0YSArIHdlZWtkYXkgc2VydmVzIG9ubHkgdG8gdmFsaWRhdGVcbiAgICBpZiAobm9ybWFsaXplZC53ZWVrZGF5ICYmIGNvbnRhaW5zR3JlZ29yICYmIG9iai53ZWVrZGF5ICE9PSBpbnN0LndlZWtkYXkpIHtcbiAgICAgIHJldHVybiBEYXRlVGltZS5pbnZhbGlkKCdtaXNtYXRjaGVkIHdlZWtkYXknKTtcbiAgICB9XG5cbiAgICByZXR1cm4gaW5zdDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmcm9tIGFuIElTTyA4NjAxIHN0cmluZ1xuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIHRoZSBJU08gc3RyaW5nXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRzIC0gb3B0aW9ucyB0byBhZmZlY3QgdGhlIGNyZWF0aW9uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuem9uZT0nbG9jYWwnXSAtIHVzZSB0aGlzIHpvbmUgaWYgbm8gb2Zmc2V0IGlzIHNwZWNpZmllZCBpbiB0aGUgaW5wdXQgc3RyaW5nIGl0c2VsZi4gV2lsbCBhbHNvIGNvbnZlcnQgdGhlIHRpbWUgdG8gdGhpcyB6b25lXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdHMuc2V0Wm9uZT1mYWxzZV0gLSBvdmVycmlkZSB0aGUgem9uZSB3aXRoIGEgZml4ZWQtb2Zmc2V0IHpvbmUgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcgaXRzZWxmLCBpZiBpdCBzcGVjaWZpZXMgb25lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J2VuLVVTJ10gLSBhIGxvY2FsZSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0cy5vdXRwdXRDYWxlbmRhciAtIHRoZSBvdXRwdXQgY2FsZW5kYXIgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUlTTygnMjAxNi0wNS0yNVQwOTowODozNC4xMjMnKVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tSVNPKCcyMDE2LTA1LTI1VDA5OjA4OjM0LjEyMyswNjowMCcpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21JU08oJzIwMTYtMDUtMjVUMDk6MDg6MzQuMTIzKzA2OjAwJywge3NldFpvbmU6IHRydWV9KVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tSVNPKCcyMDE2LTA1LTI1VDA5OjA4OjM0LjEyMycsIHt6b25lOiAndXRjJylcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUlTTygnMjAxNi1XMDUtNCcpXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc3RhdGljIGZyb21JU08odGV4dCwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3QgW3ZhbHMsIHBhcnNlZFpvbmVdID0gUmVnZXhQYXJzZXIucGFyc2VJU09EYXRlKHRleHQpO1xuICAgIHJldHVybiBwYXJzZURhdGFUb0RhdGVUaW1lKHZhbHMsIHBhcnNlZFpvbmUsIG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYW4gUkZDIDI4MjIgc3RyaW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGhlIFJGQyAyODIyIHN0cmluZ1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0cyAtIG9wdGlvbnMgdG8gYWZmZWN0IHRoZSBjcmVhdGlvblxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnpvbmU9J2xvY2FsJ10gLSBjb252ZXJ0IHRoZSB0aW1lIHRvIHRoaXMgem9uZS4gU2luY2UgdGhlIG9mZnNldCBpcyBhbHdheXMgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcgaXRzZWxmLCB0aGlzIGhhcyBubyBlZmZlY3Qgb24gdGhlIGludGVycHJldGF0aW9uIG9mIHN0cmluZywgbWVyZWx5IHRoZSB6b25lIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaXMgZXhwcmVzc2VkIGluLlxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLnNldFpvbmU9ZmFsc2VdIC0gb3ZlcnJpZGUgdGhlIHpvbmUgd2l0aCBhIGZpeGVkLW9mZnNldCB6b25lIHNwZWNpZmllZCBpbiB0aGUgc3RyaW5nIGl0c2VsZiwgaWYgaXQgc3BlY2lmaWVzIG9uZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdlbi1VUyddIC0gYSBsb2NhbGUgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdHMub3V0cHV0Q2FsZW5kYXIgLSB0aGUgb3V0cHV0IGNhbGVuZGFyIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBvcHRzLm51bWJlcmluZ1N5c3RlbSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtIHRvIHNldCBvbiB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGluc3RhbmNlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21SRkMyODIyKCcyNSBOb3YgMjAxNiAxMzoyMzoxMiBHTVQnKVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5mcm9tUkZDMjgyMignVHVlLCAyNSBOb3YgMjAxNiAxMzoyMzoxMiArMDYwMCcpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21SRkMyODIyKCcyNSBOb3YgMjAxNiAxMzoyMyBaJylcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICBzdGF0aWMgZnJvbVJGQzI4MjIodGV4dCwgb3B0cyA9IHt9KSB7XG4gICAgY29uc3QgW3ZhbHMsIHBhcnNlZFpvbmVdID0gUmVnZXhQYXJzZXIucGFyc2VSRkMyODIyRGF0ZSh0ZXh0KTtcbiAgICByZXR1cm4gcGFyc2VEYXRhVG9EYXRlVGltZSh2YWxzLCBwYXJzZWRab25lLCBvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBEYXRlVGltZSBmcm9tIGFuIEhUVFAgaGVhZGVyIGRhdGVcbiAgICogQHNlZSBodHRwczovL3d3dy53My5vcmcvUHJvdG9jb2xzL3JmYzI2MTYvcmZjMjYxNi1zZWMzLmh0bWwjc2VjMy4zLjFcbiAgICogQHBhcmFtIHtzdHJpbmd9IHRleHQgLSB0aGUgSFRUUCBoZWFkZXIgZGF0ZVxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIG9wdGlvbnMgdG8gYWZmZWN0IHRoZSBjcmVhdGlvblxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnpvbmU9J2xvY2FsJ10gLSBjb252ZXJ0IHRoZSB0aW1lIHRvIHRoaXMgem9uZS4gU2luY2UgSFRUUCBkYXRlcyBhcmUgYWx3YXlzIGluIFVUQywgdGhpcyBoYXMgbm8gZWZmZWN0IG9uIHRoZSBpbnRlcnByZXRhdGlvbiBvZiBzdHJpbmcsIG1lcmVseSB0aGUgem9uZSB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIGlzIGV4cHJlc3NlZCBpbi5cbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5zZXRab25lPWZhbHNlXSAtIG92ZXJyaWRlIHRoZSB6b25lIHdpdGggdGhlIGZpeGVkLW9mZnNldCB6b25lIHNwZWNpZmllZCBpbiB0aGUgc3RyaW5nLiBGb3IgSFRUUCBkYXRlcywgdGhpcyBpcyBhbHdheXMgVVRDLCBzbyB0aGlzIG9wdGlvbiBpcyBlcXVpdmFsZW50IHRvIHNldHRpbmcgdGhlIGB6b25lYCBvcHRpb24gdG8gJ3V0YycsIGJ1dCB0aGlzIG9wdGlvbiBpcyBpbmNsdWRlZCBmb3IgY29uc2lzdGVuY3kgd2l0aCBzaW1pbGFyIG1ldGhvZHMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sb2NhbGU9J2VuLVVTJ10gLSBhIGxvY2FsZSB0byBzZXQgb24gdGhlIHJlc3VsdGluZyBEYXRlVGltZSBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5vdXRwdXRDYWxlbmRhciAtIHRoZSBvdXRwdXQgY2FsZW5kYXIgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUhUVFAoJ1N1biwgMDYgTm92IDE5OTQgMDg6NDk6MzcgR01UJylcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUuZnJvbUhUVFAoJ1N1bmRheSwgMDYtTm92LTk0IDA4OjQ5OjM3IEdNVCcpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmZyb21IVFRQKCdTdW4gTm92ICA2IDA4OjQ5OjM3IDE5OTQnKVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIHN0YXRpYyBmcm9tSFRUUCh0ZXh0LCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBbdmFscywgcGFyc2VkWm9uZV0gPSBSZWdleFBhcnNlci5wYXJzZUhUVFBEYXRlKHRleHQpO1xuICAgIHJldHVybiBwYXJzZURhdGFUb0RhdGVUaW1lKHZhbHMsIHBhcnNlZFpvbmUsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIERhdGVUaW1lIGZyb20gYW4gaW5wdXQgc3RyaW5nIGFuZCBmb3JtYXQgc3RyaW5nXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IC0gdGhlIHN0cmluZyB0byBwYXJzZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gZm10IC0gdGhlIGZvcm1hdCB0aGUgc3RyaW5nIGlzIGV4cGVjdGVkIHRvIGJlIGluIChzZWUgZGVzY3JpcHRpb24pXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gb3B0aW9ucyB0byBhZmZlY3QgdGhlIGNyZWF0aW9uXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuem9uZT0nbG9jYWwnXSAtIHVzZSB0aGlzIHpvbmUgaWYgbm8gb2Zmc2V0IGlzIHNwZWNpZmllZCBpbiB0aGUgaW5wdXQgc3RyaW5nIGl0c2VsZi4gV2lsbCBhbHNvIGNvbnZlcnQgdGhlIERhdGVUaW1lIHRvIHRoaXMgem9uZVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnNldFpvbmU9ZmFsc2VdIC0gb3ZlcnJpZGUgdGhlIHpvbmUgd2l0aCBhIHpvbmUgc3BlY2lmaWVkIGluIHRoZSBzdHJpbmcgaXRzZWxmLCBpZiBpdCBzcGVjaWZpZXMgb25lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sb2NhbGU9J2VuLVVTJ10gLSBhIGxvY2FsZSBzdHJpbmcgdG8gdXNlIHdoZW4gcGFyc2luZy4gV2lsbCBhbHNvIHNldCB0aGUgRGF0ZVRpbWUgdG8gdGhpcyBsb2NhbGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMubnVtYmVyaW5nU3lzdGVtIC0gdGhlIG51bWJlcmluZyBzeXN0ZW0gdG8gdXNlIHdoZW4gcGFyc2luZy4gV2lsbCBhbHNvIHNldCB0aGUgcmVzdWx0aW5nIERhdGVUaW1lIHRvIHRoaXMgbnVtYmVyaW5nIHN5c3RlbVxuICAgKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5vdXRwdXRDYWxlbmRhciAtIHRoZSBvdXRwdXQgY2FsZW5kYXIgdG8gc2V0IG9uIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWUgaW5zdGFuY2VcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICBzdGF0aWMgZnJvbVN0cmluZyh0ZXh0LCBmbXQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgbG9jYWxlID0gbnVsbCwgbnVtYmVyaW5nU3lzdGVtID0gbnVsbCB9ID0gb3B0aW9ucyxcbiAgICAgIHBhcnNlciA9IG5ldyBUb2tlblBhcnNlcihMb2NhbGUuZnJvbU9wdHMoeyBsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSB9KSksXG4gICAgICBbdmFscywgcGFyc2VkWm9uZV0gPSBwYXJzZXIucGFyc2VEYXRlVGltZSh0ZXh0LCBmbXQpO1xuICAgIHJldHVybiBwYXJzZURhdGFUb0RhdGVUaW1lKHZhbHMsIHBhcnNlZFpvbmUsIG9wdGlvbnMpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBpbnZhbGlkIERhdGVUaW1lLlxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIHN0YXRpYyBpbnZhbGlkKHJlYXNvbikge1xuICAgIGlmICghcmVhc29uKSB7XG4gICAgICB0aHJvdyBuZXcgSW52YWxpZEFyZ3VtZW50RXJyb3IoJ25lZWQgdG8gc3BlY2lmeSBhIHJlYXNvbiB0aGUgRGF0ZVRpbWUgaXMgaW52YWxpZCcpO1xuICAgIH1cbiAgICBpZiAoU2V0dGluZ3MudGhyb3dPbkludmFsaWQpIHtcbiAgICAgIHRocm93IG5ldyBJbnZhbGlkRGF0ZVRpbWVFcnJvcihyZWFzb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IERhdGVUaW1lKHsgaW52YWxpZFJlYXNvbjogcmVhc29uIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIElORk9cblxuICAvKipcbiAgICogR2V0IHRoZSB2YWx1ZSBvZiB1bml0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIGEgdW5pdCBzdWNoIGFzICdtaW51dGUnIG9yICdkYXknXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDcsIDQpLmdldCgnbW9udGgnKTsgLy89PiA3XG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDcsIDQpLmdldCgnZGF5Jyk7IC8vPT4gNFxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXQodW5pdCkge1xuICAgIHJldHVybiB0aGlzW3VuaXRdO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGUgRGF0ZVRpbWUgaXMgdmFsaWQuIEludmFsaWQgRGF0ZVRpbWVzIG9jY3VyIHdoZW46XG4gICAqICogVGhlIERhdGVUaW1lIHdhcyBjcmVhdGVkIGZyb20gaW52YWxpZCBjYWxlbmRhciBpbmZvcm1hdGlvbiwgc3VjaCBhcyB0aGUgMTN0aCBtb250aCBvciBGZWJydWFyeSAzMFxuICAgKiAqIFRoZSBEYXRlVGltZSB3YXMgY3JlYXRlZCBieSBhbiBvcGVyYXRpb24gb24gYW5vdGhlciBpbnZhbGlkIGRhdGVcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGdldCBpc1ZhbGlkKCkge1xuICAgIHJldHVybiB0aGlzLmludmFsaWRSZWFzb24gPT09IG51bGw7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBleHBsYW5hdGlvbiBvZiB3aHkgdGhpcyBEYXRlVGltZSBiZWNhbWUgaW52YWxpZCwgb3IgbnVsbCBpZiB0aGUgRGF0ZVRpbWUgaXMgdmFsaWRcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgZ2V0IGludmFsaWRSZWFzb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuaW52YWxpZFJlYXNvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGxvY2FsZSBvZiBhIERhdGVUaW1lLCBzdWNoICdlbi1VSycuIFRoZSBsb2NhbGUgaXMgdXNlZCB3aGVuIGZvcm1hdHRpbmcgdGhlIERhdGVUaW1lXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGdldCBsb2NhbGUoKSB7XG4gICAgcmV0dXJuIHRoaXMubG9jLmxvY2FsZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG51bWJlcmluZyBzeXN0ZW0gb2YgYSBEYXRlVGltZSwgc3VjaCAnYmVuZycuIFRoZSBudW1iZXJpbmcgc3lzdGVtIGlzIHVzZWQgd2hlbiBmb3JtYXR0aW5nIHRoZSBEYXRlVGltZVxuICAgKlxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBnZXQgbnVtYmVyaW5nU3lzdGVtKCkge1xuICAgIHJldHVybiB0aGlzLmxvYy5udW1iZXJpbmdTeXN0ZW07XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBvdXRwdXQgY2FsZW5kYXIgb2YgYSBEYXRlVGltZSwgc3VjaCAnaXNsYW1pYycuIFRoZSBvdXRwdXQgY2FsZW5kYXIgaXMgdXNlZCB3aGVuIGZvcm1hdHRpbmcgdGhlIERhdGVUaW1lXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIGdldCBvdXRwdXRDYWxlbmRhcigpIHtcbiAgICByZXR1cm4gdGhpcy5sb2Mub3V0cHV0Q2FsZW5kYXI7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBuYW1lIG9mIHRoZSB0aW1lIHpvbmUuXG4gICAqIEByZXR1cm4ge1N0cmluZ31cbiAgICovXG4gIGdldCB6b25lTmFtZSgpIHtcbiAgICByZXR1cm4gdGhpcy56b25lLm5hbWU7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSB5ZWFyXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS55ZWFyIC8vPT4gMjAxN1xuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgeWVhcigpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLnllYXIgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBtb250aCAoMS0xMikuXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS5tb250aCAvLz0+IDVcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IG1vbnRoKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmMubW9udGggOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBkYXkgb2YgdGhlIG1vbnRoICgxLTMwaXNoKS5cbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNSwgMjUpLmRheSAvLz0+IDI1XG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldCBkYXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuYy5kYXkgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBob3VyIG9mIHRoZSBkYXkgKDAtMjMpLlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSwgOSkuaG91ciAvLz0+IDlcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IGhvdXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuYy5ob3VyIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbWludXRlIG9mIHRoZSBob3VyICgwLTU5KS5cbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNSwgMjUsIDksIDMwKS5taW51dGUgLy89PiAzMFxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgbWludXRlKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmMubWludXRlIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgc2Vjb25kIG9mIHRoZSBtaW51dGUgKDAtNTkpLlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSwgOSwgMzAsIDUyKS5zZWNvbmQgLy89PiA1MlxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgc2Vjb25kKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLmMuc2Vjb25kIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbWlsbGlzZWNvbmQgb2YgdGhlIHNlY29uZCAoMC05OTkpLlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE3LCA1LCAyNSwgOSwgMzAsIDUyLCA2NTQpLm1pbGxpc2Vjb25kIC8vPT4gNjU0XG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldCBtaWxsaXNlY29uZCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy5jLm1pbGxpc2Vjb25kIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgd2VlayB5ZWFyXG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAxMSwgMzEpLndlZWtZZWFyIC8vPT4gMjAxNVxuICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAqL1xuICBnZXQgd2Vla1llYXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHBvc3NpYmx5Q2FjaGVkV2Vla0RhdGEodGhpcykud2Vla1llYXIgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSB3ZWVrIG51bWJlciBvZiB0aGUgd2VlayB5ZWFyICgxLTUyaXNoKS5cbiAgICogQHNlZSBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JU09fd2Vla19kYXRlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS53ZWVrTnVtYmVyIC8vPT4gMjFcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IHdlZWtOdW1iZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHBvc3NpYmx5Q2FjaGVkV2Vla0RhdGEodGhpcykud2Vla051bWJlciA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGRheSBvZiB0aGUgd2Vlay5cbiAgICogMSBpcyBNb25kYXkgYW5kIDcgaXMgU3VuZGF5XG4gICAqIEBzZWUgaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAxMSwgMzEpLndlZWtkYXkgLy89PiA0XG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldCB3ZWVrZGF5KCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBwb3NzaWJseUNhY2hlZFdlZWtEYXRhKHRoaXMpLndlZWtkYXkgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBvcmRpbmFsIChpLmUuIHRoZSBkYXkgb2YgdGhlIHllYXIpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTcsIDUsIDI1KS5vcmRpbmFsIC8vPT4gMTQ1XG4gICAqIEByZXR1cm4ge251bWJlcnxEYXRlVGltZX1cbiAgICovXG4gIGdldCBvcmRpbmFsKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBDb252ZXJzaW9ucy5ncmVnb3JpYW5Ub09yZGluYWwodGhpcy5jKS5vcmRpbmFsIDogTmFOO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgVVRDIG9mZnNldCBvZiB0aGlzIERhdGVUaW1lIGluIG1pbnV0ZXNcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoKS5vZmZzZXQgLy89PiAtMjQwXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygpLm9mZnNldCAvLz0+IDBcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IG9mZnNldCgpIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkID8gdGhpcy56b25lLm9mZnNldCh0aGlzLnRzKSA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHNob3J0IGh1bWFuIG5hbWUgZm9yIHRoZSB6b25lJ3MgY3VycmVudCBvZmZzZXQsIGZvciBleGFtcGxlIFwiRVNUXCIgb3IgXCJFRFRcIi5cbiAgICogQHJldHVybiB7U3RyaW5nfVxuICAgKi9cbiAgZ2V0IG9mZnNldE5hbWVTaG9ydCgpIHtcbiAgICBpZiAodGhpcy5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gdGhpcy56b25lLm9mZnNldE5hbWUodGhpcy50cywge1xuICAgICAgICBmb3JtYXQ6ICdzaG9ydCcsXG4gICAgICAgIGxvY2FsZTogdGhpcy5sb2NhbGVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBsb25nIGh1bWFuIG5hbWUgZm9yIHRoZSB6b25lJ3MgY3VycmVudCBvZmZzZXQsIGZvciBleGFtcGxlIFwiRWFzdGVybiBTdGFuZGFyZCBUaW1lXCIgb3IgXCJFYXN0ZXJuIERheWxpZ2h0IFRpbWVcIi5cbiAgICogSXMgbG9jYWxlLWF3YXJlLlxuICAgKiBAcmV0dXJuIHtTdHJpbmd9XG4gICAqL1xuICBnZXQgb2Zmc2V0TmFtZUxvbmcoKSB7XG4gICAgaWYgKHRoaXMuaXNWYWxpZCkge1xuICAgICAgcmV0dXJuIHRoaXMuem9uZS5vZmZzZXROYW1lKHRoaXMudHMsIHtcbiAgICAgICAgZm9ybWF0OiAnbG9uZycsXG4gICAgICAgIGxvY2FsZTogdGhpcy5sb2NhbGVcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IHdoZXRoZXIgdGhpcyB6b25lJ3Mgb2Zmc2V0IGV2ZXIgY2hhbmdlcywgYXMgaW4gYSBEU1QuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgaXNPZmZzZXRGaXhlZCgpIHtcbiAgICByZXR1cm4gdGhpcy56b25lLnVuaXZlcnNhbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgd2hldGhlciB0aGUgRGF0ZVRpbWUgaXMgaW4gYSBEU1QuXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgaXNJbkRTVCgpIHtcbiAgICBpZiAodGhpcy5pc09mZnNldEZpeGVkKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHRoaXMub2Zmc2V0ID4gdGhpcy5zZXQoeyBtb250aDogMSB9KS5vZmZzZXQgfHwgdGhpcy5vZmZzZXQgPiB0aGlzLnNldCh7IG1vbnRoOiA1IH0pLm9mZnNldFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoaXMgRGF0ZVRpbWUgaXMgaW4gYSBsZWFwIHllYXIsIGZhbHNlIG90aGVyd2lzZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE2KS5pc0luTGVhcFllYXIgLy89PiB0cnVlXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTMpLmlzSW5MZWFwWWVhciAvLz0+IGZhbHNlXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBnZXQgaXNJbkxlYXBZZWFyKCkge1xuICAgIHJldHVybiBVdGlsLmlzTGVhcFllYXIodGhpcy55ZWFyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgZGF5cyBpbiB0aGlzIERhdGVUaW1lJ3MgbW9udGhcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNiwgMikuZGF5c0luTW9udGggLy89PiAyOVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE2LCAzKS5kYXlzIC8vPT4gMzFcbiAgICogQHJldHVybiB7bnVtYmVyfVxuICAgKi9cbiAgZ2V0IGRheXNJbk1vbnRoKCkge1xuICAgIHJldHVybiBVdGlsLmRheXNJbk1vbnRoKHRoaXMueWVhciwgdGhpcy5tb250aCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIGRheXMgaW4gdGhpcyBEYXRlVGltZSdzIHllYXJcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNikuZGF5c0luWWVhciAvLz0+IDM2NlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDEzKS5kYXlzSW5ZZWFyIC8vPT4gMzY1XG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIGdldCBkYXlzSW5ZZWFyKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyBVdGlsLmRheXNJblllYXIodGhpcy55ZWFyKSA6IE5hTjtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSByZXNvbHZlZCBJbnRsIG9wdGlvbnMgZm9yIHRoaXMgRGF0ZVRpbWUuXG4gICAqIFRoaXMgaXMgdXNlZnVsIGluIHVuZGVyc3RhbmRpbmcgdGhlIGJlaGF2aW9yIG9mIHBhcnNpbmcgYW5kIGZvcm1hdHRpbmcgbWV0aG9kc1xuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0cyAtIHRoZSBzYW1lIG9wdGlvbnMgYXMgdG9Mb2NhbGVTdHJpbmdcbiAgICogQHJldHVybiB7b2JqZWN0fVxuICAgKi9cbiAgcmVzb2x2ZWRMb2NhbGVPcHRzKG9wdHMgPSB7fSkge1xuICAgIGNvbnN0IHsgbG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIGNhbGVuZGFyIH0gPSBGb3JtYXR0ZXIuY3JlYXRlKFxuICAgICAgdGhpcy5sb2MuY2xvbmUob3B0cyksXG4gICAgICBvcHRzXG4gICAgKS5yZXNvbHZlZE9wdGlvbnModGhpcyk7XG4gICAgcmV0dXJuIHsgbG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyOiBjYWxlbmRhciB9O1xuICB9XG5cbiAgLy8gVFJBTlNGT1JNXG5cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhlIERhdGVUaW1lJ3Mgem9uZSB0byBVVEMuIFJldHVybnMgYSBuZXdseS1jb25zdHJ1Y3RlZCBEYXRlVGltZS5cbiAgICpcbiAgICogRXF1aXZhbGVudCB0byB7QGxpbmsgc2V0Wm9uZX0oJ3V0YycpXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb2Zmc2V0PTBdIC0gb3B0aW9uYWxseSwgYW4gb2Zmc2V0IGZyb20gVVRDIGluIG1pbnV0ZXNcbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRzPXt9XSAtIG9wdGlvbnMgdG8gcGFzcyB0byBgc2V0Wm9uZSgpYFxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIHRvVVRDKG9mZnNldCA9IDAsIG9wdHMgPSB7fSkge1xuICAgIHJldHVybiB0aGlzLnNldFpvbmUoRml4ZWRPZmZzZXRab25lLmluc3RhbmNlKG9mZnNldCksIG9wdHMpO1xuICB9XG5cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhlIERhdGVUaW1lJ3Mgem9uZSB0byB0aGUgaG9zdCdzIGxvY2FsIHpvbmUuIFJldHVybnMgYSBuZXdseS1jb25zdHJ1Y3RlZCBEYXRlVGltZS5cbiAgICpcbiAgICogRXF1aXZhbGVudCB0byBgc2V0Wm9uZSgnbG9jYWwnKWBcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICB0b0xvY2FsKCkge1xuICAgIHJldHVybiB0aGlzLnNldFpvbmUobmV3IExvY2FsWm9uZSgpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBcIlNldFwiIHRoZSBEYXRlVGltZSdzIHpvbmUgdG8gc3BlY2lmaWVkIHpvbmUuIFJldHVybnMgYSBuZXdseS1jb25zdHJ1Y3RlZCBEYXRlVGltZS5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgdGhlIHNldHRlciBrZWVwcyB0aGUgdW5kZXJseWluZyB0aW1lIHRoZSBzYW1lIChhcyBpbiwgdGhlIHNhbWUgVVRDIHRpbWVzdGFtcCksIGJ1dCB0aGUgbmV3IGluc3RhbmNlIHdpbGwgcmVwb3J0IGRpZmZlcmVudCBsb2NhbCB0aW1lcyBhbmQgY29uc2lkZXIgRFNUcyB3aGVuIG1ha2luZyBjb21wdXRhdGlvbnMsIGFzIHdpdGgge0BsaW5rIHBsdXN9LiBZb3UgbWF5IHdpc2ggdG8gdXNlIHtAbGluayB0b0xvY2FsfSBhbmQge0BsaW5rIHRvVVRDfSB3aGljaCBwcm92aWRlIHNpbXBsZSBjb252ZW5pZW5jZSB3cmFwcGVycyBmb3IgY29tbW9ubHkgdXNlZCB6b25lcy5cbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW3pvbmU9J2xvY2FsJ10gLSBhIHpvbmUgaWRlbnRpZmllci4gQXMgYSBzdHJpbmcsIHRoYXQgY2FuIGJlIGFueSBJQU5BIHpvbmUgc3VwcG9ydGVkIGJ5IHRoZSBob3N0IGVudmlyb25tZW50LCBvciBhIGZpeGVkLW9mZnNldCBuYW1lIG9mIHRoZSBmb3JtICd1dGMrMycsIG9yIHRoZSBzdHJpbmdzICdsb2NhbCcgb3IgJ3V0YycuIFlvdSBtYXkgYWxzbyBzdXBwbHkgYW4gaW5zdGFuY2Ugb2YgYSB7QGxpbmsgWm9uZX0gY2xhc3MuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRzLmtlZXBDYWxlbmRhclRpbWU9ZmFsc2VdIC0gSWYgdHJ1ZSwgYWRqdXN0IHRoZSB1bmRlcmx5aW5nIHRpbWUgc28gdGhhdCB0aGUgbG9jYWwgdGltZSBzdGF5cyB0aGUgc2FtZSwgYnV0IGluIHRoZSB0YXJnZXQgem9uZS4gWW91IHNob3VsZCByYXJlbHkgbmVlZCB0aGlzLlxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIHNldFpvbmUoem9uZSwgeyBrZWVwQ2FsZW5kYXJUaW1lID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgem9uZSA9IFV0aWwubm9ybWFsaXplWm9uZSh6b25lKTtcbiAgICBpZiAoem9uZS5lcXVhbHModGhpcy56b25lKSkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSBlbHNlIGlmICghem9uZS5pc1ZhbGlkKSB7XG4gICAgICByZXR1cm4gRGF0ZVRpbWUuaW52YWxpZChVTlNVUFBPUlRFRF9aT05FKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgbmV3VFMgPSBrZWVwQ2FsZW5kYXJUaW1lXG4gICAgICAgID8gdGhpcy50cyArICh0aGlzLm8gLSB6b25lLm9mZnNldCh0aGlzLnRzKSkgKiA2MCAqIDEwMDBcbiAgICAgICAgOiB0aGlzLnRzO1xuICAgICAgcmV0dXJuIGNsb25lKHRoaXMsIHsgdHM6IG5ld1RTLCB6b25lIH0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBcIlNldFwiIHRoZSBsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgb3Igb3V0cHV0Q2FsZW5kYXIuIFJldHVybnMgYSBuZXdseS1jb25zdHJ1Y3RlZCBEYXRlVGltZS5cbiAgICogQHBhcmFtIHtvYmplY3R9IHByb3BlcnRpZXMgLSB0aGUgcHJvcGVydGllcyB0byBzZXRcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNSwgMjUpLnJlY29uZmlndXJlKHsgbG9jYWxlOiAnZW4tdWsnIH0pXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgcmVjb25maWd1cmUoeyBsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgb3V0cHV0Q2FsZW5kYXIgfSA9IHt9KSB7XG4gICAgY29uc3QgbG9jID0gdGhpcy5sb2MuY2xvbmUoeyBsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgb3V0cHV0Q2FsZW5kYXIgfSk7XG4gICAgcmV0dXJuIGNsb25lKHRoaXMsIHsgbG9jIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhlIGxvY2FsZS4gUmV0dXJucyBhIG5ld2x5LWNvbnN0cnVjdGVkIERhdGVUaW1lLlxuICAgKiBKdXN0IGEgY29udmVuaWVudCBhbGlhcyBmb3IgcmVjb25maWd1cmUoeyBsb2NhbGUgfSlcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNywgNSwgMjUpLnNldExvY2FsZSgnZW4tdWsnKVxuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIHNldExvY2FsZShsb2NhbGUpIHtcbiAgICByZXR1cm4gdGhpcy5yZWNvbmZpZ3VyZSh7IGxvY2FsZSB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBcIlNldFwiIHRoZSB2YWx1ZXMgb2Ygc3BlY2lmaWVkIHVuaXRzLiBSZXR1cm5zIGEgbmV3bHktY29uc3RydWN0ZWQgRGF0ZVRpbWUuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSB2YWx1ZXMgLSBhIG1hcHBpbmcgb2YgdW5pdHMgdG8gbnVtYmVyc1xuICAgKiBAZXhhbXBsZSBkdC5zZXQoeyB5ZWFyOiAyMDE3IH0pXG4gICAqIEBleGFtcGxlIGR0LnNldCh7IGhvdXI6IDgsIG1pbnV0ZTogMzAgfSlcbiAgICogQGV4YW1wbGUgZHQuc2V0KHsgd2Vla2RheTogNSB9KVxuICAgKiBAZXhhbXBsZSBkdC5zZXQoeyB5ZWFyOiAyMDA1LCBvcmRpbmFsOiAyMzQgfSlcbiAgICogQGV4YW1wbGUgZHQuc2V0KHsgb3V0cHV0Q2FsZW5kYXI6ICdiZW5nJywgem9uZTogJ3V0YycgfSlcbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICBzZXQodmFsdWVzKSB7XG4gICAgY29uc3Qgbm9ybWFsaXplZCA9IFV0aWwubm9ybWFsaXplT2JqZWN0KHZhbHVlcywgbm9ybWFsaXplVW5pdCksXG4gICAgICBzZXR0aW5nV2Vla1N0dWZmID1cbiAgICAgICAgIVV0aWwuaXNVbmRlZmluZWQobm9ybWFsaXplZC53ZWVrWWVhcikgfHxcbiAgICAgICAgIVV0aWwuaXNVbmRlZmluZWQobm9ybWFsaXplZC53ZWVrTnVtYmVyKSB8fFxuICAgICAgICAhVXRpbC5pc1VuZGVmaW5lZChub3JtYWxpemVkLndlZWtkYXkpO1xuXG4gICAgbGV0IG1peGVkO1xuICAgIGlmIChzZXR0aW5nV2Vla1N0dWZmKSB7XG4gICAgICBtaXhlZCA9IENvbnZlcnNpb25zLndlZWtUb0dyZWdvcmlhbihcbiAgICAgICAgT2JqZWN0LmFzc2lnbihDb252ZXJzaW9ucy5ncmVnb3JpYW5Ub1dlZWsodGhpcy5jKSwgbm9ybWFsaXplZClcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICghVXRpbC5pc1VuZGVmaW5lZChub3JtYWxpemVkLm9yZGluYWwpKSB7XG4gICAgICBtaXhlZCA9IENvbnZlcnNpb25zLm9yZGluYWxUb0dyZWdvcmlhbihcbiAgICAgICAgT2JqZWN0LmFzc2lnbihDb252ZXJzaW9ucy5ncmVnb3JpYW5Ub09yZGluYWwodGhpcy5jKSwgbm9ybWFsaXplZClcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1peGVkID0gT2JqZWN0LmFzc2lnbih0aGlzLnRvT2JqZWN0KCksIG5vcm1hbGl6ZWQpO1xuXG4gICAgICAvLyBpZiB3ZSBkaWRuJ3Qgc2V0IHRoZSBkYXkgYnV0IHdlIGVuZGVkIHVwIG9uIGFuIG92ZXJmbG93IGRhdGUsXG4gICAgICAvLyB1c2UgdGhlIGxhc3QgZGF5IG9mIHRoZSByaWdodCBtb250aFxuICAgICAgaWYgKFV0aWwuaXNVbmRlZmluZWQobm9ybWFsaXplZC5kYXkpKSB7XG4gICAgICAgIG1peGVkLmRheSA9IE1hdGgubWluKFV0aWwuZGF5c0luTW9udGgobWl4ZWQueWVhciwgbWl4ZWQubW9udGgpLCBtaXhlZC5kYXkpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IFt0cywgb10gPSBvYmpUb1RTKG1peGVkLCB0aGlzLm8sIHRoaXMuem9uZSk7XG4gICAgcmV0dXJuIGNsb25lKHRoaXMsIHsgdHMsIG8gfSk7XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgcGVyaW9kIG9mIHRpbWUgdG8gdGhpcyBEYXRlVGltZSBhbmQgcmV0dXJuIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWVcbiAgICpcbiAgICogQWRkaW5nIGhvdXJzLCBtaW51dGVzLCBzZWNvbmRzLCBvciBtaWxsaXNlY29uZHMgaW5jcmVhc2VzIHRoZSB0aW1lc3RhbXAgYnkgdGhlIHJpZ2h0IG51bWJlciBvZiBtaWxsaXNlY29uZHMuIEFkZGluZyBkYXlzLCBtb250aHMsIG9yIHllYXJzIHNoaWZ0cyB0aGUgY2FsZW5kYXIsIGFjY291bnRpbmcgZm9yIERTVHMgYW5kIGxlYXAgeWVhcnMgYWxvbmcgdGhlIHdheS4gVGh1cywgYGR0LnBsdXMoeyBob3VyczogMjQgfSlgIG1heSByZXN1bHQgaW4gYSBkaWZmZXJlbnQgdGltZSB0aGFuIGBkdC5wbHVzKHsgZGF5czogMSB9KWAgaWYgdGhlcmUncyBhIERTVCBzaGlmdCBpbiBiZXR3ZWVuLlxuICAgKiBAcGFyYW0ge0R1cmF0aW9ufG51bWJlcnxvYmplY3R9IGR1cmF0aW9uIC0gVGhlIGFtb3VudCB0byBhZGQuIEVpdGhlciBhIEx1eG9uIER1cmF0aW9uLCBhIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIHRoZSBvYmplY3QgYXJndW1lbnQgdG8gRHVyYXRpb24uZnJvbU9iamVjdCgpXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKCkucGx1cygxMjMpIC8vfj4gaW4gMTIzIG1pbGxpc2Vjb25kc1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgpLnBsdXMoeyBtaW51dGVzOiAxNSB9KSAvL34+IGluIDE1IG1pbnV0ZXNcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoKS5wbHVzKHsgZGF5czogMSB9KSAvL34+IHRoaXMgdGltZSB0b21vcnJvd1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgpLnBsdXMoeyBob3VyczogMywgbWludXRlczogMTMgfSkgLy9+PiBpbiAxIGhyLCAxMyBtaW5cbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoKS5wbHVzKER1cmF0aW9uLmZyb21PYmplY3QoeyBob3VyczogMywgbWludXRlczogMTMgfSkpIC8vfj4gaW4gMSBociwgMTMgbWluXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgcGx1cyhkdXJhdGlvbikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICBjb25zdCBkdXIgPSBVdGlsLmZyaWVuZGx5RHVyYXRpb24oZHVyYXRpb24pO1xuICAgIHJldHVybiBjbG9uZSh0aGlzLCBhZGp1c3RUaW1lKHRoaXMsIGR1cikpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN1YnRyYWN0IGEgcGVyaW9kIG9mIHRpbWUgdG8gdGhpcyBEYXRlVGltZSBhbmQgcmV0dXJuIHRoZSByZXN1bHRpbmcgRGF0ZVRpbWVcbiAgICogU2VlIHtAbGluayBwbHVzfVxuICAgKiBAcGFyYW0ge0R1cmF0aW9ufG51bWJlcnxvYmplY3R9IGR1cmF0aW9uIC0gVGhlIGFtb3VudCB0byBzdWJ0cmFjdC4gRWl0aGVyIGEgTHV4b24gRHVyYXRpb24sIGEgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcywgdGhlIG9iamVjdCBhcmd1bWVudCB0byBEdXJhdGlvbi5mcm9tT2JqZWN0KClcbiAgIEByZXR1cm4ge0RhdGVUaW1lfVxuICAqL1xuICBtaW51cyhkdXJhdGlvbikge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICBjb25zdCBkdXIgPSBVdGlsLmZyaWVuZGx5RHVyYXRpb24oZHVyYXRpb24pLm5lZ2F0ZSgpO1xuICAgIHJldHVybiBjbG9uZSh0aGlzLCBhZGp1c3RUaW1lKHRoaXMsIGR1cikpO1xuICB9XG5cbiAgLyoqXG4gICAqIFwiU2V0XCIgdGhpcyBEYXRlVGltZSB0byB0aGUgYmVnaW5uaW5nIG9mIGEgdW5pdCBvZiB0aW1lLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIFRoZSB1bml0IHRvIGdvIHRvIHRoZSBiZWdpbm5pbmcgb2YuIENhbiBiZSAneWVhcicsICdtb250aCcsICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJywgb3IgJ21pbGxpc2Vjb25kJy5cbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgMywgMykuc3RhcnRPZignbW9udGgnKS50b0lTT0RhdGUoKTsgLy89PiAnMjAxNC0wMy0wMSdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgMywgMykuc3RhcnRPZigneWVhcicpLnRvSVNPRGF0ZSgpOyAvLz0+ICcyMDE0LTAxLTAxJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzLCA1LCAzMCkuc3RhcnRPZignZGF5JykudG9JU09UaW1lKCk7IC8vPT4gJzAwOjAwLjAwMC0wNTowMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgMywgMywgNSwgMzApLnN0YXJ0T2YoJ2hvdXInKS50b0lTT1RpbWUoKTsgLy89PiAnMDU6MDA6MDAuMDAwLTA1OjAwJ1xuICAgKiBAcmV0dXJuIHtEYXRlVGltZX1cbiAgICovXG4gIHN0YXJ0T2YodW5pdCkge1xuICAgIGlmICghdGhpcy5pc1ZhbGlkKSByZXR1cm4gdGhpcztcbiAgICBjb25zdCBvID0ge30sXG4gICAgICBub3JtYWxpemVkVW5pdCA9IER1cmF0aW9uLm5vcm1hbGl6ZVVuaXQodW5pdCk7XG4gICAgc3dpdGNoIChub3JtYWxpemVkVW5pdCkge1xuICAgICAgY2FzZSAneWVhcnMnOlxuICAgICAgICBvLm1vbnRoID0gMTtcbiAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICAgIGNhc2UgJ21vbnRocyc6XG4gICAgICAgIG8uZGF5ID0gMTtcbiAgICAgIC8vIGZhbGxzIHRocm91Z2hcbiAgICAgIGNhc2UgJ3dlZWtzJzpcbiAgICAgIGNhc2UgJ2RheXMnOlxuICAgICAgICBvLmhvdXIgPSAwO1xuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgY2FzZSAnaG91cnMnOlxuICAgICAgICBvLm1pbnV0ZSA9IDA7XG4gICAgICAvLyBmYWxscyB0aHJvdWdoXG4gICAgICBjYXNlICdtaW51dGVzJzpcbiAgICAgICAgby5zZWNvbmQgPSAwO1xuICAgICAgLy8gZmFsbHMgdGhyb3VnaFxuICAgICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgICAgIG8ubWlsbGlzZWNvbmQgPSAwO1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBJbnZhbGlkVW5pdEVycm9yKHVuaXQpO1xuICAgIH1cblxuICAgIGlmIChub3JtYWxpemVkVW5pdCA9PT0gJ3dlZWtzJykge1xuICAgICAgby53ZWVrZGF5ID0gMTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5zZXQobyk7XG4gIH1cblxuICAvKipcbiAgICogXCJTZXRcIiB0aGlzIERhdGVUaW1lIHRvIHRoZSBlbmQgKGkuZS4gdGhlIGxhc3QgbWlsbGlzZWNvbmQpIG9mIGEgdW5pdCBvZiB0aW1lXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1bml0IC0gVGhlIHVuaXQgdG8gZ28gdG8gdGhlIGVuZCBvZi4gQ2FuIGJlICd5ZWFyJywgJ21vbnRoJywgJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnLCBvciAnbWlsbGlzZWNvbmQnLlxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgyMDE0LCAzLCAzKS5lbmRPZignbW9udGgnKS50b0lTTygpOyAvLz0+ICcyMDE0LTAzLTAzVDAwOjAwOjAwLjAwMC0wNTowMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgMywgMykuZW5kT2YoJ3llYXInKS50b0lTTygpOyAvLz0+ICcyMDE0LTEyLTMxVDIzOjU5OjU5Ljk5OS0wNTowMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgMywgMywgNSwgMzApLmVuZE9mKCdkYXknKS50b0lTTygpOyAvLz0+ICcyMDE0LTAzLTAzVDIzOjU5OjU5Ljk5OS0wNTowMCdcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoMjAxNCwgMywgMywgNSwgMzApLmVuZE9mKCdob3VyJykudG9JU08oKTsgLy89PiAnMjAxNC0wMy0wM1QwNTo1OTo1OS45OTktMDU6MDAnXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgZW5kT2YodW5pdCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWRcbiAgICAgID8gdGhpcy5zdGFydE9mKHVuaXQpXG4gICAgICAgICAgLnBsdXMoeyBbdW5pdF06IDEgfSlcbiAgICAgICAgICAubWludXMoMSlcbiAgICAgIDogdGhpcztcbiAgfVxuXG4gIC8vIE9VVFBVVFxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUgZm9ybWF0dGVkIGFjY29yZGluZyB0byB0aGUgc3BlY2lmaWVkIGZvcm1hdCBzdHJpbmcuXG4gICAqICoqWW91IG1heSBub3Qgd2FudCB0aGlzLioqIFNlZSB7QGxpbmsgdG9Mb2NhbGVTdHJpbmd9IGZvciBhIG1vcmUgZmxleGlibGUgZm9ybWF0dGluZyB0b29sLiBTZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBzcGVjaWZpYyBmb3JtYXQgdG9rZW5zIHN1cHBvcnRlZC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IGZtdCAtIHRoZSBmb3JtYXQgc3RyaW5nXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9wdHMucm91bmQgLSByb3VuZCBudW1lcmljYWwgdmFsdWVzXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKCkudG9Gb3JtYXQoJ3l5eXkgTExMIGRkJykgLy89PiAnMjAxNyBhdnIuIDIyJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgpLnNldExvY2FsZSgnZnInKS50b0Zvcm1hdCgneXl5eSBMTEwgZGQnKSAvLz0+ICcyMDE3IEFwciAyMidcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoKS50b0Zvcm1hdChcIkhIICdob3VycyBhbmQnIG1tICdtaW51dGVzJ1wiKSAvLz0+ICcyMCBob3VycyBhbmQgNTUgbWludXRlcydcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9Gb3JtYXQoZm10LCBvcHRzID0ge30pIHtcbiAgICByZXR1cm4gdGhpcy5pc1ZhbGlkXG4gICAgICA/IEZvcm1hdHRlci5jcmVhdGUodGhpcy5sb2MsIG9wdHMpLmZvcm1hdERhdGVUaW1lRnJvbVN0cmluZyh0aGlzLCBmbXQpXG4gICAgICA6IElOVkFMSUQ7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIGxvY2FsaXplZCBzdHJpbmcgcmVwcmVzZW50aW5nIHRoaXMgZGF0ZS4gQWNjZXB0cyB0aGUgc2FtZSBvcHRpb25zIGFzIHRoZSBJbnRsLkRhdGVUaW1lRm9ybWF0IGNvbnN0cnVjdG9yIGFuZCBhbnkgcHJlc2V0cyBkZWZpbmVkIGJ5IEx1eG9uLCBzdWNoIGFzIGBEYXRlVGltZS5EQVRFX0ZVTExgIG9yIGBEYXRlVGltZS5USU1FX1NJTVBMRWAuXG4gICAqIFRoZSBleGFjdCBiZWhhdmlvciBvZiB0aGlzIG1ldGhvZCBpcyBicm93c2VyLXNwZWNpZmljLCBidXQgaW4gZ2VuZXJhbCBpdCB3aWxsIHJldHVybiBhbiBhcHByb3ByaWF0ZSByZXByZXNlbnRhdGlvbi5cbiAgICogb2YgdGhlIERhdGVUaW1lIGluIHRoZSBhc3NpZ25lZCBsb2NhbGUuXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRGF0ZVRpbWVGb3JtYXRcbiAgICogQHBhcmFtIG9wdHMge29iamVjdH0gLSBJbnRsLkRhdGVUaW1lRm9ybWF0IGNvbnN0cnVjdG9yIG9wdGlvbnNcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoKS50b0xvY2FsZVN0cmluZygpOyAvLz0+IDQvMjAvMjAxN1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgpLnNldExvY2FsZSgnZW4tZ2InKS50b0xvY2FsZVN0cmluZygpOyAvLz0+ICcyMC8wNC8yMDE3J1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgpLnRvTG9jYWxlU3RyaW5nKERhdGVUaW1lLkRBVEVfRlVMTCk7IC8vPT4gJ0FwcmlsIDIwLCAyMDE3J1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgpLnRvTG9jYWxlU3RyaW5nKERhdGVUaW1lLlRJTUVfU0lNUExFKTsgLy89PiAnMTE6MzIgQU0nXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKCkudG9Mb2NhbGVTdHJpbmcoRGF0ZVRpbWUuREFURVRJTUVfU0hPUlQpOyAvLz0+ICc0LzIwLzIwMTcsIDExOjMyIEFNJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgpLnRvTG9jYWxlU3RyaW5nKHt3ZWVrZGF5OiAnbG9uZycsIG1vbnRoOiAnbG9uZycsIGRheTogJzItZGlnaXQnfSk7IC8vPT4gJ1RodSwgQXByIDIwJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS5sb2NhbCgpLnRvTG9jYWxlU3RyaW5nKHt3ZWVrZGF5OiAnbG9uZycsIG1vbnRoOiAnbG9uZycsIGRheTogJzItZGlnaXQnLCBob3VyOiAnMi1kaWdpdCcsIG1pbnV0ZTogJzItZGlnaXQnfSk7IC8vPT4gJ1RodSwgQXByIDIwLCAxMToyNydcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoKS50b0xvY2FsZVN0cmluZyh7aG91cjogJzItZGlnaXQnLCBtaW51dGU6ICcyLWRpZ2l0J30pOyAvLz0+ICcxMTozMidcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9Mb2NhbGVTdHJpbmcob3B0cyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZFxuICAgICAgPyBGb3JtYXR0ZXIuY3JlYXRlKHRoaXMubG9jLmNsb25lKG9wdHMpLCBvcHRzKS5mb3JtYXREYXRlVGltZSh0aGlzKVxuICAgICAgOiBJTlZBTElEO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gSVNPIDg2MDEtY29tcGxpYW50IHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9wdHMuc3VwcHJlc3NNaWxsaXNlY29uZHMgLSBleGNsdWRlIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBmb3JtYXQgaWYgdGhleSdyZSAwXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0cy5zdXByZXNzU2Vjb25kcyAtIGV4Y2x1ZGUgc2Vjb25kcyBmcm9tIHRoZSBmb3JtYXQgaWYgdGhleSdyZSAwXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygxOTgyLCA1LCAyNSkudG9JU08oKSAvLz0+ICcxOTgyLTA1LTI1VDAwOjAwOjAwLjAwMFonXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKCkudG9JU08oKSAvLz0+ICcyMDE3LTA0LTIyVDIwOjQ3OjA1LjMzNS0wNDowMCdcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9JU08oeyBzdXBwcmVzc01pbGxpc2Vjb25kcyA9IGZhbHNlLCBzdXBwcmVzc1NlY29uZHMgPSBmYWxzZSB9ID0ge30pIHtcbiAgICBjb25zdCBmID0gYHl5eXktTU0tZGQnVCcke2lzb1RpbWVGb3JtYXQodGhpcywgc3VwcHJlc3NTZWNvbmRzLCBzdXBwcmVzc01pbGxpc2Vjb25kcyl9YDtcbiAgICByZXR1cm4gZm9ybWF0TWF5YmUodGhpcywgZik7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMS1jb21wbGlhbnQgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoaXMgRGF0ZVRpbWUncyBkYXRlIGNvbXBvbmVudFxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMTk4MiwgNSwgMjUpLnRvSVNPRGF0ZSgpIC8vPT4gJzA3OjM0OjE5LjM2MVonXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvSVNPRGF0ZSgpIHtcbiAgICByZXR1cm4gZm9ybWF0TWF5YmUodGhpcywgJ3l5eXktTU0tZGQnKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxLWNvbXBsaWFudCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSdzIHdlZWsgZGF0ZVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMTk4MiwgNSwgMjUpLnRvSVNPV2Vla0RhdGUoKSAvLz0+ICcxOTgyLVcyMS0yJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b0lTT1dlZWtEYXRlKCkge1xuICAgIHJldHVybiBmb3JtYXRNYXliZSh0aGlzLCBcImtra2stJ1cnV1ctY1wiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIElTTyA4NjAxLWNvbXBsaWFudCBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSdzIHRpbWUgY29tcG9uZW50XG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge2Jvb2xlYW59IG9wdHMuc3VwcHJlc3NNaWxsaXNlY29uZHMgLSBleGNsdWRlIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBmb3JtYXQgaWYgdGhleSdyZSAwXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0cy5zdXByZXNzU2Vjb25kcyAtIGV4Y2x1ZGUgc2Vjb25kcyBmcm9tIHRoZSBmb3JtYXQgaWYgdGhleSdyZSAwXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLnV0YygpLmhvdXIoNykubWludXRlKDM0KS50b0lTT1RpbWUoKSAvLz0+ICcwNzozNDoxOS4zNjFaJ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoKS5ob3VyKDcpLm1pbnV0ZSgzNCkudG9JU09UaW1lKHsgc3VwcHJlc3NTZWNvbmRzOiB0cnVlIH0pIC8vPT4gJzA3OjM0WidcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9JU09UaW1lKHsgc3VwcHJlc3NNaWxsaXNlY29uZHMgPSBmYWxzZSwgc3VwcHJlc3NTZWNvbmRzID0gZmFsc2UgfSA9IHt9KSB7XG4gICAgcmV0dXJuIGZvcm1hdE1heWJlKHRoaXMsIGlzb1RpbWVGb3JtYXQodGhpcywgc3VwcHJlc3NTZWNvbmRzLCBzdXBwcmVzc01pbGxpc2Vjb25kcykpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gUkZDIDI4MjItY29tcGF0aWJsZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSwgYWx3YXlzIGluIFVUQ1xuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNCwgNywgMTMpLnRvUkZDMjgyMigpIC8vPT4gJ1N1biwgMTMgSnVsIDIwMTQgMDA6MDA6MDAgKzAwMDAnXG4gICAqIEBleGFtcGxlIERhdGVUaW1lLmxvY2FsKDIwMTQsIDcsIDEzKS50b1JGQzI4MjIoKSAvLz0+ICdTdW4sIDEzIEp1bCAyMDE0IDAwOjAwOjAwIC0wNDAwJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b1JGQzI4MjIoKSB7XG4gICAgcmV0dXJuIGZvcm1hdE1heWJlKHRoaXMsICdFRUUsIGRkIExMTCB5eXl5IGhoOm1tOnNzIFpaWicpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSBhcHByb3ByaWF0ZSBmb3IgdXNlIGluIEhUVFAgaGVhZGVycy5cbiAgICogU3BlY2lmaWNhbGx5LCB0aGUgc3RyaW5nIGNvbmZvcm1zIHRvIFJGQyAxMTIzLlxuICAgKiBAc2VlIGh0dHBzOi8vd3d3LnczLm9yZy9Qcm90b2NvbHMvcmZjMjYxNi9yZmMyNjE2LXNlYzMuaHRtbCNzZWMzLjMuMVxuICAgKiBAZXhhbXBsZSBEYXRlVGltZS51dGMoMjAxNCwgNywgMTMpLnRvSFRUUCgpIC8vPT4gJ1N1biwgMTMgSnVsIDIwMTQgMDA6MDA6MDAgR01UJ1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICB0b0hUVFAoKSB7XG4gICAgcmV0dXJuIGZvcm1hdE1heWJlKHRoaXMudG9VVEMoKSwgXCJFRUUsIGRkIExMTCB5eXl5IGhoOm1tOnNzICdHTVQnXCIpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBEYXRlVGltZSBhcHByb3ByaWF0ZSBmb3IgZGVidWdnaW5nXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgPyB0aGlzLnRvSVNPKCkgOiBJTlZBTElEO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdGhlIGVwb2NoIG1pbGxpc2Vjb25kcyBvZiB0aGlzIERhdGVUaW1lXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIHZhbHVlT2YoKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMudHMgOiBOYU47XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBJU08gODYwMSByZXByZXNlbnRhdGlvbiBvZiB0aGlzIERhdGVUaW1lIGFwcHJvcHJpYXRlIGZvciB1c2UgaW4gSlNPTi5cbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdG9KU09OKCkge1xuICAgIHJldHVybiB0aGlzLnRvSVNPKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhIEphdmFzY3JpcHQgb2JqZWN0IHdpdGggdGhpcyBEYXRlVGltZSdzIHllYXIsIG1vbnRoLCBkYXksIGFuZCBzbyBvbi5cbiAgICogQHBhcmFtIG9wdHMgLSBvcHRpb25zIGZvciBnZW5lcmF0aW5nIHRoZSBvYmplY3RcbiAgICogQHBhcmFtIHtib29sZWFufSBbb3B0cy5pbmNsdWRlQ29uZmlnPWZhbHNlXSAtIGluY2x1ZGUgY29uZmlndXJhdGlvbiBhdHRyaWJ1dGVzIGluIHRoZSBvdXRwdXRcbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoKS50b09iamVjdCgpIC8vPT4geyB5ZWFyOiAyMDE3LCBtb250aDogNCwgZGF5OiAyMiwgaG91cjogMjAsIG1pbnV0ZTogNDksIHNlY29uZDogNDIsIG1pbGxpc2Vjb25kOiAyNjggfVxuICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAqL1xuICB0b09iamVjdChvcHRzID0ge30pIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIHt9O1xuXG4gICAgY29uc3QgYmFzZSA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuYyk7XG5cbiAgICBpZiAob3B0cy5pbmNsdWRlQ29uZmlnKSB7XG4gICAgICBiYXNlLm91dHB1dENhbGVuZGFyID0gdGhpcy5vdXRwdXRDYWxlbmRhcjtcbiAgICAgIGJhc2UubnVtYmVyaW5nU3lzdGVtID0gdGhpcy5sb2MubnVtYmVyaW5nU3lzdGVtO1xuICAgICAgYmFzZS5sb2NhbGUgPSB0aGlzLmxvYy5sb2NhbGU7XG4gICAgfVxuICAgIHJldHVybiBiYXNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBKYXZhc2NyaXB0IERhdGUgZXF1aXZhbGVudCB0byB0aGlzIERhdGVUaW1lLlxuICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAqL1xuICB0b0pTRGF0ZSgpIHtcbiAgICByZXR1cm4gbmV3IERhdGUodGhpcy5pc1ZhbGlkID8gdGhpcy50cyA6IE5hTik7XG4gIH1cblxuICAvLyBDT01QQVJFXG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHR3byBEYXRlVGltZXMgYXMgYSBEdXJhdGlvbi5cbiAgICogQHBhcmFtIHtEYXRlVGltZX0gb3RoZXJEYXRlVGltZSAtIHRoZSBEYXRlVGltZSB0byBjb21wYXJlIHRoaXMgb25lIHRvXG4gICAqIEBwYXJhbSB7c3RyaW5nfHN0cmluZ1tdfSBbdW5pdD1bJ21pbGxpc2Vjb25kcyddXSAtIHRoZSB1bml0IG9yIGFycmF5IG9mIHVuaXRzIChzdWNoIGFzICdob3Vycycgb3IgJ2RheXMnKSB0byBpbmNsdWRlIGluIHRoZSBkdXJhdGlvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRoYXQgYWZmZWN0IHRoZSBjcmVhdGlvbiBvZiB0aGUgRHVyYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmNvbnZlcnNpb25BY2N1cmFjeT0nY2FzdWFsJ10gLSB0aGUgY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlXG4gICAqIEBleGFtcGxlXG4gICAqIHZhciBpMSA9IERhdGVUaW1lLmZyb21JU08oJzE5ODItMDUtMjVUMDk6NDUnKSxcbiAgICogICAgIGkyID0gRGF0ZVRpbWUuZnJvbUlTTygnMTk4My0xMC0xNFQxMDozMCcpO1xuICAgKiBpMi5kaWZmKGkxKS50b09iamVjdCgpIC8vPT4geyBtaWxsaXNlY29uZHM6IDQzODA3NTAwMDAwIH1cbiAgICogaTIuZGlmZihpMSwgJ2hvdXJzJykudG9PYmplY3QoKSAvLz0+IHsgaG91cnM6IDEyMTY4Ljc1IH1cbiAgICogaTIuZGlmZihpMSwgWydtb250aHMnLCAnZGF5cyddKS50b09iamVjdCgpIC8vPT4geyBtb250aHM6IDE2LCBkYXlzOiAxOS4wMzEyNSB9XG4gICAqIGkyLmRpZmYoaTEsIFsnbW9udGhzJywgJ2RheXMnLCAnaG91cnMnXSkudG9PYmplY3QoKSAvLz0+IHsgbW9udGhzOiAxNiwgZGF5czogMTksIGhvdXJzOiAwLjc1IH1cbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICBkaWZmKG90aGVyRGF0ZVRpbWUsIHVuaXQgPSAnbWlsbGlzZWNvbmRzJywgb3B0cyA9IHt9KSB7XG4gICAgaWYgKCF0aGlzLmlzVmFsaWQpIHJldHVybiB0aGlzO1xuXG4gICAgY29uc3QgdW5pdHMgPSBVdGlsLm1heWJlQXJyYXkodW5pdCkubWFwKER1cmF0aW9uLm5vcm1hbGl6ZVVuaXQpO1xuXG4gICAgY29uc3QgZmxpcHBlZCA9IG90aGVyRGF0ZVRpbWUudmFsdWVPZigpID4gdGhpcy52YWx1ZU9mKCksXG4gICAgICBwb3N0ID0gZmxpcHBlZCA/IG90aGVyRGF0ZVRpbWUgOiB0aGlzLFxuICAgICAgYWNjdW0gPSB7fTtcblxuICAgIGxldCBjdXJzb3IgPSBmbGlwcGVkID8gdGhpcyA6IG90aGVyRGF0ZVRpbWUsXG4gICAgICBsb3dlc3RPcmRlciA9IG51bGw7XG5cbiAgICBpZiAodW5pdHMuaW5kZXhPZigneWVhcnMnKSA+PSAwKSB7XG4gICAgICBsZXQgZFllYXIgPSBwb3N0LnllYXIgLSBjdXJzb3IueWVhcjtcblxuICAgICAgY3Vyc29yID0gY3Vyc29yLnNldCh7IHllYXI6IHBvc3QueWVhciB9KTtcblxuICAgICAgaWYgKGN1cnNvciA+IHBvc3QpIHtcbiAgICAgICAgY3Vyc29yID0gY3Vyc29yLm1pbnVzKHsgeWVhcnM6IDEgfSk7XG4gICAgICAgIGRZZWFyIC09IDE7XG4gICAgICB9XG5cbiAgICAgIGFjY3VtLnllYXJzID0gZFllYXI7XG4gICAgICBsb3dlc3RPcmRlciA9ICd5ZWFycyc7XG4gICAgfVxuXG4gICAgaWYgKHVuaXRzLmluZGV4T2YoJ21vbnRocycpID49IDApIHtcbiAgICAgIGNvbnN0IGRZZWFyID0gcG9zdC55ZWFyIC0gY3Vyc29yLnllYXI7XG4gICAgICBsZXQgZE1vbnRoID0gcG9zdC5tb250aCAtIGN1cnNvci5tb250aCArIGRZZWFyICogMTI7XG5cbiAgICAgIGN1cnNvciA9IGN1cnNvci5zZXQoeyB5ZWFyOiBwb3N0LnllYXIsIG1vbnRoOiBwb3N0Lm1vbnRoIH0pO1xuXG4gICAgICBpZiAoY3Vyc29yID4gcG9zdCkge1xuICAgICAgICBjdXJzb3IgPSBjdXJzb3IubWludXMoeyBtb250aHM6IDEgfSk7XG4gICAgICAgIGRNb250aCAtPSAxO1xuICAgICAgfVxuXG4gICAgICBhY2N1bS5tb250aHMgPSBkTW9udGg7XG4gICAgICBsb3dlc3RPcmRlciA9ICdtb250aHMnO1xuICAgIH1cblxuICAgIGNvbnN0IGNvbXB1dGVEYXlEZWx0YSA9ICgpID0+IHtcbiAgICAgIGNvbnN0IHV0Y0RheVN0YXJ0ID0gZHQgPT5cbiAgICAgICAgICBkdFxuICAgICAgICAgICAgLnRvVVRDKDAsIHsga2VlcENhbGVuZGFyVGltZTogdHJ1ZSB9KVxuICAgICAgICAgICAgLnN0YXJ0T2YoJ2RheScpXG4gICAgICAgICAgICAudmFsdWVPZigpLFxuICAgICAgICBtcyA9IHV0Y0RheVN0YXJ0KHBvc3QpIC0gdXRjRGF5U3RhcnQoY3Vyc29yKTtcbiAgICAgIHJldHVybiBNYXRoLmZsb29yKER1cmF0aW9uLmZyb21NaWxsaXNlY29uZHMobXMsIG9wdHMpLnNoaWZ0VG8oJ2RheXMnKS5kYXlzKTtcbiAgICB9O1xuXG4gICAgaWYgKHVuaXRzLmluZGV4T2YoJ3dlZWtzJykgPj0gMCkge1xuICAgICAgY29uc3QgZGF5cyA9IGNvbXB1dGVEYXlEZWx0YSgpO1xuICAgICAgbGV0IHdlZWtzID0gKGRheXMgLSBkYXlzICUgNykgLyA3O1xuICAgICAgY3Vyc29yID0gY3Vyc29yLnBsdXMoeyB3ZWVrcyB9KTtcblxuICAgICAgaWYgKGN1cnNvciA+IHBvc3QpIHtcbiAgICAgICAgY3Vyc29yLm1pbnVzKHsgd2Vla3M6IDEgfSk7XG4gICAgICAgIHdlZWtzIC09IDE7XG4gICAgICB9XG5cbiAgICAgIGFjY3VtLndlZWtzID0gd2Vla3M7XG4gICAgICBsb3dlc3RPcmRlciA9ICd3ZWVrcyc7XG4gICAgfVxuXG4gICAgaWYgKHVuaXRzLmluZGV4T2YoJ2RheXMnKSA+PSAwKSB7XG4gICAgICBsZXQgZGF5cyA9IGNvbXB1dGVEYXlEZWx0YSgpO1xuICAgICAgY3Vyc29yID0gY3Vyc29yLnNldCh7XG4gICAgICAgIHllYXI6IHBvc3QueWVhcixcbiAgICAgICAgbW9udGg6IHBvc3QubW9udGgsXG4gICAgICAgIGRheTogcG9zdC5kYXlcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoY3Vyc29yID4gcG9zdCkge1xuICAgICAgICBjdXJzb3IubWludXMoeyBkYXlzOiAxIH0pO1xuICAgICAgICBkYXlzIC09IDE7XG4gICAgICB9XG5cbiAgICAgIGFjY3VtLmRheXMgPSBkYXlzO1xuICAgICAgbG93ZXN0T3JkZXIgPSAnZGF5cyc7XG4gICAgfVxuXG4gICAgY29uc3QgcmVtYWluaW5nID0gRHVyYXRpb24uZnJvbU1pbGxpc2Vjb25kcyhwb3N0IC0gY3Vyc29yLCBvcHRzKSxcbiAgICAgIG1vcmVVbml0cyA9IHVuaXRzLmZpbHRlcihcbiAgICAgICAgdSA9PiBbJ2hvdXJzJywgJ21pbnV0ZXMnLCAnc2Vjb25kcycsICdtaWxsaXNlY29uZHMnXS5pbmRleE9mKHUpID49IDBcbiAgICAgICksXG4gICAgICBzaGlmdFRvID0gbW9yZVVuaXRzLmxlbmd0aCA+IDAgPyBtb3JlVW5pdHMgOiBbbG93ZXN0T3JkZXJdLFxuICAgICAgc2hpZnRlZCA9IHJlbWFpbmluZy5zaGlmdFRvKC4uLnNoaWZ0VG8pLFxuICAgICAgbWVyZ2VkID0gc2hpZnRlZC5wbHVzKER1cmF0aW9uLmZyb21PYmplY3QoT2JqZWN0LmFzc2lnbihhY2N1bSwgb3B0cykpKTtcblxuICAgIHJldHVybiBmbGlwcGVkID8gbWVyZ2VkLm5lZ2F0ZSgpIDogbWVyZ2VkO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoaXMgRGF0ZVRpbWUgYW5kIHJpZ2h0IG5vdy5cbiAgICogU2VlIHtAbGluayBkaWZmfVxuICAgKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gW3VuaXQ9WydtaWxsaXNlY29uZHMnXV0gLSB0aGUgdW5pdCBvciB1bml0cyB1bml0cyAoc3VjaCBhcyAnaG91cnMnIG9yICdkYXlzJykgdG8gaW5jbHVkZSBpbiB0aGUgZHVyYXRpb25cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMgLSBvcHRpb25zIHRoYXQgYWZmZWN0IHRoZSBjcmVhdGlvbiBvZiB0aGUgRHVyYXRpb25cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmNvbnZlcnNpb25BY2N1cmFjeT0nY2FzdWFsJ10gLSB0aGUgY29udmVyc2lvbiBzeXN0ZW0gdG8gdXNlXG4gICAqIEByZXR1cm4ge0R1cmF0aW9ufVxuICAgKi9cbiAgZGlmZk5vdyh1bml0LCBvcHRzKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IHRoaXMuZGlmZihEYXRlVGltZS5sb2NhbCgpLCB1bml0LCBvcHRzKSA6IHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIGFuIEludGVydmFsIHNwYW5uaW5nIGJldHdlZW4gdGhpcyBEYXRlVGltZSBhbmQgYW5vdGhlciBEYXRlVGltZVxuICAgKiBAcGFyYW0ge0RhdGVUaW1lfSBvdGhlckRhdGVUaW1lIC0gdGhlIG90aGVyIGVuZCBwb2ludCBvZiB0aGUgSW50ZXJ2YWxcbiAgICogQHJldHVybiB7RHVyYXRpb259XG4gICAqL1xuICB1bnRpbChvdGhlckRhdGVUaW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuaXNWYWxpZCA/IEludGVydmFsLmZyb21EYXRlVGltZXModGhpcywgb3RoZXJEYXRlVGltZSkgOiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoaXMgRGF0ZVRpbWUgaXMgaW4gdGhlIHNhbWUgdW5pdCBvZiB0aW1lIGFzIGFub3RoZXIgRGF0ZVRpbWVcbiAgICogQHBhcmFtIHtEYXRlVGltZX0gb3RoZXJEYXRlVGltZSAtIHRoZSBvdGhlciBEYXRlVGltZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdCAtIHRoZSB1bml0IG9mIHRpbWUgdG8gY2hlY2sgc2FtZW5lc3Mgb25cbiAgICogQGV4YW1wbGUgRGF0ZVRpbWUubG9jYWwoKS5oYXNTYW1lKG90aGVyRFQsICdkYXknKTsgLy9+PiB0cnVlIGlmIGJvdGggdGhlIHNhbWUgY2FsZW5kYXIgZGF5XG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBoYXNTYW1lKG90aGVyRGF0ZVRpbWUsIHVuaXQpIHtcbiAgICBpZiAoIXRoaXMuaXNWYWxpZCkgcmV0dXJuIGZhbHNlO1xuICAgIGlmICh1bml0ID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPT09IG90aGVyRGF0ZVRpbWUudmFsdWVPZigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBpbnB1dE1zID0gb3RoZXJEYXRlVGltZS52YWx1ZU9mKCk7XG4gICAgICByZXR1cm4gdGhpcy5zdGFydE9mKHVuaXQpIDw9IGlucHV0TXMgJiYgaW5wdXRNcyA8PSB0aGlzLmVuZE9mKHVuaXQpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFcXVhbGl0eSBjaGVja1xuICAgKiBUd28gRGF0ZVRpbWVzIGFyZSBlcXVhbCBpZmYgdGhleSByZXByZXNlbnQgdGhlIHNhbWUgbWlsbGlzZWNvbmRcbiAgICogQHBhcmFtIHtEYXRlVGltZX0gb3RoZXIgLSB0aGUgb3RoZXIgRGF0ZVRpbWVcbiAgICogQHJldHVybiB7Ym9vbGVhbn1cbiAgICovXG4gIGVxdWFscyhvdGhlcikge1xuICAgIHJldHVybiB0aGlzLmlzVmFsaWQgJiYgb3RoZXIuaXNWYWxpZFxuICAgICAgPyB0aGlzLnZhbHVlT2YoKSA9PT0gb3RoZXIudmFsdWVPZigpICYmXG4gICAgICAgICAgdGhpcy56b25lLmVxdWFscyhvdGhlci56b25lKSAmJlxuICAgICAgICAgIHRoaXMubG9jLmVxdWFscyhvdGhlci5sb2MpXG4gICAgICA6IGZhbHNlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgbWluIG9mIHNldmVyYWwgZGF0ZSB0aW1lc1xuICAgKiBAcGFyYW0gey4uLkRhdGVUaW1lfSBkYXRlVGltZXMgLSB0aGUgRGF0ZVRpbWVzIGZyb20gd2hpY2ggdG8gY2hvb3NlIHRoZSBtaW5pbXVtXG4gICAqIEByZXR1cm4ge0RhdGVUaW1lfVxuICAgKi9cbiAgc3RhdGljIG1pbiguLi5kYXRlVGltZXMpIHtcbiAgICByZXR1cm4gVXRpbC5iZXN0QnkoZGF0ZVRpbWVzLCBpID0+IGkudmFsdWVPZigpLCBNYXRoLm1pbik7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBtYXggb2Ygc2V2ZXJhbCBkYXRlIHRpbWVzXG4gICAqIEBwYXJhbSB7Li4uRGF0ZVRpbWV9IGRhdGVUaW1lcyAtIHRoZSBEYXRlVGltZXMgZnJvbSB3aGljaCB0byBjaG9vc2UgdGhlIG1heGltdW1cbiAgICogQHJldHVybiB7RGF0ZVRpbWV9XG4gICAqL1xuICBzdGF0aWMgbWF4KC4uLmRhdGVUaW1lcykge1xuICAgIHJldHVybiBVdGlsLmJlc3RCeShkYXRlVGltZXMsIGkgPT4gaS52YWx1ZU9mKCksIE1hdGgubWF4KTtcbiAgfVxuXG4gIC8vIE1JU0NcblxuICAvKipcbiAgICogRXhwbGFpbiBob3cgYSBzdHJpbmcgd291bGQgYmUgcGFyc2VkIGJ5IGZyb21TdHJpbmcoKVxuICAgKiBAcGFyYW0ge3N0cmluZ30gdGV4dCAtIHRoZSBzdHJpbmcgdG8gcGFyc2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IGZtdCAtIHRoZSBmb3JtYXQgdGhlIHN0cmluZyBpcyBleHBlY3RlZCB0byBiZSBpbiAoc2VlIGRlc2NyaXB0aW9uKVxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIG9wdGlvbnMgdGFrZW4gYnkgZnJvbVN0cmluZygpXG4gICAqIEByZXR1cm4ge29iamVjdH1cbiAgICovXG4gIHN0YXRpYyBmcm9tU3RyaW5nRXhwbGFpbih0ZXh0LCBmbXQsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHBhcnNlciA9IG5ldyBUb2tlblBhcnNlcihMb2NhbGUuZnJvbU9wdHMob3B0aW9ucykpO1xuICAgIHJldHVybiBwYXJzZXIuZXhwbGFpblBhcnNlKHRleHQsIGZtdCk7XG4gIH1cblxuICAvLyBGT1JNQVQgUFJFU0VUU1xuXG4gIC8qKlxuICAgKiB7QGxpbmsgdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlIDEwLzE0LzE5ODNcbiAgICovXG4gIHN0YXRpYyBnZXQgREFURV9TSE9SVCgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgeWVhcjogJ251bWVyaWMnLFxuICAgICAgbW9udGg6ICdudW1lcmljJyxcbiAgICAgIGRheTogJ251bWVyaWMnXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdPY3QgMTQsIDE5ODMnXG4gICAqL1xuICBzdGF0aWMgZ2V0IERBVEVfTUVEKCkge1xuICAgIHJldHVybiB7XG4gICAgICB5ZWFyOiAnbnVtZXJpYycsXG4gICAgICBtb250aDogJ3Nob3J0JyxcbiAgICAgIGRheTogJ251bWVyaWMnXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdPY3RvYmVyIDE0LCAxOTgzJ1xuICAgKi9cbiAgc3RhdGljIGdldCBEQVRFX0ZVTEwoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHllYXI6ICdudW1lcmljJyxcbiAgICAgIG1vbnRoOiAnbG9uZycsXG4gICAgICBkYXk6ICdudW1lcmljJ1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIHRvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnVHVlc2RheSwgT2N0b2JlciAxNCwgMTk4MydcbiAgICovXG4gIHN0YXRpYyBnZXQgREFURV9IVUdFKCkge1xuICAgIHJldHVybiB7XG4gICAgICB5ZWFyOiAnbnVtZXJpYycsXG4gICAgICBtb250aDogJ2xvbmcnLFxuICAgICAgZGF5OiAnbnVtZXJpYycsXG4gICAgICB3ZWVrZGF5OiAnbG9uZydcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIHtAbGluayB0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwIEFNJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAqL1xuICBzdGF0aWMgZ2V0IFRJTUVfU0lNUExFKCkge1xuICAgIHJldHVybiB7XG4gICAgICBob3VyOiAnbnVtZXJpYycsXG4gICAgICBtaW51dGU6ICcyLWRpZ2l0J1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIHRvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnMDk6MzA6MjMgQU0nLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICovXG4gIHN0YXRpYyBnZXQgVElNRV9XSVRIX1NFQ09ORFMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhvdXI6ICdudW1lcmljJyxcbiAgICAgIG1pbnV0ZTogJzItZGlnaXQnLFxuICAgICAgc2Vjb25kOiAnMi1kaWdpdCdcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIHtAbGluayB0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwOjIzIEFNIEVEVCcuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKi9cbiAgc3RhdGljIGdldCBUSU1FX1dJVEhfU0hPUlRfT0ZGU0VUKCkge1xuICAgIHJldHVybiB7XG4gICAgICBob3VyOiAnbnVtZXJpYycsXG4gICAgICBtaW51dGU6ICcyLWRpZ2l0JyxcbiAgICAgIHNlY29uZDogJzItZGlnaXQnLFxuICAgICAgdGltZVpvbmVOYW1lOiAnc2hvcnQnXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcwOTozMDoyMyBBTSBFYXN0ZXJuIERheWxpZ2h0IFRpbWUnLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICovXG4gIHN0YXRpYyBnZXQgVElNRV9XSVRIX0xPTkdfT0ZGU0VUKCkge1xuICAgIHJldHVybiB7XG4gICAgICBob3VyOiAnbnVtZXJpYycsXG4gICAgICBtaW51dGU6ICcyLWRpZ2l0JyxcbiAgICAgIHNlY29uZDogJzItZGlnaXQnLFxuICAgICAgdGltZVpvbmVOYW1lOiAnbG9uZydcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIHtAbGluayB0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwJywgYWx3YXlzIDI0LWhvdXIuXG4gICAqL1xuICBzdGF0aWMgZ2V0IFRJTUVfMjRfU0lNUExFKCkge1xuICAgIHJldHVybiB7XG4gICAgICBob3VyOiAnbnVtZXJpYycsXG4gICAgICBtaW51dGU6ICcyLWRpZ2l0JyxcbiAgICAgIGhvdXIxMjogZmFsc2VcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIHtAbGluayB0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJzA5OjMwOjIzJywgYWx3YXlzIDI0LWhvdXIuXG4gICAqL1xuICBzdGF0aWMgZ2V0IFRJTUVfMjRfV0lUSF9TRUNPTkRTKCkge1xuICAgIHJldHVybiB7XG4gICAgICBob3VyOiAnbnVtZXJpYycsXG4gICAgICBtaW51dGU6ICcyLWRpZ2l0JyxcbiAgICAgIHNlY29uZDogJzItZGlnaXQnLFxuICAgICAgaG91cjEyOiBmYWxzZVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIHRvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnMDk6MzA6MjMgRURUJywgYWx3YXlzIDI0LWhvdXIuXG4gICAqL1xuICBzdGF0aWMgZ2V0IFRJTUVfMjRfV0lUSF9TSE9SVF9PRkZTRVQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGhvdXI6ICdudW1lcmljJyxcbiAgICAgIG1pbnV0ZTogJzItZGlnaXQnLFxuICAgICAgc2Vjb25kOiAnMi1kaWdpdCcsXG4gICAgICBob3VyMTI6IGZhbHNlLFxuICAgICAgdGltZVpvbmVOYW1lOiAnc2hvcnQnXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcwOTozMDoyMyBFYXN0ZXJuIERheWxpZ2h0IFRpbWUnLCBhbHdheXMgMjQtaG91ci5cbiAgICovXG4gIHN0YXRpYyBnZXQgVElNRV8yNF9XSVRIX0xPTkdfT0ZGU0VUKCkge1xuICAgIHJldHVybiB7XG4gICAgICBob3VyOiAnbnVtZXJpYycsXG4gICAgICBtaW51dGU6ICcyLWRpZ2l0JyxcbiAgICAgIHNlY29uZDogJzItZGlnaXQnLFxuICAgICAgaG91cjEyOiBmYWxzZSxcbiAgICAgIHRpbWVab25lTmFtZTogJ2xvbmcnXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICcxMC8xNC8xOTgzLCA5OjMwIEFNJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAqL1xuICBzdGF0aWMgZ2V0IERBVEVUSU1FX1NIT1JUKCkge1xuICAgIHJldHVybiB7XG4gICAgICB5ZWFyOiAnbnVtZXJpYycsXG4gICAgICBtb250aDogJ251bWVyaWMnLFxuICAgICAgZGF5OiAnbnVtZXJpYycsXG4gICAgICBob3VyOiAnbnVtZXJpYycsXG4gICAgICBtaW51dGU6ICcyLWRpZ2l0J1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIHRvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnMTAvMTQvMTk4MywgOTozMDozMyBBTScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKi9cbiAgc3RhdGljIGdldCBEQVRFVElNRV9TSE9SVF9XSVRIX1NFQ09ORFMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHllYXI6ICdudW1lcmljJyxcbiAgICAgIG1vbnRoOiAnbnVtZXJpYycsXG4gICAgICBkYXk6ICdudW1lcmljJyxcbiAgICAgIGhvdXI6ICdudW1lcmljJyxcbiAgICAgIG1pbnV0ZTogJzItZGlnaXQnLFxuICAgICAgc2Vjb25kOiAnMi1kaWdpdCdcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIHtAbGluayB0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJ09jdCAxNCwgMTk4MywgOTozMCBBTScuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKi9cbiAgc3RhdGljIGdldCBEQVRFVElNRV9NRUQoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHllYXI6ICdudW1lcmljJyxcbiAgICAgIG1vbnRoOiAnc2hvcnQnLFxuICAgICAgZGF5OiAnbnVtZXJpYycsXG4gICAgICBob3VyOiAnbnVtZXJpYycsXG4gICAgICBtaW51dGU6ICcyLWRpZ2l0J1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIHRvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnT2N0IDE0LCAxOTgzLCA5OjMwOjMzIEFNJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAqL1xuICBzdGF0aWMgZ2V0IERBVEVUSU1FX01FRF9XSVRIX1NFQ09ORFMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHllYXI6ICdudW1lcmljJyxcbiAgICAgIG1vbnRoOiAnc2hvcnQnLFxuICAgICAgZGF5OiAnbnVtZXJpYycsXG4gICAgICBob3VyOiAnbnVtZXJpYycsXG4gICAgICBtaW51dGU6ICcyLWRpZ2l0JyxcbiAgICAgIHNlY29uZDogJzItZGlnaXQnXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdPY3RvYmVyIDE0LCAxOTgzLCA5OjMwIEFNIEVEVCcuIE9ubHkgMTItaG91ciBpZiB0aGUgbG9jYWxlIGlzLlxuICAgKi9cbiAgc3RhdGljIGdldCBEQVRFVElNRV9GVUxMKCkge1xuICAgIHJldHVybiB7XG4gICAgICB5ZWFyOiAnbnVtZXJpYycsXG4gICAgICBtb250aDogJ2xvbmcnLFxuICAgICAgZGF5OiAnbnVtZXJpYycsXG4gICAgICBob3VyOiAnbnVtZXJpYycsXG4gICAgICBtaW51dGU6ICcyLWRpZ2l0JyxcbiAgICAgIHRpbWVab25lTmFtZTogJ3Nob3J0J1xuICAgIH07XG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIHRvTG9jYWxlU3RyaW5nfSBmb3JtYXQgbGlrZSAnT2N0b2JlciAxNCwgMTk4MywgOTozMDMgQU0gRURUJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAqL1xuICBzdGF0aWMgZ2V0IERBVEVUSU1FX0ZVTExfV0lUSF9TRUNPTkRTKCkge1xuICAgIHJldHVybiB7XG4gICAgICB5ZWFyOiAnbnVtZXJpYycsXG4gICAgICBtb250aDogJ2xvbmcnLFxuICAgICAgZGF5OiAnbnVtZXJpYycsXG4gICAgICBob3VyOiAnbnVtZXJpYycsXG4gICAgICBtaW51dGU6ICcyLWRpZ2l0JyxcbiAgICAgIHNlY29uZDogJzItZGlnaXQnLFxuICAgICAgdGltZVpvbmVOYW1lOiAnc2hvcnQnXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiB7QGxpbmsgdG9Mb2NhbGVTdHJpbmd9IGZvcm1hdCBsaWtlICdGcmlkYXksIE9jdG9iZXIgMTQsIDE5ODMsIDk6MzAgQU0gRWFzdGVybiBEYXlsaWdodCBUaW1lJy4gT25seSAxMi1ob3VyIGlmIHRoZSBsb2NhbGUgaXMuXG4gICAqL1xuICBzdGF0aWMgZ2V0IERBVEVUSU1FX0hVR0UoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHllYXI6ICdudW1lcmljJyxcbiAgICAgIG1vbnRoOiAnbG9uZycsXG4gICAgICBkYXk6ICdudW1lcmljJyxcbiAgICAgIHdlZWtkYXk6ICdsb25nJyxcbiAgICAgIGhvdXI6ICdudW1lcmljJyxcbiAgICAgIG1pbnV0ZTogJzItZGlnaXQnLFxuICAgICAgdGltZVpvbmVOYW1lOiAnbG9uZydcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIHtAbGluayB0b0xvY2FsZVN0cmluZ30gZm9ybWF0IGxpa2UgJ0ZyaWRheSwgT2N0b2JlciAxNCwgMTk4MywgOTozMDozMyBBTSBFYXN0ZXJuIERheWxpZ2h0IFRpbWUnLiBPbmx5IDEyLWhvdXIgaWYgdGhlIGxvY2FsZSBpcy5cbiAgICovXG4gIHN0YXRpYyBnZXQgREFURVRJTUVfSFVHRV9XSVRIX1NFQ09ORFMoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHllYXI6ICdudW1lcmljJyxcbiAgICAgIG1vbnRoOiAnbG9uZycsXG4gICAgICBkYXk6ICdudW1lcmljJyxcbiAgICAgIHdlZWtkYXk6ICdsb25nJyxcbiAgICAgIGhvdXI6ICdudW1lcmljJyxcbiAgICAgIG1pbnV0ZTogJzItZGlnaXQnLFxuICAgICAgc2Vjb25kOiAnMi1kaWdpdCcsXG4gICAgICB0aW1lWm9uZU5hbWU6ICdsb25nJ1xuICAgIH07XG4gIH1cbn1cbiIsImltcG9ydCB7IERhdGVUaW1lIH0gZnJvbSAnLi9kYXRldGltZSc7XG5pbXBvcnQgeyBTZXR0aW5ncyB9IGZyb20gJy4vc2V0dGluZ3MnO1xuaW1wb3J0IHsgTG9jYWxlIH0gZnJvbSAnLi9pbXBsL2xvY2FsZSc7XG5pbXBvcnQgeyBVdGlsIH0gZnJvbSAnLi9pbXBsL3V0aWwnO1xuXG4vKipcbiAqIFRoZSBJbmZvIGNsYXNzIGNvbnRhaW5zIHN0YXRpYyBtZXRob2RzIGZvciByZXRyaWV2aW5nIGdlbmVyYWwgdGltZSBhbmQgZGF0ZSByZWxhdGVkIGRhdGEuIEZvciBleGFtcGxlLCBpdCBoYXMgbWV0aG9kcyBmb3IgZmluZGluZyBvdXQgaWYgYSB0aW1lIHpvbmUgaGFzIGEgRFNULCBmb3IgbGlzdGluZyB0aGUgbW9udGhzIGluIGFueSBzdXBwb3J0ZWQgbG9jYWxlLCBhbmQgZm9yIGRpc2NvdmVyaW5nIHdoaWNoIG9mIEx1eG9uIGZlYXR1cmVzIGFyZSBhdmFpbGFibGUgaW4gdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQuXG4gKi9cbmV4cG9ydCBjbGFzcyBJbmZvIHtcbiAgLyoqXG4gICAqIFJldHVybiB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgem9uZSBjb250YWlucyBhIERTVC5cbiAgICogQHBhcmFtIHtzdHJpbmd8Wm9uZX0gW3pvbmU9J2xvY2FsJ10gLSBab25lIHRvIGNoZWNrLiBEZWZhdWx0cyB0byB0aGUgZW52aXJvbm1lbnQncyBsb2NhbCB6b25lLlxuICAgKiBAcmV0dXJuIHtib29sZWFufVxuICAgKi9cbiAgc3RhdGljIGhhc0RTVCh6b25lID0gU2V0dGluZ3MuZGVmYXVsdFpvbmUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgIXpvbmUudW5pdmVyc2FsICYmXG4gICAgICBEYXRlVGltZS5sb2NhbCgpXG4gICAgICAgIC5zZXRab25lKHpvbmUpXG4gICAgICAgIC5zZXQoeyBtb250aDogMSB9KS5vZmZzZXQgIT09XG4gICAgICAgIERhdGVUaW1lLmxvY2FsKClcbiAgICAgICAgICAuc2V0Wm9uZSh6b25lKVxuICAgICAgICAgIC5zZXQoeyBtb250aDogNSB9KS5vZmZzZXRcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhbiBhcnJheSBvZiBzdGFuZGFsb25lIG1vbnRoIG5hbWVzLlxuICAgKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL0RhdGVUaW1lRm9ybWF0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbbGVuZ3RoPSdsb25nJ10gLSB0aGUgbGVuZ3RoIG9mIHRoZSBtb250aCByZXByZXNlbnRhdGlvbiwgc3VjaCBhcyBcIm51bWVyaWNcIiwgXCIyLWRpZ2l0XCIsIFwibmFycm93XCIsIFwic2hvcnRcIiwgXCJsb25nXCJcbiAgICogQHBhcmFtIHtvYmplY3R9IG9wdHMgLSBvcHRpb25zXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5sb2NhbGU9J2VuJ10gLSB0aGUgbG9jYWxlIGNvZGVcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm51bWJlcmluZ1N5c3RlbT1udWxsXSAtIHRoZSBudW1iZXJpbmcgc3lzdGVtXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5vdXRwdXRDYWxlbmRhcj0nZ3JlZ29yeSddIC0gdGhlIGNhbGVuZGFyXG4gICAqIEBleGFtcGxlIEluZm8ubW9udGhzKClbMF0gLy89PiAnSmFudWFyeSdcbiAgICogQGV4YW1wbGUgSW5mby5tb250aHMoJ3Nob3J0JylbMF0gLy89PiAnSmFuJ1xuICAgKiBAZXhhbXBsZSBJbmZvLm1vbnRocygnbnVtZXJpYycpWzBdIC8vPT4gJzEnXG4gICAqIEBleGFtcGxlIEluZm8ubW9udGhzKCdzaG9ydCcsIHsgbG9jYWxlOiAnZnItQ0EnIH0gKVswXSAvLz0+ICdqYW52LidcbiAgICogQGV4YW1wbGUgSW5mby5tb250aHMoJ251bWVyaWMnLCB7IGxvY2FsZTogJ2FyJyB9KVswXSAvLz0+ICfZoSdcbiAgICogQGV4YW1wbGUgSW5mby5tb250aHMoJ2xvbmcnLCB7IG91dHB1dENhbGVuZGFyOiAnaXNsYW1pYycgfSlbMF0gLy89PiAnUmFiacq7IEknXG4gICAqIEByZXR1cm4ge1tzdHJpbmddfVxuICAgKi9cbiAgc3RhdGljIG1vbnRocyhcbiAgICBsZW5ndGggPSAnbG9uZycsXG4gICAgeyBsb2NhbGUgPSAnZW4nLCBudW1iZXJpbmdTeXN0ZW0gPSBudWxsLCBvdXRwdXRDYWxlbmRhciA9ICdncmVnb3J5JyB9ID0ge31cbiAgKSB7XG4gICAgcmV0dXJuIG5ldyBMb2NhbGUobG9jYWxlLCBudW1iZXJpbmdTeXN0ZW0sIG91dHB1dENhbGVuZGFyKS5tb250aHMobGVuZ3RoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gYXJyYXkgb2YgZm9ybWF0IG1vbnRoIG5hbWVzLlxuICAgKiBGb3JtYXQgbW9udGhzIGRpZmZlciBmcm9tIHN0YW5kYWxvbmUgbW9udGhzIGluIHRoYXQgdGhleSdyZSBtZWFudCB0byBhcHBlYXIgbmV4dCB0byB0aGUgZGF5IG9mIHRoZSBtb250aC4gSW4gc29tZSBsYW5ndWFnZXMsIHRoYXRcbiAgICogY2hhbmdlcyB0aGUgc3RyaW5nLlxuICAgKiBTZWUge0BsaW5rIG1vbnRoc31cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtsZW5ndGg9J2xvbmcnXSAtIHRoZSBsZW5ndGggb2YgdGhlIG1vbnRoIHJlcHJlc2VudGF0aW9uLCBzdWNoIGFzIFwibnVtZXJpY1wiLCBcIjItZGlnaXRcIiwgXCJuYXJyb3dcIiwgXCJzaG9ydFwiLCBcImxvbmdcIlxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT0nZW4nXSAtIHRoZSBsb2NhbGUgY29kZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubnVtYmVyaW5nPW51bGxdIC0gdGhlIG51bWJlcmluZyBzeXN0ZW1cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLm91dHB1dENhbGVuZGFyPSdncmVnb3J5J10gLSB0aGUgY2FsZW5kYXJcbiAgICogQHJldHVybiB7W3N0cmluZ119XG4gICAqL1xuICBzdGF0aWMgbW9udGhzRm9ybWF0KFxuICAgIGxlbmd0aCA9ICdsb25nJyxcbiAgICB7IGxvY2FsZSA9ICdlbicsIG51bWJlcmluZ1N5c3RlbSA9IG51bGwsIG91dHB1dENhbGVuZGFyID0gJ2dyZWdvcnknIH0gPSB7fVxuICApIHtcbiAgICByZXR1cm4gbmV3IExvY2FsZShsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgb3V0cHV0Q2FsZW5kYXIpLm1vbnRocyhsZW5ndGgsIHRydWUpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhbiBhcnJheSBvZiBzdGFuZGFsb25lIHdlZWsgbmFtZXMuXG4gICAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvRGF0ZVRpbWVGb3JtYXRcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtsZW5ndGg9J2xvbmcnXSAtIHRoZSBsZW5ndGggb2YgdGhlIG1vbnRoIHJlcHJlc2VudGF0aW9uLCBzdWNoIGFzIFwibmFycm93XCIsIFwic2hvcnRcIiwgXCJsb25nXCIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdlbiddIC0gdGhlIGxvY2FsZSBjb2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5udW1iZXJpbmc9bnVsbF0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMub3V0cHV0Q2FsZW5kYXI9J2dyZWdvcnknXSAtIHRoZSBjYWxlbmRhclxuICAgKiBAZXhhbXBsZSBJbmZvLndlZWtkYXlzKClbMF0gLy89PiAnTW9uZGF5J1xuICAgKiBAZXhhbXBsZSBJbmZvLndlZWtkYXlzKCdzaG9ydCcpWzBdIC8vPT4gJ01vbidcbiAgICogQGV4YW1wbGUgSW5mby53ZWVrZGF5cygnc2hvcnQnLCAnZnItQ0EnKVswXSAvLz0+ICdsdW4uJ1xuICAgKiBAZXhhbXBsZSBJbmZvLndlZWtkYXlzKCdzaG9ydCcsICdhcicpWzBdIC8vPT4gJ9in2YTYp9ir2YbZitmGJ1xuICAgKiBAcmV0dXJuIHtbc3RyaW5nXX1cbiAgICovXG4gIHN0YXRpYyB3ZWVrZGF5cyhsZW5ndGggPSAnbG9uZycsIHsgbG9jYWxlID0gJ2VuJywgbnVtYmVyaW5nU3lzdGVtID0gbnVsbCB9ID0ge30pIHtcbiAgICByZXR1cm4gbmV3IExvY2FsZShsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgbnVsbCkud2Vla2RheXMobGVuZ3RoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gYXJyYXkgb2YgZm9ybWF0IHdlZWsgbmFtZXMuXG4gICAqIEZvcm1hdCB3ZWVrZGF5cyBkaWZmZXIgZnJvbSBzdGFuZGFsb25lIHdlZWtkYXlzIGluIHRoYXQgdGhleSdyZSBtZWFudCB0byBhcHBlYXIgbmV4dCB0byBtb3JlIGRhdGUgaW5mb3JtYXRpb24uIEluIHNvbWUgbGFuZ3VhZ2VzLCB0aGF0XG4gICAqIGNoYW5nZXMgdGhlIHN0cmluZy5cbiAgICogU2VlIHtAbGluayB3ZWVrZGF5c31cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtsZW5ndGg9J2xvbmcnXSAtIHRoZSBsZW5ndGggb2YgdGhlIG1vbnRoIHJlcHJlc2VudGF0aW9uLCBzdWNoIGFzIFwibmFycm93XCIsIFwic2hvcnRcIiwgXCJsb25nXCIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdlbiddIC0gdGhlIGxvY2FsZSBjb2RlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0cy5udW1iZXJpbmc9bnVsbF0gLSB0aGUgbnVtYmVyaW5nIHN5c3RlbVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMub3V0cHV0Q2FsZW5kYXI9J2dyZWdvcnknXSAtIHRoZSBjYWxlbmRhclxuICAgKiBAcmV0dXJuIHtbc3RyaW5nXX1cbiAgICovXG4gIHN0YXRpYyB3ZWVrZGF5c0Zvcm1hdChsZW5ndGggPSAnbG9uZycsIHsgbG9jYWxlID0gJ2VuJywgbnVtYmVyaW5nU3lzdGVtID0gbnVsbCB9ID0ge30pIHtcbiAgICByZXR1cm4gbmV3IExvY2FsZShsb2NhbGUsIG51bWJlcmluZ1N5c3RlbSwgbnVsbCkud2Vla2RheXMobGVuZ3RoLCB0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gYW4gYXJyYXkgb2YgbWVyaWRpZW1zLlxuICAgKiBAcGFyYW0ge29iamVjdH0gb3B0cyAtIG9wdGlvbnNcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRzLmxvY2FsZT0nZW4nXSAtIHRoZSBsb2NhbGUgY29kZVxuICAgKiBAZXhhbXBsZSBJbmZvLm1lcmlkaWVtcygpIC8vPT4gWyAnQU0nLCAnUE0nIF1cbiAgICogQGV4YW1wbGUgSW5mby5tZXJpZGllbXMoJ2RlJykgLy89PiBbICd2b3JtLicsICduYWNobS4nIF1cbiAgICogQHJldHVybiB7W3N0cmluZ119XG4gICAqL1xuICBzdGF0aWMgbWVyaWRpZW1zKHsgbG9jYWxlID0gJ2VuJyB9ID0ge30pIHtcbiAgICByZXR1cm4gbmV3IExvY2FsZShsb2NhbGUpLm1lcmlkaWVtcygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiBhbiBhcnJheSBvZiBlcmFzLCBzdWNoIGFzIFsnQkMnLCAnQUQnXS4gVGhlIGxvY2FsZSBjYW4gYmUgc3BlY2lmaWVkLCBidXQgdGhlIGNhbGVuZGFyIHN5c3RlbSBpcyBhbHdheXMgR3JlZ29yaWFuLlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2xlbmd0aD0nc2hvcnQnXSAtIHRoZSBsZW5ndGggb2YgdGhlIGVyYSByZXByZXNlbnRhdGlvbiwgc3VjaCBhcyBcInNob3J0XCIgb3IgXCJsb25nXCIuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBvcHRzIC0gb3B0aW9uc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdHMubG9jYWxlPSdlbiddIC0gdGhlIGxvY2FsZSBjb2RlXG4gICAqIEBleGFtcGxlIEluZm8uZXJhcygpIC8vPT4gWyAnQkMnLCAnQUQnIF1cbiAgICogQGV4YW1wbGUgSW5mby5lcmFzKCdsb25nJykgLy89PiBbICdCZWZvcmUgQ2hyaXN0JywgJ0Fubm8gRG9taW5pJyBdXG4gICAqIEBleGFtcGxlIEluZm8uZXJhcygnbG9uZycsICdmcicpIC8vPT4gWyAnYXZhbnQgSsOpc3VzLUNocmlzdCcsICdhcHLDqHMgSsOpc3VzLUNocmlzdCcgXVxuICAgKiBAcmV0dXJuIHtbc3RyaW5nXX1cbiAgICovXG4gIHN0YXRpYyBlcmFzKGxlbmd0aCA9ICdzaG9ydCcsIHsgbG9jYWxlID0gJ2VuJyB9ID0ge30pIHtcbiAgICByZXR1cm4gbmV3IExvY2FsZShsb2NhbGUsIG51bGwsICdncmVnb3J5JykuZXJhcyhsZW5ndGgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgc2V0IG9mIGF2YWlsYWJsZSBmZWF0dXJlcyBpbiB0aGlzIGVudmlyb25tZW50LlxuICAgKiBTb21lIGZlYXR1cmVzIG9mIEx1eG9uIGFyZSBub3QgYXZhaWxhYmxlIGluIGFsbCBlbnZpcm9ubWVudHMuIEZvciBleGFtcGxlLCBvbiBvbGRlciBicm93c2VycywgdGltZXpvbmUgc3VwcG9ydCBpcyBub3QgYXZhaWxhYmxlLiBVc2UgdGhpcyBmdW5jdGlvbiB0byBmaWd1cmUgb3V0IGlmIHRoYXQncyB0aGUgY2FzZS5cbiAgICogS2V5czpcbiAgICogKiBgdGltZXpvbmVzYDogd2hldGhlciB0aGlzIGVudmlyb25tZW50IHN1cHBvcnRzIElBTkEgdGltZXpvbmVzXG4gICAqICogYGludGxUb2tlbnNgOiB3aGV0aGVyIHRoaXMgZW52aXJvbm1lbnQgc3VwcG9ydHMgaW50ZXJuYXRpb25hbGl6ZWQgdG9rZW4tYmFzZWQgZm9ybWF0dGluZy9wYXJzaW5nXG4gICAqICogYGludGxgOiB3aGV0aGVyIHRoaXMgZW52aXJvbm1lbnQgc3VwcG9ydHMgZ2VuZXJhbCBpbnRlcm5hdGlvbmFsaXphdGlvblxuICAgKiBAZXhhbXBsZSBJbmZvLmZlYXR1cmUoKSAvLz0+IHsgaW50bDogdHJ1ZSwgaW50bFRva2VuczogZmFsc2UsIHRpbWV6b25lczogdHJ1ZSB9XG4gICAqIEByZXR1cm4ge29iamVjdH1cbiAgICovXG4gIHN0YXRpYyBmZWF0dXJlcygpIHtcbiAgICBsZXQgaW50bCA9IGZhbHNlLFxuICAgICAgaW50bFRva2VucyA9IGZhbHNlLFxuICAgICAgem9uZXMgPSBmYWxzZTtcblxuICAgIGlmIChVdGlsLmlzVW5kZWZpbmVkKEludGwpICYmIFV0aWwuaXNVbmRlZmluZWQoVXRpbC5EYXRlVGltZUZvcm1hdCkpIHtcbiAgICAgIGludGwgPSB0cnVlO1xuXG4gICAgICBpbnRsVG9rZW5zID0gVXRpbC5pc1VuZGVmaW5lZChJbnRsLkRhdGVUaW1lRm9ybWF0LnByb3RvdHlwZS5mb3JtYXRUb1BhcnRzKTtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgSW50bC5EYXRlVGltZUZvcm1hdCh7IHRpbWVab25lOiAnQW1lcmljYS9OZXdfWW9yaycgfSk7XG4gICAgICAgIHpvbmVzID0gdHJ1ZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgem9uZXMgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4geyBpbnRsLCBpbnRsVG9rZW5zLCB6b25lcyB9O1xuICB9XG59XG4iXSwibmFtZXMiOlsiTHV4b25FcnJvciIsIkVycm9yIiwiSW52YWxpZERhdGVUaW1lRXJyb3IiLCJyZWFzb24iLCJJbnZhbGlkSW50ZXJ2YWxFcnJvciIsIkludmFsaWREdXJhdGlvbkVycm9yIiwiQ29uZmxpY3RpbmdTcGVjaWZpY2F0aW9uRXJyb3IiLCJJbnZhbGlkVW5pdEVycm9yIiwidW5pdCIsIkludmFsaWRBcmd1bWVudEVycm9yIiwiWm9uZUlzQWJzdHJhY3QiLCJab25lIiwidHMiLCJvdGhlclpvbmUiLCJzaW5nbGV0b24iLCJMb2NhbFpvbmUiLCJmb3JtYXQiLCJsb2NhbGUiLCJVdGlsIiwicGFyc2Vab25lSW5mbyIsIkRhdGUiLCJnZXRUaW1lem9uZU9mZnNldCIsInR5cGUiLCJpc1VuZGVmaW5lZCIsIkludGwiLCJEYXRlVGltZUZvcm1hdCIsInJlc29sdmVkT3B0aW9ucyIsInRpbWVab25lIiwidHlwZVRvUG9zIiwiaGFja3lPZmZzZXQiLCJkdGYiLCJkYXRlIiwicGFyc2VkIiwiZXhlYyIsImZvcm1hdHRlZCIsImZNb250aCIsImZEYXkiLCJmWWVhciIsImZIb3VyIiwiZk1pbnV0ZSIsImZTZWNvbmQiLCJwYXJ0c09mZnNldCIsImZvcm1hdFRvUGFydHMiLCJmaWxsZWQiLCJpIiwibGVuZ3RoIiwidmFsdWUiLCJwb3MiLCJwYXJzZUludCIsImlzVmFsaWQiLCJ6b25lIiwiZSIsIklBTkFab25lIiwicyIsIm1hdGNoIiwibmFtZSIsInpvbmVOYW1lIiwidmFsaWQiLCJhc1VUQyIsIlVUQyIsImFzVFMiLCJ2YWx1ZU9mIiwiRml4ZWRPZmZzZXRab25lIiwib2Zmc2V0IiwidXRjSW5zdGFuY2UiLCJyIiwic2lnbmVkT2Zmc2V0IiwiZml4ZWQiLCJob3VycyIsIm1pbnV0ZXMiLCJNYXRoIiwiYWJzIiwic2lnbiIsImJhc2UiLCJudW1iZXIiLCJwYWQiLCJub3ciLCJkZWZhdWx0Wm9uZSIsImluc3RhbmNlIiwidGhyb3dPbkludmFsaWQiLCJTZXR0aW5ncyIsIm4iLCJ6Iiwibm9ybWFsaXplWm9uZSIsInQiLCJkdXJhdGlvbiIsImlzTnVtYmVyIiwiRHVyYXRpb24iLCJmcm9tTWlsbGlzZWNvbmRzIiwiT2JqZWN0IiwiZnJvbU9iamVjdCIsImRhdGVUaW1laXNoIiwiRGF0ZVRpbWUiLCJmcm9tSlNEYXRlIiwidGhpbmciLCJBcnJheSIsImlzQXJyYXkiLCJvIiwiYm90dG9tIiwidG9wIiwiaW5wdXQiLCJyZXBlYXQiLCJzbGljZSIsImNlaWwiLCJmbG9vciIsImR0IiwiYXJyIiwicmVkdWNlIiwiZmxhdCIsInRvRmxhdHRlbiIsImNvbmNhdCIsImZsYXR0ZW4iLCJieSIsImNvbXBhcmUiLCJiZXN0IiwibmV4dCIsInBhaXIiLCJhcHBseSIsIm9iaiIsImtleXMiLCJhIiwiayIsInllYXIiLCJpc0xlYXBZZWFyIiwibW9udGgiLCJvZmZzZXRGb3JtYXQiLCJpbnRsIiwibW9kaWZpZWQiLCJhc3NpZ24iLCJ0aW1lWm9uZU5hbWUiLCJwcm90b3R5cGUiLCJmaW5kIiwibSIsInRvTG93ZXJDYXNlIiwid2l0aG91dCIsImluY2x1ZGVkIiwiZGlmZmVkIiwic3Vic3RyaW5nIiwidHJpbW1lZCIsInJlcGxhY2UiLCJpc1N0cmluZyIsImxvd2VyZWQiLCJpc1ZhbGlkU3BlY2llciIsInBhcnNlU3BlY2lmaWVyIiwibm9ybWFsaXplciIsImlnbm9yZVVua25vd24iLCJub3JtYWxpemVkIiwidSIsImhhc093blByb3BlcnR5IiwidiIsIk51bWJlciIsImlzTmFOIiwibWFwcGVkIiwicGljayIsIm9mZkhvdXJTdHIiLCJvZmZNaW51dGVTdHIiLCJvZmZIb3VyIiwib2ZmTWluIiwib2ZmTWluU2lnbmVkIiwiRW5nbGlzaCIsIm1vbnRoc05hcnJvdyIsIm1vbnRoc1Nob3J0IiwibW9udGhzTG9uZyIsIndlZWtkYXlzTmFycm93Iiwid2Vla2RheXNTaG9ydCIsIndlZWtkYXlzTG9uZyIsImxvY2FsZUNhY2hlIiwiTWFwIiwiaW50bENvbmZpZ1N0cmluZyIsIm51bWJlcmluZ1N5c3RlbSIsIm91dHB1dENhbGVuZGFyIiwibG9jIiwibWFwIiwibCIsIm1hcE1vbnRocyIsImYiLCJtcyIsInV0YyIsInB1c2giLCJtYXBXZWVrZGF5cyIsIkxvY2FsZSIsIm9wdHMiLCJjcmVhdGUiLCJsb2NhbGVSIiwibnVtYmVyaW5nU3lzdGVtUiIsIm91dHB1dENhbGVuZGFyUiIsImNhY2hlS2V5IiwiY2FjaGVkIiwiZ2V0IiwiZnJlc2giLCJzZXQiLCJudW1iZXJpbmciLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJzdGFuZGFsb25lIiwic3RhcnRzV2l0aCIsImFsdHMiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwia25vd25FbmdsaXNoIiwiZW5nbGlzaCIsIm1vbnRocyIsImRheSIsImZvcm1hdFN0ciIsIm1vbnRoc0NhY2hlIiwiZXh0cmFjdCIsIndlZWtkYXlzIiwid2Vla2RheSIsIndlZWtkYXlzQ2FjaGUiLCJtZXJpZGllbXMiLCJtZXJpZGllbUNhY2hlIiwiaG91ciIsImhvdXIxMiIsImVyYXMiLCJlcmEiLCJlcmFDYWNoZSIsImludGxPcHRzIiwiZmllbGQiLCJkdEZvcm1hdHRlciIsImRmIiwiZCIsInJlc3VsdHMiLCJtYXRjaGluZyIsInJlYWxJbnRsT3B0cyIsInVzZUdyb3VwaW5nIiwicGFkVG8iLCJtaW5pbXVtSW50ZWdlckRpZ2l0cyIsInJvdW5kIiwibWF4aW11bUZyYWN0aW9uRGlnaXRzIiwiTnVtYmVyRm9ybWF0IiwidW5pdmVyc2FsIiwiYXNJZlVUQyIsInRvSlNEYXRlIiwib3RoZXIiLCJzdHJpbmdpZnlUb2tlbnMiLCJzcGxpdHMiLCJ0b2tlblRvU3RyaW5nIiwidG9rZW4iLCJsaXRlcmFsIiwidmFsIiwiRm9ybWF0dGVyIiwiZm9ybWF0T3B0cyIsImZtdCIsImN1cnJlbnQiLCJjdXJyZW50RnVsbCIsImJyYWNrZXRlZCIsImMiLCJjaGFyQXQiLCJwIiwibnVtYmVyRm9ybWF0dGVyIiwic3RyaW5nIiwiZm9ybWF0T2Zmc2V0IiwiaXNPZmZzZXRGaXhlZCIsImFsbG93WiIsInRvd2FyZFplcm8iLCJudW0iLCJSYW5nZUVycm9yIiwib3V0cHV0Q2FsIiwibWlsbGlzZWNvbmQiLCJzZWNvbmQiLCJtaW51dGUiLCJvZmZzZXROYW1lU2hvcnQiLCJvZmZzZXROYW1lTG9uZyIsInRvU3RyaW5nIiwid2Vla1llYXIiLCJ3ZWVrTnVtYmVyIiwib3JkaW5hbCIsImZvcm1hdERhdGVUaW1lIiwiREFURV9TSE9SVCIsIkRBVEVfTUVEIiwiREFURV9GVUxMIiwiREFURV9IVUdFIiwiVElNRV9TSU1QTEUiLCJUSU1FX1dJVEhfU0VDT05EUyIsIlRJTUVfV0lUSF9TSE9SVF9PRkZTRVQiLCJUSU1FX1dJVEhfTE9OR19PRkZTRVQiLCJUSU1FXzI0X1NJTVBMRSIsIlRJTUVfMjRfV0lUSF9TRUNPTkRTIiwiVElNRV8yNF9XSVRIX1NIT1JUX09GRlNFVCIsIlRJTUVfMjRfV0lUSF9MT05HX09GRlNFVCIsIkRBVEVUSU1FX1NIT1JUIiwiREFURVRJTUVfTUVEIiwiREFURVRJTUVfRlVMTCIsIkRBVEVUSU1FX0hVR0UiLCJEQVRFVElNRV9TSE9SVF9XSVRIX1NFQ09ORFMiLCJEQVRFVElNRV9NRURfV0lUSF9TRUNPTkRTIiwiREFURVRJTUVfRlVMTF9XSVRIX1NFQ09ORFMiLCJEQVRFVElNRV9IVUdFX1dJVEhfU0VDT05EUyIsInBhcnNlRm9ybWF0IiwiZHVyIiwidG9rZW5Ub0ZpZWxkIiwibGlsZHVyIiwidG9rZW5zIiwicmVhbFRva2VucyIsImZvdW5kIiwiY29sbGFwc2VkIiwic2hpZnRUbyIsImZpbHRlciIsImNvbWJpbmVSZWdleGVzIiwicmVnZXhlcyIsImZ1bGwiLCJzb3VyY2UiLCJSZWdFeHAiLCJjb21iaW5lRXh0cmFjdG9ycyIsImV4dHJhY3RvcnMiLCJleCIsIm1lcmdlZFZhbHMiLCJtZXJnZWRab25lIiwiY3Vyc29yIiwicGFyc2UiLCJwYXR0ZXJucyIsInJlZ2V4IiwiZXh0cmFjdG9yIiwic2ltcGxlUGFyc2UiLCJyZXQiLCJpc29UaW1lUmVnZXgiLCJleHRyYWN0SVNPWW1kIiwiaXNvWW1kUmVnZXgiLCJleHRyYWN0SVNPV2Vla0RhdGEiLCJpc29XZWVrUmVnZXgiLCJpc29PcmRpbmFsUmVnZXgiLCJleHRyYWN0SVNPT3JkaW5hbERhdGEiLCJleHRyYWN0SVNPVGltZSIsImxvY2FsIiwiZnVsbE9mZnNldCIsIml0ZW0iLCJpc29EdXJhdGlvbiIsImV4dHJhY3RJU09EdXJhdGlvbiIsInllYXJTdHIiLCJtb250aFN0ciIsImRheVN0ciIsImhvdXJTdHIiLCJtaW51dGVTdHIiLCJzZWNvbmRTdHIiLCJvYnNPZmZzZXRzIiwiZnJvbVN0cmluZ3MiLCJ3ZWVrZGF5U3RyIiwicmVzdWx0IiwidW50cnVjYXRlWWVhciIsImluZGV4T2YiLCJyZmMyODIyIiwiZXh0cmFjdFJGQzI4MjIiLCJvYnNPZmZzZXQiLCJtaWxPZmZzZXQiLCJwcmVwcm9jZXNzUkZDMjgyMiIsInRyaW0iLCJyZmMxMTIzIiwicmZjODUwIiwiYXNjaWkiLCJleHRyYWN0UkZDMTEyM09yODUwIiwiZXh0cmFjdEFTQ0lJIiwiUmVnZXhQYXJzZXIiLCJJTlZBTElEIiwibG93T3JkZXJNYXRyaXgiLCJzZWNvbmRzIiwibWlsbGlzZWNvbmRzIiwiY2FzdWFsTWF0cml4IiwiZGF5c0luWWVhckFjY3VyYXRlIiwiZGF5c0luTW9udGhBY2N1cmF0ZSIsImFjY3VyYXRlTWF0cml4Iiwib3JkZXJlZFVuaXRzIiwiY2xvbmUiLCJjbGVhciIsImNvbmYiLCJ2YWx1ZXMiLCJjb252ZXJzaW9uQWNjdXJhY3kiLCJpc0hpZ2hPcmRlck5lZ2F0aXZlIiwiY29uZmlnIiwiYWNjdXJhdGUiLCJpbnZhbGlkUmVhc29uIiwiZm9ybWF0RHVyYXRpb25Gcm9tU3RyaW5nIiwiaW5jbHVkZUNvbmZpZyIsIm5vcm0iLCJub3JtYWxpemUiLCJuZWdhdGUiLCJ5ZWFycyIsImRheXMiLCJ3ZWVrcyIsInRvSVNPIiwiZnJpZW5kbHlEdXJhdGlvbiIsInBsdXMiLCJub3JtYWxpemVVbml0IiwibWl4ZWQiLCJub3JtYWxpemVPYmplY3QiLCJOYU4iLCJuZWciLCJzaGlmdGVkIiwidW5pdHMiLCJidWlsdCIsImFjY3VtdWxhdGVkIiwidmFscyIsInRvT2JqZWN0IiwibGFzdFVuaXQiLCJhayIsIm1hdHJpeCIsImRvd24iLCJjb252IiwiYWRkZWQiLCJrZXkiLCJuZWdhdGVkIiwiY291bnQiLCJ0ZXh0IiwicGFyc2VJU09EdXJhdGlvbiIsInZhbGlkYXRlU3RhcnRFbmQiLCJzdGFydCIsImVuZCIsIkludGVydmFsIiwidG9EdXJhdGlvbiIsInN0YXJ0T2YiLCJkaWZmIiwibWludXMiLCJoYXNTYW1lIiwiZGF0ZVRpbWUiLCJmcm9tRGF0ZVRpbWVzIiwiZGF0ZVRpbWVzIiwic29ydGVkIiwiZnJpZW5kbHlEYXRlVGltZSIsInNvcnQiLCJudW1iZXJPZlBhcnRzIiwic3BsaXRCeSIsImVxdWFscyIsImludGVydmFscyIsInhvciIsImludGVyc2VjdGlvbiIsImlzRW1wdHkiLCJkYXRlRm9ybWF0Iiwic2VwYXJhdG9yIiwidG9Gb3JtYXQiLCJpbnZhbGlkIiwiYnVpbHRTdGFydCIsImJ1aWx0RW5kIiwic3BsaXQiLCJmcm9tSVNPIiwiYiIsInNvZmFyIiwib3ZlcmxhcHMiLCJhYnV0c1N0YXJ0IiwidW5pb24iLCJmaW5hbCIsImN1cnJlbnRDb3VudCIsImVuZHMiLCJ0aW1lIiwibWVyZ2UiLCJpbnRVbml0IiwicG9zdCIsImRlc2VyIiwib25lT2YiLCJzdHJpbmdzIiwic3RhcnRJbmRleCIsImpvaW4iLCJncm91cHMiLCJoIiwic2ltcGxlIiwidW5pdEZvclRva2VuIiwib25lIiwidHdvIiwidGhyZWUiLCJmb3VyIiwib25lT3JUd28iLCJvbmVUb1RocmVlIiwidHdvVG9Gb3VyIiwidW5pdGF0ZSIsInVudHJ1bmNhdGVZZWFyIiwiYnVpbGRSZWdleCIsImhhbmRsZXJzIiwibWF0Y2hlcyIsImFsbCIsIm1hdGNoSW5kZXgiLCJkYXRlVGltZUZyb21NYXRjaGVzIiwidG9GaWVsZCIsIloiLCJHIiwieSIsIlRva2VuUGFyc2VyIiwiZXhwbGFpblBhcnNlIiwibm9uTGVhcExhZGRlciIsImxlYXBMYWRkZXIiLCJkYXlPZldlZWsiLCJqcyIsImdldFVUQ0RheSIsImxhc3RXZWVrTnVtYmVyIiwicDEiLCJsYXN0IiwicDIiLCJjb21wdXRlT3JkaW5hbCIsInVuY29tcHV0ZU9yZGluYWwiLCJ0YWJsZSIsIm1vbnRoMCIsImZpbmRJbmRleCIsIkNvbnZlcnNpb25zIiwiZ3JlZ09iaiIsInRpbWVPYmplY3QiLCJ3ZWVrRGF0YSIsIndlZWtkYXlPZkphbjQiLCJkYXlzSW5ZZWFyIiwiZ3JlZ0RhdGEiLCJvcmRpbmFsRGF0YSIsInZhbGlkWWVhciIsInZhbGlkV2VlayIsIm51bWJlckJldHdlZW4iLCJ2YWxpZFdlZWtkYXkiLCJ2YWxpZE9yZGluYWwiLCJ2YWxpZE1vbnRoIiwidmFsaWREYXkiLCJkYXlzSW5Nb250aCIsInZhbGlkSG91ciIsInZhbGlkTWludXRlIiwidmFsaWRTZWNvbmQiLCJ2YWxpZE1pbGxpc2Vjb25kIiwiVU5TVVBQT1JURURfWk9ORSIsInBvc3NpYmx5Q2FjaGVkV2Vla0RhdGEiLCJncmVnb3JpYW5Ub1dlZWsiLCJpbnN0Iiwib2xkIiwiZml4T2Zmc2V0IiwibG9jYWxUUyIsInR6IiwidXRjR3Vlc3MiLCJvMiIsIm8zIiwibWluIiwibWF4IiwidHNUb09iaiIsImdldFVUQ0Z1bGxZZWFyIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsImdldFVUQ01pbGxpc2Vjb25kcyIsIm9ialRvTG9jYWxUUyIsInNldEZ1bGxZZWFyIiwib2JqVG9UUyIsImFkanVzdFRpbWUiLCJvUHJlIiwibWlsbGlzVG9BZGQiLCJhcyIsInBhcnNlRGF0YVRvRGF0ZVRpbWUiLCJwYXJzZWRab25lIiwic2V0Wm9uZSIsImludGVycHJldGF0aW9uWm9uZSIsImZvcm1hdE1heWJlIiwiZm9ybWF0RGF0ZVRpbWVGcm9tU3RyaW5nIiwiZGVmYXVsdFVuaXRWYWx1ZXMiLCJkZWZhdWx0V2Vla1VuaXRWYWx1ZXMiLCJkZWZhdWx0T3JkaW5hbFVuaXRWYWx1ZXMiLCJpc29UaW1lRm9ybWF0Iiwic3VwcHJlc3NTZWNzIiwic3VwcHJlc3NNaWxsaXMiLCJvcmRlcmVkV2Vla1VuaXRzIiwib3JkZXJlZE9yZGluYWxVbml0cyIsInVuY2hhbmdlZCIsImNhbGVuZGFyIiwia2VlcENhbGVuZGFyVGltZSIsIm5ld1RTIiwicmVjb25maWd1cmUiLCJzZXR0aW5nV2Vla1N0dWZmIiwid2Vla1RvR3JlZ29yaWFuIiwib3JkaW5hbFRvR3JlZ29yaWFuIiwiZ3JlZ29yaWFuVG9PcmRpbmFsIiwibm9ybWFsaXplZFVuaXQiLCJzdXBwcmVzc01pbGxpc2Vjb25kcyIsInN1cHByZXNzU2Vjb25kcyIsInRvVVRDIiwib3RoZXJEYXRlVGltZSIsIm1heWJlQXJyYXkiLCJmbGlwcGVkIiwiYWNjdW0iLCJsb3dlc3RPcmRlciIsImRZZWFyIiwiZE1vbnRoIiwiY29tcHV0ZURheURlbHRhIiwidXRjRGF5U3RhcnQiLCJyZW1haW5pbmciLCJtb3JlVW5pdHMiLCJtZXJnZWQiLCJpbnB1dE1zIiwiZW5kT2YiLCJvZmZzZXROYW1lIiwib3B0aW9ucyIsInpvbmVUb1VzZSIsInRzTm93Iiwib2Zmc2V0UHJvdmlzIiwiY29udGFpbnNPcmRpbmFsIiwiY29udGFpbnNHcmVnb3JZZWFyIiwiY29udGFpbnNHcmVnb3JNRCIsImNvbnRhaW5zR3JlZ29yIiwiZGVmaW5pdGVXZWVrRGVmIiwidXNlV2Vla0RhdGEiLCJkZWZhdWx0VmFsdWVzIiwib2JqTm93IiwiZm91bmRGaXJzdCIsImhpZ2hlck9yZGVySW52YWxpZCIsImhhc0ludmFsaWRXZWVrRGF0YSIsImhhc0ludmFsaWRPcmRpbmFsRGF0YSIsImhhc0ludmFsaWRHcmVnb3JpYW5EYXRhIiwiaGFzSW52YWxpZFRpbWVEYXRhIiwiZ3JlZ29yaWFuIiwidHNGaW5hbCIsIm9mZnNldEZpbmFsIiwicGFyc2VJU09EYXRlIiwicGFyc2VSRkMyODIyRGF0ZSIsInBhcnNlSFRUUERhdGUiLCJwYXJzZXIiLCJmcm9tT3B0cyIsInBhcnNlRGF0ZVRpbWUiLCJiZXN0QnkiLCJJbmZvIiwiaW50bFRva2VucyIsInpvbmVzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7OztJQUtNQTs7Ozs7Ozs7O0VBQW1CQzs7Ozs7OztBQUt6QixJQUFhQyxvQkFBYjs7O2dDQUNjQyxNQUFaLEVBQW9COzs2SkFDU0EsTUFEVDs7OztFQURvQkgsVUFBMUM7Ozs7O0FBU0EsSUFBYUksb0JBQWI7OztnQ0FDY0QsTUFBWixFQUFvQjs7NkpBQ1NBLE1BRFQ7Ozs7RUFEb0JILFVBQTFDOzs7OztBQVNBLElBQWFLLG9CQUFiOzs7Z0NBQ2NGLE1BQVosRUFBb0I7OzZKQUNTQSxNQURUOzs7O0VBRG9CSCxVQUExQzs7Ozs7QUFTQSxJQUFhTSw2QkFBYjs7Ozs7Ozs7O0VBQW1ETixVQUFuRDs7Ozs7QUFLQSxJQUFhTyxnQkFBYjs7OzRCQUNjQyxJQUFaLEVBQWtCOztnSkFDTUEsSUFETjs7OztFQURrQlIsVUFBdEM7Ozs7O0FBU0EsSUFBYVMsb0JBQWI7Ozs7Ozs7OztFQUEwQ1QsVUFBMUM7Ozs7O0FBS0EsSUFBYVUsY0FBYjs7OzRCQUNnQjs7MEhBQ04sMkJBRE07Ozs7RUFEb0JWLFVBQXBDOztBQ3hEQTtBQUNBLEFBRUE7OztBQUdBLElBQWFXLElBQWI7Ozs7Ozs7Ozs7Ozs7OzsyQkErQ1NDLEVBL0NULEVBK0NhO1lBQ0gsSUFBSUYsY0FBSixFQUFOOzs7Ozs7Ozs7Ozs7MkJBU0tHLFNBekRULEVBeURvQjtZQUNWLElBQUlILGNBQUosRUFBTjs7Ozs7Ozs7Ozs7Ozs7Ozs7MkJBcERTO1lBQ0gsSUFBSUEsY0FBSixFQUFOOzs7Ozs7Ozs7OzsyQkFRUztZQUNILElBQUlBLGNBQUosRUFBTjs7Ozs7Ozs7Ozs7MkJBUWM7WUFDUixJQUFJQSxjQUFKLEVBQU47Ozs7Ozs7Ozs7Ozs7OzsyQkF5Q1k7WUFDTixJQUFJQSxjQUFKLEVBQU47Ozs7K0JBOUJnQkUsRUFyQ3BCLEVBcUN3RTtZQUM5RCxJQUFJRixjQUFKLEVBQU47Ozs7OztBQ3pDSixJQUFJSSxZQUFZLElBQWhCOzs7Ozs7QUFNQSxJQUFhQyxTQUFiOzs7Ozs7Ozs7OytCQXNCYUgsRUF0QmIsRUFzQjZEO3FGQUFKLEVBQUk7NkJBQTFDSSxNQUEwQztVQUExQ0EsTUFBMEMsK0JBQWpDLE1BQWlDOzZCQUF6QkMsTUFBeUI7VUFBekJBLE1BQXlCLCtCQUFoQixPQUFnQjs7YUFDbERDLEtBQUtDLGFBQUwsQ0FBbUJQLEVBQW5CLEVBQXVCSSxNQUF2QixFQUErQkMsVUFBVSxPQUF6QyxDQUFQOzs7OzJCQUdLTCxFQTFCVCxFQTBCYTthQUNGLENBQUMsSUFBSVEsSUFBSixDQUFTUixFQUFULEVBQWFTLGlCQUFiLEVBQVI7Ozs7MkJBR0tSLFNBOUJULEVBOEJvQjthQUNUQSxVQUFVUyxJQUFWLEtBQW1CLE9BQTFCOzs7OzJCQXZCUzthQUNGLE9BQVA7Ozs7MkJBR1M7VUFDTEosS0FBS0ssV0FBTCxDQUFpQkMsSUFBakIsS0FBMEJOLEtBQUtLLFdBQUwsQ0FBaUJDLEtBQUtDLGNBQXRCLENBQTlCLEVBQXFFO2VBQzVELElBQUlELEtBQUtDLGNBQVQsR0FBMEJDLGVBQTFCLEdBQTRDQyxRQUFuRDtPQURGLE1BRU8sT0FBTyxPQUFQOzs7OzJCQUdPO2FBQ1AsS0FBUDs7OzsyQkFlWTthQUNMLElBQVA7Ozs7MkJBbENvQjtVQUNoQmIsY0FBYyxJQUFsQixFQUF3QjtvQkFDVixJQUFJQyxTQUFKLEVBQVo7O2FBRUtELFNBQVA7Ozs7RUFMMkJILElBQS9COztBQ05BLElBQU1pQixZQUFZO1FBQ1YsQ0FEVTtTQUVULENBRlM7T0FHWCxDQUhXO1FBSVYsQ0FKVTtVQUtSLENBTFE7VUFNUjtDQU5WOztBQVNBLFNBQVNDLFdBQVQsQ0FBcUJDLEdBQXJCLEVBQTBCQyxJQUExQixFQUFnQztrQkFDWkQsSUFBSWQsTUFBSixDQUFXZSxJQUFYLENBQVo7TUFDSkMsTUFESSxHQUNLLHlDQUF5Q0MsSUFBekMsQ0FBOENDLFNBQTlDLENBREw7OEJBRStDRixNQUYvQztNQUVERyxNQUZDO01BRU9DLElBRlA7TUFFYUMsS0FGYjtNQUVvQkMsS0FGcEI7TUFFMkJDLE9BRjNCO01BRW9DQyxPQUZwQzs7U0FHQyxDQUFDSCxLQUFELEVBQVFGLE1BQVIsRUFBZ0JDLElBQWhCLEVBQXNCRSxLQUF0QixFQUE2QkMsT0FBN0IsRUFBc0NDLE9BQXRDLENBQVA7OztBQUdGLFNBQVNDLFdBQVQsQ0FBcUJYLEdBQXJCLEVBQTBCQyxJQUExQixFQUFnQztNQUN4QkcsWUFBWUosSUFBSVksYUFBSixDQUFrQlgsSUFBbEIsQ0FBbEI7TUFDRVksU0FBUyxFQURYO09BRUssSUFBSUMsSUFBSSxDQUFiLEVBQWdCQSxJQUFJVixVQUFVVyxNQUE5QixFQUFzQ0QsR0FBdEMsRUFBMkM7dUJBQ2pCVixVQUFVVSxDQUFWLENBRGlCO1FBQ2pDdEIsSUFEaUMsZ0JBQ2pDQSxJQURpQztRQUMzQndCLEtBRDJCLGdCQUMzQkEsS0FEMkI7UUFFdkNDLEdBRnVDLEdBRWpDbkIsVUFBVU4sSUFBVixDQUZpQzs7O1FBSXJDLENBQUNKLEtBQUtLLFdBQUwsQ0FBaUJ3QixHQUFqQixDQUFMLEVBQTRCO2FBQ25CQSxHQUFQLElBQWNDLFNBQVNGLEtBQVQsRUFBZ0IsRUFBaEIsQ0FBZDs7O1NBR0dILE1BQVA7OztBQUdGLFNBQVNNLE9BQVQsQ0FBaUJDLElBQWpCLEVBQXVCO01BQ2pCO1FBQ0UxQixLQUFLQyxjQUFULENBQXdCLE9BQXhCLEVBQWlDLEVBQUVFLFVBQVV1QixJQUFaLEVBQWpDLEVBQXFEbEMsTUFBckQ7V0FDTyxJQUFQO0dBRkYsQ0FHRSxPQUFPbUMsQ0FBUCxFQUFVO1dBQ0gsS0FBUDs7Ozs7Ozs7QUFRSixJQUFhQyxRQUFiOzs7O21DQUN3QkMsQ0FEeEIsRUFDMkI7YUFDaEJBLEtBQUtBLEVBQUVDLEtBQUYsQ0FBUSxtQkFBUixDQUFaOzs7O29CQUdVQyxJQUFaLEVBQWtCOzs7OztVQUVYQyxRQUFMLEdBQWdCRCxJQUFoQjtVQUNLRSxLQUFMLEdBQWFSLFFBQVFNLElBQVIsQ0FBYjs7Ozs7OytCQWVTM0MsRUF2QmIsRUF1QjZEO3FGQUFKLEVBQUk7NkJBQTFDSSxNQUEwQztVQUExQ0EsTUFBMEMsK0JBQWpDLE1BQWlDOzZCQUF6QkMsTUFBeUI7VUFBekJBLE1BQXlCLCtCQUFoQixPQUFnQjs7YUFDbERDLEtBQUtDLGFBQUwsQ0FBbUJQLEVBQW5CLEVBQXVCSSxNQUF2QixFQUErQkMsVUFBVSxPQUF6QyxFQUFrRCxLQUFLdUMsUUFBdkQsQ0FBUDs7OzsyQkFHSzVDLEVBM0JULEVBMkJhO2lCQUNJLElBQUlRLElBQUosQ0FBU1IsRUFBVCxDQUFQO1VBQ0prQixHQURJLEdBQ0UsSUFBSU4sS0FBS0MsY0FBVCxDQUF3QixPQUF4QixFQUFpQztnQkFDN0IsS0FENkI7a0JBRTNCLEtBQUsrQixRQUZzQjtjQUcvQixTQUgrQjtlQUk5QixTQUo4QjthQUtoQyxTQUxnQztjQU0vQixTQU4rQjtnQkFPN0IsU0FQNkI7Z0JBUTdCO09BUkosQ0FERjtrQkFXNkMxQixJQUFJWSxhQUFKLEdBQzdDRCxZQUFZWCxHQUFaLEVBQWlCQyxJQUFqQixDQUQ2QyxHQUU3Q0YsWUFBWUMsR0FBWixFQUFpQkMsSUFBakIsQ0FiQTs7VUFXSE0sS0FYRztVQVdJRixNQVhKO1VBV1lDLElBWFo7VUFXa0JFLEtBWGxCO1VBV3lCQyxPQVh6QjtVQVdrQ0MsT0FYbEM7VUFjSmtCLEtBZEksR0FjSXRDLEtBQUt1QyxHQUFMLENBQVN0QixLQUFULEVBQWdCRixTQUFTLENBQXpCLEVBQTRCQyxJQUE1QixFQUFrQ0UsS0FBbEMsRUFBeUNDLE9BQXpDLEVBQWtEQyxPQUFsRCxDQWRKOztVQWVGb0IsT0FBTzdCLEtBQUs4QixPQUFMLEVBQVg7Y0FDUUQsT0FBTyxJQUFmO2FBQ08sQ0FBQ0YsUUFBUUUsSUFBVCxLQUFrQixLQUFLLElBQXZCLENBQVA7Ozs7MkJBR0svQyxTQWhEVCxFQWdEb0I7YUFDVEEsVUFBVVMsSUFBVixLQUFtQixNQUFuQixJQUE2QlQsVUFBVTJDLFFBQVYsS0FBdUIsS0FBS0EsUUFBaEU7Ozs7MkJBdENTO2FBQ0YsTUFBUDs7OzsyQkFHUzthQUNGLEtBQUtBLFFBQVo7Ozs7MkJBR2M7YUFDUCxLQUFQOzs7OzJCQWdDWTthQUNMLEtBQUtDLEtBQVo7Ozs7RUFyRDBCOUMsSUFBOUI7O0FDM0NBLElBQUlHLGNBQVksSUFBaEI7Ozs7OztBQU1BLElBQWFnRCxlQUFiOzs7OzZCQVFrQkMsTUFSbEIsRUFRMEI7YUFDZkEsV0FBVyxDQUFYLEdBQWVELGdCQUFnQkUsV0FBL0IsR0FBNkMsSUFBSUYsZUFBSixDQUFvQkMsTUFBcEIsQ0FBcEQ7Ozs7bUNBR29CVixDQVp4QixFQVkyQjtVQUNuQkEsQ0FBSixFQUFPO1lBQ0NZLElBQUlaLEVBQUVDLEtBQUYsQ0FBUSx1Q0FBUixDQUFWO1lBQ0lXLENBQUosRUFBTztpQkFDRSxJQUFJSCxlQUFKLENBQW9CNUMsS0FBS2dELFlBQUwsQ0FBa0JELEVBQUUsQ0FBRixDQUFsQixFQUF3QkEsRUFBRSxDQUFGLENBQXhCLENBQXBCLENBQVA7OzthQUdHLElBQVA7Ozs7MkJBbEJ1QjtVQUNuQm5ELGdCQUFjLElBQWxCLEVBQXdCO3NCQUNWLElBQUlnRCxlQUFKLENBQW9CLENBQXBCLENBQVo7O2FBRUtoRCxXQUFQOzs7OzJCQWlCVWlELE1BQVosRUFBb0I7Ozs7O1VBRWJJLEtBQUwsR0FBYUosTUFBYjs7Ozs7O2lDQWlCVzthQUNKLEtBQUtSLElBQUwsRUFBUDs7Ozs2QkFPTzthQUNBLEtBQUtZLEtBQVo7Ozs7MkJBR0t0RCxTQXJEVCxFQXFEb0I7YUFDVEEsVUFBVVMsSUFBVixLQUFtQixPQUFuQixJQUE4QlQsVUFBVXNELEtBQVYsS0FBb0IsS0FBS0EsS0FBOUQ7Ozs7MkJBM0JTO2FBQ0YsT0FBUDs7OzsyQkFHUztVQUNIQyxRQUFRLEtBQUtELEtBQUwsR0FBYSxFQUEzQjtVQUNFRSxVQUFVQyxLQUFLQyxHQUFMLENBQVMsS0FBS0osS0FBTCxHQUFhLEVBQXRCLENBRFo7VUFFRUssT0FBT0osUUFBUSxDQUFSLEdBQVksR0FBWixHQUFrQixHQUYzQjtVQUdFSyxPQUFPRCxPQUFPRixLQUFLQyxHQUFMLENBQVNILEtBQVQsQ0FIaEI7VUFJRU0sU0FBU0wsVUFBVSxDQUFWLEdBQWlCSSxJQUFqQixTQUF5QnZELEtBQUt5RCxHQUFMLENBQVNOLE9BQVQsRUFBa0IsQ0FBbEIsQ0FBekIsR0FBa0RJLElBSjdEOzthQU1PLEtBQUtOLEtBQUwsS0FBZSxDQUFmLEdBQW1CLEtBQW5CLFdBQWlDTyxNQUF4Qzs7OzsyQkFPYzthQUNQLElBQVA7Ozs7MkJBV1k7YUFDTCxJQUFQOzs7O0VBMURpQy9ELElBQXJDOztBQ05BLElBQUlpRSxNQUFNO1NBQU0sSUFBSXhELElBQUosR0FBV3lDLE9BQVgsRUFBTjtDQUFWO0lBQ0VnQixjQUFjOUQsVUFBVStELFFBRDFCO0lBRUVDLGlCQUFpQixLQUZuQjs7Ozs7QUFPQSxJQUFhQyxRQUFiOzs7Ozs7Ozs7Ozs7MkJBS21CO2FBQ1JKLEdBQVA7Ozs7Ozs7O3lCQU9hSyxDQWJqQixFQWFvQjtZQUNWQSxDQUFOOzs7Ozs7Ozs7OzJCQU8yQjthQUNwQkosWUFBWXRCLElBQW5COzs7Ozs7Ozt5QkFPeUIyQixDQTdCN0IsRUE2QmdDO29CQUNkaEUsS0FBS2lFLGFBQUwsQ0FBbUJELENBQW5CLENBQWQ7Ozs7Ozs7Ozs7MkJBT3VCO2FBQ2hCTCxXQUFQOzs7Ozs7Ozs7OzJCQU8wQjthQUNuQkUsY0FBUDs7Ozs7Ozs7eUJBT3dCSyxDQXJENUIsRUFxRCtCO3VCQUNWQSxDQUFqQjs7Ozs7O0FDdkRKOzs7O0FBSUEsSUFBYWxFLElBQWI7Ozs7Ozs7cUNBQzBCbUUsUUFEMUIsRUFDb0M7VUFDNUJuRSxLQUFLb0UsUUFBTCxDQUFjRCxRQUFkLENBQUosRUFBNkI7ZUFDcEJFLFNBQVNDLGdCQUFULENBQTBCSCxRQUExQixDQUFQO09BREYsTUFFTyxJQUFJQSxvQkFBb0JFLFFBQXhCLEVBQWtDO2VBQ2hDRixRQUFQO09BREssTUFFQSxJQUFJQSxvQkFBb0JJLE1BQXhCLEVBQWdDO2VBQzlCRixTQUFTRyxVQUFULENBQW9CTCxRQUFwQixDQUFQO09BREssTUFFQTtjQUNDLElBQUk1RSxvQkFBSixDQUF5QiwyQkFBekIsQ0FBTjs7Ozs7cUNBSW9Ca0YsV0FiMUIsRUFhdUM7VUFDL0JBLHVCQUF1QkMsUUFBM0IsRUFBcUM7ZUFDNUJELFdBQVA7T0FERixNQUVPLElBQUlBLFlBQVk5QixPQUFaLElBQXVCM0MsS0FBS29FLFFBQUwsQ0FBY0ssWUFBWTlCLE9BQVosRUFBZCxDQUEzQixFQUFpRTtlQUMvRCtCLFNBQVNDLFVBQVQsQ0FBb0JGLFdBQXBCLENBQVA7T0FESyxNQUVBLElBQUlBLHVCQUF1QkYsTUFBM0IsRUFBbUM7ZUFDakNHLFNBQVNGLFVBQVQsQ0FBb0JDLFdBQXBCLENBQVA7T0FESyxNQUVBO2NBQ0MsSUFBSWxGLG9CQUFKLENBQXlCLDJCQUF6QixDQUFOOzs7OzsrQkFJY3FGLEtBekJwQixFQXlCMkI7YUFDaEJDLE1BQU1DLE9BQU4sQ0FBY0YsS0FBZCxJQUF1QkEsS0FBdkIsR0FBK0IsQ0FBQ0EsS0FBRCxDQUF0Qzs7OztnQ0FHaUJHLENBN0JyQixFQTZCd0I7YUFDYixPQUFPQSxDQUFQLEtBQWEsV0FBcEI7Ozs7NkJBR2NBLENBakNsQixFQWlDcUI7YUFDVixPQUFPQSxDQUFQLEtBQWEsUUFBcEI7Ozs7NkJBR2NBLENBckNsQixFQXFDcUI7YUFDVixPQUFPQSxDQUFQLEtBQWEsUUFBcEI7Ozs7a0NBR21CSCxLQXpDdkIsRUF5QzhCSSxNQXpDOUIsRUF5Q3NDQyxHQXpDdEMsRUF5QzJDO2FBQ2hDakYsS0FBS29FLFFBQUwsQ0FBY1EsS0FBZCxLQUF3QkEsU0FBU0ksTUFBakMsSUFBMkNKLFNBQVNLLEdBQTNEOzs7O3dCQUdTQyxLQTdDYixFQTZDMkI7VUFBUG5CLENBQU8sdUVBQUgsQ0FBRzs7YUFDaEIsQ0FBQyxJQUFJb0IsTUFBSixDQUFXcEIsQ0FBWCxJQUFnQm1CLEtBQWpCLEVBQXdCRSxLQUF4QixDQUE4QixDQUFDckIsQ0FBL0IsQ0FBUDs7OzsrQkFHZ0JtQixLQWpEcEIsRUFpRDJCO2FBQ2hCQSxRQUFRLENBQVIsR0FBWTlCLEtBQUtpQyxJQUFMLENBQVVILEtBQVYsQ0FBWixHQUErQjlCLEtBQUtrQyxLQUFMLENBQVdKLEtBQVgsQ0FBdEM7Ozs7Ozs7NEJBSWFLLEVBdERqQixFQXNEcUI7VUFDWDdGLEtBQUs2RixHQUFHN0YsRUFBSCxHQUFRNkYsR0FBRzFDLE1BQXRCO2FBQ08sSUFBSTNDLElBQUosQ0FBU1IsRUFBVCxDQUFQOzs7Ozs7OzRCQUlhOEYsR0E1RGpCLEVBNERzQjthQUNYQSxJQUFJQyxNQUFKLENBQ0wsVUFBQ0MsSUFBRCxFQUFPQyxTQUFQO2VBQ0VELEtBQUtFLE1BQUwsQ0FBWWYsTUFBTUMsT0FBTixDQUFjYSxTQUFkLElBQTJCM0YsS0FBSzZGLE9BQUwsQ0FBYUYsU0FBYixDQUEzQixHQUFxREEsU0FBakUsQ0FERjtPQURLLEVBR0wsRUFISyxDQUFQOzs7OzJCQU9ZSCxHQXBFaEIsRUFvRXFCTSxFQXBFckIsRUFvRXlCQyxPQXBFekIsRUFvRWtDO2FBQ3ZCUCxJQUFJQyxNQUFKLENBQVcsVUFBQ08sSUFBRCxFQUFPQyxJQUFQLEVBQWdCO1lBQzFCQyxPQUFPLENBQUNKLEdBQUdHLElBQUgsQ0FBRCxFQUFXQSxJQUFYLENBQWI7WUFDSSxDQUFDRCxJQUFMLEVBQVc7aUJBQ0ZFLElBQVA7U0FERixNQUVPLElBQUlILFFBQVFJLEtBQVIsQ0FBYyxJQUFkLEVBQW9CLENBQUNILEtBQUssQ0FBTCxDQUFELEVBQVVFLEtBQUssQ0FBTCxDQUFWLENBQXBCLE1BQTRDRixLQUFLLENBQUwsQ0FBaEQsRUFBeUQ7aUJBQ3ZEQSxJQUFQO1NBREssTUFFQTtpQkFDRUUsSUFBUDs7T0FQRyxFQVNKLElBVEksRUFTRSxDQVRGLENBQVA7Ozs7eUJBWVVFLEdBakZkLEVBaUZtQkMsSUFqRm5CLEVBaUZ5QjthQUNkQSxLQUFLWixNQUFMLENBQVksVUFBQ2EsQ0FBRCxFQUFJQyxDQUFKLEVBQVU7VUFDekJBLENBQUYsSUFBT0gsSUFBSUcsQ0FBSixDQUFQO2VBQ09ELENBQVA7T0FGSyxFQUdKLEVBSEksQ0FBUDs7OzsrQkFNZ0JFLElBeEZwQixFQXdGMEI7YUFDZkEsT0FBTyxDQUFQLEtBQWEsQ0FBYixLQUFtQkEsT0FBTyxHQUFQLEtBQWUsQ0FBZixJQUFvQkEsT0FBTyxHQUFQLEtBQWUsQ0FBdEQsQ0FBUDs7OzsrQkFHZ0JBLElBNUZwQixFQTRGMEI7YUFDZnhHLEtBQUt5RyxVQUFMLENBQWdCRCxJQUFoQixJQUF3QixHQUF4QixHQUE4QixHQUFyQzs7OztnQ0FHaUJBLElBaEdyQixFQWdHMkJFLEtBaEczQixFQWdHa0M7VUFDMUJBLFVBQVUsQ0FBZCxFQUFpQjtlQUNSMUcsS0FBS3lHLFVBQUwsQ0FBZ0JELElBQWhCLElBQXdCLEVBQXhCLEdBQTZCLEVBQXBDO09BREYsTUFFTztlQUNFLENBQUMsRUFBRCxFQUFLLElBQUwsRUFBVyxFQUFYLEVBQWUsRUFBZixFQUFtQixFQUFuQixFQUF1QixFQUF2QixFQUEyQixFQUEzQixFQUErQixFQUEvQixFQUFtQyxFQUFuQyxFQUF1QyxFQUF2QyxFQUEyQyxFQUEzQyxFQUErQyxFQUEvQyxFQUFtREUsUUFBUSxDQUEzRCxDQUFQOzs7OztrQ0FJaUJoSCxFQXhHdkIsRUF3RzJCaUgsWUF4RzNCLEVBd0d5QzVHLE1BeEd6QyxFQXdHa0U7VUFBakJVLFFBQWlCLHVFQUFOLElBQU07O1VBQ3hESSxPQUFPLElBQUlYLElBQUosQ0FBU1IsRUFBVCxDQUFiO1VBQ0VrSCxPQUFPO2dCQUNHLEtBREg7O2NBR0MsU0FIRDtlQUlFLFNBSkY7YUFLQSxTQUxBO2NBTUMsU0FORDtnQkFPRztPQVJaOztVQVdJbkcsUUFBSixFQUFjO2FBQ1BBLFFBQUwsR0FBZ0JBLFFBQWhCOzs7VUFHSW9HLFdBQVd0QyxPQUFPdUMsTUFBUCxDQUFjLEVBQUVDLGNBQWNKLFlBQWhCLEVBQWQsRUFBOENDLElBQTlDLENBQWpCOztVQUVJdEcsS0FBS0MsY0FBTCxDQUFvQnlHLFNBQXBCLENBQThCeEYsYUFBbEMsRUFBaUQ7WUFDekNWLFNBQVMsSUFBSVIsS0FBS0MsY0FBVCxDQUF3QlIsTUFBeEIsRUFBZ0M4RyxRQUFoQyxFQUNackYsYUFEWSxDQUNFWCxJQURGLEVBRVpvRyxJQUZZLENBRVA7aUJBQUtDLEVBQUU5RyxJQUFGLENBQU8rRyxXQUFQLE9BQXlCLGNBQTlCO1NBRk8sQ0FBZjtlQUdPckcsU0FBU0EsT0FBT2MsS0FBaEIsR0FBd0IsSUFBL0I7T0FKRixNQUtPOztZQUVDd0YsVUFBVSxJQUFJOUcsS0FBS0MsY0FBVCxDQUF3QlIsTUFBeEIsRUFBZ0M2RyxJQUFoQyxFQUFzQzlHLE1BQXRDLENBQTZDZSxJQUE3QyxDQUFoQjtZQUNFd0csV0FBVyxJQUFJL0csS0FBS0MsY0FBVCxDQUF3QlIsTUFBeEIsRUFBZ0M4RyxRQUFoQyxFQUEwQy9HLE1BQTFDLENBQWlEZSxJQUFqRCxDQURiO1lBRUV5RyxTQUFTRCxTQUFTRSxTQUFULENBQW1CSCxRQUFRekYsTUFBM0IsQ0FGWDtZQUdFNkYsVUFBVUYsT0FBT0csT0FBUCxDQUFlLFFBQWYsRUFBeUIsRUFBekIsQ0FIWjs7ZUFLT0QsT0FBUDs7Ozs7a0NBSWlCdEMsS0ExSXZCLEVBMEk4QjtVQUN0QkEsaUJBQWlCekYsSUFBckIsRUFBMkI7ZUFDbEJ5RixLQUFQO09BREYsTUFFTyxJQUFJbEYsS0FBSzBILFFBQUwsQ0FBY3hDLEtBQWQsQ0FBSixFQUEwQjtZQUN6QnlDLFVBQVV6QyxNQUFNaUMsV0FBTixFQUFoQjtZQUNJUSxZQUFZLE9BQWhCLEVBQXlCLE9BQU85SCxVQUFVK0QsUUFBakIsQ0FBekIsS0FDSyxJQUFJK0QsWUFBWSxLQUFoQixFQUF1QixPQUFPL0UsZ0JBQWdCRSxXQUF2QixDQUF2QixLQUNBLElBQUlaLFNBQVMwRixjQUFULENBQXdCRCxPQUF4QixDQUFKLEVBQXNDLE9BQU8sSUFBSXpGLFFBQUosQ0FBYWdELEtBQWIsQ0FBUCxDQUF0QyxLQUNBLE9BQU90QyxnQkFBZ0JpRixjQUFoQixDQUErQkYsT0FBL0IsS0FBMkM3RCxTQUFTSCxXQUEzRDtPQUxBLE1BTUEsSUFBSTNELEtBQUtvRSxRQUFMLENBQWNjLEtBQWQsQ0FBSixFQUEwQjtlQUN4QnRDLGdCQUFnQmdCLFFBQWhCLENBQXlCc0IsS0FBekIsQ0FBUDtPQURLLE1BRUEsSUFBSSxRQUFPQSxLQUFQLHlDQUFPQSxLQUFQLE9BQWlCLFFBQWpCLElBQTZCQSxNQUFNckMsTUFBdkMsRUFBK0M7OztlQUc3Q3FDLEtBQVA7T0FISyxNQUlBO2VBQ0VwQixTQUFTSCxXQUFoQjs7Ozs7b0NBSW1CeUMsR0E5SnpCLEVBOEo4QjBCLFVBOUo5QixFQThKaUU7VUFBdkJDLGFBQXVCLHVFQUFQLEtBQU87O1VBQ3ZEQyxhQUFhLEVBQW5CO1dBQ0ssSUFBTUMsQ0FBWCxJQUFnQjdCLEdBQWhCLEVBQXFCO1lBQ2ZBLElBQUk4QixjQUFKLENBQW1CRCxDQUFuQixDQUFKLEVBQTJCO2NBQ25CRSxJQUFJL0IsSUFBSTZCLENBQUosQ0FBVjtjQUNJRSxNQUFNLElBQU4sSUFBYyxDQUFDbkksS0FBS0ssV0FBTCxDQUFpQjhILENBQWpCLENBQWYsSUFBc0MsQ0FBQ0MsT0FBT0MsS0FBUCxDQUFhRixDQUFiLENBQTNDLEVBQTREO2dCQUNwREcsU0FBU1IsV0FBV0csQ0FBWCxFQUFjRixhQUFkLENBQWY7Z0JBQ0lPLE1BQUosRUFBWTt5QkFDQ0EsTUFBWCxJQUFxQkgsQ0FBckI7Ozs7O2FBS0RILFVBQVA7Ozs7K0JBR2dCNUIsR0E5S3BCLEVBOEt5QjthQUNkcEcsS0FBS3VJLElBQUwsQ0FBVW5DLEdBQVYsRUFBZSxDQUFDLE1BQUQsRUFBUyxRQUFULEVBQW1CLFFBQW5CLEVBQTZCLGFBQTdCLENBQWYsQ0FBUDs7OztrQ0FHbUJJLElBbEx2QixFQWtMNkI7YUFDbEJBLE9BQU8sRUFBUCxHQUFZLE9BQU9BLElBQW5CLEdBQTBCLE9BQU9BLElBQXhDOzs7Ozs7O2lDQUlrQmdDLFVBdkx0QixFQXVMa0NDLFlBdkxsQyxFQXVMZ0Q7VUFDdENDLFVBQVU1RyxTQUFTMEcsVUFBVCxFQUFxQixFQUFyQixLQUE0QixDQUE1QztVQUNFRyxTQUFTN0csU0FBUzJHLFlBQVQsRUFBdUIsRUFBdkIsS0FBOEIsQ0FEekM7VUFFRUcsZUFBZUYsVUFBVSxDQUFWLEdBQWMsQ0FBQ0MsTUFBZixHQUF3QkEsTUFGekM7YUFHT0QsVUFBVSxFQUFWLEdBQWVFLFlBQXRCOzs7Ozs7QUN4TUo7Ozs7QUFJQSxJQUFhQyxPQUFiOzs7Ozs7OzJCQTBCZ0JsSCxNQTFCaEIsRUEwQndCO2NBQ1pBLE1BQVI7YUFDTyxRQUFMO2lCQUNTa0gsUUFBUUMsWUFBZjthQUNHLE9BQUw7aUJBQ1NELFFBQVFFLFdBQWY7YUFDRyxNQUFMO2lCQUNTRixRQUFRRyxVQUFmOztpQkFFTyxJQUFQOzs7Ozs2QkFnQlVySCxNQW5EbEIsRUFtRDBCO2NBQ2RBLE1BQVI7YUFDTyxRQUFMO2lCQUNTa0gsUUFBUUksY0FBZjthQUNHLE9BQUw7aUJBQ1NKLFFBQVFLLGFBQWY7YUFDRyxNQUFMO2lCQUNTTCxRQUFRTSxZQUFmOztpQkFFTyxJQUFQOzs7Ozt5QkFRTXhILE1BcEVkLEVBb0VzQjthQUNYQSxXQUFXLE9BQVgsR0FBcUIsQ0FBQyxJQUFELEVBQU8sSUFBUCxDQUFyQixHQUFvQyxDQUFDLGVBQUQsRUFBa0IsYUFBbEIsQ0FBM0M7Ozs7MkJBcEVzQjthQUNmLENBQ0wsU0FESyxFQUVMLFVBRkssRUFHTCxPQUhLLEVBSUwsT0FKSyxFQUtMLEtBTEssRUFNTCxNQU5LLEVBT0wsTUFQSyxFQVFMLFFBUkssRUFTTCxXQVRLLEVBVUwsU0FWSyxFQVdMLFVBWEssRUFZTCxVQVpLLENBQVA7Ozs7MkJBZ0J1QjthQUNoQixDQUFDLEtBQUQsRUFBUSxLQUFSLEVBQWUsS0FBZixFQUFzQixLQUF0QixFQUE2QixLQUE3QixFQUFvQyxLQUFwQyxFQUEyQyxLQUEzQyxFQUFrRCxLQUFsRCxFQUF5RCxLQUF6RCxFQUFnRSxLQUFoRSxFQUF1RSxLQUF2RSxFQUE4RSxLQUE5RSxDQUFQOzs7OzJCQUd3QjthQUNqQixDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsR0FBWCxFQUFnQixHQUFoQixFQUFxQixHQUFyQixFQUEwQixHQUExQixFQUErQixHQUEvQixFQUFvQyxHQUFwQyxFQUF5QyxHQUF6QyxFQUE4QyxHQUE5QyxFQUFtRCxHQUFuRCxFQUF3RCxHQUF4RCxDQUFQOzs7OzJCQWdCd0I7YUFDakIsQ0FBQyxRQUFELEVBQVcsU0FBWCxFQUFzQixXQUF0QixFQUFtQyxVQUFuQyxFQUErQyxRQUEvQyxFQUF5RCxVQUF6RCxFQUFxRSxRQUFyRSxDQUFQOzs7OzJCQUd5QjthQUNsQixDQUFDLEtBQUQsRUFBUSxLQUFSLEVBQWUsS0FBZixFQUFzQixLQUF0QixFQUE2QixLQUE3QixFQUFvQyxLQUFwQyxFQUEyQyxLQUEzQyxDQUFQOzs7OzJCQUcwQjthQUNuQixDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsR0FBWCxFQUFnQixHQUFoQixFQUFxQixHQUFyQixFQUEwQixHQUExQixFQUErQixHQUEvQixDQUFQOzs7OzJCQWdCcUI7YUFDZCxDQUFDLElBQUQsRUFBTyxJQUFQLENBQVA7Ozs7OztBQ2pFSixJQUFNeUgsY0FBYyxJQUFJQyxHQUFKLEVBQXBCOztBQUVBLFNBQVNDLGdCQUFULENBQTBCdkosTUFBMUIsRUFBa0N3SixlQUFsQyxFQUFtREMsY0FBbkQsRUFBbUU7TUFDN0RDLE1BQU0xSixVQUFVLElBQUlPLEtBQUtDLGNBQVQsR0FBMEJDLGVBQTFCLEdBQTRDVCxNQUFoRTtRQUNNOEUsTUFBTUMsT0FBTixDQUFjL0UsTUFBZCxJQUF3QkEsTUFBeEIsR0FBaUMsQ0FBQ0EsTUFBRCxDQUF2Qzs7TUFFSXlKLGtCQUFrQkQsZUFBdEIsRUFBdUM7VUFDL0JFLElBQUlDLEdBQUosQ0FBUSxhQUFLO1dBQ1osSUFBTDs7VUFFSUYsY0FBSixFQUFvQjthQUNiLFNBQVNBLGNBQWQ7OztVQUdFRCxlQUFKLEVBQXFCO2FBQ2QsU0FBU0EsZUFBZDs7YUFFS0ksQ0FBUDtLQVZJLENBQU47O1NBYUtGLEdBQVA7OztBQUdGLFNBQVNHLFNBQVQsQ0FBbUJDLENBQW5CLEVBQXNCO01BQ2RDLEtBQUssRUFBWDtPQUNLLElBQUlwSSxJQUFJLENBQWIsRUFBZ0JBLEtBQUssRUFBckIsRUFBeUJBLEdBQXpCLEVBQThCO1FBQ3RCNkQsS0FBS2IsU0FBU3FGLEdBQVQsQ0FBYSxJQUFiLEVBQW1CckksQ0FBbkIsRUFBc0IsQ0FBdEIsQ0FBWDtPQUNHc0ksSUFBSCxDQUFRSCxFQUFFdEUsRUFBRixDQUFSOztTQUVLdUUsRUFBUDs7O0FBR0YsU0FBU0csV0FBVCxDQUFxQkosQ0FBckIsRUFBd0I7TUFDaEJDLEtBQUssRUFBWDtPQUNLLElBQUlwSSxJQUFJLENBQWIsRUFBZ0JBLEtBQUssQ0FBckIsRUFBd0JBLEdBQXhCLEVBQTZCO1FBQ3JCNkQsS0FBS2IsU0FBU3FGLEdBQVQsQ0FBYSxJQUFiLEVBQW1CLEVBQW5CLEVBQXVCLEtBQUtySSxDQUE1QixDQUFYO09BQ0dzSSxJQUFILENBQVFILEVBQUV0RSxFQUFGLENBQVI7O1NBRUt1RSxFQUFQOzs7Ozs7O0FBT0YsSUFBYUksTUFBYjs7OzZCQUNrQkMsSUFEbEIsRUFDd0I7YUFDYkQsT0FBT0UsTUFBUCxDQUFjRCxLQUFLcEssTUFBbkIsRUFBMkJvSyxLQUFLWixlQUFoQyxFQUFpRFksS0FBS1gsY0FBdEQsQ0FBUDs7OzsyQkFHWXpKLE1BTGhCLEVBS3dCd0osZUFMeEIsRUFLeUNDLGNBTHpDLEVBS3lEO1VBQy9DYSxVQUFVdEssVUFBVSxPQUExQjtVQUNFdUssbUJBQW1CZixtQkFBbUIsSUFEeEM7VUFFRWdCLGtCQUFrQmYsa0JBQWtCLElBRnRDO1VBR0VnQixXQUFjSCxPQUFkLFNBQXlCQyxnQkFBekIsU0FBNkNDLGVBSC9DO1VBSUVFLFNBQVNyQixZQUFZc0IsR0FBWixDQUFnQkYsUUFBaEIsQ0FKWDs7VUFNSUMsTUFBSixFQUFZO2VBQ0hBLE1BQVA7T0FERixNQUVPO1lBQ0NFLFFBQVEsSUFBSVQsTUFBSixDQUFXRyxPQUFYLEVBQW9CQyxnQkFBcEIsRUFBc0NDLGVBQXRDLENBQWQ7b0JBQ1lLLEdBQVosQ0FBZ0JKLFFBQWhCLEVBQTBCRyxLQUExQjtlQUNPQSxLQUFQOzs7OztpQ0FJZ0U7cUZBQUosRUFBSTtVQUFoRDVLLE1BQWdELFFBQWhEQSxNQUFnRDtVQUF4Q3dKLGVBQXdDLFFBQXhDQSxlQUF3QztVQUF2QkMsY0FBdUIsUUFBdkJBLGNBQXVCOzthQUMzRFUsT0FBT0UsTUFBUCxDQUFjckssTUFBZCxFQUFzQndKLGVBQXRCLEVBQXVDQyxjQUF2QyxDQUFQOzs7O2tCQUdVekosTUFBWixFQUFvQjhLLFNBQXBCLEVBQStCckIsY0FBL0IsRUFBK0M7OztXQUN0Q3NCLGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsUUFBNUIsRUFBc0MsRUFBRWxKLE9BQU83QixNQUFULEVBQWlCZ0wsWUFBWSxJQUE3QixFQUF0QztXQUNPRCxjQUFQLENBQXNCLElBQXRCLEVBQTRCLGlCQUE1QixFQUErQzthQUN0Q0QsYUFBYSxJQUR5QjtrQkFFakM7S0FGZDtXQUlPQyxjQUFQLENBQXNCLElBQXRCLEVBQTRCLGdCQUE1QixFQUE4QzthQUNyQ3RCLGtCQUFrQixJQURtQjtrQkFFaEM7S0FGZDtXQUlPc0IsY0FBUCxDQUFzQixJQUF0QixFQUE0QixNQUE1QixFQUFvQzthQUMzQnhCLGlCQUFpQixLQUFLdkosTUFBdEIsRUFBOEIsS0FBS3dKLGVBQW5DLEVBQW9ELEtBQUtDLGNBQXpELENBRDJCO2tCQUV0QjtLQUZkOzs7V0FNT3NCLGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsZUFBNUIsRUFBNkM7YUFDcEMsRUFBRWhMLFFBQVEsRUFBVixFQUFja0wsWUFBWSxFQUExQixFQURvQztrQkFFL0I7S0FGZDtXQUlPRixjQUFQLENBQXNCLElBQXRCLEVBQTRCLGFBQTVCLEVBQTJDO2FBQ2xDLEVBQUVoTCxRQUFRLEVBQVYsRUFBY2tMLFlBQVksRUFBMUIsRUFEa0M7a0JBRTdCO0tBRmQ7V0FJT0YsY0FBUCxDQUFzQixJQUF0QixFQUE0QixlQUE1QixFQUE2QzthQUNwQyxJQURvQztrQkFFL0IsS0FGK0I7Z0JBR2pDO0tBSFo7V0FLT0EsY0FBUCxDQUFzQixJQUF0QixFQUE0QixVQUE1QixFQUF3QzthQUMvQixFQUQrQjtrQkFFMUIsS0FGMEI7Z0JBRzVCO0tBSFo7Ozs7O21DQU9hO2FBRVgsQ0FBQyxLQUFLL0ssTUFBTCxLQUFnQixJQUFoQixJQUNDTyxLQUFLQyxjQUFMLENBQW9CLEtBQUtxRyxJQUF6QixFQUNHcEcsZUFESCxHQUVHVCxNQUZILENBRVVrTCxVQUZWLENBRXFCLE9BRnJCLENBREYsS0FJQSxLQUFLMUIsZUFBTCxLQUF5QixJQUp6QixLQUtDLEtBQUtDLGNBQUwsS0FBd0IsSUFBeEIsSUFBZ0MsS0FBS0EsY0FBTCxLQUF3QixNQUx6RCxDQURGOzs7OzBCQVVJMEIsSUF4RVIsRUF3RWM7VUFDTixDQUFDQSxJQUFELElBQVMzRyxPQUFPNEcsbUJBQVAsQ0FBMkJELElBQTNCLEVBQWlDdkosTUFBakMsS0FBNEMsQ0FBekQsRUFBNEQ7ZUFDbkQsSUFBUDtPQURGLE1BRU87ZUFDRXVJLE9BQU9FLE1BQVAsQ0FDTGMsS0FBS25MLE1BQUwsSUFBZSxLQUFLQSxNQURmLEVBRUxtTCxLQUFLM0IsZUFBTCxJQUF3QixLQUFLQSxlQUZ4QixFQUdMMkIsS0FBSzFCLGNBQUwsSUFBdUIsS0FBS0EsY0FIdkIsQ0FBUDs7Ozs7MkJBUUc3SCxNQXBGVCxFQW9GaUM7OztVQUFoQjdCLE1BQWdCLHVFQUFQLEtBQU87O1VBQ3pCLEtBQUtzTCxZQUFMLEVBQUosRUFBeUI7WUFDakJDLFVBQVV4QyxRQUFReUMsTUFBUixDQUFlM0osTUFBZixDQUFoQjtZQUNJMEosT0FBSixFQUFhO2lCQUNKQSxPQUFQOzs7O1VBSUV6RSxPQUFPOUcsU0FBUyxFQUFFNEcsT0FBTy9FLE1BQVQsRUFBaUI0SixLQUFLLFNBQXRCLEVBQVQsR0FBNkMsRUFBRTdFLE9BQU8vRSxNQUFULEVBQTFEO1VBQ0U2SixZQUFZMUwsU0FBUyxRQUFULEdBQW9CLFlBRGxDO1VBRUksQ0FBQyxLQUFLMkwsV0FBTCxDQUFpQkQsU0FBakIsRUFBNEI3SixNQUE1QixDQUFMLEVBQTBDO2FBQ25DOEosV0FBTCxDQUFpQkQsU0FBakIsRUFBNEI3SixNQUE1QixJQUFzQ2lJLFVBQVU7aUJBQU0sTUFBSzhCLE9BQUwsQ0FBYW5HLEVBQWIsRUFBaUJxQixJQUFqQixFQUF1QixPQUF2QixDQUFOO1NBQVYsQ0FBdEM7O2FBRUssS0FBSzZFLFdBQUwsQ0FBaUJELFNBQWpCLEVBQTRCN0osTUFBNUIsQ0FBUDs7Ozs2QkFHT0EsTUFwR1gsRUFvR21DOzs7VUFBaEI3QixNQUFnQix1RUFBUCxLQUFPOztVQUMzQixLQUFLc0wsWUFBTCxFQUFKLEVBQXlCO1lBQ2pCQyxVQUFVeEMsUUFBUThDLFFBQVIsQ0FBaUJoSyxNQUFqQixDQUFoQjtZQUNJMEosT0FBSixFQUFhO2lCQUNKQSxPQUFQOzs7O1VBSUV6RSxPQUFPOUcsU0FDUCxFQUFFOEwsU0FBU2pLLE1BQVgsRUFBbUI2RSxNQUFNLFNBQXpCLEVBQW9DRSxPQUFPLE1BQTNDLEVBQW1ENkUsS0FBSyxTQUF4RCxFQURPLEdBRVAsRUFBRUssU0FBU2pLLE1BQVgsRUFGTjtVQUdFNkosWUFBWTFMLFNBQVMsUUFBVCxHQUFvQixZQUhsQztVQUlJLENBQUMsS0FBSytMLGFBQUwsQ0FBbUJMLFNBQW5CLEVBQThCN0osTUFBOUIsQ0FBTCxFQUE0QzthQUNyQ2tLLGFBQUwsQ0FBbUJMLFNBQW5CLEVBQThCN0osTUFBOUIsSUFBd0NzSSxZQUFZO2lCQUFNLE9BQUt5QixPQUFMLENBQWFuRyxFQUFiLEVBQWlCcUIsSUFBakIsRUFBdUIsU0FBdkIsQ0FBTjtTQUFaLENBQXhDOzthQUVLLEtBQUtpRixhQUFMLENBQW1CTCxTQUFuQixFQUE4QjdKLE1BQTlCLENBQVA7Ozs7Z0NBR1U7OztVQUNOLEtBQUt5SixZQUFMLEVBQUosRUFBeUI7ZUFDaEJ2QyxRQUFRaUQsU0FBZjs7Ozs7VUFLRSxDQUFDLEtBQUtDLGFBQVYsRUFBeUI7WUFDakJuRixPQUFPLEVBQUVvRixNQUFNLFNBQVIsRUFBbUJDLFFBQVEsSUFBM0IsRUFBYjthQUNLRixhQUFMLEdBQXFCLENBQUNySCxTQUFTcUYsR0FBVCxDQUFhLElBQWIsRUFBbUIsRUFBbkIsRUFBdUIsRUFBdkIsRUFBMkIsQ0FBM0IsQ0FBRCxFQUFnQ3JGLFNBQVNxRixHQUFULENBQWEsSUFBYixFQUFtQixFQUFuQixFQUF1QixFQUF2QixFQUEyQixFQUEzQixDQUFoQyxFQUFnRUwsR0FBaEUsQ0FBb0U7aUJBQ3ZGLE9BQUtnQyxPQUFMLENBQWFuRyxFQUFiLEVBQWlCcUIsSUFBakIsRUFBdUIsV0FBdkIsQ0FEdUY7U0FBcEUsQ0FBckI7OzthQUtLLEtBQUttRixhQUFaOzs7O3lCQUdHcEssTUF2SVAsRUF1SWU7OztVQUNQLEtBQUt5SixZQUFMLEVBQUosRUFBeUI7ZUFDaEJ2QyxRQUFRcUQsSUFBUixDQUFhdkssTUFBYixDQUFQOzs7VUFHSWlGLE9BQU8sRUFBRXVGLEtBQUt4SyxNQUFQLEVBQWI7Ozs7VUFJSSxDQUFDLEtBQUt5SyxRQUFMLENBQWN6SyxNQUFkLENBQUwsRUFBNEI7YUFDckJ5SyxRQUFMLENBQWN6SyxNQUFkLElBQXdCLENBQUMrQyxTQUFTcUYsR0FBVCxDQUFhLENBQUMsRUFBZCxFQUFrQixDQUFsQixFQUFxQixDQUFyQixDQUFELEVBQTBCckYsU0FBU3FGLEdBQVQsQ0FBYSxJQUFiLEVBQW1CLENBQW5CLEVBQXNCLENBQXRCLENBQTFCLEVBQW9ETCxHQUFwRCxDQUF3RDtpQkFDOUUsT0FBS2dDLE9BQUwsQ0FBYW5HLEVBQWIsRUFBaUJxQixJQUFqQixFQUF1QixLQUF2QixDQUQ4RTtTQUF4RCxDQUF4Qjs7O2FBS0ssS0FBS3dGLFFBQUwsQ0FBY3pLLE1BQWQsQ0FBUDs7Ozs0QkFHTTRELEVBekpWLEVBeUpjOEcsUUF6SmQsRUF5SndCQyxLQXpKeEIsRUF5SitCO3lCQUNYLEtBQUtDLFdBQUwsQ0FBaUJoSCxFQUFqQixFQUFxQjhHLFFBQXJCLENBRFc7O1VBQ3BCRyxFQURvQjtVQUNoQkMsQ0FEZ0I7VUFFekJDLE9BRnlCLEdBRWZGLEdBQUdoTCxhQUFILENBQWlCaUwsQ0FBakIsQ0FGZTtVQUd6QkUsUUFIeUIsR0FHZEQsUUFBUXpGLElBQVIsQ0FBYTtlQUFLQyxFQUFFOUcsSUFBRixDQUFPK0csV0FBUCxPQUF5Qm1GLEtBQTlCO09BQWIsQ0FIYzs7YUFLcEJLLFdBQVdBLFNBQVMvSyxLQUFwQixHQUE0QixJQUFuQzs7OztzQ0FHd0M7VUFBMUJ1SSxJQUEwQix1RUFBbkIsRUFBbUI7VUFBZmtDLFFBQWUsdUVBQUosRUFBSTs7VUFDbENPLGVBQWVySSxPQUFPdUMsTUFBUCxDQUFjLEVBQUUrRixhQUFhLEtBQWYsRUFBZCxFQUFzQ1IsUUFBdEMsQ0FBckI7O1VBRUlsQyxLQUFLMkMsS0FBTCxHQUFhLENBQWpCLEVBQW9CO3FCQUNMQyxvQkFBYixHQUFvQzVDLEtBQUsyQyxLQUF6Qzs7O1VBR0UzQyxLQUFLNkMsS0FBVCxFQUFnQjtxQkFDREMscUJBQWIsR0FBcUMsQ0FBckM7OzthQUdLLElBQUkzTSxLQUFLNE0sWUFBVCxDQUFzQixLQUFLdEcsSUFBM0IsRUFBaUNnRyxZQUFqQyxDQUFQOzs7O2dDQUdVckgsRUEvS2QsRUErS2lDO1VBQWY4RyxRQUFlLHVFQUFKLEVBQUk7O1VBQ3pCSSxVQUFKO1VBQU96SSxVQUFQOztVQUVJdUIsR0FBR3ZELElBQUgsQ0FBUW1MLFNBQVosRUFBdUI7Ozs7WUFJakJuTixLQUFLb04sT0FBTCxDQUFhN0gsRUFBYixDQUFKO1lBQ0ksS0FBSjtPQUxGLE1BTU8sSUFBSUEsR0FBR3ZELElBQUgsQ0FBUTVCLElBQVIsS0FBaUIsT0FBckIsRUFBOEI7WUFDL0JtRixHQUFHOEgsUUFBSCxFQUFKO09BREssTUFFQTtZQUNEOUgsR0FBRzhILFFBQUgsRUFBSjtZQUNJOUgsR0FBR3ZELElBQUgsQ0FBUUssSUFBWjs7O1VBR0l1SyxlQUFlckksT0FBT3VDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCdUYsUUFBbEIsQ0FBckI7VUFDSXJJLENBQUosRUFBTztxQkFDUXZELFFBQWIsR0FBd0J1RCxDQUF4Qjs7O2FBR0ssQ0FBQyxJQUFJMUQsS0FBS0MsY0FBVCxDQUF3QixLQUFLcUcsSUFBN0IsRUFBbUNnRyxZQUFuQyxDQUFELEVBQW1ESCxDQUFuRCxDQUFQOzs7OzJCQUdLYSxLQXZNVCxFQXVNZ0I7YUFFVixLQUFLdk4sTUFBTCxLQUFnQnVOLE1BQU12TixNQUF0QixJQUNBLEtBQUt3SixlQUFMLEtBQXlCK0QsTUFBTS9ELGVBRC9CLElBRUEsS0FBS0MsY0FBTCxLQUF3QjhELE1BQU05RCxjQUhoQzs7Ozs7O0FDdFBKLFNBQVMrRCxlQUFULENBQXlCQyxNQUF6QixFQUFpQ0MsYUFBakMsRUFBZ0Q7TUFDMUN0TCxJQUFJLEVBQVI7Ozs7Ozt5QkFDb0JxTCxNQUFwQiw4SEFBNEI7VUFBakJFLEtBQWlCOztVQUN0QkEsTUFBTUMsT0FBVixFQUFtQjthQUNaRCxNQUFNRSxHQUFYO09BREYsTUFFTzthQUNBSCxjQUFjQyxNQUFNRSxHQUFwQixDQUFMOzs7Ozs7Ozs7Ozs7Ozs7Ozs7U0FHR3pMLENBQVA7Ozs7Ozs7QUFPRixJQUFhMEwsU0FBYjs7OzJCQUNnQjlOLE1BRGhCLEVBQ21DO1VBQVhvSyxJQUFXLHVFQUFKLEVBQUk7O1VBQ3pCMkQsYUFBYXZKLE9BQU91QyxNQUFQLENBQWMsRUFBZCxFQUFrQixFQUFFa0csT0FBTyxJQUFULEVBQWxCLEVBQW1DN0MsSUFBbkMsQ0FBbkI7YUFDTyxJQUFJMEQsU0FBSixDQUFjOU4sTUFBZCxFQUFzQitOLFVBQXRCLENBQVA7Ozs7Z0NBR2lCQyxHQU5yQixFQU0wQjtVQUNsQkMsVUFBVSxJQUFkO1VBQ0VDLGNBQWMsRUFEaEI7VUFFRUMsWUFBWSxLQUZkO1VBR01WLFNBQVMsRUFBZjtXQUNLLElBQUk5TCxJQUFJLENBQWIsRUFBZ0JBLElBQUlxTSxJQUFJcE0sTUFBeEIsRUFBZ0NELEdBQWhDLEVBQXFDO1lBQzdCeU0sSUFBSUosSUFBSUssTUFBSixDQUFXMU0sQ0FBWCxDQUFWO1lBQ0l5TSxNQUFNLEdBQVYsRUFBZTtjQUNURixZQUFZdE0sTUFBWixHQUFxQixDQUF6QixFQUE0QjttQkFDbkJxSSxJQUFQLENBQVksRUFBRTJELFNBQVNPLFNBQVgsRUFBc0JOLEtBQUtLLFdBQTNCLEVBQVo7O29CQUVRLElBQVY7d0JBQ2MsRUFBZDtzQkFDWSxDQUFDQyxTQUFiO1NBTkYsTUFPTyxJQUFJQSxTQUFKLEVBQWU7eUJBQ0xDLENBQWY7U0FESyxNQUVBLElBQUlBLE1BQU1ILE9BQVYsRUFBbUI7eUJBQ1RHLENBQWY7U0FESyxNQUVBO2NBQ0RGLFlBQVl0TSxNQUFaLEdBQXFCLENBQXpCLEVBQTRCO21CQUNuQnFJLElBQVAsQ0FBWSxFQUFFMkQsU0FBUyxLQUFYLEVBQWtCQyxLQUFLSyxXQUF2QixFQUFaOzt3QkFFWUUsQ0FBZDtvQkFDVUEsQ0FBVjs7OztVQUlBRixZQUFZdE0sTUFBWixHQUFxQixDQUF6QixFQUE0QjtlQUNuQnFJLElBQVAsQ0FBWSxFQUFFMkQsU0FBU08sU0FBWCxFQUFzQk4sS0FBS0ssV0FBM0IsRUFBWjs7O2FBR0tULE1BQVA7Ozs7cUJBR1V6TixNQUFaLEVBQW9CK04sVUFBcEIsRUFBZ0M7OztTQUN6QjNELElBQUwsR0FBWTJELFVBQVo7U0FDS3JFLEdBQUwsR0FBVzFKLE1BQVg7Ozs7O21DQUdhd0YsRUE3Q2pCLEVBNkNnQztVQUFYNEUsSUFBVyx1RUFBSixFQUFJOzs2QkFDWixLQUFLVixHQUFMLENBQVM4QyxXQUFULENBQXFCaEgsRUFBckIsRUFBeUJoQixPQUFPdUMsTUFBUCxDQUFjLEVBQWQsRUFBa0IsS0FBS3FELElBQXZCLEVBQTZCQSxJQUE3QixDQUF6QixDQURZOztVQUNyQnFDLEVBRHFCO1VBQ2pCQyxDQURpQjs7YUFFckJELEdBQUcxTSxNQUFILENBQVUyTSxDQUFWLENBQVA7Ozs7d0NBR2tCbEgsRUFsRHRCLEVBa0RxQztVQUFYNEUsSUFBVyx1RUFBSixFQUFJOzs4QkFDakIsS0FBS1YsR0FBTCxDQUFTOEMsV0FBVCxDQUFxQmhILEVBQXJCLEVBQXlCaEIsT0FBT3VDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCLEtBQUtxRCxJQUF2QixFQUE2QkEsSUFBN0IsQ0FBekIsQ0FEaUI7O1VBQzFCcUMsRUFEMEI7VUFDdEJDLENBRHNCOzthQUUxQkQsR0FBRzFNLE1BQUgsQ0FBVTJNLENBQVYsQ0FBUDs7OztvQ0FHY2xILEVBdkRsQixFQXVEaUM7VUFBWDRFLElBQVcsdUVBQUosRUFBSTs7OEJBQ2IsS0FBS1YsR0FBTCxDQUFTOEMsV0FBVCxDQUFxQmhILEVBQXJCLEVBQXlCaEIsT0FBT3VDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCLEtBQUtxRCxJQUF2QixFQUE2QkEsSUFBN0IsQ0FBekIsQ0FEYTs7VUFDdEJxQyxFQURzQjtVQUNsQkMsQ0FEa0I7O2FBRXRCRCxHQUFHaE0sZUFBSCxDQUFtQmlNLENBQW5CLENBQVA7Ozs7d0JBR0UxSSxDQTVETixFQTREZ0I7VUFBUHNLLENBQU8sdUVBQUgsQ0FBRzs7VUFDTmxFLE9BQU81RixPQUFPdUMsTUFBUCxDQUFjLEVBQWQsRUFBa0IsS0FBS3FELElBQXZCLENBQWI7O1VBRUlrRSxJQUFJLENBQVIsRUFBVzthQUNKdkIsS0FBTCxHQUFhdUIsQ0FBYjs7O2FBR0ssS0FBSzVFLEdBQUwsQ0FBUzZFLGVBQVQsQ0FBeUJuRSxJQUF6QixFQUErQnJLLE1BQS9CLENBQXNDaUUsQ0FBdEMsQ0FBUDs7Ozs2Q0FHdUJ3QixFQXRFM0IsRUFzRStCd0ksR0F0RS9CLEVBc0VvQzs7O1VBQzFCUSxTQUFTLFNBQVRBLE1BQVMsQ0FBQ3BFLElBQUQsRUFBT3VCLE9BQVA7ZUFBbUIsTUFBS2pDLEdBQUwsQ0FBU2lDLE9BQVQsQ0FBaUJuRyxFQUFqQixFQUFxQjRFLElBQXJCLEVBQTJCdUIsT0FBM0IsQ0FBbkI7T0FBZjtVQUNFOEMsZUFBZSxTQUFmQSxZQUFlLE9BQVE7WUFDakJqSixHQUFHa0osYUFBSCxJQUFvQmxKLEdBQUcxQyxNQUFILEtBQWMsQ0FBbEMsSUFBdUNzSCxLQUFLdUUsTUFBaEQsRUFBd0Q7aUJBQy9DLEdBQVA7OztZQUdJeEwsUUFBUWxELEtBQUsyTyxVQUFMLENBQWdCcEosR0FBRzFDLE1BQUgsR0FBWSxFQUE1QixDQUFkO1lBQ0VNLFVBQVVDLEtBQUtDLEdBQUwsQ0FBU2tDLEdBQUcxQyxNQUFILEdBQVksRUFBckIsQ0FEWjtZQUVFUyxPQUFPSixTQUFTLENBQVQsR0FBYSxHQUFiLEdBQW1CLEdBRjVCO1lBR0VLLFlBQVVELElBQVYsR0FBaUJGLEtBQUtDLEdBQUwsQ0FBU0gsS0FBVCxDQUhuQjs7Z0JBS1FpSCxLQUFLckssTUFBYjtlQUNPLE9BQUw7d0JBQ1l3RCxJQUFWLEdBQWlCLE1BQUtzTCxHQUFMLENBQVN4TCxLQUFLQyxHQUFMLENBQVNILEtBQVQsQ0FBVCxFQUEwQixDQUExQixDQUFqQixTQUFpRCxNQUFLMEwsR0FBTCxDQUFTekwsT0FBVCxFQUFrQixDQUFsQixDQUFqRDtlQUNHLFFBQUw7bUJBQ1NBLFVBQVUsQ0FBVixHQUFpQkksSUFBakIsU0FBeUJKLE9BQXpCLEdBQXFDSSxJQUE1QztlQUNHLFFBQUw7d0JBQ1lELElBQVYsR0FBaUIsTUFBS3NMLEdBQUwsQ0FBU3hMLEtBQUtDLEdBQUwsQ0FBU0gsS0FBVCxDQUFULEVBQTBCLENBQTFCLENBQWpCLEdBQWdELE1BQUswTCxHQUFMLENBQVN6TCxPQUFULEVBQWtCLENBQWxCLENBQWhEOztrQkFFTSxJQUFJMEwsVUFBSixtQkFBK0IxRSxLQUFLckssTUFBcEMsMENBQU47O09BbkJSO1VBc0JFMk4sZ0JBQWdCLFNBQWhCQSxhQUFnQixRQUFTO1lBQ2pCcUIsWUFBWSxNQUFLckYsR0FBTCxDQUFTRCxjQUEzQjs7O2dCQUdRa0UsS0FBUjs7ZUFFTyxHQUFMO21CQUNTLE1BQUtrQixHQUFMLENBQVNySixHQUFHd0osV0FBWixDQUFQO2VBQ0csS0FBTDttQkFDUyxNQUFLSCxHQUFMLENBQVNySixHQUFHd0osV0FBWixFQUF5QixDQUF6QixDQUFQOztlQUVHLEdBQUw7bUJBQ1MsTUFBS0gsR0FBTCxDQUFTckosR0FBR3lKLE1BQVosQ0FBUDtlQUNHLElBQUw7bUJBQ1MsTUFBS0osR0FBTCxDQUFTckosR0FBR3lKLE1BQVosRUFBb0IsQ0FBcEIsQ0FBUDs7ZUFFRyxHQUFMO21CQUNTLE1BQUtKLEdBQUwsQ0FBU3JKLEdBQUcwSixNQUFaLENBQVA7ZUFDRyxJQUFMO21CQUNTLE1BQUtMLEdBQUwsQ0FBU3JKLEdBQUcwSixNQUFaLEVBQW9CLENBQXBCLENBQVA7O2VBRUcsR0FBTDttQkFDUyxNQUFLTCxHQUFMLENBQVNySixHQUFHeUcsSUFBSCxLQUFZLEVBQVosR0FBaUIsRUFBakIsR0FBc0J6RyxHQUFHeUcsSUFBSCxHQUFVLEVBQXpDLENBQVA7ZUFDRyxJQUFMO21CQUNTLE1BQUs0QyxHQUFMLENBQVNySixHQUFHeUcsSUFBSCxLQUFZLEVBQVosR0FBaUIsRUFBakIsR0FBc0J6RyxHQUFHeUcsSUFBSCxHQUFVLEVBQXpDLEVBQTZDLENBQTdDLENBQVA7ZUFDRyxHQUFMO21CQUNTLE1BQUs0QyxHQUFMLENBQVNySixHQUFHeUcsSUFBWixDQUFQO2VBQ0csSUFBTDttQkFDUyxNQUFLNEMsR0FBTCxDQUFTckosR0FBR3lHLElBQVosRUFBa0IsQ0FBbEIsQ0FBUDs7ZUFFRyxHQUFMOzttQkFFU3dDLGFBQWEsRUFBRTFPLFFBQVEsUUFBVixFQUFvQjRPLFFBQVEsSUFBNUIsRUFBYixDQUFQO2VBQ0csSUFBTDs7bUJBRVNGLGFBQWEsRUFBRTFPLFFBQVEsT0FBVixFQUFtQjRPLFFBQVEsSUFBM0IsRUFBYixDQUFQO2VBQ0csS0FBTDs7bUJBRVNGLGFBQWEsRUFBRTFPLFFBQVEsUUFBVixFQUFvQjRPLFFBQVEsS0FBNUIsRUFBYixDQUFQO2VBQ0csTUFBTDs7bUJBRVNuSixHQUFHMkosZUFBVjtlQUNHLE9BQUw7O21CQUVTM0osR0FBRzRKLGNBQVY7O2VBRUcsR0FBTDttQkFDUzVKLEdBQUdqRCxRQUFWOzs7ZUFHRyxHQUFMO21CQUNTaU0sT0FBTyxFQUFFdkMsTUFBTSxTQUFSLEVBQW1CQyxRQUFRLElBQTNCLEVBQVAsRUFBMEMsV0FBMUMsQ0FBUDs7ZUFFRyxHQUFMO21CQUNTNkMsWUFBWVAsT0FBTyxFQUFFaEQsS0FBSyxTQUFQLEVBQVAsRUFBMkIsS0FBM0IsQ0FBWixHQUFnRCxNQUFLcUQsR0FBTCxDQUFTckosR0FBR2dHLEdBQVosQ0FBdkQ7ZUFDRyxJQUFMO21CQUNTdUQsWUFBWVAsT0FBTyxFQUFFaEQsS0FBSyxTQUFQLEVBQVAsRUFBMkIsS0FBM0IsQ0FBWixHQUFnRCxNQUFLcUQsR0FBTCxDQUFTckosR0FBR2dHLEdBQVosRUFBaUIsQ0FBakIsQ0FBdkQ7O2VBRUcsR0FBTDs7bUJBRVMsTUFBS3FELEdBQUwsQ0FBU3JKLEdBQUdxRyxPQUFaLENBQVA7ZUFDRyxLQUFMOzttQkFFUzJDLE9BQU8sRUFBRTNDLFNBQVMsT0FBWCxFQUFQLEVBQTZCLFNBQTdCLENBQVA7ZUFDRyxNQUFMOzttQkFFUzJDLE9BQU8sRUFBRTNDLFNBQVMsTUFBWCxFQUFQLEVBQTRCLFNBQTVCLENBQVA7ZUFDRyxPQUFMOzttQkFFUzJDLE9BQU8sRUFBRTNDLFNBQVMsUUFBWCxFQUFQLEVBQThCLFNBQTlCLENBQVA7O2VBRUcsR0FBTDs7bUJBRVMsTUFBS2dELEdBQUwsQ0FBU3JKLEdBQUdxRyxPQUFaLENBQVA7ZUFDRyxLQUFMOzttQkFFUzJDLE9BQU8sRUFBRTNDLFNBQVMsT0FBWCxFQUFvQmxGLE9BQU8sTUFBM0IsRUFBbUM2RSxLQUFLLFNBQXhDLEVBQVAsRUFBNEQsU0FBNUQsQ0FBUDtlQUNHLE1BQUw7O21CQUVTZ0QsT0FBTyxFQUFFM0MsU0FBUyxNQUFYLEVBQW1CbEYsT0FBTyxNQUExQixFQUFrQzZFLEtBQUssU0FBdkMsRUFBUCxFQUEyRCxTQUEzRCxDQUFQO2VBQ0csT0FBTDs7bUJBRVNnRCxPQUFPLEVBQUUzQyxTQUFTLFFBQVgsRUFBcUJsRixPQUFPLE1BQTVCLEVBQW9DNkUsS0FBSyxTQUF6QyxFQUFQLEVBQTZELFNBQTdELENBQVA7O2VBRUcsR0FBTDs7bUJBRVNnRCxPQUFPLEVBQUU3SCxPQUFPLFNBQVQsRUFBb0I2RSxLQUFLLFNBQXpCLEVBQVAsRUFBNkMsT0FBN0MsQ0FBUDtlQUNHLElBQUw7O21CQUVTZ0QsT0FBTyxFQUFFN0gsT0FBTyxTQUFULEVBQW9CNkUsS0FBSyxTQUF6QixFQUFQLEVBQTZDLE9BQTdDLENBQVA7ZUFDRyxLQUFMOzttQkFFU2dELE9BQU8sRUFBRTdILE9BQU8sT0FBVCxFQUFrQjZFLEtBQUssU0FBdkIsRUFBUCxFQUEyQyxPQUEzQyxDQUFQO2VBQ0csTUFBTDs7bUJBRVNnRCxPQUFPLEVBQUU3SCxPQUFPLE1BQVQsRUFBUCxFQUEwQixPQUExQixDQUFQO2VBQ0csT0FBTDs7bUJBRVM2SCxPQUFPLEVBQUU3SCxPQUFPLFFBQVQsRUFBUCxFQUE0QixPQUE1QixDQUFQOztlQUVHLEdBQUw7O21CQUVTb0ksWUFBWVAsT0FBTyxFQUFFN0gsT0FBTyxTQUFULEVBQVAsRUFBNkIsT0FBN0IsQ0FBWixHQUFvRCxNQUFLa0ksR0FBTCxDQUFTckosR0FBR21CLEtBQVosQ0FBM0Q7ZUFDRyxJQUFMOzttQkFFU29JLFlBQVlQLE9BQU8sRUFBRTdILE9BQU8sU0FBVCxFQUFQLEVBQTZCLE9BQTdCLENBQVosR0FBb0QsTUFBS2tJLEdBQUwsQ0FBU3JKLEdBQUdtQixLQUFaLEVBQW1CLENBQW5CLENBQTNEO2VBQ0csS0FBTDs7bUJBRVM2SCxPQUFPLEVBQUU3SCxPQUFPLE9BQVQsRUFBa0I2RSxLQUFLLFNBQXZCLEVBQVAsRUFBMkMsT0FBM0MsQ0FBUDtlQUNHLE1BQUw7O21CQUVTZ0QsT0FBTyxFQUFFN0gsT0FBTyxNQUFULEVBQWlCNkUsS0FBSyxTQUF0QixFQUFQLEVBQTBDLE9BQTFDLENBQVA7ZUFDRyxPQUFMOzttQkFFU2dELE9BQU8sRUFBRTdILE9BQU8sUUFBVCxFQUFQLEVBQTRCLE9BQTVCLENBQVA7O2VBRUcsR0FBTDs7bUJBRVNvSSxZQUFZUCxPQUFPLEVBQUUvSCxNQUFNLFNBQVIsRUFBUCxFQUE0QixNQUE1QixDQUFaLEdBQWtELE1BQUtvSSxHQUFMLENBQVNySixHQUFHaUIsSUFBWixDQUF6RDtlQUNHLElBQUw7O21CQUVTc0ksWUFDSFAsT0FBTyxFQUFFL0gsTUFBTSxTQUFSLEVBQVAsRUFBNEIsTUFBNUIsQ0FERyxHQUVILE1BQUtvSSxHQUFMLENBQVNySixHQUFHaUIsSUFBSCxDQUFRNEksUUFBUixHQUFtQmhLLEtBQW5CLENBQXlCLENBQUMsQ0FBMUIsQ0FBVCxFQUF1QyxDQUF2QyxDQUZKO2VBR0csTUFBTDs7bUJBRVMwSixZQUFZUCxPQUFPLEVBQUUvSCxNQUFNLFNBQVIsRUFBUCxFQUE0QixNQUE1QixDQUFaLEdBQWtELE1BQUtvSSxHQUFMLENBQVNySixHQUFHaUIsSUFBWixFQUFrQixDQUFsQixDQUF6RDs7ZUFFRyxHQUFMOzttQkFFUytILE9BQU8sRUFBRXBDLEtBQUssT0FBUCxFQUFQLEVBQXlCLEtBQXpCLENBQVA7ZUFDRyxJQUFMOzttQkFFU29DLE9BQU8sRUFBRXBDLEtBQUssTUFBUCxFQUFQLEVBQXdCLEtBQXhCLENBQVA7ZUFDRyxPQUFMO21CQUNTb0MsT0FBTyxFQUFFcEMsS0FBSyxRQUFQLEVBQVAsRUFBMEIsS0FBMUIsQ0FBUDtlQUNHLElBQUw7bUJBQ1MsTUFBS3lDLEdBQUwsQ0FBU3JKLEdBQUc4SixRQUFILENBQVlELFFBQVosR0FBdUJoSyxLQUF2QixDQUE2QixDQUFDLENBQTlCLENBQVQsRUFBMkMsQ0FBM0MsQ0FBUDtlQUNHLE1BQUw7bUJBQ1MsTUFBS3dKLEdBQUwsQ0FBU3JKLEdBQUc4SixRQUFaLEVBQXNCLENBQXRCLENBQVA7ZUFDRyxHQUFMO21CQUNTLE1BQUtULEdBQUwsQ0FBU3JKLEdBQUcrSixVQUFaLENBQVA7ZUFDRyxJQUFMO21CQUNTLE1BQUtWLEdBQUwsQ0FBU3JKLEdBQUcrSixVQUFaLEVBQXdCLENBQXhCLENBQVA7ZUFDRyxHQUFMO21CQUNTLE1BQUtWLEdBQUwsQ0FBU3JKLEdBQUdnSyxPQUFaLENBQVA7ZUFDRyxLQUFMO21CQUNTLE1BQUtYLEdBQUwsQ0FBU3JKLEdBQUdnSyxPQUFaLEVBQXFCLENBQXJCLENBQVA7O2VBRUcsR0FBTDttQkFDUyxNQUFLQyxjQUFMLENBQW9CakssRUFBcEIsRUFBd0JiLFNBQVMrSyxVQUFqQyxDQUFQO2VBQ0csSUFBTDttQkFDUyxNQUFLRCxjQUFMLENBQW9CakssRUFBcEIsRUFBd0JiLFNBQVNnTCxRQUFqQyxDQUFQO2VBQ0csS0FBTDttQkFDUyxNQUFLRixjQUFMLENBQW9CakssRUFBcEIsRUFBd0JiLFNBQVNpTCxTQUFqQyxDQUFQO2VBQ0csTUFBTDttQkFDUyxNQUFLSCxjQUFMLENBQW9CakssRUFBcEIsRUFBd0JiLFNBQVNrTCxTQUFqQyxDQUFQO2VBQ0csR0FBTDttQkFDUyxNQUFLSixjQUFMLENBQW9CakssRUFBcEIsRUFBd0JiLFNBQVNtTCxXQUFqQyxDQUFQO2VBQ0csSUFBTDttQkFDUyxNQUFLTCxjQUFMLENBQW9CakssRUFBcEIsRUFBd0JiLFNBQVNvTCxpQkFBakMsQ0FBUDtlQUNHLEtBQUw7bUJBQ1MsTUFBS04sY0FBTCxDQUFvQmpLLEVBQXBCLEVBQXdCYixTQUFTcUwsc0JBQWpDLENBQVA7ZUFDRyxNQUFMO21CQUNTLE1BQUtQLGNBQUwsQ0FBb0JqSyxFQUFwQixFQUF3QmIsU0FBU3NMLHFCQUFqQyxDQUFQO2VBQ0csR0FBTDttQkFDUyxNQUFLUixjQUFMLENBQW9CakssRUFBcEIsRUFBd0JiLFNBQVN1TCxjQUFqQyxDQUFQO2VBQ0csSUFBTDttQkFDUyxNQUFLVCxjQUFMLENBQW9CakssRUFBcEIsRUFBd0JiLFNBQVN3TCxvQkFBakMsQ0FBUDtlQUNHLEtBQUw7bUJBQ1MsTUFBS1YsY0FBTCxDQUFvQmpLLEVBQXBCLEVBQXdCYixTQUFTeUwseUJBQWpDLENBQVA7ZUFDRyxNQUFMO21CQUNTLE1BQUtYLGNBQUwsQ0FBb0JqSyxFQUFwQixFQUF3QmIsU0FBUzBMLHdCQUFqQyxDQUFQO2VBQ0csR0FBTDttQkFDUyxNQUFLWixjQUFMLENBQW9CakssRUFBcEIsRUFBd0JiLFNBQVMyTCxjQUFqQyxDQUFQO2VBQ0csSUFBTDttQkFDUyxNQUFLYixjQUFMLENBQW9CakssRUFBcEIsRUFBd0JiLFNBQVM0TCxZQUFqQyxDQUFQO2VBQ0csS0FBTDttQkFDUyxNQUFLZCxjQUFMLENBQW9CakssRUFBcEIsRUFBd0JiLFNBQVM2TCxhQUFqQyxDQUFQO2VBQ0csTUFBTDttQkFDUyxNQUFLZixjQUFMLENBQW9CakssRUFBcEIsRUFBd0JiLFNBQVM4TCxhQUFqQyxDQUFQO2VBQ0csR0FBTDttQkFDUyxNQUFLaEIsY0FBTCxDQUFvQmpLLEVBQXBCLEVBQXdCYixTQUFTK0wsMkJBQWpDLENBQVA7ZUFDRyxJQUFMO21CQUNTLE1BQUtqQixjQUFMLENBQW9CakssRUFBcEIsRUFBd0JiLFNBQVNnTSx5QkFBakMsQ0FBUDtlQUNHLEtBQUw7bUJBQ1MsTUFBS2xCLGNBQUwsQ0FBb0JqSyxFQUFwQixFQUF3QmIsU0FBU2lNLDBCQUFqQyxDQUFQO2VBQ0csTUFBTDttQkFDUyxNQUFLbkIsY0FBTCxDQUFvQmpLLEVBQXBCLEVBQXdCYixTQUFTa00sMEJBQWpDLENBQVA7OzttQkFHT2xELEtBQVA7O09Bck5SOzthQXlOT0gsZ0JBQWdCTSxVQUFVZ0QsV0FBVixDQUFzQjlDLEdBQXRCLENBQWhCLEVBQTRDTixhQUE1QyxDQUFQOzs7O3FDQUdlOzs7NkNBRVFxRCxHQXJTM0IsRUFxU2dDL0MsR0FyU2hDLEVBcVNxQzs7O1VBQzNCZ0QsZUFBZSxTQUFmQSxZQUFlLFFBQVM7Z0JBQ2xCckQsTUFBTSxDQUFOLENBQVI7ZUFDTyxHQUFMO21CQUNTLGFBQVA7ZUFDRyxHQUFMO21CQUNTLFFBQVA7ZUFDRyxHQUFMO21CQUNTLFFBQVA7ZUFDRyxHQUFMO21CQUNTLE1BQVA7ZUFDRyxHQUFMO21CQUNTLEtBQVA7ZUFDRyxHQUFMO21CQUNTLE9BQVA7ZUFDRyxHQUFMO21CQUNTLE1BQVA7O21CQUVPLElBQVA7O09BakJSO1VBb0JFRCxnQkFBZ0IsU0FBaEJBLGFBQWdCO2VBQVUsaUJBQVM7Y0FDM0JuRixTQUFTeUksYUFBYXJELEtBQWIsQ0FBZjtjQUNJcEYsTUFBSixFQUFZO21CQUNILE9BQUtzRyxHQUFMLENBQVNvQyxPQUFPdEcsR0FBUCxDQUFXcEMsTUFBWCxDQUFULEVBQTZCb0YsTUFBTS9MLE1BQW5DLENBQVA7V0FERixNQUVPO21CQUNFK0wsS0FBUDs7U0FMWTtPQXBCbEI7VUE0QkV1RCxTQUFTcEQsVUFBVWdELFdBQVYsQ0FBc0I5QyxHQUF0QixDQTVCWDtVQTZCRW1ELGFBQWFELE9BQU94TCxNQUFQLENBQ1gsVUFBQzBMLEtBQUQ7WUFBVXhELE9BQVYsUUFBVUEsT0FBVjtZQUFtQkMsR0FBbkIsUUFBbUJBLEdBQW5CO2VBQThCRCxVQUFVd0QsS0FBVixHQUFrQkEsTUFBTXZMLE1BQU4sQ0FBYWdJLEdBQWIsQ0FBaEQ7T0FEVyxFQUVYLEVBRlcsQ0E3QmY7VUFpQ0V3RCxZQUFZTixJQUFJTyxPQUFKLDhCQUFlSCxXQUFXeEgsR0FBWCxDQUFlcUgsWUFBZixFQUE2Qk8sTUFBN0IsQ0FBb0M7ZUFBS3BOLENBQUw7T0FBcEMsQ0FBZixFQWpDZDthQWtDT3FKLGdCQUFnQjBELE1BQWhCLEVBQXdCeEQsY0FBYzJELFNBQWQsQ0FBeEIsQ0FBUDs7Ozs7O0FDdlZKLFNBQVNHLGNBQVQsR0FBb0M7b0NBQVRDLE9BQVM7V0FBQTs7O01BQzVCQyxPQUFPRCxRQUFRL0wsTUFBUixDQUFlLFVBQUNvRSxDQUFELEVBQUk5RyxDQUFKO1dBQVU4RyxJQUFJOUcsRUFBRTJPLE1BQWhCO0dBQWYsRUFBdUMsRUFBdkMsQ0FBYjtTQUNPQyxPQUFPRixJQUFQLENBQVA7OztBQUdGLFNBQVNHLGlCQUFULEdBQTBDO3FDQUFaQyxVQUFZO2NBQUE7OztTQUNqQztXQUNMQSxXQUNHcE0sTUFESCxDQUVJLGdCQUFtQ3FNLEVBQW5DLEVBQTBDOztVQUF4Q0MsVUFBd0M7VUFBNUJDLFVBQTRCO1VBQWhCQyxNQUFnQjs7Z0JBQ2RILEdBQUc1SyxDQUFILEVBQU0rSyxNQUFOLENBRGM7O1VBQ2pDckUsR0FEaUM7VUFDNUI1TCxJQUQ0QjtVQUN0QmlFLElBRHNCOzthQUVqQyxDQUFDMUIsT0FBT3VDLE1BQVAsQ0FBY2lMLFVBQWQsRUFBMEJuRSxHQUExQixDQUFELEVBQWlDb0UsY0FBY2hRLElBQS9DLEVBQXFEaUUsSUFBckQsQ0FBUDtLQUpOLEVBTUksQ0FBQyxFQUFELEVBQUssSUFBTCxFQUFXLENBQVgsQ0FOSixFQVFHYixLQVJILENBUVMsQ0FSVCxFQVFZLENBUlosQ0FESztHQUFQOzs7QUFZRixTQUFTOE0sS0FBVCxDQUFlL1AsQ0FBZixFQUErQjtNQUN6QkEsS0FBSyxJQUFULEVBQWU7V0FDTixDQUFDLElBQUQsRUFBTyxJQUFQLENBQVA7OztxQ0FGaUJnUSxRQUFVO1lBQUE7Ozs7Ozs7O3lCQUlJQSxRQUFqQyw4SEFBMkM7O1VBQS9CQyxLQUErQjtVQUF4QkMsU0FBd0I7O1VBQ25DbkwsSUFBSWtMLE1BQU1yUixJQUFOLENBQVdvQixDQUFYLENBQVY7VUFDSStFLENBQUosRUFBTztlQUNFbUwsVUFBVW5MLENBQVYsQ0FBUDs7Ozs7Ozs7Ozs7Ozs7Ozs7O1NBR0csQ0FBQyxJQUFELEVBQU8sSUFBUCxDQUFQOzs7QUFHRixTQUFTb0wsV0FBVCxHQUE4QjtxQ0FBTmpNLElBQU07UUFBQTs7O1NBQ3JCLFVBQUNqRSxLQUFELEVBQVE2UCxNQUFSLEVBQW1CO1FBQ2xCTSxNQUFNLEVBQVo7UUFDSTdRLFVBQUo7O1NBRUtBLElBQUksQ0FBVCxFQUFZQSxJQUFJMkUsS0FBSzFFLE1BQXJCLEVBQTZCRCxHQUE3QixFQUFrQztVQUM1QjJFLEtBQUszRSxDQUFMLENBQUosSUFBZUksU0FBU00sTUFBTTZQLFNBQVN2USxDQUFmLENBQVQsQ0FBZjs7V0FFSyxDQUFDNlEsR0FBRCxFQUFNLElBQU4sRUFBWU4sU0FBU3ZRLENBQXJCLENBQVA7R0FQRjs7OztBQVlGLElBQU04USxlQUFlLDBGQUFyQjtJQUNFQyxnQkFBZ0JILFlBQVksTUFBWixFQUFvQixPQUFwQixFQUE2QixLQUE3QixDQURsQjtJQUVFSSxjQUFjLHFDQUZoQjtJQUdFQyxxQkFBcUJMLFlBQVksVUFBWixFQUF3QixZQUF4QixFQUFzQyxTQUF0QyxDQUh2QjtJQUlFTSxlQUFlLHlCQUpqQjtJQUtFQyxrQkFBa0IsbUJBTHBCO0lBTUVDLHdCQUF3QlIsWUFBWSxNQUFaLEVBQW9CLFNBQXBCLENBTjFCOztBQVFBLFNBQVNTLGNBQVQsQ0FBd0IzUSxLQUF4QixFQUErQjZQLE1BQS9CLEVBQXVDO01BQy9CZSxRQUFRLENBQUM1USxNQUFNNlAsU0FBUyxDQUFmLENBQUQsSUFBc0IsQ0FBQzdQLE1BQU02UCxTQUFTLENBQWYsQ0FBckM7TUFDRWdCLGFBQWFqVCxLQUFLZ0QsWUFBTCxDQUFrQlosTUFBTTZQLFNBQVMsQ0FBZixDQUFsQixFQUFxQzdQLE1BQU02UCxTQUFTLENBQWYsQ0FBckMsQ0FEZjtNQUVFaUIsT0FBTztVQUNDcFIsU0FBU00sTUFBTTZQLE1BQU4sQ0FBVCxLQUEyQixDQUQ1QjtZQUVHblEsU0FBU00sTUFBTTZQLFNBQVMsQ0FBZixDQUFULEtBQStCLENBRmxDO1lBR0duUSxTQUFTTSxNQUFNNlAsU0FBUyxDQUFmLENBQVQsS0FBK0IsQ0FIbEM7aUJBSVFuUSxTQUFTTSxNQUFNNlAsU0FBUyxDQUFmLENBQVQsS0FBK0I7R0FOaEQ7TUFRRWpRLE9BQU9nUixRQUFRLElBQVIsR0FBZSxJQUFJcFEsZUFBSixDQUFvQnFRLFVBQXBCLENBUnhCOztTQVVPLENBQUNDLElBQUQsRUFBT2xSLElBQVAsRUFBYWlRLFNBQVMsQ0FBdEIsQ0FBUDs7Ozs7QUFLRixJQUFNa0IsY0FBYyw2RUFBcEI7O0FBRUEsU0FBU0Msa0JBQVQsQ0FBNEJoUixLQUE1QixFQUFtQzs2QkFDb0NBLEtBRHBDO01BQ3hCaVIsT0FEd0I7TUFDZkMsUUFEZTtNQUNMQyxNQURLO01BQ0dDLE9BREg7TUFDWUMsU0FEWjtNQUN1QkMsU0FEdkI7O1NBRzFCO1VBQ0M1UixTQUFTdVIsT0FBVCxDQUREO1dBRUV2UixTQUFTd1IsUUFBVCxDQUZGO1NBR0F4UixTQUFTeVIsTUFBVCxDQUhBO1VBSUN6UixTQUFTMFIsT0FBVCxDQUpEO1lBS0cxUixTQUFTMlIsU0FBVCxDQUxIO1lBTUczUixTQUFTNFIsU0FBVDtHQU5WOzs7Ozs7QUFhRixJQUFNQyxhQUFhO09BQ1osQ0FEWTtPQUVaLENBQUMsQ0FBRCxHQUFLLEVBRk87T0FHWixDQUFDLENBQUQsR0FBSyxFQUhPO09BSVosQ0FBQyxDQUFELEdBQUssRUFKTztPQUtaLENBQUMsQ0FBRCxHQUFLLEVBTE87T0FNWixDQUFDLENBQUQsR0FBSyxFQU5PO09BT1osQ0FBQyxDQUFELEdBQUssRUFQTztPQVFaLENBQUMsQ0FBRCxHQUFLLEVBUk87T0FTWixDQUFDLENBQUQsR0FBSztDQVRaOztBQVlBLFNBQVNDLFdBQVQsQ0FBcUJDLFVBQXJCLEVBQWlDUixPQUFqQyxFQUEwQ0MsUUFBMUMsRUFBb0RDLE1BQXBELEVBQTREQyxPQUE1RCxFQUFxRUMsU0FBckUsRUFBZ0ZDLFNBQWhGLEVBQTJGO01BQ25GSSxTQUFTO1VBQ1BULFFBQVExUixNQUFSLEtBQW1CLENBQW5CLEdBQXVCM0IsS0FBSytULGFBQUwsQ0FBbUJqUyxTQUFTdVIsT0FBVCxDQUFuQixDQUF2QixHQUErRHZSLFNBQVN1UixPQUFULENBRHhEO1dBRU54SyxRQUFRRSxXQUFSLENBQW9CaUwsT0FBcEIsQ0FBNEJWLFFBQTVCLElBQXdDLENBRmxDO1NBR1J4UixTQUFTeVIsTUFBVCxDQUhRO1VBSVB6UixTQUFTMFIsT0FBVCxDQUpPO1lBS0wxUixTQUFTMlIsU0FBVDtHQUxWOztNQVFJQyxTQUFKLEVBQWVJLE9BQU85RSxNQUFQLEdBQWdCbE4sU0FBUzRSLFNBQVQsQ0FBaEI7TUFDWEcsVUFBSixFQUFnQjtXQUNQakksT0FBUCxHQUNFaUksV0FBV2xTLE1BQVgsR0FBb0IsQ0FBcEIsR0FDSWtILFFBQVFNLFlBQVIsQ0FBcUI2SyxPQUFyQixDQUE2QkgsVUFBN0IsSUFBMkMsQ0FEL0MsR0FFSWhMLFFBQVFLLGFBQVIsQ0FBc0I4SyxPQUF0QixDQUE4QkgsVUFBOUIsSUFBNEMsQ0FIbEQ7OztTQU1LQyxNQUFQOzs7O0FBSUYsSUFBTUcsVUFBVSxpTUFBaEI7O0FBRUEsU0FBU0MsY0FBVCxDQUF3QjlSLEtBQXhCLEVBQStCOzhCQWN2QkEsS0FkdUI7TUFHekJ5UixVQUh5QjtNQUl6Qk4sTUFKeUI7TUFLekJELFFBTHlCO01BTXpCRCxPQU55QjtNQU96QkcsT0FQeUI7TUFRekJDLFNBUnlCO01BU3pCQyxTQVR5QjtNQVV6QlMsU0FWeUI7TUFXekJDLFNBWHlCO01BWXpCNUwsVUFaeUI7TUFhekJDLFlBYnlCO01BZTNCcUwsTUFmMkIsR0FlbEJGLFlBQVlDLFVBQVosRUFBd0JSLE9BQXhCLEVBQWlDQyxRQUFqQyxFQUEyQ0MsTUFBM0MsRUFBbURDLE9BQW5ELEVBQTREQyxTQUE1RCxFQUF1RUMsU0FBdkUsQ0Fma0I7O01BaUJ6QjdRLGVBQUo7TUFDSXNSLFNBQUosRUFBZTthQUNKUixXQUFXUSxTQUFYLENBQVQ7R0FERixNQUVPLElBQUlDLFNBQUosRUFBZTthQUNYLENBQVQ7R0FESyxNQUVBO2FBQ0lwVSxLQUFLZ0QsWUFBTCxDQUFrQndGLFVBQWxCLEVBQThCQyxZQUE5QixDQUFUOzs7U0FHSyxDQUFDcUwsTUFBRCxFQUFTLElBQUlsUixlQUFKLENBQW9CQyxNQUFwQixDQUFULENBQVA7OztBQUdGLFNBQVN3UixpQkFBVCxDQUEyQmxTLENBQTNCLEVBQThCOztTQUVyQkEsRUFDSnNGLE9BREksQ0FDSSxtQkFESixFQUN5QixHQUR6QixFQUVKQSxPQUZJLENBRUksVUFGSixFQUVnQixHQUZoQixFQUdKNk0sSUFISSxFQUFQOzs7OztBQVFGLElBQU1DLFVBQVUsNEhBQWhCO0lBQ0VDLFNBQVMsc0pBRFg7SUFFRUMsUUFBUSwySEFGVjs7QUFJQSxTQUFTQyxtQkFBVCxDQUE2QnRTLEtBQTdCLEVBQW9DOzhCQUMrQ0EsS0FEL0M7TUFDekJ5UixVQUR5QjtNQUNiTixNQURhO01BQ0xELFFBREs7TUFDS0QsT0FETDtNQUNjRyxPQURkO01BQ3VCQyxTQUR2QjtNQUNrQ0MsU0FEbEM7TUFFaENJLE1BRmdDLEdBRXZCRixZQUFZQyxVQUFaLEVBQXdCUixPQUF4QixFQUFpQ0MsUUFBakMsRUFBMkNDLE1BQTNDLEVBQW1EQyxPQUFuRCxFQUE0REMsU0FBNUQsRUFBdUVDLFNBQXZFLENBRnVCOztTQUczQixDQUFDSSxNQUFELEVBQVNsUixnQkFBZ0JFLFdBQXpCLENBQVA7OztBQUdGLFNBQVM2UixZQUFULENBQXNCdlMsS0FBdEIsRUFBNkI7OEJBQ3NEQSxLQUR0RDtNQUNsQnlSLFVBRGtCO01BQ05QLFFBRE07TUFDSUMsTUFESjtNQUNZQyxPQURaO01BQ3FCQyxTQURyQjtNQUNnQ0MsU0FEaEM7TUFDMkNMLE9BRDNDO01BRXpCUyxNQUZ5QixHQUVoQkYsWUFBWUMsVUFBWixFQUF3QlIsT0FBeEIsRUFBaUNDLFFBQWpDLEVBQTJDQyxNQUEzQyxFQUFtREMsT0FBbkQsRUFBNERDLFNBQTVELEVBQXVFQyxTQUF2RSxDQUZnQjs7U0FHcEIsQ0FBQ0ksTUFBRCxFQUFTbFIsZ0JBQWdCRSxXQUF6QixDQUFQOzs7Ozs7O0FBT0YsSUFBYThSLFdBQWI7Ozs7Ozs7aUNBQ3NCelMsQ0FEdEIsRUFDeUI7YUFDZCtQLE1BQ0wvUCxDQURLLEVBRUwsQ0FBQ29QLGVBQWVtQixXQUFmLEVBQTRCRixZQUE1QixDQUFELEVBQTRDWixrQkFBa0JhLGFBQWxCLEVBQWlDTSxjQUFqQyxDQUE1QyxDQUZLLEVBR0wsQ0FDRXhCLGVBQWVxQixZQUFmLEVBQTZCSixZQUE3QixDQURGLEVBRUVaLGtCQUFrQmUsa0JBQWxCLEVBQXNDSSxjQUF0QyxDQUZGLENBSEssRUFPTCxDQUNFeEIsZUFBZXNCLGVBQWYsRUFBZ0NMLFlBQWhDLENBREYsRUFFRVosa0JBQWtCa0IscUJBQWxCLEVBQXlDQyxjQUF6QyxDQUZGLENBUEssQ0FBUDs7OztxQ0Fjc0I1USxDQWhCMUIsRUFnQjZCO2FBQ2xCK1AsTUFBTW1DLGtCQUFrQmxTLENBQWxCLENBQU4sRUFBNEIsQ0FBQzhSLE9BQUQsRUFBVUMsY0FBVixDQUE1QixDQUFQOzs7O2tDQUdtQi9SLENBcEJ2QixFQW9CMEI7YUFDZitQLE1BQ0wvUCxDQURLLEVBRUwsQ0FBQ29TLE9BQUQsRUFBVUcsbUJBQVYsQ0FGSyxFQUdMLENBQUNGLE1BQUQsRUFBU0UsbUJBQVQsQ0FISyxFQUlMLENBQUNELEtBQUQsRUFBUUUsWUFBUixDQUpLLENBQVA7Ozs7cUNBUXNCeFMsQ0E3QjFCLEVBNkI2QjthQUNsQitQLE1BQU0vUCxDQUFOLEVBQVMsQ0FBQ2dSLFdBQUQsRUFBY0Msa0JBQWQsQ0FBVCxDQUFQOzs7Ozs7QUMvTUosSUFBTXlCLFlBQVUsa0JBQWhCOztBQUVBLElBQU1DLGlCQUFpQjtTQUNaO1VBQ0MsQ0FERDtXQUVFLElBQUksRUFGTjthQUdJLElBQUksRUFBSixHQUFTLEVBSGI7YUFJSSxJQUFJLEVBQUosR0FBUyxFQUFULEdBQWMsRUFKbEI7a0JBS1MsSUFBSSxFQUFKLEdBQVMsRUFBVCxHQUFjLEVBQWQsR0FBbUI7R0FOaEI7UUFRYjtXQUNHLEVBREg7YUFFSyxLQUFLLEVBRlY7YUFHSyxLQUFLLEVBQUwsR0FBVSxFQUhmO2tCQUlVLEtBQUssRUFBTCxHQUFVLEVBQVYsR0FBZTtHQVpaO1NBY1osRUFBRTNSLFNBQVMsRUFBWCxFQUFlNFIsU0FBUyxLQUFLLEVBQTdCLEVBQWlDQyxjQUFjLEtBQUssRUFBTCxHQUFVLElBQXpELEVBZFk7V0FlVixFQUFFRCxTQUFTLEVBQVgsRUFBZUMsY0FBYyxLQUFLLElBQWxDLEVBZlU7V0FnQlYsRUFBRUEsY0FBYyxJQUFoQjtDQWhCYjtJQWtCRUMsZUFBZTFRLE9BQU91QyxNQUFQLENBQ2I7U0FDUztZQUNHLEVBREg7V0FFRSxFQUZGO1VBR0MsR0FIRDtXQUlFLE1BQU0sRUFKUjthQUtJLE1BQU0sRUFBTixHQUFXLEVBTGY7YUFNSSxNQUFNLEVBQU4sR0FBVyxFQUFYLEdBQWdCLEVBTnBCO2tCQU9TLE1BQU0sRUFBTixHQUFXLEVBQVgsR0FBZ0IsRUFBaEIsR0FBcUI7R0FSdkM7VUFVVTtXQUNDLENBREQ7VUFFQSxFQUZBO1dBR0MsS0FBSyxFQUhOO2FBSUcsS0FBSyxFQUFMLEdBQVUsRUFKYjthQUtHLEtBQUssRUFBTCxHQUFVLEVBQVYsR0FBZSxFQUxsQjtrQkFNUSxLQUFLLEVBQUwsR0FBVSxFQUFWLEdBQWUsRUFBZixHQUFvQjs7Q0FqQnpCLEVBb0JiZ08sY0FwQmEsQ0FsQmpCO0lBd0NFSSxxQkFBcUIsV0FBVyxHQXhDbEM7SUF5Q0VDLHNCQUFzQixXQUFXLElBekNuQztJQTBDRUMsaUJBQWlCN1EsT0FBT3VDLE1BQVAsQ0FDZjtTQUNTO1lBQ0csRUFESDtXQUVFb08scUJBQXFCLENBRnZCO1VBR0NBLGtCQUhEO1dBSUVBLHFCQUFxQixFQUp2QjthQUtJQSxxQkFBcUIsRUFBckIsR0FBMEIsRUFMOUI7YUFNSUEscUJBQXFCLEVBQXJCLEdBQTBCLEVBQTFCLEdBQStCLEVBTm5DO2tCQU9TQSxxQkFBcUIsRUFBckIsR0FBMEIsRUFBMUIsR0FBK0IsRUFBL0IsR0FBb0M7R0FSdEQ7VUFVVTtXQUNDQyxzQkFBc0IsQ0FEdkI7VUFFQUEsbUJBRkE7V0FHQ0QscUJBQXFCLEVBSHRCO2FBSUdBLHFCQUFxQixFQUFyQixHQUEwQixFQUo3QjthQUtHQSxxQkFBcUIsRUFBckIsR0FBMEIsRUFBMUIsR0FBK0IsRUFMbEM7a0JBTVFBLHFCQUFxQixFQUFyQixHQUEwQixFQUExQixHQUErQixFQUEvQixHQUFvQzs7Q0FqQnZDLEVBb0JmSixjQXBCZSxDQTFDbkI7O0FBaUVBLElBQU1PLGlCQUFlLENBQ25CLE9BRG1CLEVBRW5CLFFBRm1CLEVBR25CLE9BSG1CLEVBSW5CLE1BSm1CLEVBS25CLE9BTG1CLEVBTW5CLFNBTm1CLEVBT25CLFNBUG1CLEVBUW5CLGNBUm1CLENBQXJCOztBQVdBLFNBQVNDLE9BQVQsQ0FBZXhFLEdBQWYsRUFBb0I1RixJQUFwQixFQUF5QztNQUFmcUssS0FBZSx1RUFBUCxLQUFPOzs7TUFFakNDLE9BQU87WUFDSEQsUUFBUXJLLEtBQUt1SyxNQUFiLEdBQXNCbFIsT0FBT3VDLE1BQVAsQ0FBY2dLLElBQUkyRSxNQUFsQixFQUEwQnZLLEtBQUt1SyxNQUFMLElBQWUsRUFBekMsQ0FEbkI7U0FFTjNFLElBQUlySCxHQUFKLENBQVE2TCxLQUFSLENBQWNwSyxLQUFLekIsR0FBbkIsQ0FGTTt3QkFHU3lCLEtBQUt3SyxrQkFBTCxJQUEyQjVFLElBQUk0RTtHQUhyRDtTQUtPLElBQUlyUixRQUFKLENBQWFtUixJQUFiLENBQVA7OztBQUdGLFNBQVNHLG1CQUFULENBQTZCdlAsR0FBN0IsRUFBa0M7Ozs7Ozs7eUJBRWhCaVAsY0FBaEIsOEhBQThCO1VBQW5COU8sQ0FBbUI7O1VBQ3hCSCxJQUFJRyxDQUFKLENBQUosRUFBWSxPQUFPSCxJQUFJRyxDQUFKLElBQVMsQ0FBaEI7Ozs7Ozs7Ozs7Ozs7Ozs7O1NBRVAsS0FBUDs7Ozs7Ozs7Ozs7Ozs7OztBQWdCRixJQUFhbEMsUUFBYjs7OztvQkFJY3VSLE1BQVosRUFBb0I7OztRQUNaQyxXQUFXRCxPQUFPRixrQkFBUCxLQUE4QixVQUE5QixJQUE0QyxLQUE3RDs7V0FFTzVLLGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsUUFBNUIsRUFBc0M7YUFDN0I4SyxPQUFPSCxNQURzQjtrQkFFeEI7S0FGZDtXQUlPM0ssY0FBUCxDQUFzQixJQUF0QixFQUE0QixLQUE1QixFQUFtQzthQUMxQjhLLE9BQU9uTSxHQUFQLElBQWNTLE9BQU9FLE1BQVAsRUFEWTtrQkFFckI7S0FGZDtXQUlPVSxjQUFQLENBQXNCLElBQXRCLEVBQTRCLG9CQUE1QixFQUFrRDthQUN6QytLLFdBQVcsVUFBWCxHQUF3QixRQURpQjtrQkFFcEM7S0FGZDtXQUlPL0ssY0FBUCxDQUFzQixJQUF0QixFQUE0QixlQUE1QixFQUE2QzthQUNwQzhLLE9BQU9FLGFBQVAsSUFBd0IsSUFEWTtrQkFFL0I7S0FGZDtXQUlPaEwsY0FBUCxDQUFzQixJQUF0QixFQUE0QixRQUE1QixFQUFzQzthQUM3QitLLFdBQVdULGNBQVgsR0FBNEJILFlBREM7a0JBRXhCO0tBRmQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NkJBaUlPbEgsR0F4SlgsRUF3SjJCO1VBQVg1RCxJQUFXLHVFQUFKLEVBQUk7O2FBQ2hCLEtBQUtwSSxPQUFMLEdBQ0g4TCxVQUFVekQsTUFBVixDQUFpQixLQUFLWCxHQUF0QixFQUEyQlUsSUFBM0IsRUFBaUM0TCx3QkFBakMsQ0FBMEQsSUFBMUQsRUFBZ0VoSSxHQUFoRSxDQURHLEdBRUg4RyxTQUZKOzs7Ozs7Ozs7Ozs7OytCQVlrQjtVQUFYMUssSUFBVyx1RUFBSixFQUFJOztVQUNkLENBQUMsS0FBS3BJLE9BQVYsRUFBbUIsT0FBTyxFQUFQOztVQUVid0IsT0FBT2dCLE9BQU91QyxNQUFQLENBQWMsRUFBZCxFQUFrQixLQUFLMk8sTUFBdkIsQ0FBYjs7VUFFSXRMLEtBQUs2TCxhQUFULEVBQXdCO2FBQ2pCTixrQkFBTCxHQUEwQixLQUFLQSxrQkFBL0I7YUFDS25NLGVBQUwsR0FBdUIsS0FBS0UsR0FBTCxDQUFTRixlQUFoQzthQUNLeEosTUFBTCxHQUFjLEtBQUswSixHQUFMLENBQVMxSixNQUF2Qjs7YUFFS3dELElBQVA7Ozs7Ozs7Ozs7Ozs7Ozs0QkFZTTs7VUFFRixDQUFDLEtBQUt4QixPQUFWLEVBQW1CLE9BQU8sSUFBUDs7VUFFZkksSUFBSSxHQUFSO1VBQ0U4VCxPQUFPLEtBQUtDLFNBQUwsRUFEVDs7O2FBSU9QLG9CQUFvQk0sS0FBS1IsTUFBekIsSUFBbUNRLEtBQUtFLE1BQUwsRUFBbkMsR0FBbURGLElBQTFEOztVQUVJQSxLQUFLRyxLQUFMLEdBQWEsQ0FBakIsRUFBb0JqVSxLQUFLOFQsS0FBS0csS0FBTCxHQUFhLEdBQWxCO1VBQ2hCSCxLQUFLM0ssTUFBTCxHQUFjLENBQWxCLEVBQXFCbkosS0FBSzhULEtBQUszSyxNQUFMLEdBQWMsR0FBbkI7VUFDakIySyxLQUFLSSxJQUFMLEdBQVksQ0FBWixJQUFpQkosS0FBS0ssS0FBTCxHQUFhLENBQWxDLEVBQXFDblUsS0FBSzhULEtBQUtJLElBQUwsR0FBWUosS0FBS0ssS0FBTCxHQUFhLENBQXpCLEdBQTZCLEdBQWxDO1VBQ2pDTCxLQUFLL1MsS0FBTCxHQUFhLENBQWIsSUFBa0IrUyxLQUFLOVMsT0FBTCxHQUFlLENBQWpDLElBQXNDOFMsS0FBS2xCLE9BQUwsR0FBZSxDQUFyRCxJQUEwRGtCLEtBQUtqQixZQUFMLEdBQW9CLENBQWxGLEVBQXFGN1MsS0FBSyxHQUFMO1VBQ2pGOFQsS0FBSy9TLEtBQUwsR0FBYSxDQUFqQixFQUFvQmYsS0FBSzhULEtBQUsvUyxLQUFMLEdBQWEsR0FBbEI7VUFDaEIrUyxLQUFLOVMsT0FBTCxHQUFlLENBQW5CLEVBQXNCaEIsS0FBSzhULEtBQUs5UyxPQUFMLEdBQWUsR0FBcEI7VUFDbEI4UyxLQUFLbEIsT0FBTCxHQUFlLENBQW5CLEVBQXNCNVMsS0FBSzhULEtBQUtsQixPQUFMLEdBQWUsR0FBcEI7YUFDZjVTLENBQVA7Ozs7Ozs7Ozs7NkJBT087YUFDQSxLQUFLb1UsS0FBTCxFQUFQOzs7Ozs7Ozs7OytCQU9TO2FBQ0YsS0FBS0EsS0FBTCxFQUFQOzs7Ozs7Ozs7Ozt5QkFRR3BTLFFBcE9QLEVBb09pQjtVQUNULENBQUMsS0FBS3BDLE9BQVYsRUFBbUIsT0FBTyxJQUFQOztVQUViK08sTUFBTTlRLEtBQUt3VyxnQkFBTCxDQUFzQnJTLFFBQXRCLENBQVo7VUFDRTJQLFNBQVMsRUFEWDs7Ozs7Ozs4QkFHZ0J1QixjQUFoQixtSUFBOEI7Y0FBbkI5TyxDQUFtQjs7Y0FDdEJxSCxNQUFNa0QsSUFBSXBHLEdBQUosQ0FBUW5FLENBQVIsSUFBYSxLQUFLbUUsR0FBTCxDQUFTbkUsQ0FBVCxDQUF6QjtjQUNJcUgsUUFBUSxDQUFaLEVBQWU7bUJBQ05ySCxDQUFQLElBQVlxSCxHQUFaOzs7Ozs7Ozs7Ozs7Ozs7Ozs7YUFJRzBILFFBQU0sSUFBTixFQUFZLEVBQUVHLFFBQVEzQixNQUFWLEVBQVosRUFBZ0MsSUFBaEMsQ0FBUDs7Ozs7Ozs7Ozs7MEJBUUkzUCxRQXpQUixFQXlQa0I7VUFDVixDQUFDLEtBQUtwQyxPQUFWLEVBQW1CLE9BQU8sSUFBUDs7VUFFYitPLE1BQU05USxLQUFLd1csZ0JBQUwsQ0FBc0JyUyxRQUF0QixDQUFaO2FBQ08sS0FBS3NTLElBQUwsQ0FBVTNGLElBQUlxRixNQUFKLEVBQVYsQ0FBUDs7Ozs7Ozs7Ozs7Ozs7MkJBV0U3VyxJQXhRTixFQXdRWTthQUNELEtBQUsrRSxTQUFTcVMsYUFBVCxDQUF1QnBYLElBQXZCLENBQUwsQ0FBUDs7Ozs7Ozs7Ozs7OzsyQkFVRW1XLE1BblJOLEVBbVJjO1VBQ0prQixRQUFRcFMsT0FBT3VDLE1BQVAsQ0FBYyxLQUFLMk8sTUFBbkIsRUFBMkJ6VixLQUFLNFcsZUFBTCxDQUFxQm5CLE1BQXJCLEVBQTZCcFIsU0FBU3FTLGFBQXRDLENBQTNCLENBQWQ7YUFDT3BCLFFBQU0sSUFBTixFQUFZLEVBQUVHLFFBQVFrQixLQUFWLEVBQVosQ0FBUDs7Ozs7Ozs7Ozs7a0NBUWdFO3FGQUFKLEVBQUk7VUFBcEQ1VyxNQUFvRCxRQUFwREEsTUFBb0Q7VUFBNUN3SixlQUE0QyxRQUE1Q0EsZUFBNEM7VUFBM0JtTSxrQkFBMkIsUUFBM0JBLGtCQUEyQjs7VUFDMURqTSxNQUFNLEtBQUtBLEdBQUwsQ0FBUzZMLEtBQVQsQ0FBZSxFQUFFdlYsY0FBRixFQUFVd0osZ0NBQVYsRUFBZixDQUFaO1VBQ0VZLE9BQU8sRUFBRVYsUUFBRixFQURUOztVQUdJaU0sa0JBQUosRUFBd0I7YUFDakJBLGtCQUFMLEdBQTBCQSxrQkFBMUI7OzthQUdLSixRQUFNLElBQU4sRUFBWW5MLElBQVosQ0FBUDs7Ozs7Ozs7Ozs7Ozs7dUJBV0M3SyxJQWhUTCxFQWdUVzthQUNBLEtBQUt5QyxPQUFMLEdBQWUsS0FBS3NQLE9BQUwsQ0FBYS9SLElBQWIsRUFBbUJvTCxHQUFuQixDQUF1QnBMLElBQXZCLENBQWYsR0FBOEN1WCxHQUFyRDs7Ozs7Ozs7Ozs7O2dDQVNVO1VBQ04sQ0FBQyxLQUFLOVUsT0FBVixFQUFtQixPQUFPLElBQVA7O1VBRWIrVSxNQUFNbkIsb0JBQW9CLEtBQUtGLE1BQXpCLENBQVo7VUFDRTNFLE1BQU1nRyxNQUFNLEtBQUtYLE1BQUwsRUFBTixHQUFzQixJQUQ5QjtVQUVFWSxVQUFVakcsSUFBSU8sT0FBSiw4QkFBZTlNLE9BQU84QixJQUFQLENBQVksS0FBS29QLE1BQWpCLENBQWYsRUFGWjthQUdPcUIsTUFBTUMsUUFBUVosTUFBUixFQUFOLEdBQXlCWSxPQUFoQzs7Ozs7Ozs7Ozs7OEJBUWdCO3dDQUFQQyxLQUFPO2FBQUE7OztVQUNaLENBQUMsS0FBS2pWLE9BQVYsRUFBbUIsT0FBTyxJQUFQOztVQUVmaVYsTUFBTXJWLE1BQU4sS0FBaUIsQ0FBckIsRUFBd0I7ZUFDZixJQUFQOzs7Y0FHTXFWLE1BQU10TixHQUFOLENBQVVyRixTQUFTcVMsYUFBbkIsQ0FBUjs7VUFFTU8sUUFBUSxFQUFkO1VBQ0VDLGNBQWMsRUFEaEI7VUFFRUMsT0FBTyxLQUFLQyxRQUFMLEVBRlQ7VUFHSUMsaUJBQUo7Ozs7Ozs7OEJBRWdCaEMsY0FBaEIsbUlBQThCO2NBQW5COU8sQ0FBbUI7O2NBQ3hCeVEsTUFBTWhELE9BQU4sQ0FBY3pOLENBQWQsS0FBb0IsQ0FBeEIsRUFBMkI7a0JBQ25CQSxDQUFOLElBQVcsQ0FBWDt1QkFDV0EsQ0FBWDs7O2lCQUdLLElBQU0rUSxFQUFYLElBQWlCSixXQUFqQixFQUE4QjtrQkFDeEJBLFlBQVloUCxjQUFaLENBQTJCb1AsRUFBM0IsQ0FBSixFQUFvQztzQkFDNUIvUSxDQUFOLEtBQVksS0FBS2dSLE1BQUwsQ0FBWUQsRUFBWixFQUFnQi9RLENBQWhCLElBQXFCMlEsWUFBWUksRUFBWixDQUFqQzs7cUJBRUtKLFlBQVlJLEVBQVosQ0FBUDs7OztnQkFJRXRYLEtBQUtvRSxRQUFMLENBQWMrUyxLQUFLNVEsQ0FBTCxDQUFkLENBQUosRUFBNEI7b0JBQ3BCQSxDQUFOLEtBQVk0USxLQUFLNVEsQ0FBTCxDQUFaOzs7O2lCQUlHLElBQU1pUixJQUFYLElBQW1CTCxJQUFuQixFQUF5QjtrQkFDbkI5QixlQUFhckIsT0FBYixDQUFxQndELElBQXJCLElBQTZCbkMsZUFBYXJCLE9BQWIsQ0FBcUJ6TixDQUFyQixDQUFqQyxFQUEwRDtvQkFDbERrUixPQUFPLEtBQUtGLE1BQUwsQ0FBWWhSLENBQVosRUFBZWlSLElBQWYsQ0FBYjtvQkFDRUUsUUFBUXRVLEtBQUtrQyxLQUFMLENBQVc2UixLQUFLSyxJQUFMLElBQWFDLElBQXhCLENBRFY7c0JBRU1sUixDQUFOLEtBQVltUixLQUFaO3FCQUNLRixJQUFMLEtBQWNFLFFBQVFELElBQXRCOzs7O1dBdkJOLE1BMkJPLElBQUl6WCxLQUFLb0UsUUFBTCxDQUFjK1MsS0FBSzVRLENBQUwsQ0FBZCxDQUFKLEVBQTRCO3dCQUNyQkEsQ0FBWixJQUFpQjRRLEtBQUs1USxDQUFMLENBQWpCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztVQUtBOFEsUUFBSixFQUFjO2FBQ1AsSUFBTU0sR0FBWCxJQUFrQlQsV0FBbEIsRUFBK0I7Y0FDekJBLFlBQVloUCxjQUFaLENBQTJCeVAsR0FBM0IsQ0FBSixFQUFxQztrQkFDN0JOLFFBQU4sS0FBbUJILFlBQVlTLEdBQVosSUFBbUIsS0FBS0osTUFBTCxDQUFZRixRQUFaLEVBQXNCTSxHQUF0QixDQUF0Qzs7Ozs7YUFLQ3JDLFFBQU0sSUFBTixFQUFZLEVBQUVHLFFBQVF3QixLQUFWLEVBQVosRUFBK0IsSUFBL0IsQ0FBUDs7Ozs7Ozs7Ozs7NkJBUU87VUFDSCxDQUFDLEtBQUtsVixPQUFWLEVBQW1CLE9BQU8sSUFBUDtVQUNiNlYsVUFBVSxFQUFoQjs7Ozs7OzhCQUNnQnJULE9BQU84QixJQUFQLENBQVksS0FBS29QLE1BQWpCLENBQWhCLG1JQUEwQztjQUEvQmxQLENBQStCOztrQkFDaENBLENBQVIsSUFBYSxDQUFDLEtBQUtrUCxNQUFMLENBQVlsUCxDQUFaLENBQWQ7Ozs7Ozs7Ozs7Ozs7Ozs7O2FBRUtsQyxTQUFTRyxVQUFULENBQW9Cb1QsT0FBcEIsQ0FBUDs7Ozs7Ozs7Ozs7Ozs7Ozs7OzJCQTBGS3RLLEtBeGVULEVBd2VnQjtVQUNSLENBQUMsS0FBS3ZMLE9BQU4sSUFBaUIsQ0FBQ3VMLE1BQU12TCxPQUE1QixFQUFxQztlQUM1QixLQUFQOzs7Ozs7Ozs4QkFHY3NULGNBQWhCLG1JQUE4QjtjQUFuQnBOLENBQW1COztjQUN4QixLQUFLd04sTUFBTCxDQUFZeE4sQ0FBWixNQUFtQnFGLE1BQU1tSSxNQUFOLENBQWF4TixDQUFiLENBQXZCLEVBQXdDO21CQUMvQixLQUFQOzs7Ozs7Ozs7Ozs7Ozs7Ozs7YUFHRyxJQUFQOzs7Ozs7Ozs7OzJCQTlXVzthQUNKLEtBQUt3QixHQUFMLENBQVMxSixNQUFoQjs7Ozs7Ozs7Ozs7MkJBUW9CO2FBQ2IsS0FBSzBKLEdBQUwsQ0FBU0YsZUFBaEI7Ozs7MkJBdVFVO2FBQ0gsS0FBS3hILE9BQUwsR0FBZSxLQUFLMFQsTUFBTCxDQUFZVyxLQUFaLElBQXFCLENBQXBDLEdBQXdDUyxHQUEvQzs7Ozs7Ozs7OzsyQkFPVzthQUNKLEtBQUs5VSxPQUFMLEdBQWUsS0FBSzBULE1BQUwsQ0FBWW5LLE1BQVosSUFBc0IsQ0FBckMsR0FBeUN1TCxHQUFoRDs7Ozs7Ozs7OzsyQkFPVTthQUNILEtBQUs5VSxPQUFMLEdBQWUsS0FBSzBULE1BQUwsQ0FBWWEsS0FBWixJQUFxQixDQUFwQyxHQUF3Q08sR0FBL0M7Ozs7Ozs7Ozs7MkJBT1M7YUFDRixLQUFLOVUsT0FBTCxHQUFlLEtBQUswVCxNQUFMLENBQVlZLElBQVosSUFBb0IsQ0FBbkMsR0FBdUNRLEdBQTlDOzs7Ozs7Ozs7OzJCQU9VO2FBQ0gsS0FBSzlVLE9BQUwsR0FBZSxLQUFLMFQsTUFBTCxDQUFZdlMsS0FBWixJQUFxQixDQUFwQyxHQUF3QzJULEdBQS9DOzs7Ozs7Ozs7OzJCQU9ZO2FBQ0wsS0FBSzlVLE9BQUwsR0FBZSxLQUFLMFQsTUFBTCxDQUFZdFMsT0FBWixJQUF1QixDQUF0QyxHQUEwQzBULEdBQWpEOzs7Ozs7Ozs7OzJCQU9ZO2FBQ0wsS0FBSzlVLE9BQUwsR0FBZSxLQUFLMFQsTUFBTCxDQUFZVixPQUFaLElBQXVCLENBQXRDLEdBQTBDOEIsR0FBakQ7Ozs7Ozs7Ozs7MkJBT2lCO2FBQ1YsS0FBSzlVLE9BQUwsR0FBZSxLQUFLMFQsTUFBTCxDQUFZVCxZQUFaLElBQTRCLENBQTNDLEdBQStDNkIsR0FBdEQ7Ozs7Ozs7Ozs7OzJCQVFZO2FBQ0wsS0FBS2YsYUFBTCxLQUF1QixJQUE5Qjs7Ozs7Ozs7OzsyQkFPa0I7YUFDWCxLQUFLQSxhQUFaOzs7O3FDQXpic0IrQixLQXRDMUIsRUFzQ2lDMU4sSUF0Q2pDLEVBc0N1QzthQUM1QjlGLFNBQVNHLFVBQVQsQ0FBb0JELE9BQU91QyxNQUFQLENBQWMsRUFBRWtPLGNBQWM2QyxLQUFoQixFQUFkLEVBQXVDMU4sSUFBdkMsQ0FBcEIsQ0FBUDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrQkFtQmdCL0QsR0ExRHBCLEVBMER5QjthQUNkLElBQUkvQixRQUFKLENBQWE7Z0JBQ1ZyRSxLQUFLNFcsZUFBTCxDQUFxQnhRLEdBQXJCLEVBQTBCL0IsU0FBU3FTLGFBQW5DLEVBQWtELElBQWxELENBRFU7YUFFYnhNLE9BQU8xRixVQUFQLENBQWtCNEIsR0FBbEIsQ0FGYTs0QkFHRUEsSUFBSXNQO09BSG5CLENBQVA7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NEJBb0Jhb0MsSUEvRWpCLEVBK0V1QjNOLElBL0V2QixFQStFNkI7VUFDbkIvRCxNQUFNN0IsT0FBT3VDLE1BQVAsQ0FBYzhOLFlBQVltRCxnQkFBWixDQUE2QkQsSUFBN0IsQ0FBZCxFQUFrRDNOLElBQWxELENBQVo7YUFDTzlGLFNBQVNHLFVBQVQsQ0FBb0I0QixHQUFwQixDQUFQOzs7Ozs7Ozs7Ozs0QkFRYW5ILE1BekZqQixFQXlGeUI7VUFDakIsQ0FBQ0EsTUFBTCxFQUFhO2NBQ0wsSUFBSU0sb0JBQUosQ0FBeUIsa0RBQXpCLENBQU47O1VBRUV1RSxTQUFTRCxjQUFiLEVBQTZCO2NBQ3JCLElBQUkxRSxvQkFBSixDQUF5QkYsTUFBekIsQ0FBTjtPQURGLE1BRU87ZUFDRSxJQUFJb0YsUUFBSixDQUFhLEVBQUV5UixlQUFlN1csTUFBakIsRUFBYixDQUFQOzs7Ozs7Ozs7O2tDQU9pQkssSUF2R3ZCLEVBdUdvRDtVQUF2QnlJLGFBQXVCLHVFQUFQLEtBQU87O1VBQzFDQyxhQUFhO2NBQ1gsT0FEVztlQUVWLE9BRlU7ZUFHVixRQUhVO2dCQUlULFFBSlM7Y0FLWCxPQUxXO2VBTVYsT0FOVTthQU9aLE1BUFk7Y0FRWCxNQVJXO2NBU1gsT0FUVztlQVVWLE9BVlU7Z0JBV1QsU0FYUztpQkFZUixTQVpRO2dCQWFULFNBYlM7aUJBY1IsU0FkUTtxQkFlSixjQWZJO3NCQWdCSDtRQUNkMUksT0FBT0EsS0FBSzZILFdBQUwsRUFBUCxHQUE0QjdILElBakJYLENBQW5COztVQW1CSSxDQUFDeUksYUFBRCxJQUFrQixDQUFDQyxVQUF2QixFQUFtQyxNQUFNLElBQUkzSSxnQkFBSixDQUFxQkMsSUFBckIsQ0FBTjs7YUFFNUIwSSxVQUFQOzs7Ozs7QUMzT0osSUFBTTZNLFlBQVUsa0JBQWhCOztBQUVBLFNBQVNtRCxnQkFBVCxDQUEwQkMsS0FBMUIsRUFBaUNDLEdBQWpDLEVBQXNDO1NBQzdCLENBQUMsQ0FBQ0QsS0FBRixJQUFXLENBQUMsQ0FBQ0MsR0FBYixJQUFvQkQsTUFBTWxXLE9BQTFCLElBQXFDbVcsSUFBSW5XLE9BQXpDLElBQW9Ea1csU0FBU0MsR0FBcEU7Ozs7Ozs7Ozs7Ozs7OztBQWVGLElBQWFDLFFBQWI7Ozs7b0JBSWN2QyxNQUFaLEVBQW9COzs7V0FDWDlLLGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsR0FBNUIsRUFBaUMsRUFBRWxKLE9BQU9nVSxPQUFPcUMsS0FBaEIsRUFBdUJsTixZQUFZLElBQW5DLEVBQWpDO1dBQ09ELGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsR0FBNUIsRUFBaUMsRUFBRWxKLE9BQU9nVSxPQUFPc0MsR0FBaEIsRUFBcUJuTixZQUFZLElBQWpDLEVBQWpDO1dBQ09ELGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsZUFBNUIsRUFBNkM7YUFDcEM4SyxPQUFPRSxhQUFQLElBQXdCLElBRFk7a0JBRS9CO0tBRmQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs2QkFtSDRCO1VBQXZCeFcsSUFBdUIsdUVBQWhCLGNBQWdCOzthQUNyQixLQUFLeUMsT0FBTCxHQUFlLEtBQUtxVyxVQUFMLGFBQW1CLENBQUM5WSxJQUFELENBQW5CLEVBQTJCb0wsR0FBM0IsQ0FBK0JwTCxJQUEvQixDQUFmLEdBQXNEdVgsR0FBN0Q7Ozs7Ozs7Ozs7Ozs7NEJBVTJCO1VBQXZCdlgsSUFBdUIsdUVBQWhCLGNBQWdCOztVQUN2QixDQUFDLEtBQUt5QyxPQUFWLEVBQW1CLE9BQU84VSxHQUFQO1VBQ2JvQixRQUFRLEtBQUtBLEtBQUwsQ0FBV0ksT0FBWCxDQUFtQi9ZLElBQW5CLENBQWQ7VUFDRTRZLE1BQU0sS0FBS0EsR0FBTCxDQUFTRyxPQUFULENBQWlCL1ksSUFBakIsQ0FEUjthQUVPOEQsS0FBS2tDLEtBQUwsQ0FBVzRTLElBQUlJLElBQUosQ0FBU0wsS0FBVCxFQUFnQjNZLElBQWhCLEVBQXNCb0wsR0FBdEIsQ0FBMEJwTCxJQUExQixDQUFYLElBQThDLENBQXJEOzs7Ozs7Ozs7Ozs0QkFRTUEsSUFqSlYsRUFpSmdCO2FBQ0wsS0FBS3lDLE9BQUwsR0FBZSxLQUFLRSxDQUFMLENBQU9zVyxLQUFQLENBQWEsQ0FBYixFQUFnQkMsT0FBaEIsQ0FBd0IsS0FBS3JXLENBQTdCLEVBQWdDN0MsSUFBaEMsQ0FBZixHQUF1RCxLQUE5RDs7Ozs7Ozs7Ozs4QkFPUTthQUNELEtBQUs2QyxDQUFMLENBQU9RLE9BQVAsT0FBcUIsS0FBS1YsQ0FBTCxDQUFPVSxPQUFQLEVBQTVCOzs7Ozs7Ozs7Ozs0QkFRTThWLFFBbEtWLEVBa0tvQjtVQUNaLENBQUMsS0FBSzFXLE9BQVYsRUFBbUIsT0FBTyxLQUFQO2FBQ1osS0FBS0ksQ0FBTCxHQUFTc1csUUFBaEI7Ozs7Ozs7Ozs7OzZCQVFPQSxRQTVLWCxFQTRLcUI7VUFDYixDQUFDLEtBQUsxVyxPQUFWLEVBQW1CLE9BQU8sS0FBUDthQUNaLEtBQUtFLENBQUwsQ0FBT3dVLElBQVAsQ0FBWSxDQUFaLElBQWlCZ0MsUUFBeEI7Ozs7Ozs7Ozs7OzZCQVFPQSxRQXRMWCxFQXNMcUI7VUFDYixDQUFDLEtBQUsxVyxPQUFWLEVBQW1CLE9BQU8sS0FBUDthQUNaLEtBQUtJLENBQUwsSUFBVXNXLFFBQVYsSUFBc0IsS0FBS3hXLENBQUwsR0FBU3dXLFFBQXRDOzs7Ozs7Ozs7Ozs7OzZCQVV1QjtxRkFBSixFQUFJO1VBQW5CUixLQUFtQixRQUFuQkEsS0FBbUI7VUFBWkMsR0FBWSxRQUFaQSxHQUFZOzthQUNoQkMsU0FBU08sYUFBVCxDQUF1QlQsU0FBUyxLQUFLOVYsQ0FBckMsRUFBd0MrVixPQUFPLEtBQUtqVyxDQUFwRCxDQUFQOzs7Ozs7Ozs7Ozs4QkFRb0I7VUFDaEIsQ0FBQyxLQUFLRixPQUFWLEVBQW1CLE9BQU8sRUFBUDs7d0NBRFY0VyxTQUFXO2lCQUFBOzs7VUFFZEMsU0FBU0QsVUFBVWpQLEdBQVYsQ0FBYzFKLEtBQUs2WSxnQkFBbkIsRUFBcUNDLElBQXJDLEVBQWY7VUFDRXBNLFVBQVUsRUFEWjtVQUVNdkssQ0FBRixHQUFRLElBQVIsQ0FBRUEsQ0FBRjtVQUNGVCxDQURFLEdBQ0UsQ0FERjs7O2FBR0dTLElBQUksS0FBS0YsQ0FBaEIsRUFBbUI7WUFDWHlWLFFBQVFrQixPQUFPbFgsQ0FBUCxLQUFhLEtBQUtPLENBQWhDO1lBQ0VnRSxPQUFPLENBQUN5UixLQUFELEdBQVMsQ0FBQyxLQUFLelYsQ0FBZixHQUFtQixLQUFLQSxDQUF4QixHQUE0QnlWLEtBRHJDO2dCQUVRMU4sSUFBUixDQUFhbU8sU0FBU08sYUFBVCxDQUF1QnZXLENBQXZCLEVBQTBCOEQsSUFBMUIsQ0FBYjtZQUNJQSxJQUFKO2FBQ0ssQ0FBTDs7O2FBR0t5RyxPQUFQOzs7Ozs7Ozs7Ozs7NEJBU012SSxRQW5PVixFQW1Pb0I7VUFDWixDQUFDLEtBQUtwQyxPQUFWLEVBQW1CLE9BQU8sRUFBUDtVQUNiK08sTUFBTTlRLEtBQUt3VyxnQkFBTCxDQUFzQnJTLFFBQXRCLENBQVo7VUFDRXVJLFVBQVUsRUFEWjtVQUVNdkssQ0FBRixHQUFRLElBQVIsQ0FBRUEsQ0FBRjtVQUNGdVYsS0FERTtVQUVGelIsSUFGRTs7O2FBSUc5RCxJQUFJLEtBQUtGLENBQWhCLEVBQW1CO2dCQUNURSxFQUFFc1UsSUFBRixDQUFPM0YsR0FBUCxDQUFSO2VBQ08sQ0FBQzRHLEtBQUQsR0FBUyxDQUFDLEtBQUt6VixDQUFmLEdBQW1CLEtBQUtBLENBQXhCLEdBQTRCeVYsS0FBbkM7Z0JBQ1ExTixJQUFSLENBQWFtTyxTQUFTTyxhQUFULENBQXVCdlcsQ0FBdkIsRUFBMEI4RCxJQUExQixDQUFiO1lBQ0lBLElBQUo7OzthQUdLeUcsT0FBUDs7Ozs7Ozs7Ozs7a0NBUVlxTSxhQTFQaEIsRUEwUCtCO1VBQ3ZCLENBQUMsS0FBS2hYLE9BQVYsRUFBbUIsT0FBTyxFQUFQO2FBQ1osS0FBS2lYLE9BQUwsQ0FBYSxLQUFLclgsTUFBTCxLQUFnQm9YLGFBQTdCLEVBQTRDM1QsS0FBNUMsQ0FBa0QsQ0FBbEQsRUFBcUQyVCxhQUFyRCxDQUFQOzs7Ozs7Ozs7Ozs2QkFRT3pMLEtBcFFYLEVBb1FrQjthQUNQLEtBQUtyTCxDQUFMLEdBQVNxTCxNQUFNbkwsQ0FBZixJQUFvQixLQUFLQSxDQUFMLEdBQVNtTCxNQUFNckwsQ0FBMUM7Ozs7Ozs7Ozs7OytCQVFTcUwsS0E3UWIsRUE2UW9CO1VBQ1osQ0FBQyxLQUFLdkwsT0FBVixFQUFtQixPQUFPLEtBQVA7YUFDWixDQUFDLEtBQUtFLENBQU4sS0FBWSxDQUFDcUwsTUFBTW5MLENBQTFCOzs7Ozs7Ozs7Ozs2QkFRT21MLEtBdlJYLEVBdVJrQjtVQUNWLENBQUMsS0FBS3ZMLE9BQVYsRUFBbUIsT0FBTyxLQUFQO2FBQ1osQ0FBQ3VMLE1BQU1yTCxDQUFQLEtBQWEsQ0FBQyxLQUFLRSxDQUExQjs7Ozs7Ozs7Ozs7NEJBUU1tTCxLQWpTVixFQWlTaUI7VUFDVCxDQUFDLEtBQUt2TCxPQUFWLEVBQW1CLE9BQU8sS0FBUDthQUNaLEtBQUtJLENBQUwsSUFBVW1MLE1BQU1uTCxDQUFoQixJQUFxQixLQUFLRixDQUFMLElBQVVxTCxNQUFNckwsQ0FBNUM7Ozs7Ozs7Ozs7OzJCQVFLcUwsS0EzU1QsRUEyU2dCO2FBQ0wsS0FBS25MLENBQUwsQ0FBTzhXLE1BQVAsQ0FBYzNMLE1BQU1uTCxDQUFwQixLQUEwQixLQUFLRixDQUFMLENBQU9nWCxNQUFQLENBQWMzTCxNQUFNckwsQ0FBcEIsQ0FBakM7Ozs7Ozs7Ozs7OztpQ0FTV3FMLEtBclRmLEVBcVRzQjtVQUNkLENBQUMsS0FBS3ZMLE9BQVYsRUFBbUIsT0FBTyxJQUFQO1VBQ2JJLElBQUksS0FBS0EsQ0FBTCxHQUFTbUwsTUFBTW5MLENBQWYsR0FBbUIsS0FBS0EsQ0FBeEIsR0FBNEJtTCxNQUFNbkwsQ0FBNUM7VUFDRUYsSUFBSSxLQUFLQSxDQUFMLEdBQVNxTCxNQUFNckwsQ0FBZixHQUFtQixLQUFLQSxDQUF4QixHQUE0QnFMLE1BQU1yTCxDQUR4Qzs7VUFHSUUsSUFBSUYsQ0FBUixFQUFXO2VBQ0YsSUFBUDtPQURGLE1BRU87ZUFDRWtXLFNBQVNPLGFBQVQsQ0FBdUJ2VyxDQUF2QixFQUEwQkYsQ0FBMUIsQ0FBUDs7Ozs7Ozs7Ozs7OzswQkFVRXFMLEtBdlVSLEVBdVVlO1VBQ1AsQ0FBQyxLQUFLdkwsT0FBVixFQUFtQixPQUFPLElBQVA7VUFDYkksSUFBSSxLQUFLQSxDQUFMLEdBQVNtTCxNQUFNbkwsQ0FBZixHQUFtQixLQUFLQSxDQUF4QixHQUE0Qm1MLE1BQU1uTCxDQUE1QztVQUNFRixJQUFJLEtBQUtBLENBQUwsR0FBU3FMLE1BQU1yTCxDQUFmLEdBQW1CLEtBQUtBLENBQXhCLEdBQTRCcUwsTUFBTXJMLENBRHhDO2FBRU9rVyxTQUFTTyxhQUFULENBQXVCdlcsQ0FBdkIsRUFBMEJGLENBQTFCLENBQVA7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7aUNBMkR1Qjs7O3lDQUFYaVgsU0FBVztpQkFBQTs7O2FBQ2hCZixTQUFTZ0IsR0FBVCxDQUFhLENBQUMsSUFBRCxFQUFPdlQsTUFBUCxDQUFjc1QsU0FBZCxDQUFiLEVBQ0p4UCxHQURJLENBQ0E7ZUFBSyxNQUFLMFAsWUFBTCxDQUFrQjFYLENBQWxCLENBQUw7T0FEQSxFQUVKNFAsTUFGSSxDQUVHO2VBQUs1UCxLQUFLLENBQUNBLEVBQUUyWCxPQUFGLEVBQVg7T0FGSCxDQUFQOzs7Ozs7Ozs7OytCQVNTO1VBQ0wsQ0FBQyxLQUFLdFgsT0FBVixFQUFtQixPQUFPOFMsU0FBUDttQkFDUixLQUFLMVMsQ0FBTCxDQUFPb1UsS0FBUCxFQUFYLGdCQUErQixLQUFLdFUsQ0FBTCxDQUFPc1UsS0FBUCxFQUEvQjs7Ozs7Ozs7Ozs7OzBCQVNJcE0sSUEzWlIsRUEyWmM7VUFDTixDQUFDLEtBQUtwSSxPQUFWLEVBQW1CLE9BQU84UyxTQUFQO2FBQ1QsS0FBSzFTLENBQUwsQ0FBT29VLEtBQVAsQ0FBYXBNLElBQWIsQ0FBVixTQUFnQyxLQUFLbEksQ0FBTCxDQUFPc1UsS0FBUCxDQUFhcE0sSUFBYixDQUFoQzs7Ozs7Ozs7Ozs7Ozs2QkFVT21QLFVBdmFYLEVBdWFtRDtzRkFBSixFQUFJO2tDQUExQkMsU0FBMEI7VUFBMUJBLFNBQTBCLG1DQUFkLEtBQWM7O1VBQzNDLENBQUMsS0FBS3hYLE9BQVYsRUFBbUIsT0FBTzhTLFNBQVA7a0JBQ1QsS0FBSzFTLENBQUwsQ0FBT3FYLFFBQVAsQ0FBZ0JGLFVBQWhCLENBQVYsR0FBd0NDLFNBQXhDLEdBQW9ELEtBQUt0WCxDQUFMLENBQU91WCxRQUFQLENBQWdCRixVQUFoQixDQUFwRDs7Ozs7Ozs7Ozs7Ozs7Ozs7OytCQWVTaGEsSUF4YmIsRUF3Ym1CNkssSUF4Ym5CLEVBd2J5QjtVQUNqQixDQUFDLEtBQUtwSSxPQUFWLEVBQW1CO2VBQ1ZzQyxTQUFTb1YsT0FBVCxDQUFpQixLQUFLM0QsYUFBdEIsQ0FBUDs7YUFFSyxLQUFLN1QsQ0FBTCxDQUFPcVcsSUFBUCxDQUFZLEtBQUtuVyxDQUFqQixFQUFvQjdDLElBQXBCLEVBQTBCNkssSUFBMUIsQ0FBUDs7Ozs7Ozs7OzsyQkFuV1U7YUFDSCxLQUFLcEksT0FBTCxHQUFlLEtBQUtJLENBQXBCLEdBQXdCLElBQS9COzs7Ozs7Ozs7OzJCQU9RO2FBQ0QsS0FBS0osT0FBTCxHQUFlLEtBQUtFLENBQXBCLEdBQXdCLElBQS9COzs7Ozs7Ozs7OzJCQU9ZO2FBQ0wsS0FBSzZULGFBQUwsS0FBdUIsSUFBOUI7Ozs7Ozs7Ozs7MkJBT2tCO2FBQ1gsS0FBS0EsYUFBWjs7Ozs0QkFqR2E3VyxNQWpCakIsRUFpQnlCO1VBQ2pCLENBQUNBLE1BQUwsRUFBYTtjQUNMLElBQUlNLG9CQUFKLENBQXlCLGtEQUF6QixDQUFOOztVQUVFdUUsU0FBU0QsY0FBYixFQUE2QjtjQUNyQixJQUFJM0Usb0JBQUosQ0FBeUJELE1BQXpCLENBQU47T0FERixNQUVPO2VBQ0UsSUFBSWtaLFFBQUosQ0FBYSxFQUFFckMsZUFBZTdXLE1BQWpCLEVBQWIsQ0FBUDs7Ozs7Ozs7Ozs7OztrQ0FVaUJnWixLQWxDdkIsRUFrQzhCQyxHQWxDOUIsRUFrQ21DO1VBQ3pCd0IsYUFBYTFaLEtBQUs2WSxnQkFBTCxDQUFzQlosS0FBdEIsQ0FBbkI7VUFDRTBCLFdBQVczWixLQUFLNlksZ0JBQUwsQ0FBc0JYLEdBQXRCLENBRGI7O2FBR08sSUFBSUMsUUFBSixDQUFhO2VBQ1h1QixVQURXO2FBRWJDLFFBRmE7dUJBR0gzQixpQkFBaUIwQixVQUFqQixFQUE2QkMsUUFBN0IsSUFBeUMsSUFBekMsR0FBZ0Q7T0FIMUQsQ0FBUDs7Ozs7Ozs7Ozs7OzBCQWFXMUIsS0FuRGYsRUFtRHNCOVQsUUFuRHRCLEVBbURnQztVQUN0QjJNLE1BQU05USxLQUFLd1csZ0JBQUwsQ0FBc0JyUyxRQUF0QixDQUFaO1VBQ0VvQixLQUFLdkYsS0FBSzZZLGdCQUFMLENBQXNCWixLQUF0QixDQURQO2FBRU9FLFNBQVNPLGFBQVQsQ0FBdUJuVCxFQUF2QixFQUEyQkEsR0FBR2tSLElBQUgsQ0FBUTNGLEdBQVIsQ0FBM0IsQ0FBUDs7Ozs7Ozs7Ozs7OzJCQVNZb0gsR0EvRGhCLEVBK0RxQi9ULFFBL0RyQixFQStEK0I7VUFDckIyTSxNQUFNOVEsS0FBS3dXLGdCQUFMLENBQXNCclMsUUFBdEIsQ0FBWjtVQUNFb0IsS0FBS3ZGLEtBQUs2WSxnQkFBTCxDQUFzQlgsR0FBdEIsQ0FEUDthQUVPQyxTQUFTTyxhQUFULENBQXVCblQsR0FBR2dULEtBQUgsQ0FBU3pILEdBQVQsQ0FBdkIsRUFBc0N2TCxFQUF0QyxDQUFQOzs7Ozs7Ozs7Ozs7NEJBU2FnSixNQTNFakIsRUEyRXlCcEUsSUEzRXpCLEVBMkUrQjtVQUN2Qm9FLE1BQUosRUFBWTs0QkFDS0EsT0FBT3FMLEtBQVAsQ0FBYSxJQUFiLENBREw7O1lBQ0h6WCxDQURHO1lBQ0FGLENBREE7O1lBRU5FLEtBQUtGLENBQVQsRUFBWTtpQkFDSGtXLFNBQVNPLGFBQVQsQ0FBdUJoVSxTQUFTbVYsT0FBVCxDQUFpQjFYLENBQWpCLEVBQW9CZ0ksSUFBcEIsQ0FBdkIsRUFBa0R6RixTQUFTbVYsT0FBVCxDQUFpQjVYLENBQWpCLEVBQW9Ca0ksSUFBcEIsQ0FBbEQsQ0FBUDs7O2FBR0dnTyxTQUFTc0IsT0FBVCxDQUFpQixvQkFBakIsQ0FBUDs7OzswQkFrUVdQLFNBcFZmLEVBb1YwQjtrQ0FDQ0EsVUFBVUosSUFBVixDQUFlLFVBQUN4UyxDQUFELEVBQUl3VCxDQUFKO2VBQVV4VCxFQUFFbkUsQ0FBRixHQUFNMlgsRUFBRTNYLENBQWxCO09BQWYsRUFBb0NzRCxNQUFwQyxDQUEyQyxpQkFBbUJ5TixJQUFuQixFQUE0Qjs7WUFBMUI2RyxLQUEwQjtZQUFuQi9MLE9BQW1COztZQUN4RixDQUFDQSxPQUFMLEVBQWM7aUJBQ0wsQ0FBQytMLEtBQUQsRUFBUTdHLElBQVIsQ0FBUDtTQURGLE1BRU8sSUFBSWxGLFFBQVFnTSxRQUFSLENBQWlCOUcsSUFBakIsS0FBMEJsRixRQUFRaU0sVUFBUixDQUFtQi9HLElBQW5CLENBQTlCLEVBQXdEO2lCQUN0RCxDQUFDNkcsS0FBRCxFQUFRL0wsUUFBUWtNLEtBQVIsQ0FBY2hILElBQWQsQ0FBUixDQUFQO1NBREssTUFFQTtpQkFDRSxDQUFDNkcsTUFBTW5VLE1BQU4sQ0FBYSxDQUFDb0ksT0FBRCxDQUFiLENBQUQsRUFBMEJrRixJQUExQixDQUFQOztPQU5tQixFQVFwQixDQUFDLEVBQUQsRUFBSyxJQUFMLENBUm9CLENBREQ7O1VBQ2YvQixLQURlO1VBQ1JnSixLQURROztVQVVsQkEsS0FBSixFQUFXO2NBQ0huUSxJQUFOLENBQVdtUSxLQUFYOzthQUVLaEosS0FBUDs7Ozs7Ozs7Ozs7d0JBUVMrSCxTQXpXYixFQXlXd0I7VUFDaEJqQixRQUFRLElBQVo7VUFDRW1DLGVBQWUsQ0FEakI7VUFFTTFOLFVBQVUsRUFBaEI7VUFDRTJOLE9BQU9uQixVQUFVeFAsR0FBVixDQUFjO2VBQUssQ0FBQyxFQUFFNFEsTUFBTTVZLEVBQUVTLENBQVYsRUFBYS9CLE1BQU0sR0FBbkIsRUFBRCxFQUEyQixFQUFFa2EsTUFBTTVZLEVBQUVPLENBQVYsRUFBYTdCLE1BQU0sR0FBbkIsRUFBM0IsQ0FBTDtPQUFkLENBRFQ7VUFFRW9GLE1BQU14RixLQUFLNkYsT0FBTCxDQUFhd1UsSUFBYixFQUFtQnZCLElBQW5CLENBQXdCLFVBQUN4UyxDQUFELEVBQUl3VCxDQUFKO2VBQVV4VCxFQUFFZ1UsSUFBRixHQUFTUixFQUFFUSxJQUFyQjtPQUF4QixDQUZSOzs7Ozs7OzZCQUlnQjlVLEdBQWhCLDhIQUFxQjtjQUFWOUQsQ0FBVTs7MEJBQ0hBLEVBQUV0QixJQUFGLEtBQVcsR0FBWCxHQUFpQixDQUFqQixHQUFxQixDQUFDLENBQXRDOztjQUVJZ2EsaUJBQWlCLENBQXJCLEVBQXdCO29CQUNkMVksRUFBRTRZLElBQVY7V0FERixNQUVPO2dCQUNEckMsU0FBUyxDQUFDQSxLQUFELEtBQVcsQ0FBQ3ZXLEVBQUU0WSxJQUEzQixFQUFpQztzQkFDdkJ0USxJQUFSLENBQWFtTyxTQUFTTyxhQUFULENBQXVCVCxLQUF2QixFQUE4QnZXLEVBQUU0WSxJQUFoQyxDQUFiOzs7b0JBR00sSUFBUjs7Ozs7Ozs7Ozs7Ozs7Ozs7O2FBSUduQyxTQUFTb0MsS0FBVCxDQUFlN04sT0FBZixDQUFQOzs7Ozs7QUNqWkosU0FBUzhOLE9BQVQsQ0FBaUJwSSxLQUFqQixFQUF1QztNQUFmcUksSUFBZSx1RUFBUjtXQUFLL1ksQ0FBTDtHQUFROztTQUM5QixFQUFFMFEsWUFBRixFQUFTc0ksT0FBTzs7VUFBRXZZLENBQUY7O2FBQVNzWSxLQUFLM1ksU0FBU0ssQ0FBVCxFQUFZLEVBQVosQ0FBTCxDQUFUO0tBQWhCLEVBQVA7OztBQUdGLFNBQVN3WSxLQUFULENBQWVDLE9BQWYsRUFBd0JDLFVBQXhCLEVBQW9DO1NBQzNCO1dBQ0VsSixPQUFPaUosUUFBUUUsSUFBUixDQUFhLEdBQWIsQ0FBUCxDQURGO1dBRUU7O1VBQUUzWSxDQUFGOzthQUFTeVksUUFBUTVHLE9BQVIsQ0FBZ0I3UixDQUFoQixJQUFxQjBZLFVBQTlCOztHQUZUOzs7QUFNRixTQUFTaFksTUFBVCxDQUFnQnVQLEtBQWhCLEVBQXVCMkksTUFBdkIsRUFBK0I7U0FDdEIsRUFBRTNJLFlBQUYsRUFBU3NJLE9BQU87O1VBQUlNLENBQUo7VUFBTzlULENBQVA7O2FBQWNsSCxLQUFLZ0QsWUFBTCxDQUFrQmdZLENBQWxCLEVBQXFCOVQsQ0FBckIsQ0FBZDtLQUFoQixFQUF1RDZULGNBQXZELEVBQVA7OztBQUdGLFNBQVNFLE1BQVQsQ0FBZ0I3SSxLQUFoQixFQUF1QjtTQUNkLEVBQUVBLFlBQUYsRUFBU3NJLE9BQU87O1VBQUV2WSxDQUFGOzthQUFTQSxDQUFUO0tBQWhCLEVBQVA7OztBQUdGLFNBQVMrWSxZQUFULENBQXNCeE4sS0FBdEIsRUFBNkJqRSxHQUE3QixFQUFrQztNQUMxQjBSLE1BQU0sSUFBWjtNQUNFQyxNQUFNLE1BRFI7TUFFRUMsUUFBUSxPQUZWO01BR0VDLE9BQU8sT0FIVDtNQUlFQyxXQUFXLE9BSmI7TUFLRUMsYUFBYSxVQUxmO01BTUVDLFlBQVksWUFOZDtNQU9FOU4sVUFBVSxTQUFWQSxPQUFVO1dBQU0sRUFBRXlFLE9BQU9ULE9BQU96TixFQUFFMEosR0FBVCxDQUFULEVBQXdCOE0sT0FBTzs7WUFBRXZZLENBQUY7O2VBQVNBLENBQVQ7T0FBL0IsRUFBMkN3TCxTQUFTLElBQXBELEVBQU47R0FQWjtNQVFFK04sVUFBVSxTQUFWQSxPQUFVLElBQUs7UUFDVGhPLE1BQU1DLE9BQVYsRUFBbUI7YUFDVkEsUUFBUXpKLENBQVIsQ0FBUDs7O1lBR01BLEVBQUUwSixHQUFWOztXQUVPLEdBQUw7ZUFDUytNLE1BQU1sUixJQUFJeUMsSUFBSixDQUFTLE9BQVQsQ0FBTixFQUF5QixDQUF6QixDQUFQO1dBQ0csSUFBTDtlQUNTeU8sTUFBTWxSLElBQUl5QyxJQUFKLENBQVMsTUFBVCxDQUFOLEVBQXdCLENBQXhCLENBQVA7O1dBRUcsTUFBTDtlQUNTc08sUUFBUWMsSUFBUixDQUFQO1dBQ0csSUFBTDtlQUNTZCxRQUFRaUIsU0FBUixFQUFtQnpiLEtBQUsyYixjQUF4QixDQUFQOztXQUVHLEdBQUw7ZUFDU25CLFFBQVFlLFFBQVIsQ0FBUDtXQUNHLElBQUw7ZUFDU2YsUUFBUVksR0FBUixDQUFQO1dBQ0csS0FBTDtlQUNTVCxNQUFNbFIsSUFBSTZCLE1BQUosQ0FBVyxPQUFYLEVBQW9CLElBQXBCLENBQU4sRUFBaUMsQ0FBakMsQ0FBUDtXQUNHLE1BQUw7ZUFDU3FQLE1BQU1sUixJQUFJNkIsTUFBSixDQUFXLE1BQVgsRUFBbUIsSUFBbkIsQ0FBTixFQUFnQyxDQUFoQyxDQUFQO1dBQ0csR0FBTDtlQUNTa1AsUUFBUWUsUUFBUixDQUFQO1dBQ0csSUFBTDtlQUNTZixRQUFRWSxHQUFSLENBQVA7V0FDRyxLQUFMO2VBQ1NULE1BQU1sUixJQUFJNkIsTUFBSixDQUFXLE9BQVgsRUFBb0IsS0FBcEIsQ0FBTixFQUFrQyxDQUFsQyxDQUFQO1dBQ0csTUFBTDtlQUNTcVAsTUFBTWxSLElBQUk2QixNQUFKLENBQVcsTUFBWCxFQUFtQixLQUFuQixDQUFOLEVBQWlDLENBQWpDLENBQVA7O1dBRUcsR0FBTDtlQUNTa1AsUUFBUWUsUUFBUixDQUFQO1dBQ0csSUFBTDtlQUNTZixRQUFRWSxHQUFSLENBQVA7O1dBRUcsR0FBTDtlQUNTWixRQUFRZ0IsVUFBUixDQUFQO1dBQ0csS0FBTDtlQUNTaEIsUUFBUWEsS0FBUixDQUFQOztXQUVHLElBQUw7ZUFDU2IsUUFBUVksR0FBUixDQUFQO1dBQ0csR0FBTDtlQUNTWixRQUFRZSxRQUFSLENBQVA7V0FDRyxJQUFMO2VBQ1NmLFFBQVFZLEdBQVIsQ0FBUDtXQUNHLEdBQUw7ZUFDU1osUUFBUWUsUUFBUixDQUFQO1dBQ0csSUFBTDtlQUNTZixRQUFRWSxHQUFSLENBQVA7V0FDRyxHQUFMO2VBQ1NaLFFBQVFlLFFBQVIsQ0FBUDtXQUNHLEdBQUw7ZUFDU2YsUUFBUWUsUUFBUixDQUFQO1dBQ0csSUFBTDtlQUNTZixRQUFRWSxHQUFSLENBQVA7V0FDRyxHQUFMO2VBQ1NaLFFBQVFnQixVQUFSLENBQVA7V0FDRyxLQUFMO2VBQ1NoQixRQUFRYSxLQUFSLENBQVA7O1dBRUcsR0FBTDtlQUNTVixNQUFNbFIsSUFBSXFDLFNBQUosRUFBTixFQUF1QixDQUF2QixDQUFQOztXQUVHLE1BQUw7ZUFDUzBPLFFBQVFjLElBQVIsQ0FBUDtXQUNHLElBQUw7ZUFDU2QsUUFBUWlCLFNBQVIsRUFBbUJ6YixLQUFLMmIsY0FBeEIsQ0FBUDs7V0FFRyxHQUFMO2VBQ1NuQixRQUFRZSxRQUFSLENBQVA7V0FDRyxJQUFMO2VBQ1NmLFFBQVFZLEdBQVIsQ0FBUDs7V0FFRyxHQUFMO1dBQ0ssR0FBTDtlQUNTWixRQUFRVyxHQUFSLENBQVA7V0FDRyxLQUFMO2VBQ1NSLE1BQU1sUixJQUFJa0MsUUFBSixDQUFhLE9BQWIsRUFBc0IsSUFBdEIsQ0FBTixFQUFtQyxDQUFuQyxDQUFQO1dBQ0csTUFBTDtlQUNTZ1AsTUFBTWxSLElBQUlrQyxRQUFKLENBQWEsTUFBYixFQUFxQixJQUFyQixDQUFOLEVBQWtDLENBQWxDLENBQVA7V0FDRyxLQUFMO2VBQ1NnUCxNQUFNbFIsSUFBSWtDLFFBQUosQ0FBYSxPQUFiLEVBQXNCLEtBQXRCLENBQU4sRUFBb0MsQ0FBcEMsQ0FBUDtXQUNHLE1BQUw7ZUFDU2dQLE1BQU1sUixJQUFJa0MsUUFBSixDQUFhLE1BQWIsRUFBcUIsS0FBckIsQ0FBTixFQUFtQyxDQUFuQyxDQUFQOztXQUVHLEdBQUw7V0FDSyxJQUFMO2VBQ1M5SSxPQUFPLDRCQUFQLEVBQXFDLENBQXJDLENBQVA7V0FDRyxLQUFMO2VBQ1NBLE9BQU8sdUJBQVAsRUFBZ0MsQ0FBaEMsQ0FBUDs7O1dBR0csR0FBTDtlQUNTb1ksT0FBTyx3QkFBUCxDQUFQOztlQUVPdE4sUUFBUXpKLENBQVIsQ0FBUDs7R0E1R1I7TUErR0U1RSxPQUFPb2MsUUFBUWhPLEtBQVIsQ0EvR1Q7T0FnSEtBLEtBQUwsR0FBYUEsS0FBYjtTQUNPcE8sSUFBUDs7O0FBR0YsU0FBU3NjLFVBQVQsQ0FBb0I1RSxLQUFwQixFQUEyQjtTQUNsQixDQUFDQSxNQUFNdE4sR0FBTixDQUFVO1dBQUt6QixFQUFFbUssS0FBUDtHQUFWLEVBQXdCM00sTUFBeEIsQ0FBK0IsVUFBQ29FLENBQUQsRUFBSTlHLENBQUo7V0FBYThHLENBQWIsU0FBa0I5RyxFQUFFMk8sTUFBcEI7R0FBL0IsRUFBOEQsRUFBOUQsQ0FBRCxFQUFvRXNGLEtBQXBFLENBQVA7OztBQUdGLFNBQVM1VSxLQUFULENBQWU4QyxLQUFmLEVBQXNCa04sS0FBdEIsRUFBNkJ5SixRQUE3QixFQUF1QztNQUMvQkMsVUFBVTVXLE1BQU05QyxLQUFOLENBQVlnUSxLQUFaLENBQWhCOztNQUVJMEosT0FBSixFQUFhO1FBQ0xDLE1BQU0sRUFBWjtRQUNJQyxhQUFhLENBQWpCO1NBQ0ssSUFBTXRhLENBQVgsSUFBZ0JtYSxRQUFoQixFQUEwQjtVQUNwQkEsU0FBUzNULGNBQVQsQ0FBd0J4RyxDQUF4QixDQUFKLEVBQWdDO1lBQ3hCc1osSUFBSWEsU0FBU25hLENBQVQsQ0FBVjtZQUNFcVosU0FBU0MsRUFBRUQsTUFBRixHQUFXQyxFQUFFRCxNQUFGLEdBQVcsQ0FBdEIsR0FBMEIsQ0FEckM7WUFFSSxDQUFDQyxFQUFFck4sT0FBSCxJQUFjcU4sRUFBRXROLEtBQXBCLEVBQTJCO2NBQ3JCc04sRUFBRXROLEtBQUYsQ0FBUUUsR0FBUixDQUFZLENBQVosQ0FBSixJQUFzQm9OLEVBQUVOLEtBQUYsQ0FBUW9CLFFBQVExVyxLQUFSLENBQWM0VyxVQUFkLEVBQTBCQSxhQUFhakIsTUFBdkMsQ0FBUixDQUF0Qjs7c0JBRVlBLE1BQWQ7OztXQUdHZ0IsR0FBUDtHQWJGLE1BY087V0FDRSxFQUFQOzs7O0FBSUosU0FBU0UsbUJBQVQsQ0FBNkJILE9BQTdCLEVBQXNDO01BQzlCSSxVQUFVLFNBQVZBLE9BQVUsUUFBUztZQUNmeE8sS0FBUjtXQUNPLEdBQUw7ZUFDUyxhQUFQO1dBQ0csR0FBTDtlQUNTLFFBQVA7V0FDRyxHQUFMO2VBQ1MsUUFBUDtXQUNHLEdBQUw7V0FDSyxHQUFMO2VBQ1MsTUFBUDtXQUNHLEdBQUw7ZUFDUyxLQUFQO1dBQ0csR0FBTDtlQUNTLFNBQVA7V0FDRyxHQUFMO1dBQ0ssR0FBTDtlQUNTLE9BQVA7V0FDRyxHQUFMO2VBQ1MsTUFBUDtXQUNHLEdBQUw7V0FDSyxHQUFMO2VBQ1MsU0FBUDtXQUNHLEdBQUw7ZUFDUyxZQUFQO1dBQ0csR0FBTDtlQUNTLFVBQVA7O2VBRU8sSUFBUDs7R0E1Qk47O01BZ0NJMUwsYUFBSjtNQUNJLENBQUNoQyxLQUFLSyxXQUFMLENBQWlCeWIsUUFBUUssQ0FBekIsQ0FBTCxFQUFrQztXQUN6QixJQUFJdlosZUFBSixDQUFvQmtaLFFBQVFLLENBQTVCLENBQVA7R0FERixNQUVPLElBQUksQ0FBQ25jLEtBQUtLLFdBQUwsQ0FBaUJ5YixRQUFROVgsQ0FBekIsQ0FBTCxFQUFrQztXQUNoQyxJQUFJOUIsUUFBSixDQUFhNFosUUFBUTlYLENBQXJCLENBQVA7R0FESyxNQUVBO1dBQ0UsSUFBUDs7O01BR0UsQ0FBQ2hFLEtBQUtLLFdBQUwsQ0FBaUJ5YixRQUFRZCxDQUF6QixDQUFELElBQWdDYyxRQUFReFYsQ0FBUixLQUFjLENBQWxELEVBQXFEO1lBQzNDMFUsQ0FBUixJQUFhLEVBQWI7OztNQUdFYyxRQUFRTSxDQUFSLEtBQWMsQ0FBZCxJQUFtQk4sUUFBUU8sQ0FBL0IsRUFBa0M7WUFDeEJBLENBQVIsR0FBWSxDQUFDUCxRQUFRTyxDQUFyQjs7O01BR0lsRixPQUFPNVMsT0FBTzhCLElBQVAsQ0FBWXlWLE9BQVosRUFBcUJyVyxNQUFyQixDQUE0QixVQUFDMUMsQ0FBRCxFQUFJd0QsQ0FBSixFQUFVO1FBQzNDc0QsSUFBSXFTLFFBQVEzVixDQUFSLENBQVY7UUFDSXNELENBQUosRUFBTztRQUNIQSxDQUFGLElBQU9pUyxRQUFRdlYsQ0FBUixDQUFQOzs7V0FHS3hELENBQVA7R0FOVyxFQU9WLEVBUFUsQ0FBYjs7U0FTTyxDQUFDb1UsSUFBRCxFQUFPblYsSUFBUCxDQUFQOzs7Ozs7O0FBT0YsSUFBYXNhLFdBQWI7dUJBQ2M3UyxHQUFaLEVBQWlCOzs7V0FDUnFCLGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsS0FBNUIsRUFBbUMsRUFBRWxKLE9BQU82SCxHQUFULEVBQWNzQixZQUFZLElBQTFCLEVBQW5DOzs7OztpQ0FHVzdGLEtBTGYsRUFLc0JwRixNQUx0QixFQUs4Qjs7O21CQUNYK04sVUFBVWdELFdBQVYsQ0FBc0IvUSxNQUF0QixDQUFUO1VBQ0prWCxLQURJLEdBQ0kvRixPQUFPdkgsR0FBUCxDQUFXO2VBQUt3UixhQUFhaFgsQ0FBYixFQUFnQixNQUFLdUYsR0FBckIsQ0FBTDtPQUFYLENBREo7d0JBRWdCbVMsV0FBVzVFLEtBQVgsQ0FGaEI7O1VBRUg1RSxLQUZHO1VBRUl5SixRQUZKO1VBR0pDLE9BSEksR0FHTTFaLE1BQU04QyxLQUFOLEVBQWFrTixLQUFiLEVBQW9CeUosUUFBcEIsQ0FITjttQkFJYUMsVUFBVUcsb0JBQW9CSCxPQUFwQixDQUFWLEdBQXlDLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FKdEQ7O1VBSUhoSSxNQUpHO1VBSUs5UixJQUpMOzs7YUFNQyxFQUFFa0QsWUFBRixFQUFTK0wsY0FBVCxFQUFpQm1CLFlBQWpCLEVBQXdCMEosZ0JBQXhCLEVBQWlDaEksY0FBakMsRUFBeUM5UixVQUF6QyxFQUFQOzs7O2tDQUdZa0QsS0FmaEIsRUFldUJwRixNQWZ2QixFQWUrQjswQkFDRixLQUFLeWMsWUFBTCxDQUFrQnJYLEtBQWxCLEVBQXlCcEYsTUFBekIsQ0FERTtVQUNuQmdVLE1BRG1CLGlCQUNuQkEsTUFEbUI7VUFDWDlSLElBRFcsaUJBQ1hBLElBRFc7O2FBRXBCLENBQUM4UixNQUFELEVBQVM5UixJQUFULENBQVA7Ozs7OztBQ3hQSixJQUFNd2EsZ0JBQWdCLENBQUMsQ0FBRCxFQUFJLEVBQUosRUFBUSxFQUFSLEVBQVksRUFBWixFQUFnQixHQUFoQixFQUFxQixHQUFyQixFQUEwQixHQUExQixFQUErQixHQUEvQixFQUFvQyxHQUFwQyxFQUF5QyxHQUF6QyxFQUE4QyxHQUE5QyxFQUFtRCxHQUFuRCxDQUF0QjtJQUNFQyxhQUFhLENBQUMsQ0FBRCxFQUFJLEVBQUosRUFBUSxFQUFSLEVBQVksRUFBWixFQUFnQixHQUFoQixFQUFxQixHQUFyQixFQUEwQixHQUExQixFQUErQixHQUEvQixFQUFvQyxHQUFwQyxFQUF5QyxHQUF6QyxFQUE4QyxHQUE5QyxFQUFtRCxHQUFuRCxDQURmOztBQUdBLFNBQVNDLFNBQVQsQ0FBbUJsVyxJQUFuQixFQUF5QkUsS0FBekIsRUFBZ0M2RSxHQUFoQyxFQUFxQztNQUM3Qm9SLEtBQUssSUFBSXpjLElBQUosQ0FBU0EsS0FBS3VDLEdBQUwsQ0FBUytELElBQVQsRUFBZUUsUUFBUSxDQUF2QixFQUEwQjZFLEdBQTFCLENBQVQsRUFBeUNxUixTQUF6QyxFQUFYO1NBQ09ELE9BQU8sQ0FBUCxHQUFXLENBQVgsR0FBZUEsRUFBdEI7OztBQUdGLFNBQVNFLGNBQVQsQ0FBd0J4TixRQUF4QixFQUFrQztNQUMxQnlOLEtBQ0YsQ0FBQ3pOLFdBQ0NqTSxLQUFLa0MsS0FBTCxDQUFXK0osV0FBVyxDQUF0QixDQURELEdBRUNqTSxLQUFLa0MsS0FBTCxDQUFXK0osV0FBVyxHQUF0QixDQUZELEdBR0NqTSxLQUFLa0MsS0FBTCxDQUFXK0osV0FBVyxHQUF0QixDQUhGLElBSUEsQ0FMSjtNQU1FME4sT0FBTzFOLFdBQVcsQ0FOcEI7TUFPRTJOLEtBQUssQ0FBQ0QsT0FBTzNaLEtBQUtrQyxLQUFMLENBQVd5WCxPQUFPLENBQWxCLENBQVAsR0FBOEIzWixLQUFLa0MsS0FBTCxDQUFXeVgsT0FBTyxHQUFsQixDQUE5QixHQUF1RDNaLEtBQUtrQyxLQUFMLENBQVd5WCxPQUFPLEdBQWxCLENBQXhELElBQWtGLENBUHpGO1NBUU9ELE9BQU8sQ0FBUCxJQUFZRSxPQUFPLENBQW5CLEdBQXVCLEVBQXZCLEdBQTRCLEVBQW5DOzs7QUFHRixTQUFTQyxjQUFULENBQXdCelcsSUFBeEIsRUFBOEJFLEtBQTlCLEVBQXFDNkUsR0FBckMsRUFBMEM7U0FDakNBLE1BQU0sQ0FBQ3ZMLEtBQUt5RyxVQUFMLENBQWdCRCxJQUFoQixJQUF3QmlXLFVBQXhCLEdBQXFDRCxhQUF0QyxFQUFxRDlWLFFBQVEsQ0FBN0QsQ0FBYjs7O0FBR0YsU0FBU3dXLGdCQUFULENBQTBCMVcsSUFBMUIsRUFBZ0MrSSxPQUFoQyxFQUF5QztNQUNqQzROLFFBQVFuZCxLQUFLeUcsVUFBTCxDQUFnQkQsSUFBaEIsSUFBd0JpVyxVQUF4QixHQUFxQ0QsYUFBbkQ7TUFDRVksU0FBU0QsTUFBTUUsU0FBTixDQUFnQjtXQUFLM2IsSUFBSTZOLE9BQVQ7R0FBaEIsQ0FEWDtNQUVFaEUsTUFBTWdFLFVBQVU0TixNQUFNQyxNQUFOLENBRmxCO1NBR08sRUFBRTFXLE9BQU8wVyxTQUFTLENBQWxCLEVBQXFCN1IsUUFBckIsRUFBUDs7Ozs7OztBQU9GLElBQWErUixXQUFiOzs7Ozs7O29DQUN5QkMsT0FEekIsRUFDa0M7VUFDdEIvVyxJQURzQixHQUNEK1csT0FEQyxDQUN0Qi9XLElBRHNCO1VBQ2hCRSxLQURnQixHQUNENlcsT0FEQyxDQUNoQjdXLEtBRGdCO1VBQ1Q2RSxHQURTLEdBQ0RnUyxPQURDLENBQ1RoUyxHQURTO1VBRTVCZ0UsT0FGNEIsR0FFbEIwTixlQUFlelcsSUFBZixFQUFxQkUsS0FBckIsRUFBNEI2RSxHQUE1QixDQUZrQjtVQUc1QkssT0FINEIsR0FHbEI4USxVQUFVbFcsSUFBVixFQUFnQkUsS0FBaEIsRUFBdUI2RSxHQUF2QixDQUhrQjs7O1VBSzFCK0QsYUFBYWxNLEtBQUtrQyxLQUFMLENBQVcsQ0FBQ2lLLFVBQVUzRCxPQUFWLEdBQW9CLEVBQXJCLElBQTJCLENBQXRDLENBQWpCO1VBQ0V5RCxpQkFERjs7VUFHSUMsYUFBYSxDQUFqQixFQUFvQjttQkFDUDlJLE9BQU8sQ0FBbEI7cUJBQ2FxVyxlQUFleE4sUUFBZixDQUFiO09BRkYsTUFHTyxJQUFJQyxhQUFhdU4sZUFBZXJXLElBQWYsQ0FBakIsRUFBdUM7bUJBQ2pDQSxPQUFPLENBQWxCO3FCQUNhLENBQWI7T0FGSyxNQUdBO21CQUNNQSxJQUFYOzs7YUFHS2pDLE9BQU91QyxNQUFQLENBQWMsRUFBRXVJLGtCQUFGLEVBQVlDLHNCQUFaLEVBQXdCMUQsZ0JBQXhCLEVBQWQsRUFBaUQ1TCxLQUFLd2QsVUFBTCxDQUFnQkQsT0FBaEIsQ0FBakQsQ0FBUDs7OztvQ0FHcUJFLFFBdEJ6QixFQXNCbUM7VUFDdkJwTyxRQUR1QixHQUNXb08sUUFEWCxDQUN2QnBPLFFBRHVCO1VBQ2JDLFVBRGEsR0FDV21PLFFBRFgsQ0FDYm5PLFVBRGE7VUFDRDFELE9BREMsR0FDVzZSLFFBRFgsQ0FDRDdSLE9BREM7VUFFN0I4UixhQUY2QixHQUViaEIsVUFBVXJOLFFBQVYsRUFBb0IsQ0FBcEIsRUFBdUIsQ0FBdkIsQ0FGYTtVQUc3QnNPLFVBSDZCLEdBR2hCM2QsS0FBSzJkLFVBQUwsQ0FBZ0J0TyxRQUFoQixDQUhnQjs7VUFJM0JFLFVBQVVELGFBQWEsQ0FBYixHQUFpQjFELE9BQWpCLEdBQTJCOFIsYUFBM0IsR0FBMkMsQ0FBekQ7VUFDRWxYLGFBREY7O1VBR0krSSxVQUFVLENBQWQsRUFBaUI7ZUFDUkYsV0FBVyxDQUFsQjttQkFDV3JQLEtBQUsyZCxVQUFMLENBQWdCblgsSUFBaEIsQ0FBWDtPQUZGLE1BR08sSUFBSStJLFVBQVVvTyxVQUFkLEVBQTBCO2VBQ3hCdE8sV0FBVyxDQUFsQjttQkFDV3JQLEtBQUsyZCxVQUFMLENBQWdCblgsSUFBaEIsQ0FBWDtPQUZLLE1BR0E7ZUFDRTZJLFFBQVA7Ozs4QkFHcUI2TixpQkFBaUIxVyxJQUFqQixFQUF1QitJLE9BQXZCLENBakJRO1VBaUJ2QjdJLEtBakJ1QixxQkFpQnZCQSxLQWpCdUI7VUFpQmhCNkUsR0FqQmdCLHFCQWlCaEJBLEdBakJnQjs7YUFtQnhCaEgsT0FBT3VDLE1BQVAsQ0FBYyxFQUFFTixVQUFGLEVBQVFFLFlBQVIsRUFBZTZFLFFBQWYsRUFBZCxFQUFvQ3ZMLEtBQUt3ZCxVQUFMLENBQWdCQyxRQUFoQixDQUFwQyxDQUFQOzs7O3VDQUd3QkcsUUE1QzVCLEVBNENzQztVQUMxQnBYLElBRDBCLEdBQ0xvWCxRQURLLENBQzFCcFgsSUFEMEI7VUFDcEJFLEtBRG9CLEdBQ0xrWCxRQURLLENBQ3BCbFgsS0FEb0I7VUFDYjZFLEdBRGEsR0FDTHFTLFFBREssQ0FDYnJTLEdBRGE7VUFFaENnRSxPQUZnQyxHQUV0QjBOLGVBQWV6VyxJQUFmLEVBQXFCRSxLQUFyQixFQUE0QjZFLEdBQTVCLENBRnNCOzs7YUFJM0JoSCxPQUFPdUMsTUFBUCxDQUFjLEVBQUVOLFVBQUYsRUFBUStJLGdCQUFSLEVBQWQsRUFBaUN2UCxLQUFLd2QsVUFBTCxDQUFnQkksUUFBaEIsQ0FBakMsQ0FBUDs7Ozt1Q0FHd0JDLFdBbkQ1QixFQW1EeUM7VUFDN0JyWCxJQUQ2QixHQUNYcVgsV0FEVyxDQUM3QnJYLElBRDZCO1VBQ3ZCK0ksT0FEdUIsR0FDWHNPLFdBRFcsQ0FDdkJ0TyxPQUR1QjsrQkFFbEIyTixpQkFBaUIxVyxJQUFqQixFQUF1QitJLE9BQXZCLENBRmtCO1VBRWpDN0ksS0FGaUMsc0JBRWpDQSxLQUZpQztVQUUxQjZFLEdBRjBCLHNCQUUxQkEsR0FGMEI7O2FBSTlCaEgsT0FBT3VDLE1BQVAsQ0FBYyxFQUFFTixVQUFGLEVBQVFFLFlBQVIsRUFBZTZFLFFBQWYsRUFBZCxFQUFvQ3ZMLEtBQUt3ZCxVQUFMLENBQWdCSyxXQUFoQixDQUFwQyxDQUFQOzs7O3VDQUd3QnpYLEdBMUQ1QixFQTBEaUM7VUFDdkIwWCxZQUFZOWQsS0FBS29FLFFBQUwsQ0FBY2dDLElBQUlpSixRQUFsQixDQUFsQjtVQUNFME8sWUFBWS9kLEtBQUtnZSxhQUFMLENBQW1CNVgsSUFBSWtKLFVBQXZCLEVBQW1DLENBQW5DLEVBQXNDdU4sZUFBZXpXLElBQUlpSixRQUFuQixDQUF0QyxDQURkO1VBRUU0TyxlQUFlamUsS0FBS2dlLGFBQUwsQ0FBbUI1WCxJQUFJd0YsT0FBdkIsRUFBZ0MsQ0FBaEMsRUFBbUMsQ0FBbkMsQ0FGakI7O1VBSUksQ0FBQ2tTLFNBQUwsRUFBZ0I7ZUFDUCx1QkFBUDtPQURGLE1BRU8sSUFBSSxDQUFDQyxTQUFMLEVBQWdCO2VBQ2QsbUJBQVA7T0FESyxNQUVBLElBQUksQ0FBQ0UsWUFBTCxFQUFtQjtlQUNqQixzQkFBUDtPQURLLE1BRUEsT0FBTyxLQUFQOzs7OzBDQUdvQjdYLEdBeEUvQixFQXdFb0M7VUFDMUIwWCxZQUFZOWQsS0FBS29FLFFBQUwsQ0FBY2dDLElBQUlJLElBQWxCLENBQWxCO1VBQ0UwWCxlQUFlbGUsS0FBS2dlLGFBQUwsQ0FBbUI1WCxJQUFJbUosT0FBdkIsRUFBZ0MsQ0FBaEMsRUFBbUN2UCxLQUFLMmQsVUFBTCxDQUFnQnZYLElBQUlJLElBQXBCLENBQW5DLENBRGpCOztVQUdJLENBQUNzWCxTQUFMLEVBQWdCO2VBQ1AsbUJBQVA7T0FERixNQUVPLElBQUksQ0FBQ0ksWUFBTCxFQUFtQjtlQUNqQixzQkFBUDtPQURLLE1BRUEsT0FBTyxLQUFQOzs7OzRDQUdzQjlYLEdBbkZqQyxFQW1Gc0M7VUFDNUIwWCxZQUFZOWQsS0FBS29FLFFBQUwsQ0FBY2dDLElBQUlJLElBQWxCLENBQWxCO1VBQ0UyWCxhQUFhbmUsS0FBS2dlLGFBQUwsQ0FBbUI1WCxJQUFJTSxLQUF2QixFQUE4QixDQUE5QixFQUFpQyxFQUFqQyxDQURmO1VBRUUwWCxXQUFXcGUsS0FBS2dlLGFBQUwsQ0FBbUI1WCxJQUFJbUYsR0FBdkIsRUFBNEIsQ0FBNUIsRUFBK0J2TCxLQUFLcWUsV0FBTCxDQUFpQmpZLElBQUlJLElBQXJCLEVBQTJCSixJQUFJTSxLQUEvQixDQUEvQixDQUZiOztVQUlJLENBQUNvWCxTQUFMLEVBQWdCO2VBQ1AsbUJBQVA7T0FERixNQUVPLElBQUksQ0FBQ0ssVUFBTCxFQUFpQjtlQUNmLG9CQUFQO09BREssTUFFQSxJQUFJLENBQUNDLFFBQUwsRUFBZTtlQUNiLGtCQUFQO09BREssTUFFQSxPQUFPLEtBQVA7Ozs7dUNBR2lCaFksR0FqRzVCLEVBaUdpQztVQUN2QmtZLFlBQVl0ZSxLQUFLZ2UsYUFBTCxDQUFtQjVYLElBQUk0RixJQUF2QixFQUE2QixDQUE3QixFQUFnQyxFQUFoQyxDQUFsQjtVQUNFdVMsY0FBY3ZlLEtBQUtnZSxhQUFMLENBQW1CNVgsSUFBSTZJLE1BQXZCLEVBQStCLENBQS9CLEVBQWtDLEVBQWxDLENBRGhCO1VBRUV1UCxjQUFjeGUsS0FBS2dlLGFBQUwsQ0FBbUI1WCxJQUFJNEksTUFBdkIsRUFBK0IsQ0FBL0IsRUFBa0MsRUFBbEMsQ0FGaEI7VUFHRXlQLG1CQUFtQnplLEtBQUtnZSxhQUFMLENBQW1CNVgsSUFBSTJJLFdBQXZCLEVBQW9DLENBQXBDLEVBQXVDLEdBQXZDLENBSHJCOztVQUtJLENBQUN1UCxTQUFMLEVBQWdCO2VBQ1AsbUJBQVA7T0FERixNQUVPLElBQUksQ0FBQ0MsV0FBTCxFQUFrQjtlQUNoQixxQkFBUDtPQURLLE1BRUEsSUFBSSxDQUFDQyxXQUFMLEVBQWtCO2VBQ2hCLHFCQUFQO09BREssTUFFQSxJQUFJLENBQUNDLGdCQUFMLEVBQXVCO2VBQ3JCLDBCQUFQO09BREssTUFFQSxPQUFPLEtBQVA7Ozs7OztBQ2xJWCxJQUFNNUosVUFBVSxrQkFBaEI7SUFDRTZKLG1CQUFtQixrQkFEckI7O0FBR0EsU0FBU0Msc0JBQVQsQ0FBZ0NwWixFQUFoQyxFQUFvQztNQUM5QkEsR0FBR2tZLFFBQUgsS0FBZ0IsSUFBcEIsRUFBMEI7T0FDckJBLFFBQUgsR0FBY0gsWUFBWXNCLGVBQVosQ0FBNEJyWixHQUFHNEksQ0FBL0IsQ0FBZDs7U0FFSzVJLEdBQUdrWSxRQUFWOzs7QUFHRixTQUFTbkksS0FBVCxDQUFldUosSUFBZixFQUFnQztNQUFYM1QsSUFBVyx1RUFBSixFQUFJOztNQUN4QjhDLFVBQVU7UUFDVjZRLEtBQUtuZixFQURLO1VBRVJtZixLQUFLN2MsSUFGRztPQUdYNmMsS0FBSzFRLENBSE07T0FJWDBRLEtBQUs5WixDQUpNO1NBS1Q4WixLQUFLcFYsR0FMSTttQkFNQ29WLEtBQUsvSTtHQU50QjtTQVFPLElBQUlwUixRQUFKLENBQWFILE9BQU91QyxNQUFQLENBQWMsRUFBZCxFQUFrQmtILE9BQWxCLEVBQTJCOUMsSUFBM0IsRUFBaUMsRUFBRTRULEtBQUs5USxPQUFQLEVBQWpDLENBQWIsQ0FBUDs7O0FBR0YsU0FBUytRLFNBQVQsQ0FBbUJDLE9BQW5CLEVBQTRCamEsQ0FBNUIsRUFBK0JrYSxFQUEvQixFQUFtQzs7TUFFN0JDLFdBQVdGLFVBQVVqYSxJQUFJLEVBQUosR0FBUyxJQUFsQzs7O01BR01vYSxLQUFLRixHQUFHcGMsTUFBSCxDQUFVcWMsUUFBVixDQUFYOzs7TUFHSW5hLE1BQU1vYSxFQUFWLEVBQWM7V0FDTCxDQUFDRCxRQUFELEVBQVduYSxDQUFYLENBQVA7Ozs7Y0FJVSxDQUFDb2EsS0FBS3BhLENBQU4sSUFBVyxFQUFYLEdBQWdCLElBQTVCOzs7TUFHTXFhLEtBQUtILEdBQUdwYyxNQUFILENBQVVxYyxRQUFWLENBQVg7TUFDSUMsT0FBT0MsRUFBWCxFQUFlO1dBQ04sQ0FBQ0YsUUFBRCxFQUFXQyxFQUFYLENBQVA7Ozs7U0FJSyxDQUFDSCxVQUFVNWIsS0FBS2ljLEdBQUwsQ0FBU0YsRUFBVCxFQUFhQyxFQUFiLElBQW1CLEVBQW5CLEdBQXdCLElBQW5DLEVBQXlDaGMsS0FBS2tjLEdBQUwsQ0FBU0gsRUFBVCxFQUFhQyxFQUFiLENBQXpDLENBQVA7OztBQUdGLFNBQVNHLE9BQVQsQ0FBaUI3ZixFQUFqQixFQUFxQm1ELE1BQXJCLEVBQTZCO1FBQ3JCQSxTQUFTLEVBQVQsR0FBYyxJQUFwQjs7TUFFTTRKLElBQUksSUFBSXZNLElBQUosQ0FBU1IsRUFBVCxDQUFWOztTQUVPO1VBQ0MrTSxFQUFFK1MsY0FBRixFQUREO1dBRUUvUyxFQUFFZ1QsV0FBRixLQUFrQixDQUZwQjtTQUdBaFQsRUFBRWlULFVBQUYsRUFIQTtVQUlDalQsRUFBRWtULFdBQUYsRUFKRDtZQUtHbFQsRUFBRW1ULGFBQUYsRUFMSDtZQU1HblQsRUFBRW9ULGFBQUYsRUFOSDtpQkFPUXBULEVBQUVxVCxrQkFBRjtHQVBmOzs7QUFXRixTQUFTQyxZQUFULENBQXNCM1osR0FBdEIsRUFBMkI7TUFDckJxRyxJQUFJdk0sS0FBS3VDLEdBQUwsQ0FDTjJELElBQUlJLElBREUsRUFFTkosSUFBSU0sS0FBSixHQUFZLENBRk4sRUFHTk4sSUFBSW1GLEdBSEUsRUFJTm5GLElBQUk0RixJQUpFLEVBS041RixJQUFJNkksTUFMRSxFQU1ON0ksSUFBSTRJLE1BTkUsRUFPTjVJLElBQUkySSxXQVBFLENBQVI7OztNQVdJM0ksSUFBSUksSUFBSixHQUFXLEdBQVgsSUFBa0JKLElBQUlJLElBQUosSUFBWSxDQUFsQyxFQUFxQztRQUMvQixJQUFJdEcsSUFBSixDQUFTdU0sQ0FBVCxDQUFKO01BQ0V1VCxXQUFGLENBQWM1WixJQUFJSSxJQUFsQjs7U0FFSyxDQUFDaUcsQ0FBUjs7O0FBR0YsU0FBU3dULE9BQVQsQ0FBaUI3WixHQUFqQixFQUFzQnZELE1BQXRCLEVBQThCYixJQUE5QixFQUFvQztTQUMzQitjLFVBQVVnQixhQUFhM1osR0FBYixDQUFWLEVBQTZCdkQsTUFBN0IsRUFBcUNiLElBQXJDLENBQVA7OztBQUdGLFNBQVNrZSxVQUFULENBQW9CckIsSUFBcEIsRUFBMEIvTixHQUExQixFQUErQjtNQUN2QnFQLE9BQU90QixLQUFLOVosQ0FBbEI7TUFDRW9KLElBQUk1SixPQUFPdUMsTUFBUCxDQUFjLEVBQWQsRUFBa0IrWCxLQUFLMVEsQ0FBdkIsRUFBMEI7VUFDdEIwUSxLQUFLMVEsQ0FBTCxDQUFPM0gsSUFBUCxHQUFjc0ssSUFBSXNGLEtBREk7V0FFckJ5SSxLQUFLMVEsQ0FBTCxDQUFPekgsS0FBUCxHQUFlb0ssSUFBSXhGLE1BRkU7U0FHdkJ1VCxLQUFLMVEsQ0FBTCxDQUFPNUMsR0FBUCxHQUFhdUYsSUFBSXVGLElBQWpCLEdBQXdCdkYsSUFBSXdGLEtBQUosR0FBWTtHQUh2QyxDQUROO01BTUU4SixjQUFjL2IsU0FBU0csVUFBVCxDQUFvQjtXQUN6QnNNLElBQUk1TixLQURxQjthQUV2QjROLElBQUkzTixPQUZtQjthQUd2QjJOLElBQUlpRSxPQUhtQjtrQkFJbEJqRSxJQUFJa0U7R0FKTixFQUtYcUwsRUFMVyxDQUtSLGNBTFEsQ0FOaEI7TUFZRXJCLFVBQVVlLGFBQWE1UixDQUFiLENBWlo7O21CQWNjNFEsVUFBVUMsT0FBVixFQUFtQm1CLElBQW5CLEVBQXlCdEIsS0FBSzdjLElBQTlCLENBZmU7O01BZXhCdEMsRUFmd0I7TUFlcEJxRixDQWZvQjs7TUFpQnpCcWIsZ0JBQWdCLENBQXBCLEVBQXVCO1VBQ2ZBLFdBQU47O1FBRUl2QixLQUFLN2MsSUFBTCxDQUFVYSxNQUFWLENBQWlCbkQsRUFBakIsQ0FBSjs7O1NBR0ssRUFBRUEsTUFBRixFQUFNcUYsSUFBTixFQUFQOzs7QUFHRixTQUFTdWIsbUJBQVQsQ0FBNkJ4ZixNQUE3QixFQUFxQ3lmLFVBQXJDLEVBQTREO01BQVhwVyxJQUFXLHVFQUFKLEVBQUk7TUFDbERxVyxPQURrRCxHQUNoQ3JXLElBRGdDLENBQ2xEcVcsT0FEa0Q7TUFDekN4ZSxJQUR5QyxHQUNoQ21JLElBRGdDLENBQ3pDbkksSUFEeUM7O01BRXREbEIsVUFBVXlELE9BQU84QixJQUFQLENBQVl2RixNQUFaLEVBQW9CYSxNQUFwQixLQUErQixDQUE3QyxFQUFnRDtRQUN4QzhlLHFCQUFxQkYsY0FBY3ZlLElBQXpDO1FBQ0U2YyxPQUFPbmEsU0FBU0YsVUFBVCxDQUNMRCxPQUFPdUMsTUFBUCxDQUFjaEcsTUFBZCxFQUFzQnFKLElBQXRCLEVBQTRCO1lBQ3BCc1c7S0FEUixDQURLLENBRFQ7V0FNT0QsVUFBVTNCLElBQVYsR0FBaUJBLEtBQUsyQixPQUFMLENBQWF4ZSxJQUFiLENBQXhCO0dBUEYsTUFRTztXQUNFMEMsU0FBUytVLE9BQVQsQ0FBaUJpRixnQkFBakIsQ0FBUDs7OztBQUlKLFNBQVNnQyxXQUFULENBQXFCbmIsRUFBckIsRUFBeUJ6RixNQUF6QixFQUFpQztTQUN4QnlGLEdBQUd4RCxPQUFILEdBQ0g4TCxVQUFVekQsTUFBVixDQUFpQkYsT0FBT0UsTUFBUCxDQUFjLElBQWQsQ0FBakIsRUFBc0N1Vyx3QkFBdEMsQ0FBK0RwYixFQUEvRCxFQUFtRXpGLE1BQW5FLENBREcsR0FFSCxJQUZKOzs7QUFLRixJQUFNOGdCLG9CQUFvQjtTQUNmLENBRGU7T0FFakIsQ0FGaUI7UUFHaEIsQ0FIZ0I7VUFJZCxDQUpjO1VBS2QsQ0FMYztlQU1UO0NBTmpCO0lBUUVDLHdCQUF3QjtjQUNWLENBRFU7V0FFYixDQUZhO1FBR2hCLENBSGdCO1VBSWQsQ0FKYztVQUtkLENBTGM7ZUFNVDtDQWRqQjtJQWdCRUMsMkJBQTJCO1dBQ2hCLENBRGdCO1FBRW5CLENBRm1CO1VBR2pCLENBSGlCO1VBSWpCLENBSmlCO2VBS1o7Q0FyQmpCOztBQXdCQSxTQUFTQyxhQUFULENBQXVCdEksUUFBdkIsRUFBaUN1SSxZQUFqQyxFQUErQ0MsY0FBL0MsRUFBK0Q7U0FDdERELGdCQUFnQnZJLFNBQVN6SixNQUFULEtBQW9CLENBQXBDLElBQXlDeUosU0FBUzFKLFdBQVQsS0FBeUIsQ0FBbEUsR0FDSCxRQURHLEdBRUhrUyxrQkFBa0J4SSxTQUFTMUosV0FBVCxLQUF5QixDQUEzQyxHQUErQyxZQUEvQyxHQUE4RCxnQkFGbEU7OztBQUtGLElBQU1zRyxlQUFlLENBQUMsTUFBRCxFQUFTLE9BQVQsRUFBa0IsS0FBbEIsRUFBeUIsTUFBekIsRUFBaUMsUUFBakMsRUFBMkMsUUFBM0MsRUFBcUQsYUFBckQsQ0FBckI7O0FBRUEsSUFBTTZMLG1CQUFtQixDQUN2QixVQUR1QixFQUV2QixZQUZ1QixFQUd2QixTQUh1QixFQUl2QixNQUp1QixFQUt2QixRQUx1QixFQU12QixRQU51QixFQU92QixhQVB1QixDQUF6Qjs7QUFVQSxJQUFNQyxzQkFBc0IsQ0FBQyxNQUFELEVBQVMsU0FBVCxFQUFvQixNQUFwQixFQUE0QixRQUE1QixFQUFzQyxRQUF0QyxFQUFnRCxhQUFoRCxDQUE1Qjs7QUFFQSxTQUFTekssYUFBVCxDQUF1QnBYLElBQXZCLEVBQW9EO01BQXZCeUksYUFBdUIsdUVBQVAsS0FBTzs7TUFDNUNDLGFBQWE7VUFDWCxNQURXO1dBRVYsTUFGVTtXQUdWLE9BSFU7WUFJVCxPQUpTO1NBS1osS0FMWTtVQU1YLEtBTlc7VUFPWCxNQVBXO1dBUVYsTUFSVTtZQVNULFFBVFM7YUFVUixRQVZRO1lBV1QsUUFYUzthQVlSLFFBWlE7aUJBYUosYUFiSTtrQkFjSCxhQWRHO2FBZVIsU0FmUTtjQWdCUCxTQWhCTztnQkFpQkwsWUFqQks7aUJBa0JKLFlBbEJJO2lCQW1CSixZQW5CSTtjQW9CUCxVQXBCTztlQXFCTixVQXJCTTthQXNCUjtJQUNUMUksT0FBT0EsS0FBSzZILFdBQUwsRUFBUCxHQUE0QjdILElBdkJYLENBQW5COztNQXlCSSxDQUFDeUksYUFBRCxJQUFrQixDQUFDQyxVQUF2QixFQUFtQyxNQUFNLElBQUkzSSxnQkFBSixDQUFxQkMsSUFBckIsQ0FBTjs7U0FFNUIwSSxVQUFQOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXVCRixJQUFhdEQsUUFBYjs7OztzQkFJMkI7UUFBYmtSLE1BQWEsdUVBQUosRUFBSTs7O1FBQ2pCNVQsT0FBTzRULE9BQU81VCxJQUFQLElBQWU4QixTQUFTSCxXQUFyQztRQUNFbVMsZ0JBQWdCRixPQUFPRSxhQUFQLEtBQXlCOVQsS0FBS0QsT0FBTCxHQUFlLElBQWYsR0FBc0IyYyxnQkFBL0MsQ0FEbEI7O1dBR081VCxjQUFQLENBQXNCLElBQXRCLEVBQTRCLElBQTVCLEVBQWtDO2FBQ3pCOEssT0FBT2xXLEVBQVAsSUFBYW9FLFNBQVNKLEdBQVQsRUFEWTtrQkFFcEI7S0FGZDs7V0FLT29ILGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsTUFBNUIsRUFBb0M7YUFDM0I5SSxJQUQyQjtrQkFFdEI7S0FGZDs7V0FLTzhJLGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsS0FBNUIsRUFBbUM7YUFDMUI4SyxPQUFPbk0sR0FBUCxJQUFjUyxPQUFPRSxNQUFQLEVBRFk7a0JBRXJCO0tBRmQ7O1dBS09VLGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsZUFBNUIsRUFBNkM7YUFDcENnTCxhQURvQztrQkFFL0I7S0FGZDs7V0FLT2hMLGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsVUFBNUIsRUFBd0M7Z0JBQzVCLElBRDRCO2FBRS9CLElBRitCO2tCQUcxQjtLQUhkOztRQU1JLENBQUNnTCxhQUFMLEVBQW9CO1VBQ1pzTCxZQUNGeEwsT0FBT2tKLEdBQVAsSUFBY2xKLE9BQU9rSixHQUFQLENBQVdwZixFQUFYLEtBQWtCLEtBQUtBLEVBQXJDLElBQTJDa1csT0FBT2tKLEdBQVAsQ0FBVzljLElBQVgsQ0FBZ0JpWCxNQUFoQixDQUF1QixLQUFLalgsSUFBNUIsQ0FEL0M7VUFFRW1NLElBQUlpVCxZQUFZeEwsT0FBT2tKLEdBQVAsQ0FBVzNRLENBQXZCLEdBQTJCb1IsUUFBUSxLQUFLN2YsRUFBYixFQUFpQixLQUFLc0MsSUFBTCxDQUFVYSxNQUFWLENBQWlCLEtBQUtuRCxFQUF0QixDQUFqQixDQUZqQztVQUdFcUYsSUFBSXFjLFlBQVl4TCxPQUFPa0osR0FBUCxDQUFXL1osQ0FBdkIsR0FBMkIsS0FBSy9DLElBQUwsQ0FBVWEsTUFBVixDQUFpQixLQUFLbkQsRUFBdEIsQ0FIakM7O2FBS09vTCxjQUFQLENBQXNCLElBQXRCLEVBQTRCLEdBQTVCLEVBQWlDLEVBQUVsSixPQUFPdU0sQ0FBVCxFQUFqQzthQUNPckQsY0FBUCxDQUFzQixJQUF0QixFQUE0QixHQUE1QixFQUFpQyxFQUFFbEosT0FBT21ELENBQVQsRUFBakM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7MkJBb1ZBekYsSUE3WE4sRUE2WFk7YUFDRCxLQUFLQSxJQUFMLENBQVA7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lDQWtRNEI7VUFBWDZLLElBQVcsdUVBQUosRUFBSTs7a0NBQ2tCMEQsVUFBVXpELE1BQVYsQ0FDNUMsS0FBS1gsR0FBTCxDQUFTNkwsS0FBVCxDQUFlbkwsSUFBZixDQUQ0QyxFQUU1Q0EsSUFGNEMsRUFHNUMzSixlQUg0QyxDQUc1QixJQUg0QixDQURsQjtVQUNwQlQsTUFEb0IseUJBQ3BCQSxNQURvQjtVQUNad0osZUFEWSx5QkFDWkEsZUFEWTtVQUNLOFgsUUFETCx5QkFDS0EsUUFETDs7YUFLckIsRUFBRXRoQixjQUFGLEVBQVV3SixnQ0FBVixFQUEyQkMsZ0JBQWdCNlgsUUFBM0MsRUFBUDs7Ozs7Ozs7Ozs7Ozs7Ozs0QkFhMkI7VUFBdkJ4ZSxNQUF1Qix1RUFBZCxDQUFjO1VBQVhzSCxJQUFXLHVFQUFKLEVBQUk7O2FBQ3BCLEtBQUtxVyxPQUFMLENBQWE1ZCxnQkFBZ0JnQixRQUFoQixDQUF5QmYsTUFBekIsQ0FBYixFQUErQ3NILElBQS9DLENBQVA7Ozs7Ozs7Ozs7Ozs4QkFTUTthQUNELEtBQUtxVyxPQUFMLENBQWEsSUFBSTNnQixTQUFKLEVBQWIsQ0FBUDs7Ozs7Ozs7Ozs7Ozs7OzRCQVlNbUMsSUF6cUJWLEVBeXFCbUQ7cUZBQUosRUFBSTt1Q0FBakNzZixnQkFBaUM7VUFBakNBLGdCQUFpQyx5Q0FBZCxLQUFjOzthQUN4Q3RoQixLQUFLaUUsYUFBTCxDQUFtQmpDLElBQW5CLENBQVA7VUFDSUEsS0FBS2lYLE1BQUwsQ0FBWSxLQUFLalgsSUFBakIsQ0FBSixFQUE0QjtlQUNuQixJQUFQO09BREYsTUFFTyxJQUFJLENBQUNBLEtBQUtELE9BQVYsRUFBbUI7ZUFDakIyQyxTQUFTK1UsT0FBVCxDQUFpQmlGLGdCQUFqQixDQUFQO09BREssTUFFQTtZQUNDNkMsUUFBUUQsbUJBQ1YsS0FBSzVoQixFQUFMLEdBQVUsQ0FBQyxLQUFLcUYsQ0FBTCxHQUFTL0MsS0FBS2EsTUFBTCxDQUFZLEtBQUtuRCxFQUFqQixDQUFWLElBQWtDLEVBQWxDLEdBQXVDLElBRHZDLEdBRVYsS0FBS0EsRUFGVDtlQUdPNFYsTUFBTSxJQUFOLEVBQVksRUFBRTVWLElBQUk2aEIsS0FBTixFQUFhdmYsVUFBYixFQUFaLENBQVA7Ozs7Ozs7Ozs7Ozs7a0NBVTBEO3NGQUFKLEVBQUk7VUFBaERqQyxNQUFnRCxTQUFoREEsTUFBZ0Q7VUFBeEN3SixlQUF3QyxTQUF4Q0EsZUFBd0M7VUFBdkJDLGNBQXVCLFNBQXZCQSxjQUF1Qjs7VUFDdERDLE1BQU0sS0FBS0EsR0FBTCxDQUFTNkwsS0FBVCxDQUFlLEVBQUV2VixjQUFGLEVBQVV3SixnQ0FBVixFQUEyQkMsOEJBQTNCLEVBQWYsQ0FBWjthQUNPOEwsTUFBTSxJQUFOLEVBQVksRUFBRTdMLFFBQUYsRUFBWixDQUFQOzs7Ozs7Ozs7Ozs7OEJBU1ExSixNQXhzQlosRUF3c0JvQjthQUNULEtBQUt5aEIsV0FBTCxDQUFpQixFQUFFemhCLGNBQUYsRUFBakIsQ0FBUDs7Ozs7Ozs7Ozs7Ozs7OzsyQkFhRTBWLE1BdHRCTixFQXN0QmM7VUFDSnpOLGFBQWFoSSxLQUFLNFcsZUFBTCxDQUFxQm5CLE1BQXJCLEVBQTZCaUIsYUFBN0IsQ0FBbkI7VUFDRStLLG1CQUNFLENBQUN6aEIsS0FBS0ssV0FBTCxDQUFpQjJILFdBQVdxSCxRQUE1QixDQUFELElBQ0EsQ0FBQ3JQLEtBQUtLLFdBQUwsQ0FBaUIySCxXQUFXc0gsVUFBNUIsQ0FERCxJQUVBLENBQUN0UCxLQUFLSyxXQUFMLENBQWlCMkgsV0FBVzRELE9BQTVCLENBSkw7O1VBTUkrSyxjQUFKO1VBQ0k4SyxnQkFBSixFQUFzQjtnQkFDWm5FLFlBQVlvRSxlQUFaLENBQ05uZCxPQUFPdUMsTUFBUCxDQUFjd1csWUFBWXNCLGVBQVosQ0FBNEIsS0FBS3pRLENBQWpDLENBQWQsRUFBbURuRyxVQUFuRCxDQURNLENBQVI7T0FERixNQUlPLElBQUksQ0FBQ2hJLEtBQUtLLFdBQUwsQ0FBaUIySCxXQUFXdUgsT0FBNUIsQ0FBTCxFQUEyQztnQkFDeEMrTixZQUFZcUUsa0JBQVosQ0FDTnBkLE9BQU91QyxNQUFQLENBQWN3VyxZQUFZc0Usa0JBQVosQ0FBK0IsS0FBS3pULENBQXBDLENBQWQsRUFBc0RuRyxVQUF0RCxDQURNLENBQVI7T0FESyxNQUlBO2dCQUNHekQsT0FBT3VDLE1BQVAsQ0FBYyxLQUFLc1EsUUFBTCxFQUFkLEVBQStCcFAsVUFBL0IsQ0FBUjs7OztZQUlJaEksS0FBS0ssV0FBTCxDQUFpQjJILFdBQVd1RCxHQUE1QixDQUFKLEVBQXNDO2dCQUM5QkEsR0FBTixHQUFZbkksS0FBS2ljLEdBQUwsQ0FBU3JmLEtBQUtxZSxXQUFMLENBQWlCMUgsTUFBTW5RLElBQXZCLEVBQTZCbVEsTUFBTWpRLEtBQW5DLENBQVQsRUFBb0RpUSxNQUFNcEwsR0FBMUQsQ0FBWjs7OztxQkFJWTBVLFFBQVF0SixLQUFSLEVBQWUsS0FBSzVSLENBQXBCLEVBQXVCLEtBQUsvQyxJQUE1QixDQTFCTjs7VUEwQkh0QyxFQTFCRztVQTBCQ3FGLENBMUJEOzthQTJCSHVRLE1BQU0sSUFBTixFQUFZLEVBQUU1VixNQUFGLEVBQU1xRixJQUFOLEVBQVosQ0FBUDs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lCQWVHWixRQWh3QlAsRUFnd0JpQjtVQUNULENBQUMsS0FBS3BDLE9BQVYsRUFBbUIsT0FBTyxJQUFQO1VBQ2IrTyxNQUFNOVEsS0FBS3dXLGdCQUFMLENBQXNCclMsUUFBdEIsQ0FBWjthQUNPbVIsTUFBTSxJQUFOLEVBQVk0SyxXQUFXLElBQVgsRUFBaUJwUCxHQUFqQixDQUFaLENBQVA7Ozs7Ozs7Ozs7OzswQkFTSTNNLFFBNXdCUixFQTR3QmtCO1VBQ1YsQ0FBQyxLQUFLcEMsT0FBVixFQUFtQixPQUFPLElBQVA7VUFDYitPLE1BQU05USxLQUFLd1csZ0JBQUwsQ0FBc0JyUyxRQUF0QixFQUFnQ2dTLE1BQWhDLEVBQVo7YUFDT2IsTUFBTSxJQUFOLEVBQVk0SyxXQUFXLElBQVgsRUFBaUJwUCxHQUFqQixDQUFaLENBQVA7Ozs7Ozs7Ozs7Ozs7Ozs0QkFZTXhSLElBM3hCVixFQTJ4QmdCO1VBQ1IsQ0FBQyxLQUFLeUMsT0FBVixFQUFtQixPQUFPLElBQVA7VUFDYmdELElBQUksRUFBVjtVQUNFOGMsaUJBQWlCeGQsU0FBU3FTLGFBQVQsQ0FBdUJwWCxJQUF2QixDQURuQjtjQUVRdWlCLGNBQVI7YUFDTyxPQUFMO1lBQ0luYixLQUFGLEdBQVUsQ0FBVjs7YUFFRyxRQUFMO1lBQ0k2RSxHQUFGLEdBQVEsQ0FBUjs7YUFFRyxPQUFMO2FBQ0ssTUFBTDtZQUNJUyxJQUFGLEdBQVMsQ0FBVDs7YUFFRyxPQUFMO1lBQ0lpRCxNQUFGLEdBQVcsQ0FBWDs7YUFFRyxTQUFMO1lBQ0lELE1BQUYsR0FBVyxDQUFYOzthQUVHLFNBQUw7WUFDSUQsV0FBRixHQUFnQixDQUFoQjs7O2dCQUdNLElBQUkxUCxnQkFBSixDQUFxQkMsSUFBckIsQ0FBTjs7O1VBR0F1aUIsbUJBQW1CLE9BQXZCLEVBQWdDO1VBQzVCalcsT0FBRixHQUFZLENBQVo7OzthQUdLLEtBQUtoQixHQUFMLENBQVM3RixDQUFULENBQVA7Ozs7Ozs7Ozs7Ozs7OzswQkFZSXpGLElBdjBCUixFQXUwQmM7YUFDSCxLQUFLeUMsT0FBTCxHQUNILEtBQUtzVyxPQUFMLENBQWEvWSxJQUFiLEVBQ0dtWCxJQURILG9CQUNXblgsSUFEWCxFQUNrQixDQURsQixHQUVHaVosS0FGSCxDQUVTLENBRlQsQ0FERyxHQUlILElBSko7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NkJBb0JPeEssR0E1MUJYLEVBNDFCMkI7VUFBWDVELElBQVcsdUVBQUosRUFBSTs7YUFDaEIsS0FBS3BJLE9BQUwsR0FDSDhMLFVBQVV6RCxNQUFWLENBQWlCLEtBQUtYLEdBQXRCLEVBQTJCVSxJQUEzQixFQUFpQ3dXLHdCQUFqQyxDQUEwRCxJQUExRCxFQUFnRTVTLEdBQWhFLENBREcsR0FFSDhHLE9BRko7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7cUNBcUJ3QjtVQUFYMUssSUFBVyx1RUFBSixFQUFJOzthQUNqQixLQUFLcEksT0FBTCxHQUNIOEwsVUFBVXpELE1BQVYsQ0FBaUIsS0FBS1gsR0FBTCxDQUFTNkwsS0FBVCxDQUFlbkwsSUFBZixDQUFqQixFQUF1Q0EsSUFBdkMsRUFBNkNxRixjQUE3QyxDQUE0RCxJQUE1RCxDQURHLEdBRUhxRixPQUZKOzs7Ozs7Ozs7Ozs7Ozs7NEJBY29FO3NGQUFKLEVBQUk7d0NBQTlEaU4sb0JBQThEO1VBQTlEQSxvQkFBOEQseUNBQXZDLEtBQXVDO3dDQUFoQ0MsZUFBZ0M7VUFBaENBLGVBQWdDLHlDQUFkLEtBQWM7O1VBQzlEbFksd0JBQW9Ca1gsY0FBYyxJQUFkLEVBQW9CZ0IsZUFBcEIsRUFBcUNELG9CQUFyQyxDQUExQjthQUNPcEIsWUFBWSxJQUFaLEVBQWtCN1csQ0FBbEIsQ0FBUDs7Ozs7Ozs7Ozs7Z0NBUVU7YUFDSDZXLFlBQVksSUFBWixFQUFrQixZQUFsQixDQUFQOzs7Ozs7Ozs7OztvQ0FRYzthQUNQQSxZQUFZLElBQVosRUFBa0IsY0FBbEIsQ0FBUDs7Ozs7Ozs7Ozs7Ozs7O2dDQVl3RTtzRkFBSixFQUFJO3dDQUE5RG9CLG9CQUE4RDtVQUE5REEsb0JBQThELHlDQUF2QyxLQUF1Qzt3Q0FBaENDLGVBQWdDO1VBQWhDQSxlQUFnQyx5Q0FBZCxLQUFjOzthQUNqRXJCLFlBQVksSUFBWixFQUFrQkssY0FBYyxJQUFkLEVBQW9CZ0IsZUFBcEIsRUFBcUNELG9CQUFyQyxDQUFsQixDQUFQOzs7Ozs7Ozs7Ozs7Z0NBU1U7YUFDSHBCLFlBQVksSUFBWixFQUFrQiwrQkFBbEIsQ0FBUDs7Ozs7Ozs7Ozs7Ozs2QkFVTzthQUNBQSxZQUFZLEtBQUtzQixLQUFMLEVBQVosRUFBMEIsaUNBQTFCLENBQVA7Ozs7Ozs7Ozs7K0JBT1M7YUFDRixLQUFLamdCLE9BQUwsR0FBZSxLQUFLd1UsS0FBTCxFQUFmLEdBQThCMUIsT0FBckM7Ozs7Ozs7Ozs7OEJBT1E7YUFDRCxLQUFLOVMsT0FBTCxHQUFlLEtBQUtyQyxFQUFwQixHQUF5Qm1YLEdBQWhDOzs7Ozs7Ozs7OzZCQU9PO2FBQ0EsS0FBS04sS0FBTCxFQUFQOzs7Ozs7Ozs7Ozs7OytCQVVrQjtVQUFYcE0sSUFBVyx1RUFBSixFQUFJOztVQUNkLENBQUMsS0FBS3BJLE9BQVYsRUFBbUIsT0FBTyxFQUFQOztVQUVid0IsT0FBT2dCLE9BQU91QyxNQUFQLENBQWMsRUFBZCxFQUFrQixLQUFLcUgsQ0FBdkIsQ0FBYjs7VUFFSWhFLEtBQUs2TCxhQUFULEVBQXdCO2FBQ2pCeE0sY0FBTCxHQUFzQixLQUFLQSxjQUEzQjthQUNLRCxlQUFMLEdBQXVCLEtBQUtFLEdBQUwsQ0FBU0YsZUFBaEM7YUFDS3hKLE1BQUwsR0FBYyxLQUFLMEosR0FBTCxDQUFTMUosTUFBdkI7O2FBRUt3RCxJQUFQOzs7Ozs7Ozs7OytCQU9TO2FBQ0YsSUFBSXJELElBQUosQ0FBUyxLQUFLNkIsT0FBTCxHQUFlLEtBQUtyQyxFQUFwQixHQUF5Qm1YLEdBQWxDLENBQVA7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3lCQW9CR29MLGFBLy9CUCxFQSsvQndEO1VBQWxDM2lCLElBQWtDLHVFQUEzQixjQUEyQjtVQUFYNkssSUFBVyx1RUFBSixFQUFJOztVQUNoRCxDQUFDLEtBQUtwSSxPQUFWLEVBQW1CLE9BQU8sSUFBUDs7VUFFYmlWLFFBQVFoWCxLQUFLa2lCLFVBQUwsQ0FBZ0I1aUIsSUFBaEIsRUFBc0JvSyxHQUF0QixDQUEwQnJGLFNBQVNxUyxhQUFuQyxDQUFkOztVQUVNeUwsVUFBVUYsY0FBY3RmLE9BQWQsS0FBMEIsS0FBS0EsT0FBTCxFQUExQztVQUNFOFgsT0FBTzBILFVBQVVGLGFBQVYsR0FBMEIsSUFEbkM7VUFFRUcsUUFBUSxFQUZWOztVQUlJblEsU0FBU2tRLFVBQVUsSUFBVixHQUFpQkYsYUFBOUI7VUFDRUksY0FBYyxJQURoQjs7VUFHSXJMLE1BQU1oRCxPQUFOLENBQWMsT0FBZCxLQUEwQixDQUE5QixFQUFpQztZQUMzQnNPLFFBQVE3SCxLQUFLalUsSUFBTCxHQUFZeUwsT0FBT3pMLElBQS9COztpQkFFU3lMLE9BQU9ySCxHQUFQLENBQVcsRUFBRXBFLE1BQU1pVSxLQUFLalUsSUFBYixFQUFYLENBQVQ7O1lBRUl5TCxTQUFTd0ksSUFBYixFQUFtQjttQkFDUnhJLE9BQU9zRyxLQUFQLENBQWEsRUFBRW5DLE9BQU8sQ0FBVCxFQUFiLENBQVQ7bUJBQ1MsQ0FBVDs7O2NBR0lBLEtBQU4sR0FBY2tNLEtBQWQ7c0JBQ2MsT0FBZDs7O1VBR0V0TCxNQUFNaEQsT0FBTixDQUFjLFFBQWQsS0FBMkIsQ0FBL0IsRUFBa0M7WUFDMUJzTyxTQUFRN0gsS0FBS2pVLElBQUwsR0FBWXlMLE9BQU96TCxJQUFqQztZQUNJK2IsU0FBUzlILEtBQUsvVCxLQUFMLEdBQWF1TCxPQUFPdkwsS0FBcEIsR0FBNEI0YixTQUFRLEVBQWpEOztpQkFFU3JRLE9BQU9ySCxHQUFQLENBQVcsRUFBRXBFLE1BQU1pVSxLQUFLalUsSUFBYixFQUFtQkUsT0FBTytULEtBQUsvVCxLQUEvQixFQUFYLENBQVQ7O1lBRUl1TCxTQUFTd0ksSUFBYixFQUFtQjttQkFDUnhJLE9BQU9zRyxLQUFQLENBQWEsRUFBRWpOLFFBQVEsQ0FBVixFQUFiLENBQVQ7b0JBQ1UsQ0FBVjs7O2NBR0lBLE1BQU4sR0FBZWlYLE1BQWY7c0JBQ2MsUUFBZDs7O1VBR0lDLGtCQUFrQixTQUFsQkEsZUFBa0IsR0FBTTtZQUN0QkMsY0FBYyxTQUFkQSxXQUFjO2lCQUNoQmxkLEdBQ0d5YyxLQURILENBQ1MsQ0FEVCxFQUNZLEVBQUVWLGtCQUFrQixJQUFwQixFQURaLEVBRUdqSixPQUZILENBRVcsS0FGWCxFQUdHMVYsT0FISCxFQURnQjtTQUFwQjtZQUtFbUgsS0FBSzJZLFlBQVloSSxJQUFaLElBQW9CZ0ksWUFBWXhRLE1BQVosQ0FMM0I7ZUFNTzdPLEtBQUtrQyxLQUFMLENBQVdqQixTQUFTQyxnQkFBVCxDQUEwQndGLEVBQTFCLEVBQThCSyxJQUE5QixFQUFvQ2tILE9BQXBDLENBQTRDLE1BQTVDLEVBQW9EZ0YsSUFBL0QsQ0FBUDtPQVBGOztVQVVJVyxNQUFNaEQsT0FBTixDQUFjLE9BQWQsS0FBMEIsQ0FBOUIsRUFBaUM7WUFDekJxQyxPQUFPbU0saUJBQWI7WUFDSWxNLFFBQVEsQ0FBQ0QsT0FBT0EsT0FBTyxDQUFmLElBQW9CLENBQWhDO2lCQUNTcEUsT0FBT3dFLElBQVAsQ0FBWSxFQUFFSCxZQUFGLEVBQVosQ0FBVDs7WUFFSXJFLFNBQVN3SSxJQUFiLEVBQW1CO2lCQUNWbEMsS0FBUCxDQUFhLEVBQUVqQyxPQUFPLENBQVQsRUFBYjttQkFDUyxDQUFUOzs7Y0FHSUEsS0FBTixHQUFjQSxLQUFkO3NCQUNjLE9BQWQ7OztVQUdFVSxNQUFNaEQsT0FBTixDQUFjLE1BQWQsS0FBeUIsQ0FBN0IsRUFBZ0M7WUFDMUJxQyxRQUFPbU0saUJBQVg7aUJBQ1N2USxPQUFPckgsR0FBUCxDQUFXO2dCQUNaNlAsS0FBS2pVLElBRE87aUJBRVhpVSxLQUFLL1QsS0FGTTtlQUdiK1QsS0FBS2xQO1NBSEgsQ0FBVDs7WUFNSTBHLFNBQVN3SSxJQUFiLEVBQW1CO2lCQUNWbEMsS0FBUCxDQUFhLEVBQUVsQyxNQUFNLENBQVIsRUFBYjttQkFDUSxDQUFSOzs7Y0FHSUEsSUFBTixHQUFhQSxLQUFiO3NCQUNjLE1BQWQ7OztVQUdJcU0sWUFBWXJlLFNBQVNDLGdCQUFULENBQTBCbVcsT0FBT3hJLE1BQWpDLEVBQXlDOUgsSUFBekMsQ0FBbEI7VUFDRXdZLFlBQVkzTCxNQUFNMUYsTUFBTixDQUNWO2VBQUssQ0FBQyxPQUFELEVBQVUsU0FBVixFQUFxQixTQUFyQixFQUFnQyxjQUFoQyxFQUFnRDBDLE9BQWhELENBQXdEL0wsQ0FBeEQsS0FBOEQsQ0FBbkU7T0FEVSxDQURkO1VBSUVvSixVQUFVc1IsVUFBVWhoQixNQUFWLEdBQW1CLENBQW5CLEdBQXVCZ2hCLFNBQXZCLEdBQW1DLENBQUNOLFdBQUQsQ0FKL0M7VUFLRXRMLFVBQVUyTCxVQUFVclIsT0FBVixvQ0FBcUJBLE9BQXJCLEVBTFo7VUFNRXVSLFNBQVM3TCxRQUFRTixJQUFSLENBQWFwUyxTQUFTRyxVQUFULENBQW9CRCxPQUFPdUMsTUFBUCxDQUFjc2IsS0FBZCxFQUFxQmpZLElBQXJCLENBQXBCLENBQWIsQ0FOWDs7YUFRT2dZLFVBQVVTLE9BQU96TSxNQUFQLEVBQVYsR0FBNEJ5TSxNQUFuQzs7Ozs7Ozs7Ozs7Ozs7NEJBV010akIsSUFwbUNWLEVBb21DZ0I2SyxJQXBtQ2hCLEVBb21Dc0I7YUFDWCxLQUFLcEksT0FBTCxHQUFlLEtBQUt1VyxJQUFMLENBQVU1VCxTQUFTc08sS0FBVCxFQUFWLEVBQTRCMVQsSUFBNUIsRUFBa0M2SyxJQUFsQyxDQUFmLEdBQXlELElBQWhFOzs7Ozs7Ozs7OzswQkFRSThYLGFBN21DUixFQTZtQ3VCO2FBQ1osS0FBS2xnQixPQUFMLEdBQWVvVyxTQUFTTyxhQUFULENBQXVCLElBQXZCLEVBQTZCdUosYUFBN0IsQ0FBZixHQUE2RCxJQUFwRTs7Ozs7Ozs7Ozs7Ozs0QkFVTUEsYUF4bkNWLEVBd25DeUIzaUIsSUF4bkN6QixFQXduQytCO1VBQ3ZCLENBQUMsS0FBS3lDLE9BQVYsRUFBbUIsT0FBTyxLQUFQO1VBQ2Z6QyxTQUFTLGFBQWIsRUFBNEI7ZUFDbkIsS0FBS3FELE9BQUwsT0FBbUJzZixjQUFjdGYsT0FBZCxFQUExQjtPQURGLE1BRU87WUFDQ2tnQixVQUFVWixjQUFjdGYsT0FBZCxFQUFoQjtlQUNPLEtBQUswVixPQUFMLENBQWEvWSxJQUFiLEtBQXNCdWpCLE9BQXRCLElBQWlDQSxXQUFXLEtBQUtDLEtBQUwsQ0FBV3hqQixJQUFYLENBQW5EOzs7Ozs7Ozs7Ozs7OzJCQVVHZ08sS0F4b0NULEVBd29DZ0I7YUFDTCxLQUFLdkwsT0FBTCxJQUFnQnVMLE1BQU12TCxPQUF0QixHQUNILEtBQUtZLE9BQUwsT0FBbUIySyxNQUFNM0ssT0FBTixFQUFuQixJQUNFLEtBQUtYLElBQUwsQ0FBVWlYLE1BQVYsQ0FBaUIzTCxNQUFNdEwsSUFBdkIsQ0FERixJQUVFLEtBQUt5SCxHQUFMLENBQVN3UCxNQUFULENBQWdCM0wsTUFBTTdELEdBQXRCLENBSEMsR0FJSCxLQUpKOzs7Ozs7Ozs7OzsyQkFsd0JZO2FBQ0wsS0FBS3FNLGFBQUwsS0FBdUIsSUFBOUI7Ozs7Ozs7Ozs7MkJBT2tCO2FBQ1gsS0FBS0EsYUFBWjs7Ozs7Ozs7Ozs7MkJBUVc7YUFDSixLQUFLck0sR0FBTCxDQUFTMUosTUFBaEI7Ozs7Ozs7Ozs7OzJCQVFvQjthQUNiLEtBQUswSixHQUFMLENBQVNGLGVBQWhCOzs7Ozs7Ozs7OzsyQkFRbUI7YUFDWixLQUFLRSxHQUFMLENBQVNELGNBQWhCOzs7Ozs7Ozs7OzJCQU9hO2FBQ04sS0FBS3hILElBQUwsQ0FBVUssSUFBakI7Ozs7Ozs7Ozs7OzJCQVFTO2FBQ0YsS0FBS04sT0FBTCxHQUFlLEtBQUtvTSxDQUFMLENBQU8zSCxJQUF0QixHQUE2QnFRLEdBQXBDOzs7Ozs7Ozs7OzsyQkFRVTthQUNILEtBQUs5VSxPQUFMLEdBQWUsS0FBS29NLENBQUwsQ0FBT3pILEtBQXRCLEdBQThCbVEsR0FBckM7Ozs7Ozs7Ozs7OzJCQVFRO2FBQ0QsS0FBSzlVLE9BQUwsR0FBZSxLQUFLb00sQ0FBTCxDQUFPNUMsR0FBdEIsR0FBNEJzTCxHQUFuQzs7Ozs7Ozs7Ozs7MkJBUVM7YUFDRixLQUFLOVUsT0FBTCxHQUFlLEtBQUtvTSxDQUFMLENBQU9uQyxJQUF0QixHQUE2QjZLLEdBQXBDOzs7Ozs7Ozs7OzsyQkFRVzthQUNKLEtBQUs5VSxPQUFMLEdBQWUsS0FBS29NLENBQUwsQ0FBT2MsTUFBdEIsR0FBK0I0SCxHQUF0Qzs7Ozs7Ozs7Ozs7MkJBUVc7YUFDSixLQUFLOVUsT0FBTCxHQUFlLEtBQUtvTSxDQUFMLENBQU9hLE1BQXRCLEdBQStCNkgsR0FBdEM7Ozs7Ozs7Ozs7OzJCQVFnQjthQUNULEtBQUs5VSxPQUFMLEdBQWUsS0FBS29NLENBQUwsQ0FBT1ksV0FBdEIsR0FBb0M4SCxHQUEzQzs7Ozs7Ozs7Ozs7OzJCQVNhO2FBQ04sS0FBSzlVLE9BQUwsR0FBZTRjLHVCQUF1QixJQUF2QixFQUE2QnRQLFFBQTVDLEdBQXVEd0gsR0FBOUQ7Ozs7Ozs7Ozs7OzsyQkFTZTthQUNSLEtBQUs5VSxPQUFMLEdBQWU0Yyx1QkFBdUIsSUFBdkIsRUFBNkJyUCxVQUE1QyxHQUF5RHVILEdBQWhFOzs7Ozs7Ozs7Ozs7OzJCQVVZO2FBQ0wsS0FBSzlVLE9BQUwsR0FBZTRjLHVCQUF1QixJQUF2QixFQUE2Qi9TLE9BQTVDLEdBQXNEaUwsR0FBN0Q7Ozs7Ozs7Ozs7OzJCQVFZO2FBQ0wsS0FBSzlVLE9BQUwsR0FBZXViLFlBQVlzRSxrQkFBWixDQUErQixLQUFLelQsQ0FBcEMsRUFBdUNvQixPQUF0RCxHQUFnRXNILEdBQXZFOzs7Ozs7Ozs7Ozs7MkJBU1c7YUFDSixLQUFLOVUsT0FBTCxHQUFlLEtBQUtDLElBQUwsQ0FBVWEsTUFBVixDQUFpQixLQUFLbkQsRUFBdEIsQ0FBZixHQUEyQ21YLEdBQWxEOzs7Ozs7Ozs7OzJCQU9vQjtVQUNoQixLQUFLOVUsT0FBVCxFQUFrQjtlQUNULEtBQUtDLElBQUwsQ0FBVStnQixVQUFWLENBQXFCLEtBQUtyakIsRUFBMUIsRUFBOEI7a0JBQzNCLE9BRDJCO2tCQUUzQixLQUFLSztTQUZSLENBQVA7T0FERixNQUtPO2VBQ0UsSUFBUDs7Ozs7Ozs7Ozs7OzJCQVNpQjtVQUNmLEtBQUtnQyxPQUFULEVBQWtCO2VBQ1QsS0FBS0MsSUFBTCxDQUFVK2dCLFVBQVYsQ0FBcUIsS0FBS3JqQixFQUExQixFQUE4QjtrQkFDM0IsTUFEMkI7a0JBRTNCLEtBQUtLO1NBRlIsQ0FBUDtPQURGLE1BS087ZUFDRSxJQUFQOzs7Ozs7Ozs7OzsyQkFRZ0I7YUFDWCxLQUFLaUMsSUFBTCxDQUFVbUwsU0FBakI7Ozs7Ozs7Ozs7MkJBT1k7VUFDUixLQUFLc0IsYUFBVCxFQUF3QjtlQUNmLEtBQVA7T0FERixNQUVPO2VBRUgsS0FBSzVMLE1BQUwsR0FBYyxLQUFLK0gsR0FBTCxDQUFTLEVBQUVsRSxPQUFPLENBQVQsRUFBVCxFQUF1QjdELE1BQXJDLElBQStDLEtBQUtBLE1BQUwsR0FBYyxLQUFLK0gsR0FBTCxDQUFTLEVBQUVsRSxPQUFPLENBQVQsRUFBVCxFQUF1QjdELE1BRHRGOzs7Ozs7Ozs7Ozs7OzJCQVllO2FBQ1Y3QyxLQUFLeUcsVUFBTCxDQUFnQixLQUFLRCxJQUFyQixDQUFQOzs7Ozs7Ozs7Ozs7MkJBU2dCO2FBQ1R4RyxLQUFLcWUsV0FBTCxDQUFpQixLQUFLN1gsSUFBdEIsRUFBNEIsS0FBS0UsS0FBakMsQ0FBUDs7Ozs7Ozs7Ozs7OzJCQVNlO2FBQ1IsS0FBSzNFLE9BQUwsR0FBZS9CLEtBQUsyZCxVQUFMLENBQWdCLEtBQUtuWCxJQUFyQixDQUFmLEdBQTRDcVEsR0FBbkQ7Ozs7MEJBcmpCV3JRLElBbEVmLEVBa0VxQkUsS0FsRXJCLEVBa0U0QjZFLEdBbEU1QixFQWtFaUNTLElBbEVqQyxFQWtFdUNpRCxNQWxFdkMsRUFrRStDRCxNQWxFL0MsRUFrRXVERCxXQWxFdkQsRUFrRW9FO1VBQzVEL08sS0FBS0ssV0FBTCxDQUFpQm1HLElBQWpCLENBQUosRUFBNEI7ZUFDbkIsSUFBSTlCLFFBQUosQ0FBYSxFQUFFaEYsSUFBSW9FLFNBQVNKLEdBQVQsRUFBTixFQUFiLENBQVA7T0FERixNQUVPO2VBQ0VnQixTQUFTRixVQUFULENBQW9CO29CQUFBO3NCQUFBO2tCQUFBO29CQUFBO3dCQUFBO3dCQUFBO2tDQUFBO2dCQVFuQlYsU0FBU0g7U0FSVixDQUFQOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozt3QkFnQ082QyxJQXRHYixFQXNHbUJFLEtBdEduQixFQXNHMEI2RSxHQXRHMUIsRUFzRytCUyxJQXRHL0IsRUFzR3FDaUQsTUF0R3JDLEVBc0c2Q0QsTUF0RzdDLEVBc0dxREQsV0F0R3JELEVBc0drRTtVQUMxRC9PLEtBQUtLLFdBQUwsQ0FBaUJtRyxJQUFqQixDQUFKLEVBQTRCO2VBQ25CLElBQUk5QixRQUFKLENBQWE7Y0FDZFosU0FBU0osR0FBVCxFQURjO2dCQUVaZCxnQkFBZ0JFO1NBRmpCLENBQVA7T0FERixNQUtPO2VBQ0U0QixTQUFTRixVQUFULENBQW9CO29CQUFBO3NCQUFBO2tCQUFBO29CQUFBO3dCQUFBO3dCQUFBO2tDQUFBO2dCQVFuQjVCLGdCQUFnQkU7U0FSakIsQ0FBUDs7Ozs7Ozs7Ozs7Ozs7K0JBb0JjakMsSUFqSXBCLEVBaUl3QztVQUFkbWlCLE9BQWMsdUVBQUosRUFBSTs7YUFDN0IsSUFBSXRlLFFBQUosQ0FBYTtZQUNkLElBQUl4RSxJQUFKLENBQVNXLElBQVQsRUFBZThCLE9BQWYsRUFEYztjQUVaM0MsS0FBS2lFLGFBQUwsQ0FBbUIrZSxRQUFRaGhCLElBQTNCLENBRlk7YUFHYmtJLE9BQU8xRixVQUFQLENBQWtCd2UsT0FBbEI7T0FIQSxDQUFQOzs7Ozs7Ozs7Ozs7Ozs7OytCQWlCZ0JoTyxZQW5KcEIsRUFtSmdEO1VBQWRnTyxPQUFjLHVFQUFKLEVBQUk7O2FBQ3JDLElBQUl0ZSxRQUFKLENBQWE7WUFDZHNRLFlBRGM7Y0FFWmhWLEtBQUtpRSxhQUFMLENBQW1CK2UsUUFBUWhoQixJQUEzQixDQUZZO2FBR2JrSSxPQUFPMUYsVUFBUCxDQUFrQndlLE9BQWxCO09BSEEsQ0FBUDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OytCQWtDZ0I1YyxHQXRMcEIsRUFzTHlCO1VBQ2Y2YyxZQUFZampCLEtBQUtpRSxhQUFMLENBQW1CbUMsSUFBSXBFLElBQXZCLENBQWxCO1VBQ0ksQ0FBQ2loQixVQUFVbGhCLE9BQWYsRUFBd0I7ZUFDZjJDLFNBQVMrVSxPQUFULENBQWlCaUYsZ0JBQWpCLENBQVA7OztVQUdJd0UsUUFBUXBmLFNBQVNKLEdBQVQsRUFBZDtVQUNFeWYsZUFBZUYsVUFBVXBnQixNQUFWLENBQWlCcWdCLEtBQWpCLENBRGpCO1VBRUVsYixhQUFhaEksS0FBSzRXLGVBQUwsQ0FBcUJ4USxHQUFyQixFQUEwQnNRLGFBQTFCLEVBQXlDLElBQXpDLENBRmY7VUFHRTBNLGtCQUFrQixDQUFDcGpCLEtBQUtLLFdBQUwsQ0FBaUIySCxXQUFXdUgsT0FBNUIsQ0FIckI7VUFJRThULHFCQUFxQixDQUFDcmpCLEtBQUtLLFdBQUwsQ0FBaUIySCxXQUFXeEIsSUFBNUIsQ0FKeEI7VUFLRThjLG1CQUFtQixDQUFDdGpCLEtBQUtLLFdBQUwsQ0FBaUIySCxXQUFXdEIsS0FBNUIsQ0FBRCxJQUF1QyxDQUFDMUcsS0FBS0ssV0FBTCxDQUFpQjJILFdBQVd1RCxHQUE1QixDQUw3RDtVQU1FZ1ksaUJBQWlCRixzQkFBc0JDLGdCQU56QztVQU9FRSxrQkFBa0J4YixXQUFXcUgsUUFBWCxJQUF1QnJILFdBQVdzSCxVQVB0RDtVQVFFN0YsTUFBTVMsT0FBTzFGLFVBQVAsQ0FBa0I0QixHQUFsQixDQVJSOzs7Ozs7OztVQWdCSSxDQUFDbWQsa0JBQWtCSCxlQUFuQixLQUF1Q0ksZUFBM0MsRUFBNEQ7Y0FDcEQsSUFBSXBrQiw2QkFBSixDQUNKLHFFQURJLENBQU47OztVQUtFa2tCLG9CQUFvQkYsZUFBeEIsRUFBeUM7Y0FDakMsSUFBSWhrQiw2QkFBSixDQUFrQyx3Q0FBbEMsQ0FBTjs7O1VBR0lxa0IsY0FBY0QsbUJBQW9CeGIsV0FBVzRELE9BQVgsSUFBc0IsQ0FBQzJYLGNBQS9EOzs7VUFHSXZNLGNBQUo7VUFDRTBNLHNCQURGO1VBRUVDLFNBQVNwRSxRQUFRMkQsS0FBUixFQUFlQyxZQUFmLENBRlg7VUFHSU0sV0FBSixFQUFpQjtnQkFDUHZDLGdCQUFSO3dCQUNnQkwscUJBQWhCO2lCQUNTdkQsWUFBWXNCLGVBQVosQ0FBNEIrRSxNQUE1QixDQUFUO09BSEYsTUFJTyxJQUFJUCxlQUFKLEVBQXFCO2dCQUNsQmpDLG1CQUFSO3dCQUNnQkwsd0JBQWhCO2lCQUNTeEQsWUFBWXNFLGtCQUFaLENBQStCK0IsTUFBL0IsQ0FBVDtPQUhLLE1BSUE7Z0JBQ0d0TyxZQUFSO3dCQUNnQnVMLGlCQUFoQjs7OztVQUlFZ0QsYUFBYSxLQUFqQjs7Ozs7OzZCQUNnQjVNLEtBQWhCLDhIQUF1QjtjQUFaL08sQ0FBWTs7Y0FDZkUsSUFBSUgsV0FBV0MsQ0FBWCxDQUFWO2NBQ0ksQ0FBQ2pJLEtBQUtLLFdBQUwsQ0FBaUI4SCxDQUFqQixDQUFMLEVBQTBCO3lCQUNYLElBQWI7V0FERixNQUVPLElBQUl5YixVQUFKLEVBQWdCO3VCQUNWM2IsQ0FBWCxJQUFnQnliLGNBQWN6YixDQUFkLENBQWhCO1dBREssTUFFQTt1QkFDTUEsQ0FBWCxJQUFnQjBiLE9BQU8xYixDQUFQLENBQWhCOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztVQUtFNGIscUJBQXFCSixjQUNyQm5HLFlBQVl3RyxrQkFBWixDQUErQjliLFVBQS9CLENBRHFCLEdBRXJCb2Isa0JBQ0U5RixZQUFZeUcscUJBQVosQ0FBa0MvYixVQUFsQyxDQURGLEdBRUVzVixZQUFZMEcsdUJBQVosQ0FBb0NoYyxVQUFwQyxDQUpSO1VBS0U4TixnQkFBZ0IrTixzQkFBc0J2RyxZQUFZMkcsa0JBQVosQ0FBK0JqYyxVQUEvQixDQUx4Qzs7VUFPSThOLGFBQUosRUFBbUI7ZUFDVnBSLFNBQVMrVSxPQUFULENBQWlCM0QsYUFBakIsQ0FBUDs7OztzQkFJZ0IyTixjQUNabkcsWUFBWW9FLGVBQVosQ0FBNEIxWixVQUE1QixDQURZLEdBRVpvYixrQkFBa0I5RixZQUFZcUUsa0JBQVosQ0FBK0IzWixVQUEvQixDQUFsQixHQUErREEsVUFGL0Q7c0JBR3FCaVksUUFBUWlFLFNBQVIsRUFBbUJmLFlBQW5CLEVBQWlDRixTQUFqQyxDQUhyQjs7VUFHSGtCLE9BSEc7VUFHTUMsV0FITjtVQUlKdkYsSUFKSSxHQUlHLElBQUluYSxRQUFKLENBQWE7WUFDZHlmLE9BRGM7Y0FFWmxCLFNBRlk7V0FHZm1CLFdBSGU7O09BQWIsQ0FKSDs7O1VBWUZwYyxXQUFXNEQsT0FBWCxJQUFzQjJYLGNBQXRCLElBQXdDbmQsSUFBSXdGLE9BQUosS0FBZ0JpVCxLQUFLalQsT0FBakUsRUFBMEU7ZUFDakVsSCxTQUFTK1UsT0FBVCxDQUFpQixvQkFBakIsQ0FBUDs7O2FBR0tvRixJQUFQOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzRCQW1CYS9HLElBdFNqQixFQXNTa0M7VUFBWDNOLElBQVcsdUVBQUosRUFBSTs7a0NBQ0h5SyxZQUFZeVAsWUFBWixDQUF5QnZNLElBQXpCLENBREc7O1VBQ3ZCWCxJQUR1QjtVQUNqQm9KLFVBRGlCOzthQUV2QkQsb0JBQW9CbkosSUFBcEIsRUFBMEJvSixVQUExQixFQUFzQ3BXLElBQXRDLENBQVA7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2dDQWlCaUIyTixJQXpUckIsRUF5VHNDO1VBQVgzTixJQUFXLHVFQUFKLEVBQUk7O2tDQUNQeUssWUFBWTBQLGdCQUFaLENBQTZCeE0sSUFBN0IsQ0FETzs7VUFDM0JYLElBRDJCO1VBQ3JCb0osVUFEcUI7O2FBRTNCRCxvQkFBb0JuSixJQUFwQixFQUEwQm9KLFVBQTFCLEVBQXNDcFcsSUFBdEMsQ0FBUDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzZCQWtCYzJOLElBN1VsQixFQTZVc0M7VUFBZGtMLE9BQWMsdUVBQUosRUFBSTs7a0NBQ1BwTyxZQUFZMlAsYUFBWixDQUEwQnpNLElBQTFCLENBRE87O1VBQzNCWCxJQUQyQjtVQUNyQm9KLFVBRHFCOzthQUUzQkQsb0JBQW9CbkosSUFBcEIsRUFBMEJvSixVQUExQixFQUFzQ3lDLE9BQXRDLENBQVA7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrQkFlZ0JsTCxJQTlWcEIsRUE4VjBCL0osR0E5VjFCLEVBOFY2QztVQUFkaVYsT0FBYyx1RUFBSixFQUFJOzs0QkFDU0EsT0FEVCxDQUNqQ2pqQixNQURpQztVQUNqQ0EsTUFEaUMsbUNBQ3hCLElBRHdCO2tDQUNTaWpCLE9BRFQsQ0FDbEJ6WixlQURrQjtVQUNsQkEsZUFEa0IseUNBQ0EsSUFEQTtVQUV2Q2liLE1BRnVDLEdBRTlCLElBQUlsSSxXQUFKLENBQWdCcFMsT0FBT3VhLFFBQVAsQ0FBZ0IsRUFBRTFrQixjQUFGLEVBQVV3SixnQ0FBVixFQUFoQixDQUFoQixDQUY4QjtrQ0FHbEJpYixPQUFPRSxhQUFQLENBQXFCNU0sSUFBckIsRUFBMkIvSixHQUEzQixDQUhrQjs7VUFHdENvSixJQUhzQztVQUdoQ29KLFVBSGdDOzthQUlsQ0Qsb0JBQW9CbkosSUFBcEIsRUFBMEJvSixVQUExQixFQUFzQ3lDLE9BQXRDLENBQVA7Ozs7Ozs7Ozs7NEJBT2EvakIsTUF6V2pCLEVBeVd5QjtVQUNqQixDQUFDQSxNQUFMLEVBQWE7Y0FDTCxJQUFJTSxvQkFBSixDQUF5QixrREFBekIsQ0FBTjs7VUFFRXVFLFNBQVNELGNBQWIsRUFBNkI7Y0FDckIsSUFBSTdFLG9CQUFKLENBQXlCQyxNQUF6QixDQUFOO09BREYsTUFFTztlQUNFLElBQUl5RixRQUFKLENBQWEsRUFBRW9SLGVBQWU3VyxNQUFqQixFQUFiLENBQVA7Ozs7OzBCQXF5QnFCO3dDQUFYMFosU0FBVztpQkFBQTs7O2FBQ2hCM1ksS0FBSzJrQixNQUFMLENBQVloTSxTQUFaLEVBQXVCO2VBQUtqWCxFQUFFaUIsT0FBRixFQUFMO09BQXZCLEVBQXlDUyxLQUFLaWMsR0FBOUMsQ0FBUDs7Ozs7Ozs7Ozs7MEJBUXVCO3lDQUFYMUcsU0FBVztpQkFBQTs7O2FBQ2hCM1ksS0FBSzJrQixNQUFMLENBQVloTSxTQUFaLEVBQXVCO2VBQUtqWCxFQUFFaUIsT0FBRixFQUFMO09BQXZCLEVBQXlDUyxLQUFLa2MsR0FBOUMsQ0FBUDs7Ozs7Ozs7Ozs7Ozs7O3NDQVl1QnhILElBM3FDM0IsRUEycUNpQy9KLEdBM3FDakMsRUEycUNvRDtVQUFkaVYsT0FBYyx1RUFBSixFQUFJOztVQUMxQ3dCLFNBQVMsSUFBSWxJLFdBQUosQ0FBZ0JwUyxPQUFPdWEsUUFBUCxDQUFnQnpCLE9BQWhCLENBQWhCLENBQWY7YUFDT3dCLE9BQU9qSSxZQUFQLENBQW9CekUsSUFBcEIsRUFBMEIvSixHQUExQixDQUFQOzs7Ozs7Ozs7OzsyQkFRc0I7YUFDZjtjQUNDLFNBREQ7ZUFFRSxTQUZGO2FBR0E7T0FIUDs7Ozs7Ozs7OzJCQVVvQjthQUNiO2NBQ0MsU0FERDtlQUVFLE9BRkY7YUFHQTtPQUhQOzs7Ozs7Ozs7MkJBVXFCO2FBQ2Q7Y0FDQyxTQUREO2VBRUUsTUFGRjthQUdBO09BSFA7Ozs7Ozs7OzsyQkFVcUI7YUFDZDtjQUNDLFNBREQ7ZUFFRSxNQUZGO2FBR0EsU0FIQTtpQkFJSTtPQUpYOzs7Ozs7Ozs7MkJBV3VCO2FBQ2hCO2NBQ0MsU0FERDtnQkFFRztPQUZWOzs7Ozs7Ozs7MkJBUzZCO2FBQ3RCO2NBQ0MsU0FERDtnQkFFRyxTQUZIO2dCQUdHO09BSFY7Ozs7Ozs7OzsyQkFVa0M7YUFDM0I7Y0FDQyxTQUREO2dCQUVHLFNBRkg7Z0JBR0csU0FISDtzQkFJUztPQUpoQjs7Ozs7Ozs7OzJCQVdpQzthQUMxQjtjQUNDLFNBREQ7Z0JBRUcsU0FGSDtnQkFHRyxTQUhIO3NCQUlTO09BSmhCOzs7Ozs7Ozs7MkJBVzBCO2FBQ25CO2NBQ0MsU0FERDtnQkFFRyxTQUZIO2dCQUdHO09BSFY7Ozs7Ozs7OzsyQkFVZ0M7YUFDekI7Y0FDQyxTQUREO2dCQUVHLFNBRkg7Z0JBR0csU0FISDtnQkFJRztPQUpWOzs7Ozs7Ozs7MkJBV3FDO2FBQzlCO2NBQ0MsU0FERDtnQkFFRyxTQUZIO2dCQUdHLFNBSEg7Z0JBSUcsS0FKSDtzQkFLUztPQUxoQjs7Ozs7Ozs7OzJCQVlvQzthQUM3QjtjQUNDLFNBREQ7Z0JBRUcsU0FGSDtnQkFHRyxTQUhIO2dCQUlHLEtBSkg7c0JBS1M7T0FMaEI7Ozs7Ozs7OzsyQkFZMEI7YUFDbkI7Y0FDQyxTQUREO2VBRUUsU0FGRjthQUdBLFNBSEE7Y0FJQyxTQUpEO2dCQUtHO09BTFY7Ozs7Ozs7OzsyQkFZdUM7YUFDaEM7Y0FDQyxTQUREO2VBRUUsU0FGRjthQUdBLFNBSEE7Y0FJQyxTQUpEO2dCQUtHLFNBTEg7Z0JBTUc7T0FOVjs7Ozs7Ozs7OzJCQWF3QjthQUNqQjtjQUNDLFNBREQ7ZUFFRSxPQUZGO2FBR0EsU0FIQTtjQUlDLFNBSkQ7Z0JBS0c7T0FMVjs7Ozs7Ozs7OzJCQVlxQzthQUM5QjtjQUNDLFNBREQ7ZUFFRSxPQUZGO2FBR0EsU0FIQTtjQUlDLFNBSkQ7Z0JBS0csU0FMSDtnQkFNRztPQU5WOzs7Ozs7Ozs7MkJBYXlCO2FBQ2xCO2NBQ0MsU0FERDtlQUVFLE1BRkY7YUFHQSxTQUhBO2NBSUMsU0FKRDtnQkFLRyxTQUxIO3NCQU1TO09BTmhCOzs7Ozs7Ozs7MkJBYXNDO2FBQy9CO2NBQ0MsU0FERDtlQUVFLE1BRkY7YUFHQSxTQUhBO2NBSUMsU0FKRDtnQkFLRyxTQUxIO2dCQU1HLFNBTkg7c0JBT1M7T0FQaEI7Ozs7Ozs7OzsyQkFjeUI7YUFDbEI7Y0FDQyxTQUREO2VBRUUsTUFGRjthQUdBLFNBSEE7aUJBSUksTUFKSjtjQUtDLFNBTEQ7Z0JBTUcsU0FOSDtzQkFPUztPQVBoQjs7Ozs7Ozs7OzJCQWNzQzthQUMvQjtjQUNDLFNBREQ7ZUFFRSxNQUZGO2FBR0EsU0FIQTtpQkFJSSxNQUpKO2NBS0MsU0FMRDtnQkFNRyxTQU5IO2dCQU9HLFNBUEg7c0JBUVM7T0FSaEI7Ozs7OztBQ3BwREo7OztBQUdBLElBQWE2VyxJQUFiOzs7Ozs7Ozs7Ozs7OzZCQU02QztVQUE3QjVpQixJQUE2Qix1RUFBdEI4QixTQUFTSCxXQUFhOzthQUV2QyxDQUFDM0IsS0FBS21MLFNBQU4sSUFDQXpJLFNBQVNzTyxLQUFULEdBQ0d3TixPQURILENBQ1d4ZSxJQURYLEVBRUc0SSxHQUZILENBRU8sRUFBRWxFLE9BQU8sQ0FBVCxFQUZQLEVBRXFCN0QsTUFGckIsS0FHRTZCLFNBQVNzTyxLQUFULEdBQ0d3TixPQURILENBQ1d4ZSxJQURYLEVBRUc0SSxHQUZILENBRU8sRUFBRWxFLE9BQU8sQ0FBVCxFQUZQLEVBRXFCN0QsTUFQekI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NkJBOEJBO1VBRkFsQixNQUVBLHVFQUZTLE1BRVQ7O3FGQUR3RSxFQUN4RTs2QkFERTVCLE1BQ0Y7VUFERUEsTUFDRiwrQkFEVyxJQUNYO3NDQURpQndKLGVBQ2pCO1VBRGlCQSxlQUNqQix3Q0FEbUMsSUFDbkM7cUNBRHlDQyxjQUN6QztVQUR5Q0EsY0FDekMsdUNBRDBELFNBQzFEOzthQUNPLElBQUlVLE1BQUosQ0FBV25LLE1BQVgsRUFBbUJ3SixlQUFuQixFQUFvQ0MsY0FBcEMsRUFBb0Q4QixNQUFwRCxDQUEyRDNKLE1BQTNELENBQVA7Ozs7Ozs7Ozs7Ozs7Ozs7OzttQ0FrQkE7VUFGQUEsTUFFQSx1RUFGUyxNQUVUOztzRkFEd0UsRUFDeEU7K0JBREU1QixNQUNGO1VBREVBLE1BQ0YsZ0NBRFcsSUFDWDt3Q0FEaUJ3SixlQUNqQjtVQURpQkEsZUFDakIseUNBRG1DLElBQ25DO3VDQUR5Q0MsY0FDekM7VUFEeUNBLGNBQ3pDLHdDQUQwRCxTQUMxRDs7YUFDTyxJQUFJVSxNQUFKLENBQVduSyxNQUFYLEVBQW1Cd0osZUFBbkIsRUFBb0NDLGNBQXBDLEVBQW9EOEIsTUFBcEQsQ0FBMkQzSixNQUEzRCxFQUFtRSxJQUFuRSxDQUFQOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsrQkFpQitFO1VBQWpFQSxNQUFpRSx1RUFBeEQsTUFBd0Q7O3NGQUFKLEVBQUk7K0JBQTlDNUIsTUFBOEM7VUFBOUNBLE1BQThDLGdDQUFyQyxJQUFxQzt3Q0FBL0J3SixlQUErQjtVQUEvQkEsZUFBK0IseUNBQWIsSUFBYTs7YUFDeEUsSUFBSVcsTUFBSixDQUFXbkssTUFBWCxFQUFtQndKLGVBQW5CLEVBQW9DLElBQXBDLEVBQTBDb0MsUUFBMUMsQ0FBbURoSyxNQUFuRCxDQUFQOzs7Ozs7Ozs7Ozs7Ozs7Ozs7cUNBZXFGO1VBQWpFQSxNQUFpRSx1RUFBeEQsTUFBd0Q7O3NGQUFKLEVBQUk7K0JBQTlDNUIsTUFBOEM7VUFBOUNBLE1BQThDLGdDQUFyQyxJQUFxQzt3Q0FBL0J3SixlQUErQjtVQUEvQkEsZUFBK0IseUNBQWIsSUFBYTs7YUFDOUUsSUFBSVcsTUFBSixDQUFXbkssTUFBWCxFQUFtQndKLGVBQW5CLEVBQW9DLElBQXBDLEVBQTBDb0MsUUFBMUMsQ0FBbURoSyxNQUFuRCxFQUEyRCxJQUEzRCxDQUFQOzs7Ozs7Ozs7Ozs7OztnQ0FXdUM7c0ZBQUosRUFBSTsrQkFBdEI1QixNQUFzQjtVQUF0QkEsTUFBc0IsZ0NBQWIsSUFBYTs7YUFDaEMsSUFBSW1LLE1BQUosQ0FBV25LLE1BQVgsRUFBbUIrTCxTQUFuQixFQUFQOzs7Ozs7Ozs7Ozs7Ozs7OzJCQWFvRDtVQUExQ25LLE1BQTBDLHVFQUFqQyxPQUFpQzs7c0ZBQUosRUFBSTsrQkFBdEI1QixNQUFzQjtVQUF0QkEsTUFBc0IsZ0NBQWIsSUFBYTs7YUFDN0MsSUFBSW1LLE1BQUosQ0FBV25LLE1BQVgsRUFBbUIsSUFBbkIsRUFBeUIsU0FBekIsRUFBb0NtTSxJQUFwQyxDQUF5Q3ZLLE1BQXpDLENBQVA7Ozs7Ozs7Ozs7Ozs7Ozs7K0JBYWdCO1VBQ1ppRixPQUFPLEtBQVg7VUFDRWllLGFBQWEsS0FEZjtVQUVFQyxRQUFRLEtBRlY7O1VBSUk5a0IsS0FBS0ssV0FBTCxDQUFpQkMsSUFBakIsS0FBMEJOLEtBQUtLLFdBQUwsQ0FBaUJMLEtBQUtPLGNBQXRCLENBQTlCLEVBQXFFO2VBQzVELElBQVA7O3FCQUVhUCxLQUFLSyxXQUFMLENBQWlCQyxLQUFLQyxjQUFMLENBQW9CeUcsU0FBcEIsQ0FBOEJ4RixhQUEvQyxDQUFiOztZQUVJO2tCQUVNLElBQVI7U0FGRixDQUdFLE9BQU9TLENBQVAsRUFBVTtrQkFDRixLQUFSOzs7O2FBSUcsRUFBRTJFLFVBQUYsRUFBUWllLHNCQUFSLEVBQW9CQyxZQUFwQixFQUFQOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0="}