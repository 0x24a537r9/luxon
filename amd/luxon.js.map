{"version":3,"file":"luxon.js","sources":["src/errors.js","src/zone.js","src/zones/localZone.js","src/zones/IANAZone.js","src/zones/fixedOffsetZone.js","src/impl/formats.js","src/impl/english.js","src/impl/formatter.js","src/impl/locale.js","src/settings.js","src/impl/util.js","src/impl/regexParser.js","src/duration.js","src/interval.js","src/info.js","src/impl/tokenParser.js","src/impl/conversions.js","src/datetime.js"],"sourcesContent":["// these aren't really private, but nor are they really useful to document\n\n/**\n * @private\n */\nclass LuxonError extends Error {}\n\n/**\n * @private\n */\nexport class InvalidDateTimeError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid DateTime: ${reason}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidIntervalError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Interval: ${reason}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidDurationError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Duration: ${reason}`);\n  }\n}\n\n/**\n * @private\n */\nexport class ConflictingSpecificationError extends LuxonError {}\n\n/**\n * @private\n */\nexport class InvalidUnitError extends LuxonError {\n  constructor(unit) {\n    super(`Invalid unit ${unit}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidArgumentError extends LuxonError {}\n\n/**\n * @private\n */\nexport class ZoneIsAbstractError extends LuxonError {\n  constructor() {\n    super('Zone is an abstract class');\n  }\n}\n","/* eslint no-unused-vars: \"off\" */\nimport { ZoneIsAbstractError } from './errors';\n\n/**\n * @interface\n*/\nexport class Zone {\n  /**\n   * The type of zone\n   * @abstract\n   * @return {string}\n   */\n  get type() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * The name of this zone.\n   * @abstract\n   * @return {string}\n   */\n  get name() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns whether the offset is known to be fixed for the whole year.\n   * @abstract\n   * @return {boolean}\n   */\n  get universal() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset's common name (such as EST) at the specified timestamp\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the name\n   * @param {Object} opts - Options to affect the format\n   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.\n   * @param {string} opts.localeCode - What locale to return the offset name in. Defaults to us-en\n   * @return {string}\n   */\n  static offsetName(ts, opts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\n   * @return {number}\n   */\n  offset(ts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is equal to another zoner\n   * @abstract\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */\n  equals(otherZone) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is valid.\n   * @abstract\n   * @return {boolean}\n   */\n  get isValid() {\n    throw new ZoneIsAbstractError();\n  }\n}\n","import { Util } from '../impl/util';\nimport { Zone } from '../zone';\n\nlet singleton = null;\n\n/**\n * @private\n */\n\nexport class LocalZone extends Zone {\n  static get instance() {\n    if (singleton === null) {\n      singleton = new LocalZone();\n    }\n    return singleton;\n  }\n\n  get type() {\n    return 'local';\n  }\n\n  get name() {\n    if (Util.hasIntl()) {\n      return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n    } else return 'local';\n  }\n\n  get universal() {\n    return false;\n  }\n\n  offsetName(ts, { format, locale }) {\n    return Util.parseZoneInfo(ts, format, locale);\n  }\n\n  offset(ts) {\n    return -new Date(ts).getTimezoneOffset();\n  }\n\n  equals(otherZone) {\n    return otherZone.type === 'local';\n  }\n\n  get isValid() {\n    return true;\n  }\n}\n","import { Util } from '../impl/util';\nimport { Zone } from '../zone';\n\nconst typeToPos = {\n  year: 0,\n  month: 1,\n  day: 2,\n  hour: 3,\n  minute: 4,\n  second: 5\n};\n\nfunction hackyOffset(dtf, date) {\n  const formatted = dtf.format(date).replace(/\\u200E/g, ''),\n    parsed = /(\\d+)\\/(\\d+)\\/(\\d+),? (\\d+):(\\d+):(\\d+)/.exec(formatted),\n    [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed;\n  return [fYear, fMonth, fDay, fHour, fMinute, fSecond];\n}\n\nfunction partsOffset(dtf, date) {\n  const formatted = dtf.formatToParts(date),\n    filled = [];\n  for (let i = 0; i < formatted.length; i++) {\n    const { type, value } = formatted[i],\n      pos = typeToPos[type];\n\n    if (!Util.isUndefined(pos)) {\n      filled[pos] = parseInt(value, 10);\n    }\n  }\n  return filled;\n}\n\nfunction isValid(zone) {\n  try {\n    new Intl.DateTimeFormat('en-US', { timeZone: zone }).format();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * @private\n */\n\nexport class IANAZone extends Zone {\n  static isValidSpecier(s) {\n    return s && s.match(/[a-z_]{1,256}\\/[a-z_]{1,256}/i);\n  }\n\n  constructor(name) {\n    super();\n    this.zoneName = name;\n    this.valid = isValid(name);\n  }\n\n  get type() {\n    return 'iana';\n  }\n\n  get name() {\n    return this.zoneName;\n  }\n\n  get universal() {\n    return false;\n  }\n\n  offsetName(ts, { format, locale }) {\n    return Util.parseZoneInfo(ts, format, locale, this.zoneName);\n  }\n\n  offset(ts) {\n    const date = new Date(ts),\n      dtf = new Intl.DateTimeFormat('en-US', {\n        hour12: false,\n        timeZone: this.zoneName,\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      }),\n      [fYear, fMonth, fDay, fHour, fMinute, fSecond] = dtf.formatToParts\n        ? partsOffset(dtf, date)\n        : hackyOffset(dtf, date),\n      asUTC = Date.UTC(fYear, fMonth - 1, fDay, fHour, fMinute, fSecond);\n    let asTS = date.valueOf();\n    asTS -= asTS % 1000;\n    return (asUTC - asTS) / (60 * 1000);\n  }\n\n  equals(otherZone) {\n    return otherZone.type === 'iana' && otherZone.zoneName === this.zoneName;\n  }\n\n  get isValid() {\n    return this.valid;\n  }\n}\n","import { Util } from '../impl/util';\nimport { Zone } from '../zone';\n\nlet singleton = null;\n\nfunction hoursMinutesOffset(z) {\n  const hours = Math.trunc(z.fixed / 60),\n    minutes = Math.abs(z.fixed % 60),\n    sign = hours > 0 ? '+' : '-',\n    base = sign + Math.abs(hours);\n  return minutes > 0 ? `${base}:${Util.padStart(minutes, 2)}` : base;\n}\n\n/**\n * @private\n */\n\nexport class FixedOffsetZone extends Zone {\n  static get utcInstance() {\n    if (singleton === null) {\n      singleton = new FixedOffsetZone(0);\n    }\n    return singleton;\n  }\n\n  static instance(offset) {\n    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);\n  }\n\n  static parseSpecifier(s) {\n    if (s) {\n      const r = s.match(/^utc(?:([+-]\\d{1,2})(?::(\\d{2}))?)?$/i);\n      if (r) {\n        return new FixedOffsetZone(Util.signedOffset(r[1], r[2]));\n      }\n    }\n    return null;\n  }\n\n  constructor(offset) {\n    super();\n    this.fixed = offset;\n  }\n\n  get type() {\n    return 'fixed';\n  }\n\n  get name() {\n    return this.fixed === 0 ? 'UTC' : `UTC${hoursMinutesOffset(this)}`;\n  }\n\n  offsetName() {\n    return this.name;\n  }\n\n  get universal() {\n    return true;\n  }\n\n  offset() {\n    return this.fixed;\n  }\n\n  equals(otherZone) {\n    return otherZone.type === 'fixed' && otherZone.fixed === this.fixed;\n  }\n\n  get isValid() {\n    return true;\n  }\n}\n","/**\n * @private\n */\n\nexport class Formats {}\n\nFormats.DATE_SHORT = {\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric'\n};\n\nFormats.DATE_MED = {\n  year: 'numeric',\n  month: 'short',\n  day: 'numeric'\n};\n\nFormats.DATE_FULL = {\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric'\n};\n\nFormats.DATE_HUGE = {\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric',\n  weekday: 'long'\n};\n\nFormats.TIME_SIMPLE = {\n  hour: 'numeric',\n  minute: '2-digit'\n};\n\nFormats.TIME_WITH_SECONDS = {\n  hour: 'numeric',\n  minute: '2-digit',\n  second: '2-digit'\n};\n\nFormats.TIME_WITH_SHORT_OFFSET = {\n  hour: 'numeric',\n  minute: '2-digit',\n  second: '2-digit',\n  timeZoneName: 'short'\n};\n\nFormats.TIME_WITH_LONG_OFFSET = {\n  hour: 'numeric',\n  minute: '2-digit',\n  second: '2-digit',\n  timeZoneName: 'long'\n};\n\nFormats.TIME_24_SIMPLE = {\n  hour: 'numeric',\n  minute: '2-digit',\n  hour12: false\n};\n\n/**\n * {@link toLocaleString}; format like '09:30:23', always 24-hour.\n */\nFormats.TIME_24_WITH_SECONDS = {\n  hour: 'numeric',\n  minute: '2-digit',\n  second: '2-digit',\n  hour12: false\n};\n\n/**\n * {@link toLocaleString}; format like '09:30:23 EDT', always 24-hour.\n */\nFormats.TIME_24_WITH_SHORT_OFFSET = {\n  hour: 'numeric',\n  minute: '2-digit',\n  second: '2-digit',\n  hour12: false,\n  timeZoneName: 'short'\n};\n\n/**\n * {@link toLocaleString}; format like '09:30:23 Eastern Daylight Time', always 24-hour.\n */\nFormats.TIME_24_WITH_LONG_OFFSET = {\n  hour: 'numeric',\n  minute: '2-digit',\n  second: '2-digit',\n  hour12: false,\n  timeZoneName: 'long'\n};\n\n/**\n * {@link toLocaleString}; format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.\n */\nFormats.DATETIME_SHORT = {\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: '2-digit'\n};\n\n/**\n * {@link toLocaleString}; format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.\n */\nFormats.DATETIME_SHORT_WITH_SECONDS = {\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: '2-digit',\n  second: '2-digit'\n};\n\nFormats.DATETIME_MED = {\n  year: 'numeric',\n  month: 'short',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: '2-digit'\n};\n\nFormats.DATETIME_MED_WITH_SECONDS = {\n  year: 'numeric',\n  month: 'short',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: '2-digit',\n  second: '2-digit'\n};\n\nFormats.DATETIME_FULL = {\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: '2-digit',\n  timeZoneName: 'short'\n};\n\nFormats.DATETIME_FULL_WITH_SECONDS = {\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: '2-digit',\n  second: '2-digit',\n  timeZoneName: 'short'\n};\n\nFormats.DATETIME_HUGE = {\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric',\n  weekday: 'long',\n  hour: 'numeric',\n  minute: '2-digit',\n  timeZoneName: 'long'\n};\n\nFormats.DATETIME_HUGE_WITH_SECONDS = {\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric',\n  weekday: 'long',\n  hour: 'numeric',\n  minute: '2-digit',\n  second: '2-digit',\n  timeZoneName: 'long'\n};\n","import { Formats } from './formats';\nimport { Util } from './util';\n\nfunction stringify(obj) {\n  return JSON.stringify(obj, Object.keys(obj).sort());\n}\n\n/**\n * @private\n */\n\nexport class English {\n  static get monthsLong() {\n    return [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ];\n  }\n\n  static get monthsShort() {\n    return ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  }\n\n  static get monthsNarrow() {\n    return ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'];\n  }\n\n  static months(length) {\n    switch (length) {\n      case 'narrow':\n        return English.monthsNarrow;\n      case 'short':\n        return English.monthsShort;\n      case 'long':\n        return English.monthsLong;\n      case 'numeric':\n        return ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];\n      case '2-digit':\n        return ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];\n      default:\n        return null;\n    }\n  }\n\n  static get weekdaysLong() {\n    return ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n  }\n\n  static get weekdaysShort() {\n    return ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n  }\n\n  static get weekdaysNarrow() {\n    return ['M', 'T', 'W', 'T', 'F', 'S', 'S'];\n  }\n\n  static weekdays(length) {\n    switch (length) {\n      case 'narrow':\n        return English.weekdaysNarrow;\n      case 'short':\n        return English.weekdaysShort;\n      case 'long':\n        return English.weekdaysLong;\n      case 'numeric':\n        return ['1', '2', '3', '4', '5', '6', '7'];\n      default:\n        return null;\n    }\n  }\n\n  static get meridiems() {\n    return ['AM', 'PM'];\n  }\n\n  static get erasLong() {\n    return ['Before Christ', 'Anno Domini'];\n  }\n\n  static get erasShort() {\n    return ['BC', 'AD'];\n  }\n\n  static get erasNarrow() {\n    return ['B', 'A'];\n  }\n\n  static eras(length) {\n    switch (length) {\n      case 'narrow':\n        return English.erasNarrow;\n      case 'short':\n        return English.erasShort;\n      case 'long':\n        return English.erasLong;\n      default:\n        return null;\n    }\n  }\n\n  static meridiemForDateTime(dt) {\n    return English.meridiems[dt.hour < 12 ? 0 : 1];\n  }\n\n  static weekdayForDateTime(dt, length) {\n    return English.weekdays(length)[dt.weekday - 1];\n  }\n\n  static monthForDateTime(dt, length) {\n    return English.months(length)[dt.month - 1];\n  }\n\n  static eraForDateTime(dt, length) {\n    return English.eras(length)[dt.year < 0 ? 0 : 1];\n  }\n\n  static formatString(knownFormat) {\n    // these all have the offsets removed because we don't have access to them\n    // without all the intl stuff this is backfilling\n    const filtered = Util.pick(knownFormat, [\n        'weekday',\n        'era',\n        'year',\n        'month',\n        'day',\n        'hour',\n        'minute',\n        'second',\n        'timeZoneName',\n        'hour12'\n      ]),\n      key = stringify(filtered),\n      dateTimeHuge = 'EEEE, LLLL d, yyyy, h:mm a';\n    switch (key) {\n      case stringify(Formats.DATE_SHORT):\n        return 'M/d/yyyy';\n      case stringify(Formats.DATE_MED):\n        return 'LLL d, yyyy';\n      case stringify(Formats.DATE_FULL):\n        return 'LLLL d, yyyy';\n      case stringify(Formats.DATE_HUGE):\n        return 'EEEE, LLLL d, yyyy';\n      case stringify(Formats.TIME_SIMPLE):\n        return 'h:mm a';\n      case stringify(Formats.TIME_WITH_SECONDS):\n        return 'h:mm:ss a';\n      case stringify(Formats.TIME_WITH_SHORT_OFFSET):\n        return 'h:mm a';\n      case stringify(Formats.TIME_WITH_LONG_OFFSET):\n        return 'h:mm a';\n      case stringify(Formats.TIME_24_SIMPLE):\n        return 'HH:mm';\n      case stringify(Formats.TIME_24_WITH_SECONDS):\n        return 'HH:mm:ss';\n      case stringify(Formats.TIME_24_WITH_SHORT_OFFSET):\n        return 'HH:mm';\n      case stringify(Formats.TIME_24_WITH_LONG_OFFSET):\n        return 'HH:mm';\n      case stringify(Formats.DATETIME_SHORT):\n        return 'M/d/yyyy, h:mm a';\n      case stringify(Formats.DATETIME_MED):\n        return 'LLL d, yyyy, h:mm a';\n      case stringify(Formats.DATETIME_FULL):\n        return 'LLLL d, yyyy, h:mm a';\n      case stringify(Formats.DATETIME_HUGE):\n        return dateTimeHuge;\n      case stringify(Formats.DATETIME_SHORT_WITH_SECONDS):\n        return 'M/d/yyyy, h:mm:ss a';\n      case stringify(Formats.DATETIME_MED_WITH_SECONDS):\n        return 'LLL d, yyyy, h:mm:ss a';\n      case stringify(Formats.DATETIME_FULL_WITH_SECONDS):\n        return 'LLLL d, yyyy, h:mm:ss a';\n      case stringify(Formats.DATETIME_HUGE_WITH_SECONDS):\n        return 'EEEE, LLLL d, yyyy, h:mm:ss a';\n      default:\n        return dateTimeHuge;\n    }\n  }\n}\n","import { English } from './english';\nimport { Formats } from './formats';\n\nfunction stringifyTokens(splits, tokenToString) {\n  let s = '';\n  for (const token of splits) {\n    if (token.literal) {\n      s += token.val;\n    } else {\n      s += tokenToString(token.val);\n    }\n  }\n  return s;\n}\n\nconst tokenToObject = {\n  D: Formats.DATE_SHORT,\n  DD: Formats.DATE_MED,\n  DDD: Formats.DATE_FULL,\n  DDDD: Formats.DATE_HUGE,\n  t: Formats.TIME_SIMPLE,\n  tt: Formats.TIME_WITH_SECONDS,\n  ttt: Formats.TIME_WITH_SHORT_OFFSET,\n  tttt: Formats.TIME_WITH_LONG_OFFSET,\n  T: Formats.TIME_24_SIMPLE,\n  TT: Formats.TIME_24_WITH_SECONDS,\n  TTT: Formats.TIME_24_WITH_SHORT_OFFSET,\n  TTTT: Formats.TIME_24_WITH_LONG_OFFSET,\n  f: Formats.DATETIME_SHORT,\n  ff: Formats.DATETIME_MED,\n  fff: Formats.DATETIME_FULL,\n  ffff: Formats.DATETIME_HUGE,\n  F: Formats.DATETIME_SHORT_WITH_SECONDS,\n  FF: Formats.DATETIME_MED_WITH_SECONDS,\n  FFF: Formats.DATETIME_FULL_WITH_SECONDS,\n  FFFF: Formats.DATETIME_HUGE_WITH_SECONDS\n};\n\n/**\n * @private\n */\n\nexport class Formatter {\n  static create(locale, opts = {}) {\n    const formatOpts = Object.assign({}, { round: true }, opts);\n    return new Formatter(locale, formatOpts);\n  }\n\n  static parseFormat(fmt) {\n    let current = null,\n      currentFull = '',\n      bracketed = false;\n    const splits = [];\n    for (let i = 0; i < fmt.length; i++) {\n      const c = fmt.charAt(i);\n      if (c === \"'\") {\n        if (currentFull.length > 0) {\n          splits.push({ literal: bracketed, val: currentFull });\n        }\n        current = null;\n        currentFull = '';\n        bracketed = !bracketed;\n      } else if (bracketed) {\n        currentFull += c;\n      } else if (c === current) {\n        currentFull += c;\n      } else {\n        if (currentFull.length > 0) {\n          splits.push({ literal: false, val: currentFull });\n        }\n        currentFull = c;\n        current = c;\n      }\n    }\n\n    if (currentFull.length > 0) {\n      splits.push({ literal: bracketed, val: currentFull });\n    }\n\n    return splits;\n  }\n\n  constructor(locale, formatOpts) {\n    this.opts = formatOpts;\n    this.loc = locale;\n    this.systemLoc = null;\n  }\n\n  formatWithSystemDefault(dt, opts) {\n    if (this.systemLoc === null) {\n      this.systemLoc = this.loc.redefaultToSystem();\n    }\n    const df = this.systemLoc.dtFormatter(dt, Object.assign({}, this.opts, opts));\n    return df.format();\n  }\n\n  formatDateTime(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));\n    return df.format();\n  }\n\n  formatDateTimeParts(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));\n    return df.formatToParts();\n  }\n\n  resolvedOptions(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));\n    return df.resolvedOptions();\n  }\n\n  num(n, p = 0) {\n    const opts = Object.assign({}, this.opts);\n\n    if (p > 0) {\n      opts.padTo = p;\n    }\n\n    return this.loc.numberFormatter(opts).format(n);\n  }\n\n  formatDateTimeFromString(dt, fmt) {\n    const knownEnglish = this.loc.listingMode() === 'en';\n    const string = (opts, extract) => this.loc.extract(dt, opts, extract),\n      formatOffset = opts => {\n        if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {\n          return 'Z';\n        }\n\n        const hours = Math.trunc(dt.offset / 60),\n          minutes = Math.abs(dt.offset % 60),\n          sign = hours >= 0 ? '+' : '-',\n          base = `${sign}${Math.abs(hours)}`;\n\n        switch (opts.format) {\n          case 'short':\n            return `${sign}${this.num(Math.abs(hours), 2)}:${this.num(minutes, 2)}`;\n          case 'narrow':\n            return minutes > 0 ? `${base}:${minutes}` : base;\n          case 'techie':\n            return `${sign}${this.num(Math.abs(hours), 2)}${this.num(minutes, 2)}`;\n          default:\n            throw new RangeError(`Value format ${opts.format} is out of range for property format`);\n        }\n      },\n      meridiem = () =>\n        knownEnglish\n          ? English.meridiemForDateTime(dt)\n          : string({ hour: 'numeric', hour12: true }, 'dayperiod'),\n      month = (length, standalone) =>\n        knownEnglish\n          ? English.monthForDateTime(dt, length)\n          : string(standalone ? { month: length } : { month: length, day: 'numeric' }, 'month'),\n      weekday = (length, standalone) =>\n        knownEnglish\n          ? English.weekdayForDateTime(dt, length)\n          : string(\n              standalone ? { weekday: length } : { weekday: length, month: 'long', day: 'numeric' },\n              'weekday'\n            ),\n      maybeMacro = token => {\n        const macro = tokenToObject[token];\n        if (macro) {\n          return this.formatWithSystemDefault(dt, macro);\n        } else {\n          return token;\n        }\n      },\n      era = length =>\n        knownEnglish ? English.eraForDateTime(dt, length) : string({ era: length }, 'era'),\n      tokenToString = token => {\n        const outputCal = this.loc.outputCalendar;\n\n        // Where possible: http://cldr.unicode.org/translation/date-time#TOC-Stand-Alone-vs.-Format-Styles\n        switch (token) {\n          // ms\n          case 'S':\n            return this.num(dt.millisecond);\n          case 'u':\n          // falls through\n          case 'SSS':\n            return this.num(dt.millisecond, 3);\n          // seconds\n          case 's':\n            return this.num(dt.second);\n          case 'ss':\n            return this.num(dt.second, 2);\n          // minutes\n          case 'm':\n            return this.num(dt.minute);\n          case 'mm':\n            return this.num(dt.minute, 2);\n          // hours\n          case 'h':\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);\n          case 'hh':\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);\n          case 'H':\n            return this.num(dt.hour);\n          case 'HH':\n            return this.num(dt.hour, 2);\n          // offset\n          case 'Z':\n            // like +6\n            return formatOffset({ format: 'narrow', allowZ: true });\n          case 'ZZ':\n            // like +06:00\n            return formatOffset({ format: 'short', allowZ: true });\n          case 'ZZZ':\n            // like +0600\n            return formatOffset({ format: 'techie', allowZ: false });\n          case 'ZZZZ':\n            // like EST\n            return dt.offsetNameShort;\n          case 'ZZZZZ':\n            // like Eastern Standard Time\n            return dt.offsetNameLong;\n          // zone\n          case 'z':\n            // like America/New_York\n            return dt.zoneName;\n          // meridiems\n          case 'a':\n            return meridiem();\n          // dates\n          case 'd':\n            return outputCal ? string({ day: 'numeric' }, 'day') : this.num(dt.day);\n          case 'dd':\n            return outputCal ? string({ day: '2-digit' }, 'day') : this.num(dt.day, 2);\n          // weekdays - standalone\n          case 'c':\n            // like 1\n            return this.num(dt.weekday);\n          case 'ccc':\n            // like 'Tues'\n            return weekday('short', true);\n          case 'cccc':\n            // like 'Tuesday'\n            return weekday('long', true);\n          case 'ccccc':\n            // like 'T'\n            return weekday('narrow', true);\n          // weekdays - format\n          case 'E':\n            // like 1\n            return this.num(dt.weekday);\n          case 'EEE':\n            // like 'Tues'\n            return weekday('short', false);\n          case 'EEEE':\n            // like 'Tuesday'\n            return weekday('long', false);\n          case 'EEEEE':\n            // like 'T'\n            return weekday('narrow', false);\n          // months - standalone\n          case 'L':\n            // like 1\n            return outputCal\n              ? string({ month: 'numeric', day: 'numeric' }, 'month')\n              : this.num(dt.month);\n          case 'LL':\n            // like 01, doesn't seem to work\n            return outputCal\n              ? string({ month: '2-digit', day: 'numeric' }, 'month')\n              : this.num(dt.month, 2);\n          case 'LLL':\n            // like Jan\n            return month('short', true);\n          case 'LLLL':\n            // like January\n            return month('long', true);\n          case 'LLLLL':\n            // like J\n            return month('narrow', true);\n          // months - format\n          case 'M':\n            // like 1\n            return outputCal ? string({ month: 'numeric' }, 'month') : this.num(dt.month);\n          case 'MM':\n            // like 01\n            return outputCal ? string({ month: '2-digit' }, 'month') : this.num(dt.month, 2);\n          case 'MMM':\n            // like Jan\n            return month('short', false);\n          case 'MMMM':\n            // like January\n            return month('long', false);\n          case 'MMMMM':\n            // like J\n            return month('narrow', false);\n          // years\n          case 'y':\n            // like 2014\n            return outputCal ? string({ year: 'numeric' }, 'year') : this.num(dt.year);\n          case 'yy':\n            // like 14\n            return outputCal\n              ? string({ year: '2-digit' }, 'year')\n              : this.num(dt.year.toString().slice(-2), 2);\n          case 'yyyy':\n            // like 0012\n            return outputCal ? string({ year: 'numeric' }, 'year') : this.num(dt.year, 4);\n          case 'yyyyyy':\n            // like 000012\n            return outputCal ? string({ year: 'numeric' }, 'year') : this.num(dt.year, 6);\n          // eras\n          case 'G':\n            // like AD\n            return era('short');\n          case 'GG':\n            // like Anno Domini\n            return era('long');\n          case 'GGGGG':\n            return era('narrow');\n          case 'kk':\n            return this.num(dt.weekYear.toString().slice(-2), 2);\n          case 'kkkk':\n            return this.num(dt.weekYear, 4);\n          case 'W':\n            return this.num(dt.weekNumber);\n          case 'WW':\n            return this.num(dt.weekNumber, 2);\n          case 'o':\n            return this.num(dt.ordinal);\n          case 'ooo':\n            return this.num(dt.ordinal, 3);\n          default:\n            return maybeMacro(token);\n        }\n      };\n\n    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);\n  }\n\n  formatDurationFromString(dur, fmt) {\n    const tokenToField = token => {\n        switch (token[0]) {\n          case 'S':\n            return 'millisecond';\n          case 's':\n            return 'second';\n          case 'm':\n            return 'minute';\n          case 'h':\n            return 'hour';\n          case 'd':\n            return 'day';\n          case 'M':\n            return 'month';\n          case 'y':\n            return 'year';\n          default:\n            return null;\n        }\n      },\n      tokenToString = lildur => token => {\n        const mapped = tokenToField(token);\n        if (mapped) {\n          return this.num(lildur.get(mapped), token.length);\n        } else {\n          return token;\n        }\n      },\n      tokens = Formatter.parseFormat(fmt),\n      realTokens = tokens.reduce(\n        (found, { literal, val }) => (literal ? found : found.concat(val)),\n        []\n      ),\n      collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter(t => t));\n    return stringifyTokens(tokens, tokenToString(collapsed));\n  }\n}\n","import { Util } from './util';\nimport { English } from './english';\nimport { Settings } from '../settings';\nimport { DateTime } from '../datetime';\nimport { Formatter } from './formatter';\n\nlet sysLocaleCache = null;\nfunction systemLocale() {\n  if (sysLocaleCache) {\n    return sysLocaleCache;\n  } else if (Util.hasIntl()) {\n    sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;\n    return sysLocaleCache;\n  } else {\n    sysLocaleCache = 'en-US';\n    return sysLocaleCache;\n  }\n}\n\nfunction intlConfigString(locale, numberingSystem, outputCalendar) {\n  if (Util.hasIntl()) {\n    locale = Array.isArray(locale) ? locale : [locale];\n\n    if (outputCalendar || numberingSystem) {\n      locale = locale.map(l => {\n        l += '-u';\n\n        if (outputCalendar) {\n          l += '-ca-' + outputCalendar;\n        }\n\n        if (numberingSystem) {\n          l += '-nu-' + numberingSystem;\n        }\n        return l;\n      });\n    }\n    return locale;\n  } else {\n    return [];\n  }\n}\n\nfunction mapMonths(f) {\n  const ms = [];\n  for (let i = 1; i <= 12; i++) {\n    const dt = DateTime.utc(2016, i, 1);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction mapWeekdays(f) {\n  const ms = [];\n  for (let i = 1; i <= 7; i++) {\n    const dt = DateTime.utc(2016, 11, 13 + i);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction listStuff(loc, length, defaultOK, englishFn, intlFn) {\n  const mode = loc.listingMode(defaultOK);\n\n  if (mode === 'error') {\n    return null;\n  } else if (mode === 'en') {\n    return englishFn(length);\n  } else {\n    return intlFn(length);\n  }\n}\n\n/**\n * @private\n */\n\nclass PolyNumberFormatter {\n  constructor(opts) {\n    this.padTo = opts.padTo || 0;\n    this.round = opts.round || false;\n  }\n\n  format(i) {\n    const maybeRounded = this.round ? Math.round(i) : i;\n    return Util.padStart(maybeRounded.toString(), this.padTo);\n  }\n}\n\nclass PolyDateFormatter {\n  constructor(dt, intl, opts) {\n    this.opts = opts;\n    this.hasIntl = Util.hasIntl();\n\n    let z;\n    if (dt.zone.universal) {\n      // if we have a fixed-offset zone that isn't actually UTC,\n      // (like UTC+8), we need to make do with just displaying\n      // the time in UTC; the formatter doesn't know how to handle UTC+8\n      this.dt = dt.offset === 0 ? dt : DateTime.fromMillis(dt.ts + dt.offset * 60 * 1000);\n      z = 'UTC';\n    } else if (dt.zone.type === 'local') {\n      this.dt = dt;\n    } else {\n      this.dt = dt;\n      z = dt.zone.name;\n    }\n\n    if (this.hasIntl) {\n      const realIntlOpts = Object.assign({}, this.opts);\n      if (z) {\n        realIntlOpts.timeZone = z;\n      }\n      this.dtf = new Intl.DateTimeFormat(intl, realIntlOpts);\n    }\n  }\n\n  format() {\n    if (this.hasIntl) {\n      return this.dtf.format(this.dt.toJSDate());\n    } else {\n      const tokenFormat = English.formatString(this.opts),\n        loc = Locale.create('en-US');\n      return Formatter.create(loc).formatDateTimeFromString(this.dt, tokenFormat);\n    }\n  }\n\n  formatToParts() {\n    if (this.hasIntl && Util.hasFormatToParts()) {\n      return this.dtf.formatToParts(this.dt.toJSDate());\n    } else {\n      // This is kind of a cop out. We actually could do this for English. However, we couldn't do it for intl strings\n      // and IMO it's too weird to have an uncanny valley like that\n      return [];\n    }\n  }\n\n  resolvedOptions() {\n    if (this.hasIntl) {\n      return this.dtf.resolvedOptions();\n    } else {\n      return {\n        locale: 'en-US',\n        numberingSystem: 'latn',\n        outputCalendar: 'gregory'\n      };\n    }\n  }\n}\n\n/**\n * @private\n */\n\nexport class Locale {\n  static fromOpts(opts) {\n    return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);\n  }\n\n  static create(locale, numberingSystem, outputCalendar, defaultToEN = false) {\n    const specifiedLocale = locale || Settings.defaultLocale,\n      // the system locale is useful for human readable strings but annoying for parsing/formatting known formats\n      localeR = specifiedLocale || (defaultToEN ? 'en-US' : systemLocale()),\n      numberingSystemR = numberingSystem || Settings.defaultNumberingSystem,\n      outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;\n    return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);\n  }\n\n  static resetCache() {\n    sysLocaleCache = null;\n  }\n\n  static fromObject({ locale, numberingSystem, outputCalendar } = {}) {\n    return Locale.create(locale, numberingSystem, outputCalendar);\n  }\n\n  constructor(locale, numbering, outputCalendar, specifiedLocale) {\n    this.locale = locale;\n    this.numberingSystem = numbering;\n    this.outputCalendar = outputCalendar;\n    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);\n\n    this.weekdaysCache = { format: {}, standalone: {} };\n    this.monthsCache = { format: {}, standalone: {} };\n    this.meridiemCache = null;\n    this.eraCache = {};\n\n    this.specifiedLocale = specifiedLocale;\n  }\n\n  // todo: cache me\n  listingMode(defaultOk = true) {\n    const hasIntl = Util.hasIntl(),\n      hasFTP = hasIntl && Util.hasFormatToParts(),\n      isActuallyEn =\n        this.locale === 'en' ||\n        this.locale.toLowerCase() === 'en-us' ||\n        (hasIntl &&\n          Intl.DateTimeFormat(this.intl)\n            .resolvedOptions()\n            .locale.startsWith('en-us')),\n      hasNoWeirdness =\n        (this.numberingSystem === null || this.numberingSystem === 'latn') &&\n        (this.outputCalendar === null || this.outputCalendar === 'gregory');\n\n    if (!hasFTP && !(isActuallyEn && hasNoWeirdness) && !defaultOk) {\n      return 'error';\n    } else if (!hasFTP || (isActuallyEn && hasNoWeirdness)) {\n      return 'en';\n    } else {\n      return 'intl';\n    }\n  }\n\n  clone(alts) {\n    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {\n      return this;\n    } else {\n      return Locale.create(\n        alts.locale || this.specifiedLocale,\n        alts.numberingSystem || this.numberingSystem,\n        alts.outputCalendar || this.outputCalendar,\n        alts.defaultToEN || false\n      );\n    }\n  }\n\n  redefaultToEN(alts = {}) {\n    return this.clone(Object.assign({}, alts, { defaultToEN: true }));\n  }\n\n  redefaultToSystem(alts = {}) {\n    return this.clone(Object.assign({}, alts, { defaultToEN: false }));\n  }\n\n  months(length, format = false, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.months, () => {\n      const intl = format ? { month: length, day: 'numeric' } : { month: length },\n        formatStr = format ? 'format' : 'standalone';\n      if (!this.monthsCache[formatStr][length]) {\n        this.monthsCache[formatStr][length] = mapMonths(dt => this.extract(dt, intl, 'month'));\n      }\n      return this.monthsCache[formatStr][length];\n    });\n  }\n\n  weekdays(length, format = false, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.weekdays, () => {\n      const intl = format\n          ? { weekday: length, year: 'numeric', month: 'long', day: 'numeric' }\n          : { weekday: length },\n        formatStr = format ? 'format' : 'standalone';\n      if (!this.weekdaysCache[formatStr][length]) {\n        this.weekdaysCache[formatStr][length] = mapWeekdays(dt =>\n          this.extract(dt, intl, 'weekday')\n        );\n      }\n      return this.weekdaysCache[formatStr][length];\n    });\n  }\n\n  meridiems(defaultOK = true) {\n    return listStuff(\n      this,\n      undefined,\n      defaultOK,\n      () => English.meridiems,\n      () => {\n        // In theory there could be aribitrary day periods. We're gonna assume there are exactly two\n        // for AM and PM. This is probably wrong, but it's makes parsing way easier.\n        if (!this.meridiemCache) {\n          const intl = { hour: 'numeric', hour12: true };\n          this.meridiemCache = [\n            DateTime.utc(2016, 11, 13, 9),\n            DateTime.utc(2016, 11, 13, 19)\n          ].map(dt => this.extract(dt, intl, 'dayperiod'));\n        }\n\n        return this.meridiemCache;\n      }\n    );\n  }\n\n  eras(length, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.eras, () => {\n      const intl = { era: length };\n\n      // This is utter bullshit. Different calendars are going to define eras totally differently. What I need is the minimum set of dates\n      // to definitely enumerate them.\n      if (!this.eraCache[length]) {\n        this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(dt =>\n          this.extract(dt, intl, 'era')\n        );\n      }\n\n      return this.eraCache[length];\n    });\n  }\n\n  extract(dt, intlOpts, field) {\n    const df = this.dtFormatter(dt, intlOpts),\n      results = df.formatToParts(),\n      matching = results.find(m => m.type.toLowerCase() === field);\n\n    return matching ? matching.value : null;\n  }\n\n  numberFormatter(opts = {}, intlOpts = {}) {\n    if (Util.hasIntl()) {\n      const realIntlOpts = Object.assign({ useGrouping: false }, intlOpts);\n\n      if (opts.padTo > 0) {\n        realIntlOpts.minimumIntegerDigits = opts.padTo;\n      }\n\n      if (opts.round) {\n        realIntlOpts.maximumFractionDigits = 0;\n      }\n\n      return new Intl.NumberFormat(this.intl, realIntlOpts);\n    } else {\n      return new PolyNumberFormatter(opts);\n    }\n  }\n\n  dtFormatter(dt, intlOpts = {}) {\n    return new PolyDateFormatter(dt, this.intl, intlOpts);\n  }\n\n  equals(other) {\n    return (\n      this.locale === other.locale &&\n      this.numberingSystem === other.numberingSystem &&\n      this.outputCalendar === other.outputCalendar\n    );\n  }\n}\n","import { LocalZone } from './zones/localZone';\nimport { Util } from './impl/util';\nimport { Locale } from './impl/locale';\n\nlet now = () => new Date().valueOf(),\n  defaultZone = null, // not setting this directly to LocalZone.instance bc loading order issues\n  defaultLocale = null,\n  defaultNumberingSystem = null,\n  defaultOutputCalendar = null,\n  throwOnInvalid = false;\n\n/**\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\n */\nexport class Settings {\n  /**\n   * Get the callback for returning the current timestamp.\n   * @type {function}\n   */\n  static get now() {\n    return now;\n  }\n\n  /**\n   * Set the callback for returning the current timestamp.\n   * @type {function}\n   */\n  static set now(n) {\n    now = n;\n  }\n\n  /**\n   * Get the default time zone to create DateTimes in.\n   * @type {string}\n   */\n  static get defaultZoneName() {\n    return (defaultZone || LocalZone.instance).name;\n  }\n\n  /**\n   * Set the default time zone to create DateTimes in. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultZoneName(z) {\n    defaultZone = Util.normalizeZone(z);\n  }\n\n  /**\n   * Get the default time zone object to create DateTimes in. Does not affect existing instances.\n   * @type {Zone}\n   */\n  static get defaultZone() {\n    return defaultZone || LocalZone.instance;\n  }\n\n  /**\n   * Get the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultLocale() {\n    return defaultLocale;\n  }\n\n  /**\n   * Set the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultLocale(locale) {\n    defaultLocale = locale;\n  }\n\n  /**\n   * Get the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultNumberingSystem() {\n    return defaultNumberingSystem;\n  }\n\n  /**\n   * Set the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultNumberingSystem(numberingSystem) {\n    defaultNumberingSystem = numberingSystem;\n  }\n\n  /**\n   * Get the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultOutputCalendar() {\n    return defaultOutputCalendar;\n  }\n\n  /**\n   * Set the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultOutputCalendar(outputCalendar) {\n    defaultOutputCalendar = outputCalendar;\n  }\n\n  /**\n   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {Zone}\n   */\n  static get throwOnInvalid() {\n    return throwOnInvalid;\n  }\n\n  /**\n   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {Zone}\n   */\n  static set throwOnInvalid(t) {\n    throwOnInvalid = t;\n  }\n\n  /**\n   * Reset Luxon's global caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */\n  static resetCaches() {\n    Locale.resetCache();\n  }\n}\n","import { Duration } from '../duration';\nimport { DateTime } from '../datetime';\nimport { Zone } from '../zone';\nimport { LocalZone } from '../zones/localZone';\nimport { IANAZone } from '../zones/IANAZone';\nimport { FixedOffsetZone } from '../zones/fixedOffsetZone';\nimport { Settings } from '../settings';\nimport { InvalidArgumentError } from '../errors';\n\n/*\n  This is just a junk drawer, containing anything used across multiple classes.\n  Because Luxon is small(ish), this should stay small and we won't worry about splitting\n  it up into, say, parsingUtil.js and basicUtil.js and so on. But they are divided up by feature area.\n*/\n\n/**\n * @private\n */\n\nexport class Util {\n  // TYPES\n\n  static isUndefined(o) {\n    return typeof o === 'undefined';\n  }\n\n  static isNumber(o) {\n    return typeof o === 'number';\n  }\n\n  static isString(o) {\n    return typeof o === 'string';\n  }\n\n  static isDate(o) {\n    return Object.prototype.toString.call(o) === '[object Date]';\n  }\n\n  // OBJECTS AND ARRAYS\n\n  static maybeArray(thing) {\n    return Array.isArray(thing) ? thing : [thing];\n  }\n\n  static bestBy(arr, by, compare) {\n    return arr.reduce((best, next) => {\n      const pair = [by(next), next];\n      if (!best) {\n        return pair;\n      } else if (compare.apply(null, [best[0], pair[0]]) === best[0]) {\n        return best;\n      } else {\n        return pair;\n      }\n    }, null)[1];\n  }\n\n  static pick(obj, keys) {\n    return keys.reduce((a, k) => {\n      a[k] = obj[k];\n      return a;\n    }, {});\n  }\n\n  // NUMBERS AND STRINGS\n\n  static numberBetween(thing, bottom, top) {\n    return Util.isNumber(thing) && thing >= bottom && thing <= top;\n  }\n\n  static padStart(input, n = 2) {\n    return ('0'.repeat(n) + input).slice(-n);\n  }\n\n  static parseMillis(fraction) {\n    if (fraction) {\n      const f = parseFloat('0.' + fraction) * 1000;\n      return Math.round(f);\n    } else {\n      return 0;\n    }\n  }\n\n  // DATE BASICS\n\n  static isLeapYear(year) {\n    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n  }\n\n  static daysInYear(year) {\n    return Util.isLeapYear(year) ? 366 : 365;\n  }\n\n  static daysInMonth(year, month) {\n    if (month === 2) {\n      return Util.isLeapYear(year) ? 29 : 28;\n    } else {\n      return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month - 1];\n    }\n  }\n\n  static untruncateYear(year) {\n    if (year > 99) {\n      return year;\n    } else return year > 60 ? 1900 + year : 2000 + year;\n  }\n\n  // PARSING\n\n  static parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {\n    const date = new Date(ts),\n      intl = {\n        hour12: false,\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      };\n\n    if (timeZone) {\n      intl.timeZone = timeZone;\n    }\n\n    const modified = Object.assign({ timeZoneName: offsetFormat }, intl),\n      hasIntl = Util.hasIntl();\n\n    if (hasIntl && Util.hasFormatToParts()) {\n      const parsed = new Intl.DateTimeFormat(locale, modified)\n        .formatToParts(date)\n        .find(m => m.type.toLowerCase() === 'timezonename');\n      return parsed ? parsed.value : null;\n    } else if (hasIntl) {\n      // this probably doesn't work for all locales\n      const without = new Intl.DateTimeFormat(locale, intl).format(date),\n        included = new Intl.DateTimeFormat(locale, modified).format(date),\n        diffed = included.substring(without.length),\n        trimmed = diffed.replace(/^[, ]+/, '');\n      return trimmed;\n    } else {\n      return null;\n    }\n  }\n\n  // signedOffset('-5', '30') -> -330\n  static signedOffset(offHourStr, offMinuteStr) {\n    const offHour = parseInt(offHourStr, 10) || 0,\n      offMin = parseInt(offMinuteStr, 10) || 0,\n      offMinSigned = offHour < 0 ? -offMin : offMin;\n    return offHour * 60 + offMinSigned;\n  }\n\n  // COERCION\n\n  static friendlyDuration(duration) {\n    if (Util.isNumber(duration)) {\n      return Duration.fromMillis(duration);\n    } else if (duration instanceof Duration) {\n      return duration;\n    } else if (duration instanceof Object) {\n      return Duration.fromObject(duration);\n    } else {\n      throw new InvalidArgumentError('Unknown duration argument');\n    }\n  }\n\n  static friendlyDateTime(dateTimeish) {\n    if (dateTimeish instanceof DateTime) {\n      return dateTimeish;\n    } else if (dateTimeish.valueOf && Util.isNumber(dateTimeish.valueOf())) {\n      return DateTime.fromJSDate(dateTimeish);\n    } else if (dateTimeish instanceof Object) {\n      return DateTime.fromObject(dateTimeish);\n    } else {\n      throw new InvalidArgumentError('Unknown datetime argument');\n    }\n  }\n\n  static normalizeZone(input) {\n    if (Util.isUndefined(input) || input === null) {\n      return LocalZone.instance;\n    } else if (input instanceof Zone) {\n      return input;\n    } else if (Util.isString(input)) {\n      const lowered = input.toLowerCase();\n      if (lowered === 'local') return LocalZone.instance;\n      else if (lowered === 'utc') return FixedOffsetZone.utcInstance;\n      else if (IANAZone.isValidSpecier(lowered)) return new IANAZone(input);\n      else return FixedOffsetZone.parseSpecifier(lowered) || Settings.defaultZone;\n    } else if (Util.isNumber(input)) {\n      return FixedOffsetZone.instance(input);\n    } else if (typeof input === 'object' && input.offset) {\n      // This is dumb, but the instanceof check above doesn't seem to really work\n      // so we're duck checking it\n      return input;\n    } else {\n      return Settings.defaultZone;\n    }\n  }\n\n  static normalizeObject(obj, normalizer, ignoreUnknown = false) {\n    const normalized = {};\n    for (const u in obj) {\n      if (obj.hasOwnProperty(u)) {\n        const v = obj[u];\n        if (v !== null && !Util.isUndefined(v) && !Number.isNaN(v)) {\n          const mapped = normalizer(u, ignoreUnknown);\n          if (mapped) {\n            normalized[mapped] = v;\n          }\n        }\n      }\n    }\n    return normalized;\n  }\n\n  static timeObject(obj) {\n    return Util.pick(obj, ['hour', 'minute', 'second', 'millisecond']);\n  }\n\n  // CAPABILITIES\n\n  static hasIntl() {\n    return typeof Intl !== 'undefined' && Intl.DateTimeFormat;\n  }\n\n  static hasFormatToParts() {\n    return !Util.isUndefined(Intl.DateTimeFormat.prototype.formatToParts);\n  }\n}\n","import { Util } from './util';\nimport { English } from './english';\nimport { FixedOffsetZone } from '../zones/fixedOffsetZone';\nimport { IANAZone } from '../zones/IANAZone';\n\n/*\nThis file handles parsing for well-specified formats. Here's how it works:\n * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.\n * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object\n * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.\n * Extractors can take a \"cursor\" representing the offset in the match to look at. This makes it easy to combine extractors.\n * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.\n * Some extractions are super dumb and simpleParse and fromStrings help DRY them.\n*/\n\nfunction combineRegexes(...regexes) {\n  const full = regexes.reduce((f, r) => f + r.source, '');\n  return RegExp(`^${full}$`);\n}\n\nfunction combineExtractors(...extractors) {\n  return m =>\n    extractors\n      .reduce(\n        ([mergedVals, mergedZone, cursor], ex) => {\n          const [val, zone, next] = ex(m, cursor);\n          return [Object.assign(mergedVals, val), mergedZone || zone, next];\n        },\n        [{}, null, 1]\n      )\n      .slice(0, 2);\n}\n\nfunction parse(s, ...patterns) {\n  if (s == null) {\n    return [null, null];\n  }\n\n  for (const [regex, extractor] of patterns) {\n    const m = regex.exec(s);\n    if (m) {\n      return extractor(m);\n    }\n  }\n  return [null, null];\n}\n\nfunction simpleParse(...keys) {\n  return (match, cursor) => {\n    const ret = {};\n    let i;\n\n    for (i = 0; i < keys.length; i++) {\n      ret[keys[i]] = parseInt(match[cursor + i]);\n    }\n    return [ret, null, cursor + i];\n  };\n}\n\n// ISO and SQL parsing\nconst offsetRegex = /(?:(Z)|([+-]\\d\\d)(?::?(\\d\\d))?)/,\n  isoTimeBaseRegex = /(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d{1,9}))?)?)?/,\n  isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${offsetRegex.source}?`),\n  isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`),\n  isoYmdRegex = /([+-]\\d{6}|\\d{4})(?:-?(\\d\\d)(?:-?(\\d\\d))?)?/,\n  isoWeekRegex = /(\\d{4})-?W(\\d\\d)-?(\\d)/,\n  isoOrdinalRegex = /(\\d{4})-?(\\d{3})/,\n  extractISOWeekData = simpleParse('weekYear', 'weekNumber', 'weekDay'),\n  extractISOOrdinalData = simpleParse('year', 'ordinal'),\n  sqlYmdRegex = /(\\d{4})-(\\d\\d)-(\\d\\d)/, // dumbed-down version of the ISO one\n  sqlTimeRegex = RegExp(\n    `${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|([a-zA-Z_]{1,256}/[a-zA-Z_]{1,256}))?`\n  ),\n  sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);\n\nfunction extractISOYmd(match, cursor) {\n  const item = {\n    year: parseInt(match[cursor]),\n    month: parseInt(match[cursor + 1]) || 1,\n    day: parseInt(match[cursor + 2]) || 1\n  };\n\n  return [item, null, cursor + 3];\n}\n\nfunction extractISOTime(match, cursor) {\n  const item = {\n    hour: parseInt(match[cursor]) || 0,\n    minute: parseInt(match[cursor + 1]) || 0,\n    second: parseInt(match[cursor + 2]) || 0,\n    millisecond: Util.parseMillis(match[cursor + 3])\n  };\n\n  return [item, null, cursor + 4];\n}\n\nfunction extractISOOffset(match, cursor) {\n  const local = !match[cursor] && !match[cursor + 1],\n    fullOffset = Util.signedOffset(match[cursor + 1], match[cursor + 2]),\n    zone = local ? null : FixedOffsetZone.instance(fullOffset);\n  return [{}, zone, cursor + 3];\n}\n\nfunction extractIANAZone(match, cursor) {\n  const zone = match[cursor] ? new IANAZone(match[cursor]) : null;\n  return [{}, zone, cursor + 1];\n}\n\n// ISO duration parsing\n\nconst isoDuration = /^P(?:(?:(\\d{1,9})Y)?(?:(\\d{1,9})M)?(?:(\\d{1,9})D)?(?:T(?:(\\d{1,9})H)?(?:(\\d{1,9})M)?(?:(\\d{1,9})S)?)?|(\\d{1,9})W)$/;\n\nfunction extractISODuration(match) {\n  const [, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr, weekStr] = match;\n\n  return {\n    years: parseInt(yearStr),\n    months: parseInt(monthStr),\n    weeks: parseInt(weekStr),\n    days: parseInt(dayStr),\n    hours: parseInt(hourStr),\n    minutes: parseInt(minuteStr),\n    seconds: parseInt(secondStr)\n  };\n}\n\n// These are a little braindead. EDT *should* tell us that we're in, say, America/New_York\n// and not just that we're in -240 *right now*. But since I don't think these are used that often\n// I'm just going to ignore that\nconst obsOffsets = {\n  GMT: 0,\n  EDT: -4 * 60,\n  EST: -5 * 60,\n  CDT: -5 * 60,\n  CST: -6 * 60,\n  MDT: -6 * 60,\n  MST: -7 * 60,\n  PDT: -7 * 60,\n  PST: -8 * 60\n};\n\nfunction fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n  const result = {\n    year: yearStr.length === 2 ? Util.untruncateYear(parseInt(yearStr)) : parseInt(yearStr),\n    month:\n      monthStr.length === 2 ? parseInt(monthStr, 10) : English.monthsShort.indexOf(monthStr) + 1,\n    day: parseInt(dayStr),\n    hour: parseInt(hourStr),\n    minute: parseInt(minuteStr)\n  };\n\n  if (secondStr) result.second = parseInt(secondStr);\n  if (weekdayStr) {\n    result.weekday =\n      weekdayStr.length > 3\n        ? English.weekdaysLong.indexOf(weekdayStr) + 1\n        : English.weekdaysShort.indexOf(weekdayStr) + 1;\n  }\n\n  return result;\n}\n\n// RFC 2822/5322\nconst rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\\d\\d)(\\d\\d)))$/;\n\nfunction extractRFC2822(match) {\n  const [\n      ,\n      weekdayStr,\n      dayStr,\n      monthStr,\n      yearStr,\n      hourStr,\n      minuteStr,\n      secondStr,\n      obsOffset,\n      milOffset,\n      offHourStr,\n      offMinuteStr\n    ] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n\n  let offset;\n  if (obsOffset) {\n    offset = obsOffsets[obsOffset];\n  } else if (milOffset) {\n    offset = 0;\n  } else {\n    offset = Util.signedOffset(offHourStr, offMinuteStr);\n  }\n\n  return [result, new FixedOffsetZone(offset)];\n}\n\nfunction preprocessRFC2822(s) {\n  // Remove comments and folding whitespace and replace multiple-spaces with a single space\n  return s\n    .replace(/\\([^)]*\\)|[\\n\\t]/g, ' ')\n    .replace(/(\\s\\s+)/g, ' ')\n    .trim();\n}\n\n// http date\n\nconst rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d\\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  rfc850 = /^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\\d\\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \\d|\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) (\\d{4})$/;\n\nfunction extractRFC1123Or850(match) {\n  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\nfunction extractASCII(match) {\n  const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\n/**\n * @private\n */\n\nexport class RegexParser {\n  static parseISODate(s) {\n    return parse(\n      s,\n      [\n        combineRegexes(isoYmdRegex, isoTimeExtensionRegex),\n        combineExtractors(extractISOYmd, extractISOTime, extractISOOffset)\n      ],\n      [\n        combineRegexes(isoWeekRegex, isoTimeExtensionRegex),\n        combineExtractors(extractISOWeekData, extractISOTime, extractISOOffset)\n      ],\n      [\n        combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex),\n        combineExtractors(extractISOOrdinalData, extractISOTime)\n      ],\n      [combineRegexes(isoTimeRegex), combineExtractors(extractISOTime, extractISOOffset)]\n    );\n  }\n\n  static parseRFC2822Date(s) {\n    return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);\n  }\n\n  static parseHTTPDate(s) {\n    return parse(\n      s,\n      [rfc1123, extractRFC1123Or850],\n      [rfc850, extractRFC1123Or850],\n      [ascii, extractASCII]\n    );\n  }\n\n  static parseISODuration(s) {\n    return parse(s, [isoDuration, extractISODuration]);\n  }\n\n  static parseSQL(s) {\n    return parse(\n      s,\n      [\n        combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex),\n        combineExtractors(extractISOYmd, extractISOTime, extractISOOffset, extractIANAZone)\n      ],\n      [\n        combineRegexes(sqlTimeRegex),\n        combineExtractors(extractISOTime, extractISOOffset, extractIANAZone)\n      ]\n    );\n  }\n}\n","import { Util } from './impl/util';\nimport { Locale } from './impl/locale';\nimport { Formatter } from './impl/formatter';\nimport { RegexParser } from './impl/regexParser';\nimport { Settings } from './settings';\nimport { InvalidArgumentError, InvalidDurationError, InvalidUnitError } from './errors';\n\nconst INVALID = 'Invalid Duration';\n\n// unit conversion constants\nconst lowOrderMatrix = {\n    weeks: {\n      days: 7,\n      hours: 7 * 24,\n      minutes: 7 * 24 * 60,\n      seconds: 7 * 24 * 60 * 60,\n      milliseconds: 7 * 24 * 60 * 60 * 1000\n    },\n    days: {\n      hours: 24,\n      minutes: 24 * 60,\n      seconds: 24 * 60 * 60,\n      milliseconds: 24 * 60 * 60 * 1000\n    },\n    hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1000 },\n    minutes: { seconds: 60, milliseconds: 60 * 1000 },\n    seconds: { milliseconds: 1000 }\n  },\n  casualMatrix = Object.assign(\n    {\n      years: {\n        months: 12,\n        weeks: 52,\n        days: 365,\n        hours: 365 * 24,\n        minutes: 365 * 24 * 60,\n        seconds: 365 * 24 * 60 * 60,\n        milliseconds: 365 * 24 * 60 * 60 * 1000\n      },\n      months: {\n        weeks: 4,\n        days: 30,\n        hours: 30 * 24,\n        minutes: 30 * 24 * 60,\n        seconds: 30 * 24 * 60 * 60,\n        milliseconds: 30 * 24 * 60 * 60 * 1000\n      }\n    },\n    lowOrderMatrix\n  ),\n  daysInYearAccurate = 146097.0 / 400,\n  daysInMonthAccurate = 146097.0 / 4800,\n  accurateMatrix = Object.assign(\n    {\n      years: {\n        months: 12,\n        weeks: daysInYearAccurate / 7,\n        days: daysInYearAccurate,\n        hours: daysInYearAccurate * 24,\n        minutes: daysInYearAccurate * 24 * 60,\n        seconds: daysInYearAccurate * 24 * 60 * 60,\n        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000\n      },\n      months: {\n        weeks: daysInMonthAccurate / 7,\n        days: daysInMonthAccurate,\n        hours: daysInYearAccurate * 24,\n        minutes: daysInYearAccurate * 24 * 60,\n        seconds: daysInYearAccurate * 24 * 60 * 60,\n        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000\n      }\n    },\n    lowOrderMatrix\n  );\n\n// units ordered by size\nconst orderedUnits = [\n  'years',\n  'months',\n  'weeks',\n  'days',\n  'hours',\n  'minutes',\n  'seconds',\n  'milliseconds'\n];\n\n// clone really means \"create another instance just like this one, but with these changes\"\nfunction clone(dur, alts, clear = false) {\n  // deep merge for vals\n  const conf = {\n    values: clear ? alts.values : Object.assign(dur.values, alts.values || {}),\n    loc: dur.loc.clone(alts.loc),\n    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy\n  };\n  return new Duration(conf);\n}\n\n// some functions really care about the absolute value of a duration, so combined with\n// normalize() this tells us whether this duration is positive or negative\nfunction isHighOrderNegative(obj) {\n  // only rule is that the highest-order part must be non-negative\n  for (const k of orderedUnits) {\n    if (obj[k]) return obj[k] < 0;\n  }\n  return false;\n}\n\n/**\n * A Duration object represents a period of time, like \"2 months\" or \"1 day, 1 hour\". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime.plus} to add a Duration object to a DateTime, producing another DateTime.\n *\n * Here is a brief overview of commonly used methods and getters in Duration:\n *\n * * **Creation** To create a Duration, use {@link Duration.fromMillis}, {@link Duration.fromObject}, or {@link Duration.fromISO}.\n * * **Unit values** See the {@link years}, {@link months}, {@link weeks}, {@link days}, {@link hours}, {@link minutes}, {@link seconds}, {@link milliseconds} accessors.\n * * **Configuration** See  {@link locale} and {@link numberingSystem} accessors.\n * * **Transformation** To create new Durations out of old ones use {@link plus}, {@link minus}, {@link normalize}, {@link set}, {@link reconfigure}, {@link shiftTo}, and {@link negate}.\n * * **Output** To convert the Duration into other representations, see {@link as}, {@link toISO}, {@link toFormat}, and {@link toJSON}\n *\n * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.\n */\nexport class Duration {\n  /**\n   * @private\n   */\n  constructor(config) {\n    const accurate = config.conversionAccuracy === 'longterm' || false;\n    /**\n     * @access private\n     */\n    this.values = config.values;\n    /**\n     * @access private\n     */\n    this.loc = config.loc || Locale.create();\n    /**\n     * @access private\n     */\n    this.conversionAccuracy = accurate ? 'longterm' : 'casual';\n    /**\n     * @access private\n     */\n    this.invalid = config.invalidReason || null;\n    /**\n     * @access private\n     */\n    this.matrix = accurate ? accurateMatrix : casualMatrix;\n  }\n\n  /**\n   * Create Duration from a number of milliseconds.\n   * @param {number} count of milliseconds\n   * @param {Object} opts - options for parsing\n   * @param {string} [obj.locale='en-US'] - the locale to use\n   * @param {string} obj.numberingSystem - the numbering system to use\n   * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  static fromMillis(count, opts) {\n    return Duration.fromObject(Object.assign({ milliseconds: count }, opts));\n  }\n\n  /**\n   * Create an DateTime from a Javascript object with keys like 'years' and 'hours'.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.years\n   * @param {number} obj.months\n   * @param {number} obj.weeks\n   * @param {number} obj.days\n   * @param {number} obj.hours\n   * @param {number} obj.minutes\n   * @param {number} obj.seconds\n   * @param {number} obj.milliseconds\n   * @param {string} [obj.locale='en-US'] - the locale to use\n   * @param {string} obj.numberingSystem - the numbering system to use\n   * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  static fromObject(obj) {\n    return new Duration({\n      values: Util.normalizeObject(obj, Duration.normalizeUnit, true),\n      loc: Locale.fromObject(obj),\n      conversionAccuracy: obj.conversionAccuracy\n    });\n  }\n\n  /**\n   * Create a DateTime from an ISO 8601 duration string.\n   * @param {string} text - text to parse\n   * @param {Object} opts - options for parsing\n   * @param {string} [obj.locale='en-US'] - the locale to use\n   * @param {string} obj.numberingSystem - the numbering system to use\n   * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromISO('P3Y6M4DT12H30M5S').toObject() //=> { years: 3, months: 6, day: 4, hours: 12, minutes: 30, seconds: 5 }\n   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }\n   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }\n   * @return {Duration}\n   */\n  static fromISO(text, opts) {\n    const obj = Object.assign(RegexParser.parseISODuration(text), opts);\n    return Duration.fromObject(obj);\n  }\n\n  /**\n   * Create an invalid Duration.\n   * @param {string} reason - reason this is invalid\n   * @return {Duration}\n   */\n  static invalid(reason) {\n    if (!reason) {\n      throw new InvalidArgumentError('need to specify a reason the DateTime is invalid');\n    }\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDurationError(reason);\n    } else {\n      return new Duration({ invalidReason: reason });\n    }\n  }\n\n  /**\n   * @private\n   */\n  static normalizeUnit(unit, ignoreUnknown = false) {\n    const normalized = {\n      year: 'years',\n      years: 'years',\n      month: 'months',\n      months: 'months',\n      week: 'weeks',\n      weeks: 'weeks',\n      day: 'days',\n      days: 'days',\n      hour: 'hours',\n      hours: 'hours',\n      minute: 'minutes',\n      minutes: 'minutes',\n      second: 'seconds',\n      seconds: 'seconds',\n      millisecond: 'milliseconds',\n      milliseconds: 'milliseconds'\n    }[unit ? unit.toLowerCase() : unit];\n\n    if (!ignoreUnknown && !normalized) throw new InvalidUnitError(unit);\n\n    return normalized;\n  }\n\n  /**\n   * Get  the locale of a Duration, such 'en-GB'\n   * @return {string}\n   */\n  get locale() {\n    return this.loc.locale;\n  }\n\n  /**\n   * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration\n   *\n   * @return {string}\n   */\n  get numberingSystem() {\n    return this.loc.numberingSystem;\n  }\n\n  /**\n   * Returns a string representation of this Duration formatted according to the specified format string.\n   * @param {string} fmt - the format string\n   * @param {object} opts - options\n   * @param {boolean} opts.round - round numerical values\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc, opts).formatDurationFromString(this, fmt)\n      : INVALID;\n  }\n\n  /**\n   * Returns a Javascript object with this Duration's values.\n   * @param opts - options for generating the object\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }\n   * @return {object}\n   */\n  toObject(opts = {}) {\n    if (!this.isValid) return {};\n\n    const base = Object.assign({}, this.values);\n\n    if (opts.includeConfig) {\n      base.conversionAccuracy = this.conversionAccuracy;\n      base.numberingSystem = this.loc.numberingSystem;\n      base.locale = this.loc.locale;\n    }\n    return base;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Duration.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'\n   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'\n   * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'\n   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'\n   * @return {string}\n   */\n  toISO() {\n    // we could use the formatter, but this is an easier way to get the minimum string\n    if (!this.isValid) return null;\n\n    let s = 'P',\n      norm = this.normalize();\n\n    // ISO durations are always positive, so take the absolute value\n    norm = isHighOrderNegative(norm.values) ? norm.negate() : norm;\n\n    if (norm.years > 0) s += norm.years + 'Y';\n    if (norm.months > 0) s += norm.months + 'M';\n    if (norm.days > 0 || norm.weeks > 0) s += norm.days + norm.weeks * 7 + 'D';\n    if (norm.hours > 0 || norm.minutes > 0 || norm.seconds > 0 || norm.milliseconds > 0) s += 'T';\n    if (norm.hours > 0) s += norm.hours + 'H';\n    if (norm.minutes > 0) s += norm.minutes + 'M';\n    if (norm.seconds > 0) s += norm.seconds + 'S';\n    return s;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.\n   * @return {string}\n   */\n  toString() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns a string representation of this Duration appropriate for the REPL.\n   * @return {string}\n   */\n  inspect() {\n    if (this.isValid) {\n      return `Duration {\\n  values: ${this.toISO()},\\n  locale: ${this\n        .locale},\\n  conversionAccuracy: ${this.conversionAccuracy} }`;\n    } else {\n      return `Duration { Invalid, reason: ${this.invalidReason} }`;\n    }\n  }\n\n  /**\n   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|number|object} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = Util.friendlyDuration(duration),\n      result = {};\n\n    for (const k of orderedUnits) {\n      const val = dur.get(k) + this.get(k);\n      if (val !== 0) {\n        result[k] = val;\n      }\n    }\n\n    return clone(this, { values: result }, true);\n  }\n\n  /**\n   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|number|object} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  minus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = Util.friendlyDuration(duration);\n    return this.plus(dur.negate());\n  }\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example Duration.fromObject({years: 2, days: 3}).years //=> 2\n   * @example Duration.fromObject({years: 2, days: 3}).months //=> 0\n   * @example Duration.fromObject({years: 2, days: 3}).days //=> 3\n   * @return {number}\n   */\n  get(unit) {\n    return this[Duration.normalizeUnit(unit)];\n  }\n\n  /**\n   * \"Set\" the values of specified units. Return a newly-constructed Duration.\n   * @param {object} values - a mapping of units to numbers\n   * @example dur.set({ years: 2017 })\n   * @example dur.set({ hours: 8, minutes: 30 })\n   * @return {Duration}\n   */\n  set(values) {\n    const mixed = Object.assign(this.values, Util.normalizeObject(values, Duration.normalizeUnit));\n    return clone(this, { values: mixed });\n  }\n\n  /**\n   * \"Set\" the locale and/or numberingSystem.  Returns a newly-constructed Duration.\n   * @example dur.reconfigure({ locale: 'en-GB' })\n   * @return {Duration}\n   */\n  reconfigure({ locale, numberingSystem, conversionAccuracy } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem }),\n      opts = { loc };\n\n    if (conversionAccuracy) {\n      opts.conversionAccuracy = conversionAccuracy;\n    }\n\n    return clone(this, opts);\n  }\n\n  /**\n   * Return the length of the duration in the specified unit.\n   * @param {string} unit - a unit such as 'minutes' or 'days'\n   * @example Duration.fromObject({years: 1}).as('days') //=> 365\n   * @example Duration.fromObject({years: 1}).as('months') //=> 12\n   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5\n   * @return {number}\n   */\n  as(unit) {\n    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;\n  }\n\n  /**\n   * Reduce this Duration to its canonical representation in its current units.\n   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }\n   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }\n   * @return {Duration}\n   */\n  normalize() {\n    if (!this.isValid) return this;\n\n    const neg = isHighOrderNegative(this.values),\n      dur = neg ? this.negate() : this,\n      shifted = dur.shiftTo(...Object.keys(this.values));\n    return neg ? shifted.negate() : shifted;\n  }\n\n  /**\n   * Convert this Duration into its representation in a different set of units.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }\n   * @return {Duration}\n   */\n  shiftTo(...units) {\n    if (!this.isValid) return this;\n\n    if (units.length === 0) {\n      return this;\n    }\n\n    units = units.map(u => Duration.normalizeUnit(u));\n\n    const built = {},\n      accumulated = {},\n      vals = this.toObject();\n    let lastUnit;\n\n    for (const k of orderedUnits) {\n      if (units.indexOf(k) >= 0) {\n        lastUnit = k;\n\n        let own = 0;\n\n        // anything we haven't boiled down yet should get boiled to this unit\n        for (const ak in accumulated) {\n          if (accumulated.hasOwnProperty(ak)) {\n            own += this.matrix[ak][k] * accumulated[ak];\n            accumulated[ak] = 0;\n          }\n        }\n\n        // plus anything that's already in this unit\n        if (Util.isNumber(vals[k])) {\n          own += vals[k];\n        }\n\n        const i = Math.trunc(own);\n        built[k] = i;\n        accumulated[k] = own - i;\n\n        // plus anything further down the chain that should be rolled up in to this\n        for (const down in vals) {\n          if (orderedUnits.indexOf(down) > orderedUnits.indexOf(k)) {\n            const conv = this.matrix[k][down],\n              added = Math.floor(vals[down] / conv);\n            built[k] += added;\n            vals[down] -= added * conv;\n          }\n        }\n        // otherwise, keep it in the wings to boil it later\n      } else if (Util.isNumber(vals[k])) {\n        accumulated[k] = vals[k];\n      }\n    }\n\n    // anything leftover becomes the decimal for the last unit\n    if (lastUnit) {\n      for (const key in accumulated) {\n        if (accumulated.hasOwnProperty(key)) {\n          if (accumulated[key] > 0) {\n            built[lastUnit] +=\n              key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];\n          }\n        }\n      }\n    }\n    return clone(this, { values: built }, true);\n  }\n\n  /**\n   * Return the negative of this Duration.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }\n   * @return {Duration}\n   */\n  negate() {\n    if (!this.isValid) return this;\n    const negated = {};\n    for (const k of Object.keys(this.values)) {\n      negated[k] = -this.values[k];\n    }\n    return clone(this, { values: negated });\n  }\n\n  /**\n   * Get the years.\n   * @return {number}\n   */\n  get years() {\n    return this.isValid ? this.values.years || 0 : NaN;\n  }\n\n  /**\n   * Get the months.\n   * @return {number}\n   */\n  get months() {\n    return this.isValid ? this.values.months || 0 : NaN;\n  }\n\n  /**\n   * Get the weeks\n   * @return {number}\n   */\n  get weeks() {\n    return this.isValid ? this.values.weeks || 0 : NaN;\n  }\n\n  /**\n   * Get the days.\n   * @return {number}\n   */\n  get days() {\n    return this.isValid ? this.values.days || 0 : NaN;\n  }\n\n  /**\n   * Get the hours.\n   * @return {number}\n   */\n  get hours() {\n    return this.isValid ? this.values.hours || 0 : NaN;\n  }\n\n  /**\n   * Get the minutes.\n   * @return {number}\n   */\n  get minutes() {\n    return this.isValid ? this.values.minutes || 0 : NaN;\n  }\n\n  /**\n   * Get the seconds.\n   * @return {number}\n   */\n  get seconds() {\n    return this.isValid ? this.values.seconds || 0 : NaN;\n  }\n\n  /**\n   * Get the milliseconds.\n   * @return {number}\n   */\n  get milliseconds() {\n    return this.isValid ? this.values.milliseconds || 0 : NaN;\n  }\n\n  /**\n   * Returns whether the Duration is invalid. Invalid durations are returned by diff operations\n   * on invalid DateTimes or Intervals.\n   * @return {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an explanation of why this Duration became invalid, or null if the Duration is valid\n   * @return {string}\n   */\n  get invalidReason() {\n    return this.invalid;\n  }\n\n  /**\n   * Equality check\n   * Two Durations are equal iff they have the same units and the same values for each unit.\n   * @param {Duration} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    if (!this.loc.equals(other.loc)) {\n      return false;\n    }\n\n    for (const u of orderedUnits) {\n      if (this.values[u] !== other.values[u]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { Util } from './impl/util';\nimport { DateTime } from './datetime';\nimport { Duration } from './duration';\nimport { Settings } from './settings';\nimport { InvalidArgumentError, InvalidIntervalError } from './errors';\n\nconst INVALID = 'Invalid Interval';\n\n// checks if the start is equal to or before the end\nfunction validateStartEnd(start, end) {\n  return !!start && !!end && start.isValid && end.isValid && start <= end;\n}\n\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link fromDateTimes}, {@link after}, {@link before}, or {@link fromISO}.\n * * **Accessors** Use {@link start} and {@link end} to get the start and end.\n * * **Interogation** To analyze the Interval, use {@link count}, {@link length}, {@link hasSame}, {@link contains}, {@link isAfter}, or {@link isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link set}, {@link splitAt}, {@link splitBy}, {@link divideEqually}, {@link merge}, {@link xor}, {@link union}, {@link intersection}, or {@link difference}.\n * * **Comparison** To compare this Interval to another one, use {@link equals}, {@link overlaps}, {@link abutsStart}, {@link abutsEnd}, {@link engulfs}\n * * **Output*** To convert the Interval into other representations, see {@link toString}, {@link toISO}, {@link toFormat}, and {@link toDuration}.\n */\nexport class Interval {\n  /**\n   * @private\n   */\n  constructor(config) {\n    /**\n     * @access private\n     */\n    this.s = config.start;\n    /**\n     * @access private\n     */\n    this.e = config.end;\n    /**\n     * @access private\n     */\n    this.invalid = config.invalidReason || null;\n  }\n\n  /**\n   * Create an invalid Interval.\n   * @return {Interval}\n   */\n  static invalid(reason) {\n    if (!reason) {\n      throw new InvalidArgumentError('need to specify a reason the DateTime is invalid');\n    }\n    if (Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(reason);\n    } else {\n      return new Interval({ invalidReason: reason });\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|object|Date} start\n   * @param {DateTime|object|Date} end\n   * @return {Interval}\n   */\n  static fromDateTimes(start, end) {\n    const builtStart = Util.friendlyDateTime(start),\n      builtEnd = Util.friendlyDateTime(end);\n\n    return new Interval({\n      start: builtStart,\n      end: builtEnd,\n      invalidReason: validateStartEnd(builtStart, builtEnd) ? null : 'invalid endpoints'\n    });\n  }\n\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|object|Date} start\n   * @param {Duration|number|object} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static after(start, duration) {\n    const dur = Util.friendlyDuration(duration),\n      dt = Util.friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|object|Date} end\n   * @param {Duration|number|object} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static before(end, duration) {\n    const dur = Util.friendlyDuration(duration),\n      dt = Util.friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n\n  /**\n   * Create an Interval from an ISO 8601 string\n   * @param {string} string - the ISO string to parse\n   * @param {object} opts - options to pass {@see DateTime.fromISO}\n   * @return {Interval}\n   */\n  static fromISO(string, opts) {\n    if (string) {\n      const [s, e] = string.split(/\\//);\n      if (s && e) {\n        return Interval.fromDateTimes(DateTime.fromISO(s, opts), DateTime.fromISO(e, opts));\n      }\n    }\n    return Interval.invalid('invalid ISO format');\n  }\n\n  /**\n   * Returns the start of the Interval\n   * @return {DateTime}\n   */\n  get start() {\n    return this.isValid ? this.s : null;\n  }\n\n  /**\n   * Returns the end of the Interval\n   * @return {DateTime}\n   */\n  get end() {\n    return this.isValid ? this.e : null;\n  }\n\n  /**\n   * Returns whether this Interval's end is at least its start, i.e. that the Interval isn't 'backwards'.\n   * @return {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n   * @return {string}\n   */\n  get invalidReason() {\n    return this.invalid;\n  }\n\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n   * @return {number}\n   */\n  length(unit = 'milliseconds') {\n    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;\n  }\n\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\n   * @return {number}\n   */\n  count(unit = 'milliseconds') {\n    if (!this.isValid) return NaN;\n    const start = this.start.startOf(unit),\n      end = this.end.startOf(unit);\n    return Math.floor(end.diff(start, unit).get(unit)) + 1;\n  }\n\n  /**\n   * Returns whether this Interval's start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */\n  hasSame(unit) {\n    return this.isValid ? this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */\n  isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n\n  /**\n   * Return whether this Interval's start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n\n  /**\n   * Return whether this Interval's end is before the specified DateTime.\n   * @param {Datetime} dateTime\n   * @return {boolean}\n   */\n  isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e.plus(1) < dateTime;\n  }\n\n  /**\n   * Return whether this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n\n  /**\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */\n  set({ start, end } = {}) {\n    if (!this.isValid) return this;\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...DateTimes} dateTimes - the unit of time to count.\n   * @return {[Interval]}\n   */\n  splitAt(...dateTimes) {\n    if (!this.isValid) return [];\n    const sorted = dateTimes.map(Util.friendlyDateTime).sort(),\n      results = [];\n    let { s } = this,\n      i = 0;\n\n    while (s < this.e) {\n      const added = sorted[i] || this.e,\n        next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|number|object} duration - The length of each resulting interval.\n   * @return {[Interval]}\n   */\n  splitBy(duration) {\n    if (!this.isValid) return [];\n    const dur = Util.friendlyDuration(duration),\n      results = [];\n    let { s } = this,\n      added,\n      next;\n\n    while (s < this.e) {\n      added = s.plus(dur);\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {[Interval]}\n   */\n  divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n\n  /**\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n\n  /**\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n\n  /**\n   * Return whether this Interval engulfs the start and end of the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  equals(other) {\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  intersection(other) {\n    if (!this.isValid) return this;\n    const s = this.s > other.s ? this.s : other.s,\n      e = this.e < other.e ? this.e : other.e;\n\n    if (s > e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  union(other) {\n    if (!this.isValid) return this;\n    const s = this.s < other.s ? this.s : other.s,\n      e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n\n  /**\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * @param {[Interval]} intervals\n   * @return {[Interval]}\n   */\n  static merge(intervals) {\n    const [found, final] = intervals.sort((a, b) => a.s - b.s).reduce(([sofar, current], item) => {\n      if (!current) {\n        return [sofar, item];\n      } else if (current.overlaps(item) || current.abutsStart(item)) {\n        return [sofar, current.union(item)];\n      } else {\n        return [sofar.concat([current]), item];\n      }\n    },\n    [[], null]);\n    if (final) {\n      found.push(final);\n    }\n    return found;\n  }\n\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {[Interval]} intervals\n   * @return {[Interval]}\n   */\n  static xor(intervals) {\n    let start = null,\n      currentCount = 0;\n    const results = [],\n      ends = intervals.map(i => [{ time: i.s, type: 's' }, { time: i.e, type: 'e' }]),\n      flattened = Array.prototype.concat(...ends),\n      arr = flattened.sort((a, b) => a.time - b.time);\n\n    for (const i of arr) {\n      currentCount += i.type === 's' ? 1 : -1;\n\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n\n        start = null;\n      }\n    }\n\n    return Interval.merge(results);\n  }\n\n  /**\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {Interval}\n   */\n  difference(...intervals) {\n    return Interval.xor([this].concat(intervals))\n      .map(i => this.intersection(i))\n      .filter(i => i && !i.isEmpty());\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */\n  toString() {\n    if (!this.isValid) return INVALID;\n    return `[${this.s.toISO()} – ${this.e.toISO()})`;\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for the REPL.\n   * @return {string}\n   */\n  inspect() {\n    if (this.isValid) {\n      return `Interval {\\n  start: ${this.start.toISO()},\\n  end: ${this.end.toISO()},\\n  zone:   ${this\n        .start.zone.name},\\n  locale:   ${this.start.locale} }`;\n    } else {\n      return `Interval { Invalid, reason: ${this.invalidReason} }`;\n    }\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {object} opts - The same options as {@link DateTime.toISO}\n   * @return {string}\n   */\n  toISO(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format string.\n   * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime.toFormat} for details.\n   * @param {object} opts - options\n   * @param {string} [opts.separator =  ' – '] - a separator to place between the start and end representations\n   * @return {string}\n   */\n  toFormat(dateFormat, { separator = ' – ' } = {}) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;\n  }\n\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */\n  toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n    return this.e.diff(this.s, unit, opts);\n  }\n}\n","import { DateTime } from './datetime';\nimport { Settings } from './settings';\nimport { Locale } from './impl/locale';\nimport { Util } from './impl/util';\n\n/**\n * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.\n */\nexport class Info {\n  /**\n   * Return whether the specified zone contains a DST.\n   * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.\n   * @return {boolean}\n   */\n  static hasDST(zone = Settings.defaultZone) {\n    const proto = DateTime.local()\n      .setZone(zone)\n      .set({ month: 12 });\n\n    return !zone.universal && proto.offset !== proto.set({ month: 6 }).offset;\n  }\n\n  /**\n   * Return an array of standalone month names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @example Info.months()[0] //=> 'January'\n   * @example Info.months('short')[0] //=> 'Jan'\n   * @example Info.months('numeric')[0] //=> '1'\n   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'\n   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'\n   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'\n   * @return {[string]}\n   */\n  static months(\n    length = 'long',\n    { locale = null, numberingSystem = null, outputCalendar = 'gregory' } = {}\n  ) {\n    return Locale.create(locale, numberingSystem, outputCalendar).months(length);\n  }\n\n  /**\n   * Return an array of format month names.\n   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that\n   * changes the string.\n   * See {@link months}\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numbering=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @return {[string]}\n   */\n  static monthsFormat(\n    length = 'long',\n    { locale = null, numberingSystem = null, outputCalendar = 'gregory' } = {}\n  ) {\n    return Locale.create(locale, numberingSystem, outputCalendar).months(length, true);\n  }\n\n  /**\n   * Return an array of standalone week names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the month representation, such as \"narrow\", \"short\", \"long\".\n   * @param {object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numbering=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @example Info.weekdays()[0] //=> 'Monday'\n   * @example Info.weekdays('short')[0] //=> 'Mon'\n   * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'\n   * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'\n   * @return {[string]}\n   */\n  static weekdays(length = 'long', { locale = null, numberingSystem = null } = {}) {\n    return Locale.create(locale, numberingSystem, null).weekdays(length);\n  }\n\n  /**\n   * Return an array of format week names.\n   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that\n   * changes the string.\n   * See {@link weekdays}\n   * @param {string} [length='long'] - the length of the month representation, such as \"narrow\", \"short\", \"long\".\n   * @param {object} opts - options\n   * @param {string} [opts.locale=null] - the locale code\n   * @param {string} [opts.numbering=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @return {[string]}\n   */\n  static weekdaysFormat(length = 'long', { locale = null, numberingSystem = null } = {}) {\n    return Locale.create(locale, numberingSystem, null).weekdays(length, true);\n  }\n\n  /**\n   * Return an array of meridiems.\n   * @param {object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @example Info.meridiems() //=> [ 'AM', 'PM' ]\n   * @example Info.meridiems({ locale: 'de' }) //=> [ 'vorm.', 'nachm.' ]\n   * @return {[string]}\n   */\n  static meridiems({ locale = null } = {}) {\n    return Locale.create(locale).meridiems();\n  }\n\n  /**\n   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.\n   * @param {string} [length='short'] - the length of the era representation, such as \"short\" or \"long\".\n   * @param {object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @example Info.eras() //=> [ 'BC', 'AD' ]\n   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]\n   * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]\n   * @return {[string]}\n   */\n  static eras(length = 'short', { locale = null } = {}) {\n    return Locale.create(locale, null, 'gregory').eras(length);\n  }\n\n  /**\n   * Return the set of available features in this environment.\n   * Some features of Luxon are not available in all environments. For example, on older browsers, timezone support is not available. Use this function to figure out if that's the case.\n   * Keys:\n   * * `timezones`: whether this environment supports IANA timezones\n   * * `intlTokens`: whether this environment supports internationalized token-based formatting/parsing\n   * * `intl`: whether this environment supports general internationalization\n   * @example Info.feature() //=> { intl: true, intlTokens: false, timezones: true }\n   * @return {object}\n   */\n  static features() {\n    let intl = false,\n      intlTokens = false,\n      zones = false;\n\n    if (Util.hasIntl()) {\n      intl = true;\n      intlTokens = Util.hasFormatToParts();\n\n      try {\n        zones =\n          new Intl.DateTimeFormat('en', { timeZone: 'America/New_York' }).resolvedOptions()\n            .timeZone === 'America/New_York';\n      } catch (e) {\n        zones = false;\n      }\n    }\n\n    return { intl, intlTokens, zones };\n  }\n}\n","import { Util } from './util';\nimport { Formatter } from './formatter';\nimport { FixedOffsetZone } from '../zones/fixedOffsetZone';\nimport { IANAZone } from '../zones/IANAZone';\n\nconst MISSING_FTP = 'missing Intl.DateTimeFormat.formatToParts support';\n\nfunction intUnit(regex, post = i => i) {\n  return { regex, deser: ([s]) => post(parseInt(s)) };\n}\n\nfunction fixListRegex(s) {\n  // make dots optional and also make them literal\n  return s.replace(/\\./, '\\\\.?');\n}\n\nfunction stripInsensitivities(s) {\n  return s.replace(/\\./, '').toLowerCase();\n}\n\nfunction oneOf(strings, startIndex) {\n  if (strings === null) {\n    return null;\n  } else {\n    return {\n      regex: RegExp(strings.map(fixListRegex).join('|')),\n      deser: ([s]) =>\n        strings.findIndex(i => stripInsensitivities(s) === stripInsensitivities(i)) + startIndex\n    };\n  }\n}\n\nfunction offset(regex, groups) {\n  return { regex, deser: ([, h, m]) => Util.signedOffset(h, m), groups };\n}\n\nfunction simple(regex) {\n  return { regex, deser: ([s]) => s };\n}\n\nfunction unitForToken(token, loc) {\n  const one = /\\d/,\n    two = /\\d{2}/,\n    three = /\\d{3}/,\n    four = /\\d{4}/,\n    oneOrTwo = /\\d{1,2}/,\n    oneToThree = /\\d{1,3}/,\n    twoToFour = /\\d{2,4}/,\n    literal = t => ({ regex: RegExp(t.val), deser: ([s]) => s, literal: true }),\n    unitate = t => {\n      if (token.literal) {\n        return literal(t);\n      }\n      switch (t.val) {\n        // era\n        case 'G':\n          return oneOf(loc.eras('short', false), 0);\n        case 'GG':\n          return oneOf(loc.eras('long', false), 0);\n        // years\n        case 'y':\n          return intUnit(/\\d{1,6}/);\n        case 'yy':\n          return intUnit(twoToFour, Util.untruncateYear);\n        case 'yyyy':\n          return intUnit(four);\n        case 'yyyyy':\n          return intUnit(/\\d{4,6}/);\n        case 'yyyyyy':\n          return intUnit(/\\d{6}/);\n        // months\n        case 'M':\n          return intUnit(oneOrTwo);\n        case 'MM':\n          return intUnit(two);\n        case 'MMM':\n          return oneOf(loc.months('short', false, false), 1);\n        case 'MMMM':\n          return oneOf(loc.months('long', false, false), 1);\n        case 'L':\n          return intUnit(oneOrTwo);\n        case 'LL':\n          return intUnit(two);\n        case 'LLL':\n          return oneOf(loc.months('short', true, false), 1);\n        case 'LLLL':\n          return oneOf(loc.months('long', true, false), 1);\n        // dates\n        case 'd':\n          return intUnit(oneOrTwo);\n        case 'dd':\n          return intUnit(two);\n        // ordinals\n        case 'o':\n          return intUnit(oneToThree);\n        case 'ooo':\n          return intUnit(three);\n        // time\n        case 'HH':\n          return intUnit(two);\n        case 'H':\n          return intUnit(oneOrTwo);\n        case 'hh':\n          return intUnit(two);\n        case 'h':\n          return intUnit(oneOrTwo);\n        case 'mm':\n          return intUnit(two);\n        case 'm':\n          return intUnit(oneOrTwo);\n        case 's':\n          return intUnit(oneOrTwo);\n        case 'ss':\n          return intUnit(two);\n        case 'S':\n          return intUnit(oneToThree);\n        case 'SSS':\n          return intUnit(three);\n        case 'u':\n          return simple(/\\d{1,9}/);\n        // meridiem\n        case 'a':\n          return oneOf(loc.meridiems(), 0);\n        // weekYear (k)\n        case 'kkkk':\n          return intUnit(four);\n        case 'kk':\n          return intUnit(twoToFour, Util.untruncateYear);\n        // weekNumber (W)\n        case 'W':\n          return intUnit(oneOrTwo);\n        case 'WW':\n          return intUnit(two);\n        // weekdays\n        case 'E':\n        case 'c':\n          return intUnit(one);\n        case 'EEE':\n          return oneOf(loc.weekdays('short', false, false), 1);\n        case 'EEEE':\n          return oneOf(loc.weekdays('long', false, false), 1);\n        case 'ccc':\n          return oneOf(loc.weekdays('short', true, false), 1);\n        case 'cccc':\n          return oneOf(loc.weekdays('long', true, false), 1);\n        // offset/zone\n        case 'Z':\n        case 'ZZ':\n          return offset(/([+-]\\d{1,2})(?::(\\d{2}))?/, 2);\n        case 'ZZZ':\n          return offset(/([+-]\\d{1,2})(\\d{2})?/, 2);\n        // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing\n        // because we don't have any way to figure out what they are\n        case 'z':\n          return simple(/[A-Za-z_]{1,256}\\/[A-Za-z_]{1,256}/);\n        default:\n          return literal(t);\n      }\n    };\n\n  const unit = unitate(token) || {\n    invalidReason: MISSING_FTP\n  };\n\n  unit.token = token;\n\n  return unit;\n}\n\nfunction buildRegex(units) {\n  const re = units.map(u => u.regex).reduce((f, r) => `${f}(${r.source})`, '');\n  return [`^${re}$`, units];\n}\n\nfunction match(input, regex, handlers) {\n  const matches = input.match(regex);\n\n  if (matches) {\n    const all = {};\n    let matchIndex = 1;\n    for (const i in handlers) {\n      if (handlers.hasOwnProperty(i)) {\n        const h = handlers[i],\n          groups = h.groups ? h.groups + 1 : 1;\n        if (!h.literal && h.token) {\n          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));\n        }\n        matchIndex += groups;\n      }\n    }\n    return [matches, all];\n  } else {\n    return [matches, {}];\n  }\n}\n\nfunction dateTimeFromMatches(matches) {\n  const toField = token => {\n    switch (token) {\n      case 'S':\n        return 'millisecond';\n      case 's':\n        return 'second';\n      case 'm':\n        return 'minute';\n      case 'h':\n      case 'H':\n        return 'hour';\n      case 'd':\n        return 'day';\n      case 'o':\n        return 'ordinal';\n      case 'L':\n      case 'M':\n        return 'month';\n      case 'y':\n        return 'year';\n      case 'E':\n      case 'c':\n        return 'weekday';\n      case 'W':\n        return 'weekNumber';\n      case 'k':\n        return 'weekYear';\n      default:\n        return null;\n    }\n  };\n\n  let zone;\n  if (!Util.isUndefined(matches.Z)) {\n    zone = new FixedOffsetZone(matches.Z);\n  } else if (!Util.isUndefined(matches.z)) {\n    zone = new IANAZone(matches.z);\n  } else {\n    zone = null;\n  }\n\n  if (!Util.isUndefined(matches.h)) {\n    if (matches.h < 12 && matches.a === 1) {\n      matches.h += 12;\n    } else if (matches.h === 12 && matches.a === 0) {\n      matches.h = 0;\n    }\n  }\n\n  if (matches.G === 0 && matches.y) {\n    matches.y = -matches.y;\n  }\n\n  if (!Util.isUndefined(matches.u)) {\n    matches.S = Util.parseMillis(matches.u);\n  }\n\n  const vals = Object.keys(matches).reduce((r, k) => {\n    const f = toField(k);\n    if (f) {\n      r[f] = matches[k];\n    }\n\n    return r;\n  }, {});\n\n  return [vals, zone];\n}\n\n/**\n * @private\n */\n\nexport class TokenParser {\n  constructor(loc) {\n    this.loc = loc;\n  }\n\n  explainParse(input, format) {\n    const tokens = Formatter.parseFormat(format),\n      units = tokens.map(t => unitForToken(t, this.loc)),\n      disqualifyingUnit = units.find(t => t.invalidReason);\n\n    if (disqualifyingUnit) {\n      return { input, tokens, invalidReason: disqualifyingUnit.invalidReason };\n    } else {\n      const [regexString, handlers] = buildRegex(units),\n        regex = RegExp(regexString, 'i'),\n        [rawMatches, matches] = match(input, regex, handlers),\n        [result, zone] = matches ? dateTimeFromMatches(matches) : [null, null];\n\n      return { input, tokens, regex, rawMatches, matches, result, zone };\n    }\n  }\n\n  parseDateTime(input, format) {\n    const { result, zone, invalidReason } = this.explainParse(input, format);\n    return [result, zone, invalidReason];\n  }\n}\n","import { Util } from './util';\n\nconst nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],\n  leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];\n\nfunction dayOfWeek(year, month, day) {\n  const js = new Date(Date.UTC(year, month - 1, day)).getUTCDay();\n  return js === 0 ? 7 : js;\n}\n\nfunction lastWeekNumber(weekYear) {\n  const p1 =\n      (weekYear +\n        Math.floor(weekYear / 4) -\n        Math.floor(weekYear / 100) +\n        Math.floor(weekYear / 400)) %\n      7,\n    last = weekYear - 1,\n    p2 = (last + Math.floor(last / 4) - Math.floor(last / 100) + Math.floor(last / 400)) % 7;\n  return p1 === 4 || p2 === 3 ? 53 : 52;\n}\n\nfunction computeOrdinal(year, month, day) {\n  return day + (Util.isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];\n}\n\nfunction uncomputeOrdinal(year, ordinal) {\n  const table = Util.isLeapYear(year) ? leapLadder : nonLeapLadder,\n    month0 = table.findIndex(i => i < ordinal),\n    day = ordinal - table[month0];\n  return { month: month0 + 1, day };\n}\n\n/**\n * @private\n */\n\nexport class Conversions {\n  static gregorianToWeek(gregObj) {\n    const { year, month, day } = gregObj,\n      ordinal = computeOrdinal(year, month, day),\n      weekday = dayOfWeek(year, month, day);\n\n    let weekNumber = Math.floor((ordinal - weekday + 10) / 7),\n      weekYear;\n\n    if (weekNumber < 1) {\n      weekYear = year - 1;\n      weekNumber = lastWeekNumber(weekYear);\n    } else if (weekNumber > lastWeekNumber(year)) {\n      weekYear = year + 1;\n      weekNumber = 1;\n    } else {\n      weekYear = year;\n    }\n\n    return Object.assign({ weekYear, weekNumber, weekday }, Util.timeObject(gregObj));\n  }\n\n  static weekToGregorian(weekData) {\n    const { weekYear, weekNumber, weekday } = weekData,\n      weekdayOfJan4 = dayOfWeek(weekYear, 1, 4),\n      daysInYear = Util.daysInYear(weekYear);\n    let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3,\n      year;\n\n    if (ordinal < 1) {\n      year = weekYear - 1;\n      ordinal += Util.daysInYear(year);\n    } else if (ordinal > daysInYear) {\n      year = weekYear + 1;\n      ordinal -= Util.daysInYear(year);\n    } else {\n      year = weekYear;\n    }\n\n    const { month, day } = uncomputeOrdinal(year, ordinal);\n\n    return Object.assign({ year, month, day }, Util.timeObject(weekData));\n  }\n\n  static gregorianToOrdinal(gregData) {\n    const { year, month, day } = gregData,\n      ordinal = computeOrdinal(year, month, day);\n\n    return Object.assign({ year, ordinal }, Util.timeObject(gregData));\n  }\n\n  static ordinalToGregorian(ordinalData) {\n    const { year, ordinal } = ordinalData,\n      { month, day } = uncomputeOrdinal(year, ordinal);\n\n    return Object.assign({ year, month, day }, Util.timeObject(ordinalData));\n  }\n\n  static hasInvalidWeekData(obj) {\n    const validYear = Util.isNumber(obj.weekYear),\n      validWeek = Util.numberBetween(obj.weekNumber, 1, lastWeekNumber(obj.weekYear)),\n      validWeekday = Util.numberBetween(obj.weekday, 1, 7);\n\n    if (!validYear) {\n      return 'weekYear out of range';\n    } else if (!validWeek) {\n      return 'week out of range';\n    } else if (!validWeekday) {\n      return 'weekday out of range';\n    } else return false;\n  }\n\n  static hasInvalidOrdinalData(obj) {\n    const validYear = Util.isNumber(obj.year),\n      validOrdinal = Util.numberBetween(obj.ordinal, 1, Util.daysInYear(obj.year));\n\n    if (!validYear) {\n      return 'year out of range';\n    } else if (!validOrdinal) {\n      return 'ordinal out of range';\n    } else return false;\n  }\n\n  static hasInvalidGregorianData(obj) {\n    const validYear = Util.isNumber(obj.year),\n      validMonth = Util.numberBetween(obj.month, 1, 12),\n      validDay = Util.numberBetween(obj.day, 1, Util.daysInMonth(obj.year, obj.month));\n\n    if (!validYear) {\n      return 'year out of range';\n    } else if (!validMonth) {\n      return 'month out of range';\n    } else if (!validDay) {\n      return 'day out of range';\n    } else return false;\n  }\n\n  static hasInvalidTimeData(obj) {\n    const validHour = Util.numberBetween(obj.hour, 0, 23),\n      validMinute = Util.numberBetween(obj.minute, 0, 59),\n      validSecond = Util.numberBetween(obj.second, 0, 59),\n      validMillisecond = Util.numberBetween(obj.millisecond, 0, 999);\n\n    if (!validHour) {\n      return 'hour out of range';\n    } else if (!validMinute) {\n      return 'minute out of range';\n    } else if (!validSecond) {\n      return 'second out of range';\n    } else if (!validMillisecond) {\n      return 'millisecond out of range';\n    } else return false;\n  }\n}\n","import { Duration } from './duration';\nimport { Interval } from './interval';\nimport { Settings } from './settings';\nimport { Info } from './info';\nimport { Formatter } from './impl/formatter';\nimport { FixedOffsetZone } from './zones/fixedOffsetZone';\nimport { LocalZone } from './zones/localZone';\nimport { Locale } from './impl/locale';\nimport { Util } from './impl/util';\nimport { RegexParser } from './impl/regexParser';\nimport { TokenParser } from './impl/tokenParser';\nimport { Conversions } from './impl/conversions';\nimport { Formats } from './impl/formats';\nimport {\n  InvalidArgumentError,\n  ConflictingSpecificationError,\n  InvalidUnitError,\n  InvalidDateTimeError\n} from './errors';\n\nconst INVALID = 'Invalid DateTime',\n  INVALID_INPUT = 'invalid input',\n  UNSUPPORTED_ZONE = 'unsupported zone',\n  UNPARSABLE = 'unparsable';\n\n// we cache week data on the DT object and this intermediates the cache\nfunction possiblyCachedWeekData(dt) {\n  if (dt.weekData === null) {\n    dt.weekData = Conversions.gregorianToWeek(dt.c);\n  }\n  return dt.weekData;\n}\n\n// clone really means, \"make a new object with these modifications\". all \"setters\" really use this\n// to create a new object while only changing some of the properties\nfunction clone(inst, alts) {\n  const current = {\n    ts: inst.ts,\n    zone: inst.zone,\n    c: inst.c,\n    o: inst.o,\n    loc: inst.loc,\n    invalidReason: inst.invalidReason\n  };\n  return new DateTime(Object.assign({}, current, alts, { old: current }));\n}\n\n// find the right offset a given local time. The o input is our guess, which determines which\n// offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)\nfunction fixOffset(localTS, o, tz) {\n  // Our UTC time is just a guess because our offset is just a guess\n  let utcGuess = localTS - o * 60 * 1000;\n\n  // Test whether the zone matches the offset for this ts\n  const o2 = tz.offset(utcGuess);\n\n  // If so, offset didn't change and we're done\n  if (o === o2) {\n    return [utcGuess, o];\n  }\n\n  // If not, change the ts by the difference in the offset\n  utcGuess -= (o2 - o) * 60 * 1000;\n\n  // If that gives us the local time we want, we're done\n  const o3 = tz.offset(utcGuess);\n  if (o2 === o3) {\n    return [utcGuess, o2];\n  }\n\n  // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time\n  return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];\n}\n\n// convert an epoch timestamp into a calendar object with the given offset\nfunction tsToObj(ts, offset) {\n  ts += offset * 60 * 1000;\n\n  const d = new Date(ts);\n\n  return {\n    year: d.getUTCFullYear(),\n    month: d.getUTCMonth() + 1,\n    day: d.getUTCDate(),\n    hour: d.getUTCHours(),\n    minute: d.getUTCMinutes(),\n    second: d.getUTCSeconds(),\n    millisecond: d.getUTCMilliseconds()\n  };\n}\n\n// covert a calendar object to a local timestamp (epoch, but with the offset baked in)\nfunction objToLocalTS(obj) {\n  let d = Date.UTC(\n    obj.year,\n    obj.month - 1,\n    obj.day,\n    obj.hour,\n    obj.minute,\n    obj.second,\n    obj.millisecond\n  );\n\n  // javascript is stupid and i hate it\n  if (obj.year < 100 && obj.year >= 0) {\n    d = new Date(d);\n    d.setUTCFullYear(obj.year);\n  }\n  return +d;\n}\n\n// convert a calendar object to a epoch timestamp\nfunction objToTS(obj, offset, zone) {\n  return fixOffset(objToLocalTS(obj), offset, zone);\n}\n\n// create a new DT instance by adding a duration, adjusting for DSTs\nfunction adjustTime(inst, dur) {\n  const oPre = inst.o,\n    c = Object.assign({}, inst.c, {\n      year: inst.c.year + dur.years,\n      month: inst.c.month + dur.months,\n      day: inst.c.day + dur.days + dur.weeks * 7\n    }),\n    millisToAdd = Duration.fromObject({\n      hours: dur.hours,\n      minutes: dur.minutes,\n      seconds: dur.seconds,\n      milliseconds: dur.milliseconds\n    }).as('milliseconds'),\n    localTS = objToLocalTS(c);\n\n  let [ts, o] = fixOffset(localTS, oPre, inst.zone);\n\n  if (millisToAdd !== 0) {\n    ts += millisToAdd;\n    // that could have changed the offset by going over a DST, but we want to keep the ts the same\n    o = inst.zone.offset(ts);\n  }\n\n  return { ts, o };\n}\n\n// helper useful in turning the results of parsing into real dates\n// by handling the zone options\nfunction parseDataToDateTime(parsed, parsedZone, opts) {\n  const { setZone, zone } = opts;\n  if (parsed && Object.keys(parsed).length !== 0) {\n    const interpretationZone = parsedZone || zone,\n      inst = DateTime.fromObject(\n        Object.assign(parsed, opts, {\n          zone: interpretationZone\n        })\n      );\n    return setZone ? inst : inst.setZone(zone);\n  } else {\n    return DateTime.invalid(UNPARSABLE);\n  }\n}\n\n// if you want to output a technical format (e.g. RFC 2822), this helper\n// helps handle the details\nfunction toTechFormat(dt, format) {\n  return dt.isValid\n    ? Formatter.create(Locale.create('en-US')).formatDateTimeFromString(dt, format)\n    : null;\n}\n\n// technical time formats (e.g. the time part of ISO 8601), take some options\n// and this commonizes their handling\nfunction toTechTimeFormat(\n  dt,\n  {\n    suppressSeconds = false,\n    suppressMilliseconds = false,\n    includeOffset = true,\n    includeZone = false,\n    spaceZone = false\n  }\n) {\n  let fmt = 'HH:mm';\n\n  if (!suppressSeconds || dt.second !== 0 || dt.millisecond !== 0) {\n    fmt += ':ss';\n    if (!suppressMilliseconds || dt.millisecond !== 0) {\n      fmt += '.SSS';\n    }\n  }\n\n  if ((includeZone || includeOffset) && spaceZone) {\n    fmt += ' ';\n  }\n\n  if (includeZone) {\n    fmt += 'z';\n  } else if (includeOffset) {\n    fmt += 'ZZ';\n  }\n\n  return toTechFormat(dt, fmt);\n}\n\n// defaults for unspecified units in the supported calendars\nconst defaultUnitValues = {\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  },\n  defaultWeekUnitValues = {\n    weekNumber: 1,\n    weekday: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  },\n  defaultOrdinalUnitValues = {\n    ordinal: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  };\n\n// Units in the supported calendars, sorted by bigness\nconst orderedUnits = ['year', 'month', 'day', 'hour', 'minute', 'second', 'millisecond'],\n  orderedWeekUnits = [\n    'weekYear',\n    'weekNumber',\n    'weekday',\n    'hour',\n    'minute',\n    'second',\n    'millisecond'\n  ],\n  orderedOrdinalUnits = ['year', 'ordinal', 'hour', 'minute', 'second', 'millisecond'];\n\n// standardize case and plurality in units\nfunction normalizeUnit(unit, ignoreUnknown = false) {\n  const normalized = {\n    year: 'year',\n    years: 'year',\n    month: 'month',\n    months: 'month',\n    day: 'day',\n    days: 'day',\n    hour: 'hour',\n    hours: 'hour',\n    minute: 'minute',\n    minutes: 'minute',\n    second: 'second',\n    seconds: 'second',\n    millisecond: 'millisecond',\n    milliseconds: 'millisecond',\n    weekday: 'weekday',\n    weekdays: 'weekday',\n    weeknumber: 'weekNumber',\n    weeksnumber: 'weekNumber',\n    weeknumbers: 'weekNumber',\n    weekyear: 'weekYear',\n    weekyears: 'weekYear',\n    ordinal: 'ordinal'\n  }[unit ? unit.toLowerCase() : unit];\n\n  if (!ignoreUnknown && !normalized) throw new InvalidUnitError(unit);\n\n  return normalized;\n}\n\n// this is a dumbed down version of fromObject() that runs about 60% faster\n// but doesn't do any validation, makes a bunch of assumptions about what units\n// are present, and so on.\nfunction quickDT(obj, zone) {\n  // assume we have the higher-order units\n  for (const u of orderedUnits) {\n    if (Util.isUndefined(obj[u])) {\n      obj[u] = defaultUnitValues[u];\n    }\n  }\n\n  const invalidReason =\n    Conversions.hasInvalidGregorianData(obj) || Conversions.hasInvalidTimeData(obj);\n  if (invalidReason) {\n    return DateTime.invalid(invalidReason);\n  }\n\n  const tsNow = Settings.now(),\n    offsetProvis = zone.offset(tsNow),\n    [ts, o] = objToTS(obj, offsetProvis, zone);\n\n  return new DateTime({\n    ts,\n    zone,\n    o\n  });\n}\n\n/**\n * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.\n *\n * A DateTime comprises of:\n * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.\n * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).\n * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.\n *\n * Here is a brief overview of the most commonly used functionality it provides:\n *\n * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link local}, {@link utc}, and (most flexibly) {@link fromObject}. To create one from a standard string format, use {@link fromISO}, {@link fromHTTP}, and {@link fromRFC2822}. To create one from a custom string format, use {@link fromString}. To create one from a native JS date, use {@link fromJSDate}.\n * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link toObject}), use the {@link year}, {@link month},\n * {@link day}, {@link hour}, {@link minute}, {@link second}, {@link millisecond} accessors.\n * * **Week calendar**: For ISO week calendar attributes, see the {@link weekYear}, {@link weekNumber}, and {@link weekday} accessors.\n * * **Configuration** See the {@link locale} and {@link numberingSystem} accessors.\n * * **Transformation**: To transform the DateTime into other DateTimes, use {@link set}, {@link reconfigure}, {@link setZone}, {@link setLocale}, {@link plus}, {@link minus}, {@link endOf}, {@link startOf}, {@link toUTC}, and {@link toLocal}.\n * * **Output**: To convert the DateTime to other representations, use the {@link toJSON}, {@link toISO}, {@link toHTTP}, {@link toObject}, {@link toRFC2822}, {@link toString}, {@link toLocaleString}, {@link toFormat}, {@link valueOf} and {@link toJSDate}.\n *\n * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.\n */\nexport class DateTime {\n  /**\n   * @access private\n   */\n  constructor(config) {\n    const zone = config.zone || Settings.defaultZone,\n      invalidReason =\n        config.invalidReason ||\n        (Number.isNaN(config.ts) ? INVALID_INPUT : null) ||\n        (!zone.isValid ? UNSUPPORTED_ZONE : null),\n      ts = config.ts || Settings.now();\n\n    let c = null,\n      o = null;\n    if (!invalidReason) {\n      const unchanged = config.old && config.old.ts === ts && config.old.zone.equals(zone);\n      c = unchanged ? config.old.c : tsToObj(ts, zone.offset(ts));\n      o = unchanged ? config.old.o : zone.offset(ts);\n    }\n\n    /**\n     * @access private\n     */\n    this.ts = Util.isUndefined(config.ts) ? Settings.now() : config.ts;\n    /**\n     * @access private\n     */\n    this.zone = zone;\n    /**\n     * @access private\n     */\n    this.loc = config.loc || Locale.create();\n    /**\n     * @access private\n     */\n    this.invalid = invalidReason;\n    /**\n     * @access private\n     */\n    this.weekData = null;\n    /**\n     * @access private\n     */\n    this.c = c;\n    /**\n     * @access private\n     */\n    this.o = o;\n  }\n\n  // CONSTRUCT\n\n  /**\n   * Create a local DateTime\n   * @param {number} year - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, i.e. a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, i.e. a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, i.e. a number between 0 and 999\n   * @example DateTime.local()                            //~> now\n   * @example DateTime.local(2017)                        //~> 2017-01-01T00:00:00\n   * @example DateTime.local(2017, 3)                     //~> 2017-03-01T00:00:00\n   * @example DateTime.local(2017, 3, 12)                 //~> 2017-03-12T00:00:00\n   * @example DateTime.local(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00\n   * @example DateTime.local(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.675\n   * @return {DateTime}\n   */\n  static local(year, month, day, hour, minute, second, millisecond) {\n    if (Util.isUndefined(year)) {\n      return new DateTime({ ts: Settings.now() });\n    } else {\n      return quickDT(\n        {\n          year,\n          month,\n          day,\n          hour,\n          minute,\n          second,\n          millisecond\n        },\n        Settings.defaultZone\n      );\n    }\n  }\n\n  /**\n   * Create a DateTime in UTC\n   * @param {number} year - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, i.e. a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, i.e. a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, i.e. a number between 0 and 999\n   * @example DateTime.utc()                            //~> now\n   * @example DateTime.utc(2017)                        //~> 2017-01-01T00:00:00Z\n   * @example DateTime.utc(2017, 3)                     //~> 2017-03-01T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12)                 //~> 2017-03-12T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.675Z\n   * @return {DateTime}\n   */\n  static utc(year, month, day, hour, minute, second, millisecond) {\n    if (Util.isUndefined(year)) {\n      return new DateTime({\n        ts: Settings.now(),\n        zone: FixedOffsetZone.utcInstance\n      });\n    } else {\n      return quickDT(\n        {\n          year,\n          month,\n          day,\n          hour,\n          minute,\n          second,\n          millisecond\n        },\n        FixedOffsetZone.utcInstance\n      );\n    }\n  }\n\n  /**\n   * Create an DateTime from a Javascript Date object. Uses the default zone.\n   * @param {Date} date - a Javascript Date object\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @return {DateTime}\n   */\n  static fromJSDate(date, options = {}) {\n    return new DateTime({\n      ts: Util.isDate(date) ? date.valueOf() : NaN,\n      zone: Util.normalizeZone(options.zone),\n      loc: Locale.fromObject(options)\n    });\n  }\n\n  /**\n   * Create an DateTime from a count of epoch milliseconds. Uses the default zone.\n   * @param {number} milliseconds - a number of milliseconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromMillis(milliseconds, options = {}) {\n    return new DateTime({\n      ts: milliseconds,\n      zone: Util.normalizeZone(options.zone),\n      loc: Locale.fromObject(options)\n    });\n  }\n\n  /**\n   * Create an DateTime from a Javascript object with keys like 'year' and 'hour' with reasonable defaults.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.year - a year, such as 1987\n   * @param {number} obj.month - a month, 1-12\n   * @param {number} obj.day - a day of the month, 1-31, depending on the month\n   * @param {number} obj.ordinal - day of the year, 1-365 or 366\n   * @param {number} obj.weekYear - an ISO week year\n   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year\n   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday\n   * @param {number} obj.hour - hour of the day, 0-23\n   * @param {number} obj.minute - minute of the hour, 0-59\n   * @param {number} obj.second - second of the minute, 0-59\n   * @param {number} obj.millisecond - millisecond of the second, 0-999\n   * @param {string|Zone} [obj.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()\n   * @param {string} [obj.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} obj.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} obj.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'\n   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01T00'\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'utc' }),\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'local' })\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'America/New_York' })\n   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'\n   * @return {DateTime}\n   */\n  static fromObject(obj) {\n    const zoneToUse = Util.normalizeZone(obj.zone);\n    if (!zoneToUse.isValid) {\n      return DateTime.invalid(UNSUPPORTED_ZONE);\n    }\n\n    const tsNow = Settings.now(),\n      offsetProvis = zoneToUse.offset(tsNow),\n      normalized = Util.normalizeObject(obj, normalizeUnit, true),\n      containsOrdinal = !Util.isUndefined(normalized.ordinal),\n      containsGregorYear = !Util.isUndefined(normalized.year),\n      containsGregorMD = !Util.isUndefined(normalized.month) || !Util.isUndefined(normalized.day),\n      containsGregor = containsGregorYear || containsGregorMD,\n      definiteWeekDef = normalized.weekYear || normalized.weekNumber,\n      loc = Locale.fromObject(obj);\n\n    // cases:\n    // just a weekday -> this week's instance of that weekday, no worries\n    // (gregorian data or ordinal) + (weekYear or weekNumber) -> error\n    // (gregorian month or day) + ordinal -> error\n    // otherwise just use weeks or ordinals or gregorian, depending on what's specified\n\n    if ((containsGregor || containsOrdinal) && definiteWeekDef) {\n      throw new ConflictingSpecificationError(\n        \"Can't mix weekYear/weekNumber units with year/month/day or ordinals\"\n      );\n    }\n\n    if (containsGregorMD && containsOrdinal) {\n      throw new ConflictingSpecificationError(\"Can't mix ordinal dates with month/day\");\n    }\n\n    const useWeekData = definiteWeekDef || (normalized.weekday && !containsGregor);\n\n    // configure ourselves to deal with gregorian dates or week stuff\n    let units,\n      defaultValues,\n      objNow = tsToObj(tsNow, offsetProvis);\n    if (useWeekData) {\n      units = orderedWeekUnits;\n      defaultValues = defaultWeekUnitValues;\n      objNow = Conversions.gregorianToWeek(objNow);\n    } else if (containsOrdinal) {\n      units = orderedOrdinalUnits;\n      defaultValues = defaultOrdinalUnitValues;\n      objNow = Conversions.gregorianToOrdinal(objNow);\n    } else {\n      units = orderedUnits;\n      defaultValues = defaultUnitValues;\n    }\n\n    // set default values for missing stuff\n    let foundFirst = false;\n    for (const u of units) {\n      const v = normalized[u];\n      if (!Util.isUndefined(v)) {\n        foundFirst = true;\n      } else if (foundFirst) {\n        normalized[u] = defaultValues[u];\n      } else {\n        normalized[u] = objNow[u];\n      }\n    }\n\n    // make sure the values we have are in range\n    const higherOrderInvalid = useWeekData\n        ? Conversions.hasInvalidWeekData(normalized)\n        : containsOrdinal\n          ? Conversions.hasInvalidOrdinalData(normalized)\n          : Conversions.hasInvalidGregorianData(normalized),\n      invalidReason = higherOrderInvalid || Conversions.hasInvalidTimeData(normalized);\n\n    if (invalidReason) {\n      return DateTime.invalid(invalidReason);\n    }\n\n    // compute the actual time\n    const gregorian = useWeekData\n        ? Conversions.weekToGregorian(normalized)\n        : containsOrdinal ? Conversions.ordinalToGregorian(normalized) : normalized,\n      [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse),\n      inst = new DateTime({\n        ts: tsFinal,\n        zone: zoneToUse,\n        o: offsetFinal,\n        loc\n      });\n\n    // gregorian data + weekday serves only to validate\n    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {\n      return DateTime.invalid('mismatched weekday');\n    }\n\n    return inst;\n  }\n\n  /**\n   * Create a DateTime from an ISO 8601 string\n   * @param {string} text - the ISO string\n   * @param {Object} opts - options to affect the creation\n   * @param {boolean} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc')\n   * @example DateTime.fromISO('2016-W05-4')\n   * @return {DateTime}\n   */\n  static fromISO(text, opts = {}) {\n    const [vals, parsedZone] = RegexParser.parseISODate(text);\n    return parseDataToDateTime(vals, parsedZone, opts);\n  }\n\n  /**\n   * Create a DateTime from an RFC 2822 string\n   * @param {string} text - the RFC 2822 string\n   * @param {Object} opts - options to affect the creation\n   * @param {boolean} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')\n   * @example DateTime.fromRFC2822('Tue, 25 Nov 2016 13:23:12 +0600')\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')\n   * @return {DateTime}\n   */\n  static fromRFC2822(text, opts = {}) {\n    const [vals, parsedZone] = RegexParser.parseRFC2822Date(text);\n    return parseDataToDateTime(vals, parsedZone, opts);\n  }\n\n  /**\n   * Create a DateTime from an HTTP header date\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @param {string} text - the HTTP header date\n   * @param {object} options - options to affect the creation\n   * @param {boolean} [options.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [options.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.\n   * @param {string} [options.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')\n   * @return {DateTime}\n   */\n  static fromHTTP(text, options = {}) {\n    const [vals, parsedZone] = RegexParser.parseHTTPDate(text);\n    return parseDataToDateTime(vals, parsedZone, options);\n  }\n\n  /**\n   * Create a DateTime from an input string and format string\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see description)\n   * @param {Object} options - options to affect the creation\n   * @param {boolean} [options.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [options.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [options.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} options.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromString(text, fmt, options = {}) {\n    if (Util.isUndefined(text) || Util.isUndefined(fmt)) {\n      throw new InvalidArgumentError('fromString requires an input string and a format');\n    }\n\n    const { locale = null, numberingSystem = null } = options,\n      parser = new TokenParser(Locale.fromOpts({ locale, numberingSystem, defaultToEN: true })),\n      [vals, parsedZone, invalidReason] = parser.parseDateTime(text, fmt);\n    if (invalidReason) {\n      return DateTime.invalid(invalidReason);\n    } else {\n      return parseDataToDateTime(vals, parsedZone, options);\n    }\n  }\n\n  /**\n   * Create a DateTime from a SQL date, time, or datetime\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale\n   * @param {string} text - the string to parse\n   * @param {Object} options - options to affect the creation\n   * @param {boolean} [options.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [options.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [options.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} options.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @example DateTime.fromSQL('2017-05-15')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })\n   * @example DateTime.fromSQL('09:12:34.342')\n   * @return {DateTime}\n   */\n  static fromSQL(text, options = {}) {\n    const [vals, parsedZone] = RegexParser.parseSQL(text);\n    return parseDataToDateTime(vals, parsedZone, options);\n  }\n\n  /**\n   * Create an invalid DateTime.\n   * @return {DateTime}\n   */\n  static invalid(reason) {\n    if (!reason) {\n      throw new InvalidArgumentError('need to specify a reason the DateTime is invalid');\n    }\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDateTimeError(reason);\n    } else {\n      return new DateTime({ invalidReason: reason });\n    }\n  }\n\n  // INFO\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7\n   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4\n   * @return {number}\n   */\n  get(unit) {\n    return this[unit];\n  }\n\n  /**\n   * Returns whether the DateTime is valid. Invalid DateTimes occur when:\n   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30\n   * * The DateTime was created by an operation on another invalid date\n   * @return {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid\n   * @return {string}\n   */\n  get invalidReason() {\n    return this.invalid;\n  }\n\n  /**\n   * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime\n   *\n   * @return {string}\n   */\n  get locale() {\n    return this.loc.locale;\n  }\n\n  /**\n   * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime\n   *\n   * @return {string}\n   */\n  get numberingSystem() {\n    return this.loc.numberingSystem;\n  }\n\n  /**\n   * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime\n   *\n   * @return {string}\n   */\n  get outputCalendar() {\n    return this.loc.outputCalendar;\n  }\n\n  /**\n   * Get the name of the time zone.\n   * @return {String}\n   */\n  get zoneName() {\n    return this.zone.name;\n  }\n\n  /**\n   * Get the year\n   * @example DateTime.local(2017, 5, 25).year //=> 2017\n   * @return {number}\n   */\n  get year() {\n    return this.isValid ? this.c.year : NaN;\n  }\n\n  /**\n   * Get the month (1-12).\n   * @example DateTime.local(2017, 5, 25).month //=> 5\n   * @return {number}\n   */\n  get month() {\n    return this.isValid ? this.c.month : NaN;\n  }\n\n  /**\n   * Get the day of the month (1-30ish).\n   * @example DateTime.local(2017, 5, 25).day //=> 25\n   * @return {number}\n   */\n  get day() {\n    return this.isValid ? this.c.day : NaN;\n  }\n\n  /**\n   * Get the hour of the day (0-23).\n   * @example DateTime.local(2017, 5, 25, 9).hour //=> 9\n   * @return {number}\n   */\n  get hour() {\n    return this.isValid ? this.c.hour : NaN;\n  }\n\n  /**\n   * Get the minute of the hour (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30\n   * @return {number}\n   */\n  get minute() {\n    return this.isValid ? this.c.minute : NaN;\n  }\n\n  /**\n   * Get the second of the minute (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52\n   * @return {number}\n   */\n  get second() {\n    return this.isValid ? this.c.second : NaN;\n  }\n\n  /**\n   * Get the millisecond of the second (0-999).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654\n   * @return {number}\n   */\n  get millisecond() {\n    return this.isValid ? this.c.millisecond : NaN;\n  }\n\n  /**\n   * Get the week year\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 11, 31).weekYear //=> 2015\n   * @return {number}\n   */\n  get weekYear() {\n    return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;\n  }\n\n  /**\n   * Get the week number of the week year (1-52ish).\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2017, 5, 25).weekNumber //=> 21\n   * @return {number}\n   */\n  get weekNumber() {\n    return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;\n  }\n\n  /**\n   * Get the day of the week.\n   * 1 is Monday and 7 is Sunday\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 11, 31).weekday //=> 4\n   * @return {number}\n   */\n  get weekday() {\n    return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;\n  }\n\n  /**\n   * Get the ordinal (i.e. the day of the year)\n   * @example DateTime.local(2017, 5, 25).ordinal //=> 145\n   * @return {number|DateTime}\n   */\n  get ordinal() {\n    return this.isValid ? Conversions.gregorianToOrdinal(this.c).ordinal : NaN;\n  }\n\n  /**\n   * Get the human readable short month name, such as 'Oct'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).monthShort //=> Oct\n   * @return {string}\n   */\n  get monthShort() {\n    return this.isValid ? Info.months('short', { locale: this.locale })[this.month - 1] : null;\n  }\n\n  /**\n   * Get the human readable long month name, such as 'October'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).monthLong //=> October\n   * @return {string}\n   */\n  get monthLong() {\n    return this.isValid ? Info.months('long', { locale: this.locale })[this.month - 1] : null;\n  }\n\n  /**\n   * Get the human readable short weekday, such as 'Mon'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon\n   * @return {string}\n   */\n  get weekdayShort() {\n    return this.isValid ? Info.weekdays('short', { locale: this.locale })[this.weekday - 1] : null;\n  }\n\n  /**\n   * Get the human readable long weekday, such as 'Monday'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday\n   * @return {string}\n   */\n  get weekdayLong() {\n    return this.isValid ? Info.weekdays('long', { locale: this.locale })[this.weekday - 1] : null;\n  }\n\n  /**\n   * Get the UTC offset of this DateTime in minutes\n   * @example DateTime.local().offset //=> -240\n   * @example DateTime.utc().offset //=> 0\n   * @return {number}\n   */\n  get offset() {\n    return this.isValid ? this.zone.offset(this.ts) : NaN;\n  }\n\n  /**\n   * Get the short human name for the zone's current offset, for example \"EST\" or \"EDT\".\n   * Defaults to the system's locale if no locale has been specified\n   * @return {String}\n   */\n  get offsetNameShort() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: 'short',\n        locale: this.locale\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the long human name for the zone's current offset, for example \"Eastern Standard Time\" or \"Eastern Daylight Time\".\n   * Defaults to the system's locale if no locale has been specified\n   * @return {String}\n   */\n  get offsetNameLong() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: 'long',\n        locale: this.locale\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get whether this zone's offset ever changes, as in a DST.\n   * @return {boolean}\n   */\n  get isOffsetFixed() {\n    return this.zone.universal;\n  }\n\n  /**\n   * Get whether the DateTime is in a DST.\n   * @return {boolean}\n   */\n  get isInDST() {\n    if (this.isOffsetFixed) {\n      return false;\n    } else {\n      return (\n        this.offset > this.set({ month: 1 }).offset || this.offset > this.set({ month: 5 }).offset\n      );\n    }\n  }\n\n  /**\n   * Returns true if this DateTime is in a leap year, false otherwise\n   * @example DateTime.local(2016).isInLeapYear //=> true\n   * @example DateTime.local(2013).isInLeapYear //=> false\n   * @return {boolean}\n   */\n  get isInLeapYear() {\n    return Util.isLeapYear(this.year);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's month\n   * @example DateTime.local(2016, 2).daysInMonth //=> 29\n   * @example DateTime.local(2016, 3).daysInMonth //=> 31\n   * @return {number}\n   */\n  get daysInMonth() {\n    return Util.daysInMonth(this.year, this.month);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's year\n   * @example DateTime.local(2016).daysInYear //=> 366\n   * @example DateTime.local(2013).daysInYear //=> 365\n   * @return {number}\n   */\n  get daysInYear() {\n    return this.isValid ? Util.daysInYear(this.year) : NaN;\n  }\n\n  /**\n   * Returns the resolved Intl options for this DateTime.\n   * This is useful in understanding the behavior of formatting methods\n   * @param {object} opts - the same options as toLocaleString\n   * @return {object}\n   */\n  resolvedLocaleOpts(opts = {}) {\n    const { locale, numberingSystem, calendar } = Formatter.create(\n      this.loc.clone(opts),\n      opts\n    ).resolvedOptions(this);\n    return { locale, numberingSystem, outputCalendar: calendar };\n  }\n\n  // TRANSFORM\n\n  /**\n   * \"Set\" the DateTime's zone to UTC. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to {@link setZone}('utc')\n   * @param {number} [offset=0] - optionally, an offset from UTC in minutes\n   * @param {object} [opts={}] - options to pass to `setZone()`\n   * @return {DateTime}\n   */\n  toUTC(offset = 0, opts = {}) {\n    return this.setZone(FixedOffsetZone.instance(offset), opts);\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to `setZone('local')`\n   * @return {DateTime}\n   */\n  toLocal() {\n    return this.setZone(new LocalZone());\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.\n   *\n   * By default, the setter keeps the underlying time the same (as in, the same UTC timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link plus}. You may wish to use {@link toLocal} and {@link toUTC} which provide simple convenience wrappers for commonly used zones.\n   * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'utc+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link Zone} class.\n   * @param {object} opts - options\n   * @param {boolean} [opts.keepCalendarTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.\n   * @return {DateTime}\n   */\n  setZone(zone, { keepCalendarTime = false } = {}) {\n    zone = Util.normalizeZone(zone);\n    if (zone.equals(this.zone)) {\n      return this;\n    } else if (!zone.isValid) {\n      return DateTime.invalid(UNSUPPORTED_ZONE);\n    } else {\n      const newTS = keepCalendarTime\n        ? this.ts + (this.o - zone.offset(this.ts)) * 60 * 1000\n        : this.ts;\n      return clone(this, { ts: newTS, zone });\n    }\n  }\n\n  /**\n   * \"Set\" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.\n   * @param {object} properties - the properties to set\n   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })\n   * @return {DateTime}\n   */\n  reconfigure({ locale, numberingSystem, outputCalendar } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem, outputCalendar });\n    return clone(this, { loc });\n  }\n\n  /**\n   * \"Set\" the locale. Returns a newly-constructed DateTime.\n   * Just a convenient alias for reconfigure({ locale })\n   * @example DateTime.local(2017, 5, 25).setLocale('en-GB')\n   * @return {DateTime}\n   */\n  setLocale(locale) {\n    return this.reconfigure({ locale });\n  }\n\n  /**\n   * \"Set\" the values of specified units. Returns a newly-constructed DateTime.\n   * You can only set units with this method; for \"setting\" metadata, see {@link reconfigure} and {@link setZone}.\n   * @param {object} values - a mapping of units to numbers\n   * @example dt.set({ year: 2017 })\n   * @example dt.set({ hour: 8, minute: 30 })\n   * @example dt.set({ weekday: 5 })\n   * @example dt.set({ year: 2005, ordinal: 234 })\n   * @return {DateTime}\n   */\n  set(values) {\n    if (!this.isValid) return this;\n\n    const normalized = Util.normalizeObject(values, normalizeUnit),\n      settingWeekStuff =\n        !Util.isUndefined(normalized.weekYear) ||\n        !Util.isUndefined(normalized.weekNumber) ||\n        !Util.isUndefined(normalized.weekday);\n\n    let mixed;\n    if (settingWeekStuff) {\n      mixed = Conversions.weekToGregorian(\n        Object.assign(Conversions.gregorianToWeek(this.c), normalized)\n      );\n    } else if (!Util.isUndefined(normalized.ordinal)) {\n      mixed = Conversions.ordinalToGregorian(\n        Object.assign(Conversions.gregorianToOrdinal(this.c), normalized)\n      );\n    } else {\n      mixed = Object.assign(this.toObject(), normalized);\n\n      // if we didn't set the day but we ended up on an overflow date,\n      // use the last day of the right month\n      if (Util.isUndefined(normalized.day)) {\n        mixed.day = Math.min(Util.daysInMonth(mixed.year, mixed.month), mixed.day);\n      }\n    }\n\n    const [ts, o] = objToTS(mixed, this.o, this.zone);\n    return clone(this, { ts, o });\n  }\n\n  /**\n   * Add a period of time to this DateTime and return the resulting DateTime\n   *\n   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.\n   * @param {Duration|number|object} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @example DateTime.local().plus(123) //~> in 123 milliseconds\n   * @example DateTime.local().plus({ minutes: 15 }) //~> in 15 minutes\n   * @example DateTime.local().plus({ days: 1 }) //~> this time tomorrow\n   * @example DateTime.local().plus({ days: -1 }) //~> this time yesterday\n   * @example DateTime.local().plus({ hours: 3, minutes: 13 }) //~> in 1 hr, 13 min\n   * @example DateTime.local().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 1 hr, 13 min\n   * @return {DateTime}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n    const dur = Util.friendlyDuration(duration);\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * Subtract a period of time to this DateTime and return the resulting DateTime\n   * See {@link plus}\n   * @param {Duration|number|object} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   @return {DateTime}\n  */\n  minus(duration) {\n    if (!this.isValid) return this;\n    const dur = Util.friendlyDuration(duration).negate();\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * \"Set\" this DateTime to the beginning of a unit of time.\n   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'month', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'\n   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'\n   * @return {DateTime}\n   */\n  startOf(unit) {\n    if (!this.isValid) return this;\n    const o = {},\n      normalizedUnit = Duration.normalizeUnit(unit);\n    switch (normalizedUnit) {\n      case 'years':\n        o.month = 1;\n      // falls through\n      case 'months':\n        o.day = 1;\n      // falls through\n      case 'weeks':\n      case 'days':\n        o.hour = 0;\n      // falls through\n      case 'hours':\n        o.minute = 0;\n      // falls through\n      case 'minutes':\n        o.second = 0;\n      // falls through\n      case 'seconds':\n        o.millisecond = 0;\n        break;\n      case 'milliseconds':\n        break;\n      default:\n        throw new InvalidUnitError(unit);\n    }\n\n    if (normalizedUnit === 'weeks') {\n      o.weekday = 1;\n    }\n\n    return this.set(o);\n  }\n\n  /**\n   * \"Set\" this DateTime to the end (i.e. the last millisecond) of a unit of time\n   * @param {string} unit - The unit to go to the end of. Can be 'year', 'month', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-03T00:00:00.000-05:00'\n   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'\n   * @return {DateTime}\n   */\n  endOf(unit) {\n    return this.isValid\n      ? this.startOf(unit)\n          .plus({ [unit]: 1 })\n          .minus(1)\n      : this;\n  }\n\n  // OUTPUT\n\n  /**\n   * Returns a string representation of this DateTime formatted according to the specified format string.\n   * **You may not want this.** See {@link toLocaleString} for a more flexible formatting tool. See the documentation for the specific format tokens supported.\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale\n   * @param {string} fmt - the format string\n   * @param {object} opts - options\n   * @param {boolean} opts.round - round numerical values\n   * @example DateTime.local().toFormat('yyyy LLL dd') //=> '2017 avr. 22'\n   * @example DateTime.local().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 Apr 22'\n   * @example DateTime.local().toFormat(\"HH 'hours and' mm 'minutes'\") //=> '20 hours and 55 minutes'\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.redefaultToEN(), opts).formatDateTimeFromString(this, fmt)\n      : INVALID;\n  }\n\n  /**\n   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.\n   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation.\n   * of the DateTime in the assigned locale.\n   * Defaults to the system's locale if no locale has been specified\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param opts {object} - Intl.DateTimeFormat constructor options\n   * @example DateTime.local().toLocaleString(); //=> 4/20/2017\n   * @example DateTime.local().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'\n   * @example DateTime.local().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'\n   * @example DateTime.local().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'\n   * @example DateTime.local().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'\n   * @example DateTime.local().toLocaleString({weekday: 'long', month: 'long', day: '2-digit'}); //=> 'Thu, Apr 20'\n   * @example DateTime.local().toLocaleString({weekday: 'long', month: 'long', day: '2-digit', hour: '2-digit', minute: '2-digit'}); //=> 'Thu, Apr 20, 11:27'\n   * @example DateTime.local().toLocaleString({hour: '2-digit', minute: '2-digit'}); //=> '11:32'\n   * @return {string}\n   */\n  toLocaleString(opts = Formats.DATE_SHORT) {\n    return this.isValid\n      ? Formatter.create(this.loc.clone(opts), opts).formatDateTime(this)\n      : INVALID;\n  }\n\n  /**\n   * Returns an array of format \"parts\", i.e. individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.\n   * Defaults to the system's locale if no locale has been specified\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts\n   * @param opts {object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.\n   * @example DateTime.local().toLocaleString(); //=> [\n   *                                    //=>   { type: 'day', value: '25' },\n   *                                    //=>   { type: 'literal', value: '/' },\n   *                                    //=>   { type: 'month', value: '05' },\n   *                                    //=>   { type: 'literal', value: '/' },\n   *                                    //=>   { type: 'year', value: '1982' }\n   *                                    //=> ]\n   */\n  toLocaleParts(opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this)\n      : [];\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime\n   * @param {object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @example DateTime.utc(1982, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'\n   * @example DateTime.local().toISO() //=> '2017-04-22T20:47:05.335-04:00'\n   * @example DateTime.local().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'\n   * @return {string}\n   */\n  toISO(opts = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    return `${this.toISODate()}T${this.toISOTime(opts)}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's date component\n   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '1982-05-25'\n   * @return {string}\n   */\n  toISODate() {\n    return toTechFormat(this, 'yyyy-MM-dd');\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's week date\n   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'\n   * @return {string}\n   */\n  toISOWeekDate() {\n    return toTechFormat(this, \"kkkk-'W'WW-c\");\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's time component\n   * @param {object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @example DateTime.utc().hour(7).minute(34).toISOTime() //=> '07:34:19.361Z'\n   * @example DateTime.utc().hour(7).minute(34).toISOTime({ suppressSeconds: true }) //=> '07:34Z'\n   * @return {string}\n   */\n  toISOTime({ suppressMilliseconds = false, suppressSeconds = false, includeOffset = true } = {}) {\n    return toTechTimeFormat(this, { suppressSeconds, suppressMilliseconds, includeOffset });\n  }\n\n  /**\n   * Returns an RFC 2822-compatible string representation of this DateTime, always in UTC\n   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'\n   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'\n   * @return {string}\n   */\n  toRFC2822() {\n    return toTechFormat(this, 'EEE, dd LLL yyyy hh:mm:ss ZZZ');\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in HTTP headers.\n   * Specifically, the string conforms to RFC 1123.\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'\n   * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'\n   * @return {string}\n   */\n  toHTTP() {\n    return toTechFormat(this.toUTC(), \"EEE, dd LLL yyyy HH:mm:ss 'GMT'\");\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL Date\n   * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'\n   * @return {string}\n   */\n  toSQLDate() {\n    return toTechFormat(this, 'yyyy-MM-dd');\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL Time\n   * @param {object} opts - options\n   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overides includeOffset.\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @example DateTime.utc().toSQL() //=> '05:15:16.345'\n   * @example DateTime.local().toSQL() //=> '05:15:16.345 -04:00'\n   * @example DateTime.local().toSQL({ includeOffset: false }) //=> '05:15:16.345'\n   * @example DateTime.local().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'\n   * @return {string}\n   */\n  toSQLTime({ includeOffset = true, includeZone = false } = {}) {\n    return toTechTimeFormat(this, { includeOffset, includeZone, spaceZone: true });\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL DateTime\n   * @param {object} opts - options\n   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'\n   * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: false }) //=> '2014-07-13 00:00:00.000 America/New_York'\n   * @return {string}\n   */\n  toSQL(opts = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for debugging\n   * @return {string}\n   */\n  toString() {\n    return this.isValid ? this.toISO() : INVALID;\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for the REPL.\n   * @return {string}\n   */\n  inspect() {\n    if (this.isValid) {\n      return `DateTime {\\n  ts: ${this.toISO()},\\n  zone: ${this.zone.name},\\n  locale: ${this\n        .locale} }`;\n    } else {\n      return `DateTime { Invalid, reason: ${this.invalidReason} }`;\n    }\n  }\n\n  /**\n   * Returns the epoch milliseconds of this DateTime\n   * @return {number}\n   */\n  valueOf() {\n    return this.isValid ? this.ts : NaN;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns a Javascript object with this DateTime's year, month, day, and so on.\n   * @param opts - options for generating the object\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\n   * @example DateTime.local().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }\n   * @return {object}\n   */\n  toObject(opts = {}) {\n    if (!this.isValid) return {};\n\n    const base = Object.assign({}, this.c);\n\n    if (opts.includeConfig) {\n      base.outputCalendar = this.outputCalendar;\n      base.numberingSystem = this.loc.numberingSystem;\n      base.locale = this.loc.locale;\n    }\n    return base;\n  }\n\n  /**\n   * Returns a Javascript Date equivalent to this DateTime.\n   * @return {object}\n   */\n  toJSDate() {\n    return new Date(this.isValid ? this.ts : NaN);\n  }\n\n  // COMPARE\n\n  /**\n   * Return the difference between two DateTimes as a Duration.\n   * @param {DateTime} otherDateTime - the DateTime to compare this one to\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example\n   * var i1 = DateTime.fromISO('1982-05-25T09:45'),\n   *     i2 = DateTime.fromISO('1983-10-14T10:30');\n   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }\n   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }\n   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }\n   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }\n   * @return {Duration}\n   */\n  diff(otherDateTime, unit = 'milliseconds', opts = {}) {\n    if (!this.isValid || !otherDateTime.isValid)\n      return Duration.invalid(this.invalidReason || otherDateTime.invalidReason);\n\n    const units = Util.maybeArray(unit).map(Duration.normalizeUnit);\n\n    const flipped = otherDateTime.valueOf() > this.valueOf(),\n      post = flipped ? otherDateTime : this,\n      accum = {};\n\n    let cursor = flipped ? this : otherDateTime,\n      lowestOrder = null;\n\n    if (units.indexOf('years') >= 0) {\n      let dYear = post.year - cursor.year;\n\n      cursor = cursor.set({ year: post.year });\n\n      if (cursor > post) {\n        cursor = cursor.minus({ years: 1 });\n        dYear -= 1;\n      }\n\n      accum.years = dYear;\n      lowestOrder = 'years';\n    }\n\n    if (units.indexOf('months') >= 0) {\n      const dYear = post.year - cursor.year;\n      let dMonth = post.month - cursor.month + dYear * 12;\n\n      cursor = cursor.set({ year: post.year, month: post.month });\n\n      if (cursor > post) {\n        cursor = cursor.minus({ months: 1 });\n        dMonth -= 1;\n      }\n\n      accum.months = dMonth;\n      lowestOrder = 'months';\n    }\n\n    const computeDayDelta = () => {\n      const utcDayStart = dt =>\n          dt\n            .toUTC(0, { keepCalendarTime: true })\n            .startOf('day')\n            .valueOf(),\n        ms = utcDayStart(post) - utcDayStart(cursor);\n      return Math.floor(Duration.fromMillis(ms, opts).shiftTo('days').days);\n    };\n\n    if (units.indexOf('weeks') >= 0) {\n      const days = computeDayDelta();\n      let weeks = (days - days % 7) / 7;\n      cursor = cursor.plus({ weeks });\n\n      if (cursor > post) {\n        cursor = cursor.minus({ weeks: 1 });\n        weeks -= 1;\n      }\n\n      accum.weeks = weeks;\n      lowestOrder = 'weeks';\n    }\n\n    if (units.indexOf('days') >= 0) {\n      let days = computeDayDelta();\n      cursor = cursor.set({\n        year: post.year,\n        month: post.month,\n        day: post.day\n      });\n\n      if (cursor > post) {\n        cursor = cursor.minus({ days: 1 });\n        days -= 1;\n      }\n\n      accum.days = days;\n      lowestOrder = 'days';\n    }\n\n    const remaining = Duration.fromMillis(post - cursor, opts),\n      moreUnits = units.filter(\n        u => ['hours', 'minutes', 'seconds', 'milliseconds'].indexOf(u) >= 0\n      ),\n      shiftTo = moreUnits.length > 0 ? moreUnits : [lowestOrder],\n      shifted = remaining.shiftTo(...shiftTo),\n      merged = shifted.plus(Duration.fromObject(Object.assign(accum, opts)));\n\n    return flipped ? merged.negate() : merged;\n  }\n\n  /**\n   * Return the difference between this DateTime and right now.\n   * See {@link diff}\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  diffNow(unit = 'milliseconds', opts = {}) {\n    return this.diff(DateTime.local(), unit, opts);\n  }\n\n  /**\n   * Return an Interval spanning between this DateTime and another DateTime\n   * @param {DateTime} otherDateTime - the other end point of the Interval\n   * @return {Duration}\n   */\n  until(otherDateTime) {\n    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;\n  }\n\n  /**\n   * Return whether this DateTime is in the same unit of time as another DateTime\n   * @param {DateTime} otherDateTime - the other DateTime\n   * @param {string} unit - the unit of time to check sameness on\n   * @example DateTime.local().hasSame(otherDT, 'day'); //~> true if both the same calendar day\n   * @return {boolean}\n   */\n  hasSame(otherDateTime, unit) {\n    if (!this.isValid) return false;\n    if (unit === 'millisecond') {\n      return this.valueOf() === otherDateTime.valueOf();\n    } else {\n      const inputMs = otherDateTime.valueOf();\n      return this.startOf(unit) <= inputMs && inputMs <= this.endOf(unit);\n    }\n  }\n\n  /**\n   * Equality check\n   * Two DateTimes are equal iff they represent the same millisecond\n   * @param {DateTime} other - the other DateTime\n   * @return {boolean}\n   */\n  equals(other) {\n    return this.isValid && other.isValid\n      ? this.valueOf() === other.valueOf() &&\n          this.zone.equals(other.zone) &&\n          this.loc.equals(other.loc)\n      : false;\n  }\n\n  /**\n   * Return the min of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum\n   * @return {DateTime}\n   */\n  static min(...dateTimes) {\n    return Util.bestBy(dateTimes, i => i.valueOf(), Math.min);\n  }\n\n  /**\n   * Return the max of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum\n   * @return {DateTime}\n   */\n  static max(...dateTimes) {\n    return Util.bestBy(dateTimes, i => i.valueOf(), Math.max);\n  }\n\n  // MISC\n\n  /**\n   * Explain how a string would be parsed by fromString()\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see description)\n   * @param {object} options - options taken by fromString()\n   * @return {object}\n   */\n  static fromStringExplain(text, fmt, options = {}) {\n    const parser = new TokenParser(Locale.fromOpts(options));\n    return parser.explainParse(text, fmt);\n  }\n\n  // FORMAT PRESETS\n\n  /**\n   * {@link toLocaleString} format like 10/14/1983\n   */\n  static get DATE_SHORT() {\n    return Formats.DATE_SHORT;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Oct 14, 1983'\n   */\n  static get DATE_MED() {\n    return Formats.DATE_MED;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'October 14, 1983'\n   */\n  static get DATE_FULL() {\n    return Formats.DATE_FULL;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Tuesday, October 14, 1983'\n   */\n  static get DATE_HUGE() {\n    return Formats.DATE_HUGE;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.\n   */\n  static get TIME_SIMPLE() {\n    return Formats.TIME_SIMPLE;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.\n   */\n  static get TIME_WITH_SECONDS() {\n    return Formats.TIME_WITH_SECONDS;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.\n   */\n  static get TIME_WITH_SHORT_OFFSET() {\n    return Formats.TIME_WITH_SHORT_OFFSET;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   */\n  static get TIME_WITH_LONG_OFFSET() {\n    return Formats.TIME_WITH_LONG_OFFSET;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30', always 24-hour.\n   */\n  static get TIME_24_SIMPLE() {\n    return Formats.TIME_24_SIMPLE;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23', always 24-hour.\n   */\n  static get TIME_24_WITH_SECONDS() {\n    return Formats.TIME_24_WITH_SECONDS;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 EDT', always 24-hour.\n   */\n  static get TIME_24_WITH_SHORT_OFFSET() {\n    return Formats.TIME_24_WITH_SHORT_OFFSET;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.\n   */\n  static get TIME_24_WITH_LONG_OFFSET() {\n    return Formats.TIME_24_WITH_LONG_OFFSET;\n  }\n\n  /**\n   * {@link toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_SHORT() {\n    return Formats.DATETIME_SHORT;\n  }\n\n  /**\n   * {@link toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_SHORT_WITH_SECONDS() {\n    return Formats.DATETIME_SHORT_WITH_SECONDS;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_MED() {\n    return Formats.DATETIME_MED;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_MED_WITH_SECONDS() {\n    return Formats.DATETIME_MED_WITH_SECONDS;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_FULL() {\n    return Formats.DATETIME_FULL;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'October 14, 1983, 9:303 AM EDT'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_FULL_WITH_SECONDS() {\n    return Formats.DATETIME_FULL_WITH_SECONDS;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_HUGE() {\n    return Formats.DATETIME_HUGE;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_HUGE_WITH_SECONDS() {\n    return Formats.DATETIME_HUGE_WITH_SECONDS;\n  }\n}\n"],"names":["LuxonError","Error","InvalidDateTimeError","reason","InvalidIntervalError","InvalidDurationError","ConflictingSpecificationError","InvalidUnitError","unit","InvalidArgumentError","ZoneIsAbstractError","Zone","ts","otherZone","opts","singleton","LocalZone","format","locale","Util","parseZoneInfo","Date","getTimezoneOffset","type","hasIntl","Intl","DateTimeFormat","resolvedOptions","timeZone","typeToPos","hackyOffset","dtf","date","replace","parsed","exec","formatted","fMonth","fDay","fYear","fHour","fMinute","fSecond","partsOffset","formatToParts","filled","i","length","value","pos","isUndefined","parseInt","isValid","zone","e","IANAZone","s","match","name","zoneName","valid","asUTC","UTC","asTS","valueOf","hoursMinutesOffset","z","hours","Math","trunc","fixed","minutes","abs","sign","base","padStart","FixedOffsetZone","offset","utcInstance","r","signedOffset","Formats","DATE_SHORT","DATE_MED","DATE_FULL","DATE_HUGE","TIME_SIMPLE","TIME_WITH_SECONDS","TIME_WITH_SHORT_OFFSET","TIME_WITH_LONG_OFFSET","TIME_24_SIMPLE","TIME_24_WITH_SECONDS","TIME_24_WITH_SHORT_OFFSET","TIME_24_WITH_LONG_OFFSET","DATETIME_SHORT","DATETIME_SHORT_WITH_SECONDS","DATETIME_MED","DATETIME_MED_WITH_SECONDS","DATETIME_FULL","DATETIME_FULL_WITH_SECONDS","DATETIME_HUGE","DATETIME_HUGE_WITH_SECONDS","stringify","obj","JSON","Object","keys","sort","English","monthsNarrow","monthsShort","monthsLong","weekdaysNarrow","weekdaysShort","weekdaysLong","erasNarrow","erasShort","erasLong","dt","meridiems","hour","weekdays","weekday","months","month","eras","year","knownFormat","filtered","pick","key","dateTimeHuge","stringifyTokens","splits","tokenToString","token","literal","val","tokenToObject","Formatter","formatOpts","assign","round","fmt","current","currentFull","bracketed","c","charAt","push","loc","systemLoc","redefaultToSystem","df","dtFormatter","n","p","padTo","numberFormatter","knownEnglish","listingMode","string","extract","formatOffset","isOffsetFixed","allowZ","num","RangeError","meridiem","meridiemForDateTime","hour12","standalone","monthForDateTime","day","weekdayForDateTime","maybeMacro","macro","formatWithSystemDefault","era","eraForDateTime","outputCal","outputCalendar","millisecond","second","minute","offsetNameShort","offsetNameLong","toString","slice","weekYear","weekNumber","ordinal","parseFormat","dur","tokenToField","mapped","lildur","get","tokens","realTokens","reduce","found","concat","collapsed","shiftTo","map","filter","t","sysLocaleCache","systemLocale","intlConfigString","numberingSystem","Array","isArray","l","mapMonths","f","ms","DateTime","utc","mapWeekdays","listStuff","defaultOK","englishFn","intlFn","mode","PolyNumberFormatter","maybeRounded","PolyDateFormatter","intl","universal","fromMillis","realIntlOpts","toJSDate","tokenFormat","formatString","Locale","create","formatDateTimeFromString","hasFormatToParts","defaultToEN","specifiedLocale","Settings","defaultLocale","numberingSystemR","defaultNumberingSystem","outputCalendarR","defaultOutputCalendar","localeR","numbering","weekdaysCache","monthsCache","meridiemCache","eraCache","defaultOk","hasFTP","isActuallyEn","toLowerCase","startsWith","hasNoWeirdness","alts","getOwnPropertyNames","clone","formatStr","undefined","intlOpts","field","results","matching","find","m","useGrouping","minimumIntegerDigits","maximumFractionDigits","NumberFormat","other","now","defaultZone","throwOnInvalid","resetCache","instance","normalizeZone","o","prototype","call","thing","arr","by","compare","best","next","pair","apply","a","k","bottom","top","isNumber","input","repeat","fraction","parseFloat","isLeapYear","offsetFormat","modified","timeZoneName","without","included","diffed","substring","trimmed","offHourStr","offMinuteStr","offHour","offMin","offMinSigned","duration","Duration","fromObject","dateTimeish","fromJSDate","isString","lowered","isValidSpecier","parseSpecifier","normalizer","ignoreUnknown","normalized","u","hasOwnProperty","v","Number","isNaN","combineRegexes","regexes","full","source","RegExp","combineExtractors","extractors","ex","mergedVals","mergedZone","cursor","parse","patterns","regex","extractor","simpleParse","ret","offsetRegex","isoTimeBaseRegex","isoTimeRegex","isoTimeExtensionRegex","isoYmdRegex","isoWeekRegex","isoOrdinalRegex","extractISOWeekData","extractISOOrdinalData","sqlYmdRegex","sqlTimeRegex","sqlTimeExtensionRegex","extractISOYmd","item","extractISOTime","parseMillis","extractISOOffset","local","fullOffset","extractIANAZone","isoDuration","extractISODuration","yearStr","monthStr","dayStr","hourStr","minuteStr","secondStr","weekStr","obsOffsets","fromStrings","weekdayStr","result","untruncateYear","indexOf","rfc2822","extractRFC2822","obsOffset","milOffset","preprocessRFC2822","trim","rfc1123","rfc850","ascii","extractRFC1123Or850","extractASCII","RegexParser","INVALID","lowOrderMatrix","seconds","milliseconds","casualMatrix","daysInYearAccurate","daysInMonthAccurate","accurateMatrix","orderedUnits","clear","conf","values","conversionAccuracy","isHighOrderNegative","config","accurate","invalid","invalidReason","matrix","formatDurationFromString","includeConfig","norm","normalize","negate","years","days","weeks","toISO","friendlyDuration","plus","normalizeUnit","mixed","normalizeObject","NaN","neg","shifted","units","built","accumulated","vals","toObject","lastUnit","own","ak","down","conv","added","floor","negated","equals","count","text","parseISODuration","validateStartEnd","start","end","Interval","toDuration","startOf","diff","minus","hasSame","dateTime","fromDateTimes","dateTimes","sorted","friendlyDateTime","numberOfParts","splitBy","intervals","xor","intersection","isEmpty","dateFormat","separator","toFormat","builtStart","builtEnd","split","fromISO","b","sofar","overlaps","abutsStart","union","final","currentCount","ends","time","flattened","merge","Info","proto","setZone","set","intlTokens","zones","MISSING_FTP","intUnit","post","deser","fixListRegex","stripInsensitivities","oneOf","strings","startIndex","join","findIndex","groups","h","simple","unitForToken","one","two","three","four","oneOrTwo","oneToThree","twoToFour","unitate","buildRegex","re","handlers","matches","all","matchIndex","dateTimeFromMatches","toField","Z","G","y","S","TokenParser","disqualifyingUnit","regexString","rawMatches","explainParse","nonLeapLadder","leapLadder","dayOfWeek","js","getUTCDay","lastWeekNumber","p1","last","p2","computeOrdinal","uncomputeOrdinal","table","month0","Conversions","gregObj","timeObject","weekData","weekdayOfJan4","daysInYear","gregData","ordinalData","validYear","validWeek","numberBetween","validWeekday","validOrdinal","validMonth","validDay","daysInMonth","validHour","validMinute","validSecond","validMillisecond","INVALID_INPUT","UNSUPPORTED_ZONE","UNPARSABLE","possiblyCachedWeekData","gregorianToWeek","inst","old","fixOffset","localTS","tz","utcGuess","o2","o3","min","max","tsToObj","d","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","objToLocalTS","setUTCFullYear","objToTS","adjustTime","oPre","millisToAdd","as","parseDataToDateTime","parsedZone","interpretationZone","toTechFormat","toTechTimeFormat","suppressSeconds","suppressMilliseconds","includeOffset","includeZone","spaceZone","defaultUnitValues","defaultWeekUnitValues","defaultOrdinalUnitValues","orderedWeekUnits","orderedOrdinalUnits","quickDT","hasInvalidGregorianData","hasInvalidTimeData","offsetProvis","tsNow","unchanged","calendar","keepCalendarTime","newTS","reconfigure","settingWeekStuff","weekToGregorian","ordinalToGregorian","gregorianToOrdinal","normalizedUnit","redefaultToEN","formatDateTime","formatDateTimeParts","toISODate","toISOTime","toUTC","toSQLDate","toSQLTime","otherDateTime","maybeArray","flipped","accum","lowestOrder","dYear","dMonth","computeDayDelta","utcDayStart","remaining","moreUnits","merged","inputMs","endOf","offsetName","options","isDate","zoneToUse","containsOrdinal","containsGregorYear","containsGregorMD","containsGregor","definiteWeekDef","useWeekData","defaultValues","objNow","foundFirst","higherOrderInvalid","hasInvalidWeekData","hasInvalidOrdinalData","gregorian","tsFinal","offsetFinal","parseISODate","parseRFC2822Date","parseHTTPDate","parser","fromOpts","parseDateTime","parseSQL","bestBy"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}