{"version":3,"file":"luxon.js","sources":["src/errors.js","src/zone.js","src/zones/localZone.js","src/zones/IANAZone.js","src/zones/fixedOffsetZone.js","src/impl/formats.js","src/impl/english.js","src/impl/formatter.js","src/impl/locale.js","src/settings.js","src/impl/util.js","src/impl/regexParser.js","src/duration.js","src/interval.js","src/info.js","src/impl/tokenParser.js","src/impl/conversions.js","src/datetime.js"],"sourcesContent":["// these aren't really private, but nor are they really useful to document\n\n/**\n * @private\n */\nclass LuxonError extends Error {}\n\n/**\n * @private\n */\nexport class InvalidDateTimeError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid DateTime: ${reason}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidIntervalError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Interval: ${reason}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidDurationError extends LuxonError {\n  constructor(reason) {\n    super(`Invalid Duration: ${reason}`);\n  }\n}\n\n/**\n * @private\n */\nexport class ConflictingSpecificationError extends LuxonError {}\n\n/**\n * @private\n */\nexport class InvalidUnitError extends LuxonError {\n  constructor(unit) {\n    super(`Invalid unit ${unit}`);\n  }\n}\n\n/**\n * @private\n */\nexport class InvalidArgumentError extends LuxonError {}\n\n/**\n * @private\n */\nexport class ZoneIsAbstractError extends LuxonError {\n  constructor() {\n    super('Zone is an abstract class');\n  }\n}\n","/* eslint no-unused-vars: \"off\" */\nimport { ZoneIsAbstractError } from './errors';\n\n/**\n * @interface\n*/\nexport class Zone {\n  /**\n   * The type of zone\n   * @abstract\n   * @return {string}\n   */\n  get type() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * The name of this zone.\n   * @abstract\n   * @return {string}\n   */\n  get name() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns whether the offset is known to be fixed for the whole year.\n   * @abstract\n   * @return {boolean}\n   */\n  get universal() {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Returns the offset's common name (such as EST) at the specified timestamp\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to get the name\n   * @param {Object} opts - Options to affect the format\n   * @param {string} opts.format - What style of offset to return. Accepts 'long' or 'short'.\n   * @param {string} opts.localeCode - What locale to return the offset name in. Defaults to us-en\n   * @return {string}\n   */\n  static offsetName(ts, opts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return the offset in minutes for this zone at the specified timestamp.\n   * @abstract\n   * @param {number} ts - Epoch milliseconds for which to compute the offset\n   * @return {number}\n   */\n  offset(ts) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is equal to another zoner\n   * @abstract\n   * @param {Zone} otherZone - the zone to compare\n   * @return {boolean}\n   */\n  equals(otherZone) {\n    throw new ZoneIsAbstractError();\n  }\n\n  /**\n   * Return whether this Zone is valid.\n   * @abstract\n   * @return {boolean}\n   */\n  get isValid() {\n    throw new ZoneIsAbstractError();\n  }\n}\n","import { Util } from '../impl/util';\nimport { Zone } from '../zone';\n\nlet singleton = null;\n\n/**\n * @private\n */\n\nexport class LocalZone extends Zone {\n  static get instance() {\n    if (singleton === null) {\n      singleton = new LocalZone();\n    }\n    return singleton;\n  }\n\n  get type() {\n    return 'local';\n  }\n\n  get name() {\n    if (Util.hasIntl()) {\n      return new Intl.DateTimeFormat().resolvedOptions().timeZone;\n    } else return 'local';\n  }\n\n  get universal() {\n    return false;\n  }\n\n  offsetName(ts, { format, locale }) {\n    return Util.parseZoneInfo(ts, format, locale);\n  }\n\n  offset(ts) {\n    return -new Date(ts).getTimezoneOffset();\n  }\n\n  equals(otherZone) {\n    return otherZone.type === 'local';\n  }\n\n  get isValid() {\n    return true;\n  }\n}\n","import { Util } from '../impl/util';\nimport { Zone } from '../zone';\n\nconst typeToPos = {\n  year: 0,\n  month: 1,\n  day: 2,\n  hour: 3,\n  minute: 4,\n  second: 5\n};\n\nfunction hackyOffset(dtf, date) {\n  const formatted = dtf.format(date).replace(/\\u200E/g, ''),\n    parsed = /(\\d+)\\/(\\d+)\\/(\\d+),? (\\d+):(\\d+):(\\d+)/.exec(formatted),\n    [, fMonth, fDay, fYear, fHour, fMinute, fSecond] = parsed;\n  return [fYear, fMonth, fDay, fHour, fMinute, fSecond];\n}\n\nfunction partsOffset(dtf, date) {\n  const formatted = dtf.formatToParts(date),\n    filled = [];\n  for (let i = 0; i < formatted.length; i++) {\n    const { type, value } = formatted[i],\n      pos = typeToPos[type];\n\n    if (!Util.isUndefined(pos)) {\n      filled[pos] = parseInt(value, 10);\n    }\n  }\n  return filled;\n}\n\nfunction isValid(zone) {\n  try {\n    new Intl.DateTimeFormat('en-US', { timeZone: zone }).format();\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\n/**\n * @private\n */\n\nexport class IANAZone extends Zone {\n  static isValidSpecier(s) {\n    return s && s.match(/[a-z_]{1,256}\\/[a-z_]{1,256}/i);\n  }\n\n  constructor(name) {\n    super();\n    this.zoneName = name;\n    this.valid = isValid(name);\n  }\n\n  get type() {\n    return 'iana';\n  }\n\n  get name() {\n    return this.zoneName;\n  }\n\n  get universal() {\n    return false;\n  }\n\n  offsetName(ts, { format, locale }) {\n    return Util.parseZoneInfo(ts, format, locale, this.zoneName);\n  }\n\n  offset(ts) {\n    const date = new Date(ts),\n      dtf = new Intl.DateTimeFormat('en-US', {\n        hour12: false,\n        timeZone: this.zoneName,\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit',\n        second: '2-digit'\n      }),\n      [fYear, fMonth, fDay, fHour, fMinute, fSecond] = dtf.formatToParts\n        ? partsOffset(dtf, date)\n        : hackyOffset(dtf, date),\n      asUTC = Date.UTC(fYear, fMonth - 1, fDay, fHour, fMinute, fSecond);\n    let asTS = date.valueOf();\n    asTS -= asTS % 1000;\n    return (asUTC - asTS) / (60 * 1000);\n  }\n\n  equals(otherZone) {\n    return otherZone.type === 'iana' && otherZone.zoneName === this.zoneName;\n  }\n\n  get isValid() {\n    return this.valid;\n  }\n}\n","import { Util } from '../impl/util';\nimport { Zone } from '../zone';\n\nlet singleton = null;\n\nfunction hoursMinutesOffset(z) {\n  const hours = Math.trunc(z.fixed / 60),\n    minutes = Math.abs(z.fixed % 60),\n    sign = hours > 0 ? '+' : '-',\n    base = sign + Math.abs(hours);\n  return minutes > 0 ? `${base}:${Util.padStart(minutes, 2)}` : base;\n}\n\n/**\n * @private\n */\n\nexport class FixedOffsetZone extends Zone {\n  static get utcInstance() {\n    if (singleton === null) {\n      singleton = new FixedOffsetZone(0);\n    }\n    return singleton;\n  }\n\n  static instance(offset) {\n    return offset === 0 ? FixedOffsetZone.utcInstance : new FixedOffsetZone(offset);\n  }\n\n  static parseSpecifier(s) {\n    if (s) {\n      const r = s.match(/^utc(?:([+-]\\d{1,2})(?::(\\d{2}))?)?$/i);\n      if (r) {\n        return new FixedOffsetZone(Util.signedOffset(r[1], r[2]));\n      }\n    }\n    return null;\n  }\n\n  constructor(offset) {\n    super();\n    this.fixed = offset;\n  }\n\n  get type() {\n    return 'fixed';\n  }\n\n  get name() {\n    return this.fixed === 0 ? 'UTC' : `UTC${hoursMinutesOffset(this)}`;\n  }\n\n  offsetName() {\n    return this.name;\n  }\n\n  get universal() {\n    return true;\n  }\n\n  offset() {\n    return this.fixed;\n  }\n\n  equals(otherZone) {\n    return otherZone.type === 'fixed' && otherZone.fixed === this.fixed;\n  }\n\n  get isValid() {\n    return true;\n  }\n}\n","/**\n * @private\n */\n\nexport class Formats {}\n\nFormats.DATE_SHORT = {\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric'\n};\n\nFormats.DATE_MED = {\n  year: 'numeric',\n  month: 'short',\n  day: 'numeric'\n};\n\nFormats.DATE_FULL = {\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric'\n};\n\nFormats.DATE_HUGE = {\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric',\n  weekday: 'long'\n};\n\nFormats.TIME_SIMPLE = {\n  hour: 'numeric',\n  minute: '2-digit'\n};\n\nFormats.TIME_WITH_SECONDS = {\n  hour: 'numeric',\n  minute: '2-digit',\n  second: '2-digit'\n};\n\nFormats.TIME_WITH_SHORT_OFFSET = {\n  hour: 'numeric',\n  minute: '2-digit',\n  second: '2-digit',\n  timeZoneName: 'short'\n};\n\nFormats.TIME_WITH_LONG_OFFSET = {\n  hour: 'numeric',\n  minute: '2-digit',\n  second: '2-digit',\n  timeZoneName: 'long'\n};\n\nFormats.TIME_24_SIMPLE = {\n  hour: 'numeric',\n  minute: '2-digit',\n  hour12: false\n};\n\n/**\n * {@link toLocaleString}; format like '09:30:23', always 24-hour.\n */\nFormats.TIME_24_WITH_SECONDS = {\n  hour: 'numeric',\n  minute: '2-digit',\n  second: '2-digit',\n  hour12: false\n};\n\n/**\n * {@link toLocaleString}; format like '09:30:23 EDT', always 24-hour.\n */\nFormats.TIME_24_WITH_SHORT_OFFSET = {\n  hour: 'numeric',\n  minute: '2-digit',\n  second: '2-digit',\n  hour12: false,\n  timeZoneName: 'short'\n};\n\n/**\n * {@link toLocaleString}; format like '09:30:23 Eastern Daylight Time', always 24-hour.\n */\nFormats.TIME_24_WITH_LONG_OFFSET = {\n  hour: 'numeric',\n  minute: '2-digit',\n  second: '2-digit',\n  hour12: false,\n  timeZoneName: 'long'\n};\n\n/**\n * {@link toLocaleString}; format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.\n */\nFormats.DATETIME_SHORT = {\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: '2-digit'\n};\n\n/**\n * {@link toLocaleString}; format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.\n */\nFormats.DATETIME_SHORT_WITH_SECONDS = {\n  year: 'numeric',\n  month: 'numeric',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: '2-digit',\n  second: '2-digit'\n};\n\nFormats.DATETIME_MED = {\n  year: 'numeric',\n  month: 'short',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: '2-digit'\n};\n\nFormats.DATETIME_MED_WITH_SECONDS = {\n  year: 'numeric',\n  month: 'short',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: '2-digit',\n  second: '2-digit'\n};\n\nFormats.DATETIME_FULL = {\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: '2-digit',\n  timeZoneName: 'short'\n};\n\nFormats.DATETIME_FULL_WITH_SECONDS = {\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric',\n  hour: 'numeric',\n  minute: '2-digit',\n  second: '2-digit',\n  timeZoneName: 'short'\n};\n\nFormats.DATETIME_HUGE = {\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric',\n  weekday: 'long',\n  hour: 'numeric',\n  minute: '2-digit',\n  timeZoneName: 'long'\n};\n\nFormats.DATETIME_HUGE_WITH_SECONDS = {\n  year: 'numeric',\n  month: 'long',\n  day: 'numeric',\n  weekday: 'long',\n  hour: 'numeric',\n  minute: '2-digit',\n  second: '2-digit',\n  timeZoneName: 'long'\n};\n","import { Formats } from './formats';\nimport { Util } from './util';\n\nfunction stringify(obj) {\n  return JSON.stringify(obj, Object.keys(obj).sort());\n}\n\n/**\n * @private\n */\n\nexport class English {\n  static get monthsLong() {\n    return [\n      'January',\n      'February',\n      'March',\n      'April',\n      'May',\n      'June',\n      'July',\n      'August',\n      'September',\n      'October',\n      'November',\n      'December'\n    ];\n  }\n\n  static get monthsShort() {\n    return ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n  }\n\n  static get monthsNarrow() {\n    return ['J', 'F', 'M', 'A', 'M', 'J', 'J', 'A', 'S', 'O', 'N', 'D'];\n  }\n\n  static months(length) {\n    switch (length) {\n      case 'narrow':\n        return English.monthsNarrow;\n      case 'short':\n        return English.monthsShort;\n      case 'long':\n        return English.monthsLong;\n      case 'numeric':\n        return ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12'];\n      case '2-digit':\n        return ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'];\n      default:\n        return null;\n    }\n  }\n\n  static get weekdaysLong() {\n    return ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];\n  }\n\n  static get weekdaysShort() {\n    return ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];\n  }\n\n  static get weekdaysNarrow() {\n    return ['M', 'T', 'W', 'T', 'F', 'S', 'S'];\n  }\n\n  static weekdays(length) {\n    switch (length) {\n      case 'narrow':\n        return English.weekdaysNarrow;\n      case 'short':\n        return English.weekdaysShort;\n      case 'long':\n        return English.weekdaysLong;\n      case 'numeric':\n        return ['1', '2', '3', '4', '5', '6', '7'];\n      default:\n        return null;\n    }\n  }\n\n  static get meridiems() {\n    return ['AM', 'PM'];\n  }\n\n  static get erasLong() {\n    return ['Before Christ', 'Anno Domini'];\n  }\n\n  static get erasShort() {\n    return ['BC', 'AD'];\n  }\n\n  static get erasNarrow() {\n    return ['B', 'A'];\n  }\n\n  static eras(length) {\n    switch (length) {\n      case 'narrow':\n        return English.erasNarrow;\n      case 'short':\n        return English.erasShort;\n      case 'long':\n        return English.erasLong;\n      default:\n        return null;\n    }\n  }\n\n  static meridiemForDateTime(dt) {\n    return English.meridiems[dt.hour < 12 ? 0 : 1];\n  }\n\n  static weekdayForDateTime(dt, length) {\n    return English.weekdays(length)[dt.weekday - 1];\n  }\n\n  static monthForDateTime(dt, length) {\n    return English.months(length)[dt.month - 1];\n  }\n\n  static eraForDateTime(dt, length) {\n    return English.eras(length)[dt.year < 0 ? 0 : 1];\n  }\n\n  static formatString(knownFormat) {\n    // these all have the offsets removed because we don't have access to them\n    // without all the intl stuff this is backfilling\n    const filtered = Util.pick(knownFormat, [\n        'weekday',\n        'era',\n        'year',\n        'month',\n        'day',\n        'hour',\n        'minute',\n        'second',\n        'timeZoneName',\n        'hour12'\n      ]),\n      key = stringify(filtered),\n      dateTimeHuge = 'EEEE, LLLL d, yyyy, h:mm a';\n    switch (key) {\n      case stringify(Formats.DATE_SHORT):\n        return 'M/d/yyyy';\n      case stringify(Formats.DATE_MED):\n        return 'LLL d, yyyy';\n      case stringify(Formats.DATE_FULL):\n        return 'LLLL d, yyyy';\n      case stringify(Formats.DATE_HUGE):\n        return 'EEEE, LLLL d, yyyy';\n      case stringify(Formats.TIME_SIMPLE):\n        return 'h:mm a';\n      case stringify(Formats.TIME_WITH_SECONDS):\n        return 'h:mm:ss a';\n      case stringify(Formats.TIME_WITH_SHORT_OFFSET):\n        return 'h:mm a';\n      case stringify(Formats.TIME_WITH_LONG_OFFSET):\n        return 'h:mm a';\n      case stringify(Formats.TIME_24_SIMPLE):\n        return 'HH:mm';\n      case stringify(Formats.TIME_24_WITH_SECONDS):\n        return 'HH:mm:ss';\n      case stringify(Formats.TIME_24_WITH_SHORT_OFFSET):\n        return 'HH:mm';\n      case stringify(Formats.TIME_24_WITH_LONG_OFFSET):\n        return 'HH:mm';\n      case stringify(Formats.DATETIME_SHORT):\n        return 'M/d/yyyy, h:mm a';\n      case stringify(Formats.DATETIME_MED):\n        return 'LLL d, yyyy, h:mm a';\n      case stringify(Formats.DATETIME_FULL):\n        return 'LLLL d, yyyy, h:mm a';\n      case stringify(Formats.DATETIME_HUGE):\n        return dateTimeHuge;\n      case stringify(Formats.DATETIME_SHORT_WITH_SECONDS):\n        return 'M/d/yyyy, h:mm:ss a';\n      case stringify(Formats.DATETIME_MED_WITH_SECONDS):\n        return 'LLL d, yyyy, h:mm:ss a';\n      case stringify(Formats.DATETIME_FULL_WITH_SECONDS):\n        return 'LLLL d, yyyy, h:mm:ss a';\n      case stringify(Formats.DATETIME_HUGE_WITH_SECONDS):\n        return 'EEEE, LLLL d, yyyy, h:mm:ss a';\n      default:\n        return dateTimeHuge;\n    }\n  }\n}\n","import { DateTime } from '../datetime';\nimport { English } from './english';\n\nfunction stringifyTokens(splits, tokenToString) {\n  let s = '';\n  for (const token of splits) {\n    if (token.literal) {\n      s += token.val;\n    } else {\n      s += tokenToString(token.val);\n    }\n  }\n  return s;\n}\n\n/**\n * @private\n */\n\nexport class Formatter {\n  static create(locale, opts = {}) {\n    const formatOpts = Object.assign({}, { round: true }, opts);\n    return new Formatter(locale, formatOpts);\n  }\n\n  static parseFormat(fmt) {\n    let current = null,\n      currentFull = '',\n      bracketed = false;\n    const splits = [];\n    for (let i = 0; i < fmt.length; i++) {\n      const c = fmt.charAt(i);\n      if (c === \"'\") {\n        if (currentFull.length > 0) {\n          splits.push({ literal: bracketed, val: currentFull });\n        }\n        current = null;\n        currentFull = '';\n        bracketed = !bracketed;\n      } else if (bracketed) {\n        currentFull += c;\n      } else if (c === current) {\n        currentFull += c;\n      } else {\n        if (currentFull.length > 0) {\n          splits.push({ literal: false, val: currentFull });\n        }\n        currentFull = c;\n        current = c;\n      }\n    }\n\n    if (currentFull.length > 0) {\n      splits.push({ literal: bracketed, val: currentFull });\n    }\n\n    return splits;\n  }\n\n  constructor(locale, formatOpts) {\n    this.opts = formatOpts;\n    this.loc = locale;\n    this.systemLoc = null;\n  }\n\n  formatWithSystemDefault(dt, opts) {\n    if (this.systemLoc === null) {\n      this.systemLoc = this.loc.redefaultToSystem();\n    }\n    const df = this.systemLoc.dtFormatter(dt, Object.assign({}, this.opts, opts));\n    return df.format();\n  }\n\n  formatDateTime(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));\n    return df.format();\n  }\n\n  formatDateTimeParts(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));\n    return df.formatToParts();\n  }\n\n  resolvedOptions(dt, opts = {}) {\n    const df = this.loc.dtFormatter(dt, Object.assign({}, this.opts, opts));\n    return df.resolvedOptions();\n  }\n\n  num(n, p = 0) {\n    const opts = Object.assign({}, this.opts);\n\n    if (p > 0) {\n      opts.padTo = p;\n    }\n\n    return this.loc.numberFormatter(opts).format(n);\n  }\n\n  formatDateTimeFromString(dt, fmt) {\n    const knownEnglish = this.loc.listingMode() === 'en';\n    const string = (opts, extract) => this.loc.extract(dt, opts, extract),\n      formatOffset = opts => {\n        if (dt.isOffsetFixed && dt.offset === 0 && opts.allowZ) {\n          return 'Z';\n        }\n\n        const hours = Math.trunc(dt.offset / 60),\n          minutes = Math.abs(dt.offset % 60),\n          sign = hours >= 0 ? '+' : '-',\n          base = `${sign}${Math.abs(hours)}`;\n\n        switch (opts.format) {\n          case 'short':\n            return `${sign}${this.num(Math.abs(hours), 2)}:${this.num(minutes, 2)}`;\n          case 'narrow':\n            return minutes > 0 ? `${base}:${minutes}` : base;\n          case 'techie':\n            return `${sign}${this.num(Math.abs(hours), 2)}${this.num(minutes, 2)}`;\n          default:\n            throw new RangeError(`Value format ${opts.format} is out of range for property format`);\n        }\n      },\n      meridiem = () =>\n        knownEnglish\n          ? English.meridiemForDateTime(dt)\n          : string({ hour: 'numeric', hour12: true }, 'dayperiod'),\n      month = (length, standalone) =>\n        knownEnglish\n          ? English.monthForDateTime(dt, length)\n          : string(standalone ? { month: length } : { month: length, day: 'numeric' }, 'month'),\n      weekday = (length, standalone) =>\n        knownEnglish\n          ? English.weekdayForDateTime(dt, length)\n          : string(\n              standalone ? { weekday: length } : { weekday: length, month: 'long', day: 'numeric' },\n              'weekday'\n            ),\n      era = length =>\n        knownEnglish ? English.eraForDateTime(dt, length) : string({ era: length }, 'era'),\n      tokenToString = token => {\n        const outputCal = this.loc.outputCalendar;\n\n        // Where possible: http://cldr.unicode.org/translation/date-time#TOC-Stand-Alone-vs.-Format-Styles\n        switch (token) {\n          // ms\n          case 'S':\n            return this.num(dt.millisecond);\n          case 'u':\n          // falls through\n          case 'SSS':\n            return this.num(dt.millisecond, 3);\n          // seconds\n          case 's':\n            return this.num(dt.second);\n          case 'ss':\n            return this.num(dt.second, 2);\n          // minutes\n          case 'm':\n            return this.num(dt.minute);\n          case 'mm':\n            return this.num(dt.minute, 2);\n          // hours\n          case 'h':\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12);\n          case 'hh':\n            return this.num(dt.hour % 12 === 0 ? 12 : dt.hour % 12, 2);\n          case 'H':\n            return this.num(dt.hour);\n          case 'HH':\n            return this.num(dt.hour, 2);\n          // offset\n          case 'Z':\n            // like +6\n            return formatOffset({ format: 'narrow', allowZ: true });\n          case 'ZZ':\n            // like +06:00\n            return formatOffset({ format: 'short', allowZ: true });\n          case 'ZZZ':\n            // like +0600\n            return formatOffset({ format: 'techie', allowZ: false });\n          case 'ZZZZ':\n            // like EST\n            return dt.offsetNameShort;\n          case 'ZZZZZ':\n            // like Eastern Standard Time\n            return dt.offsetNameLong;\n          // zone\n          case 'z':\n            // like America/New_York\n            return dt.zoneName;\n          // meridiems\n          case 'a':\n            return meridiem();\n          // dates\n          case 'd':\n            return outputCal ? string({ day: 'numeric' }, 'day') : this.num(dt.day);\n          case 'dd':\n            return outputCal ? string({ day: '2-digit' }, 'day') : this.num(dt.day, 2);\n          // weekdays - standalone\n          case 'c':\n            // like 1\n            return this.num(dt.weekday);\n          case 'ccc':\n            // like 'Tues'\n            return weekday('short', true);\n          case 'cccc':\n            // like 'Tuesday'\n            return weekday('long', true);\n          case 'ccccc':\n            // like 'T'\n            return weekday('narrow', true);\n          // weekdays - format\n          case 'E':\n            // like 1\n            return this.num(dt.weekday);\n          case 'EEE':\n            // like 'Tues'\n            return weekday('short', false);\n          case 'EEEE':\n            // like 'Tuesday'\n            return weekday('long', false);\n          case 'EEEEE':\n            // like 'T'\n            return weekday('narrow', false);\n          // months - standalone\n          case 'L':\n            // like 1\n            return outputCal\n              ? string({ month: 'numeric', day: 'numeric' }, 'month')\n              : this.num(dt.month);\n          case 'LL':\n            // like 01, doesn't seem to work\n            return outputCal\n              ? string({ month: '2-digit', day: 'numeric' }, 'month')\n              : this.num(dt.month, 2);\n          case 'LLL':\n            // like Jan\n            return month('short', true);\n          case 'LLLL':\n            // like January\n            return month('long', true);\n          case 'LLLLL':\n            // like J\n            return month('narrow', true);\n          // months - format\n          case 'M':\n            // like 1\n            return outputCal ? string({ month: 'numeric' }, 'month') : this.num(dt.month);\n          case 'MM':\n            // like 01\n            return outputCal ? string({ month: '2-digit' }, 'month') : this.num(dt.month, 2);\n          case 'MMM':\n            // like Jan\n            return month('short', false);\n          case 'MMMM':\n            // like January\n            return month('long', false);\n          case 'MMMMM':\n            // like J\n            return month('narrow', false);\n          // years\n          case 'y':\n            // like 2014\n            return outputCal ? string({ year: 'numeric' }, 'year') : this.num(dt.year);\n          case 'yy':\n            // like 14\n            return outputCal\n              ? string({ year: '2-digit' }, 'year')\n              : this.num(dt.year.toString().slice(-2), 2);\n          case 'yyyy':\n            // like 0012\n            return outputCal ? string({ year: 'numeric' }, 'year') : this.num(dt.year, 4);\n          case 'yyyyyy':\n            // like 000012\n            return outputCal ? string({ year: 'numeric' }, 'year') : this.num(dt.year, 6);\n          // eras\n          case 'G':\n            // like AD\n            return era('short');\n          case 'GG':\n            // like Anno Domini\n            return era('long');\n          case 'GGGGG':\n            return era('narrow');\n          case 'kk':\n            return this.num(dt.weekYear.toString().slice(-2), 2);\n          case 'kkkk':\n            return this.num(dt.weekYear, 4);\n          case 'W':\n            return this.num(dt.weekNumber);\n          case 'WW':\n            return this.num(dt.weekNumber, 2);\n          case 'o':\n            return this.num(dt.ordinal);\n          case 'ooo':\n            return this.num(dt.ordinal, 3);\n          // macros\n          case 'D':\n            return this.formatWithSystemDefault(dt, DateTime.DATE_SHORT);\n          case 'DD':\n            return this.formatWithSystemDefault(dt, DateTime.DATE_MED);\n          case 'DDD':\n            return this.formatWithSystemDefault(dt, DateTime.DATE_FULL);\n          case 'DDDD':\n            return this.formatWithSystemDefault(dt, DateTime.DATE_HUGE);\n          case 't':\n            return this.formatWithSystemDefault(dt, DateTime.TIME_SIMPLE);\n          case 'tt':\n            return this.formatWithSystemDefault(dt, DateTime.TIME_WITH_SECONDS);\n          case 'ttt':\n            return this.formatWithSystemDefault(dt, DateTime.TIME_WITH_SHORT_OFFSET);\n          case 'tttt':\n            return this.formatWithSystemDefault(dt, DateTime.TIME_WITH_LONG_OFFSET);\n          case 'T':\n            return this.formatWithSystemDefault(dt, DateTime.TIME_24_SIMPLE);\n          case 'TT':\n            return this.formatWithSystemDefault(dt, DateTime.TIME_24_WITH_SECONDS);\n          case 'TTT':\n            return this.formatWithSystemDefault(dt, DateTime.TIME_24_WITH_SHORT_OFFSET);\n          case 'TTTT':\n            return this.formatWithSystemDefault(dt, DateTime.TIME_24_WITH_LONG_OFFSET);\n          case 'f':\n            return this.formatWithSystemDefault(dt, DateTime.DATETIME_SHORT);\n          case 'ff':\n            return this.formatWithSystemDefault(dt, DateTime.DATETIME_MED);\n          case 'fff':\n            return this.formatWithSystemDefault(dt, DateTime.DATETIME_FULL);\n          case 'ffff':\n            return this.formatWithSystemDefault(dt, DateTime.DATETIME_HUGE);\n          case 'F':\n            return this.formatWithSystemDefault(dt, DateTime.DATETIME_SHORT_WITH_SECONDS);\n          case 'FF':\n            return this.formatWithSystemDefault(dt, DateTime.DATETIME_MED_WITH_SECONDS);\n          case 'FFF':\n            return this.formatWithSystemDefault(dt, DateTime.DATETIME_FULL_WITH_SECONDS);\n          case 'FFFF':\n            return this.formatWithSystemDefault(dt, DateTime.DATETIME_HUGE_WITH_SECONDS);\n\n          default:\n            return token;\n        }\n      };\n\n    return stringifyTokens(Formatter.parseFormat(fmt), tokenToString);\n  }\n\n  formatDurationFromString(dur, fmt) {\n    const tokenToField = token => {\n        switch (token[0]) {\n          case 'S':\n            return 'millisecond';\n          case 's':\n            return 'second';\n          case 'm':\n            return 'minute';\n          case 'h':\n            return 'hour';\n          case 'd':\n            return 'day';\n          case 'M':\n            return 'month';\n          case 'y':\n            return 'year';\n          default:\n            return null;\n        }\n      },\n      tokenToString = lildur => token => {\n        const mapped = tokenToField(token);\n        if (mapped) {\n          return this.num(lildur.get(mapped), token.length);\n        } else {\n          return token;\n        }\n      },\n      tokens = Formatter.parseFormat(fmt),\n      realTokens = tokens.reduce(\n        (found, { literal, val }) => (literal ? found : found.concat(val)),\n        []\n      ),\n      collapsed = dur.shiftTo(...realTokens.map(tokenToField).filter(t => t));\n    return stringifyTokens(tokens, tokenToString(collapsed));\n  }\n}\n","import { Util } from './util';\nimport { English } from './english';\nimport { Settings } from '../settings';\nimport { DateTime } from '../datetime';\nimport { Formatter } from './formatter';\n\nlet sysLocaleCache = null;\nfunction systemLocale() {\n  if (sysLocaleCache) {\n    return sysLocaleCache;\n  } else if (Util.hasIntl()) {\n    sysLocaleCache = new Intl.DateTimeFormat().resolvedOptions().locale;\n    return sysLocaleCache;\n  } else {\n    sysLocaleCache = 'en-US';\n    return sysLocaleCache;\n  }\n}\n\nfunction intlConfigString(locale, numberingSystem, outputCalendar) {\n  if (Util.hasIntl()) {\n    locale = Array.isArray(locale) ? locale : [locale];\n\n    if (outputCalendar || numberingSystem) {\n      locale = locale.map(l => {\n        l += '-u';\n\n        if (outputCalendar) {\n          l += '-ca-' + outputCalendar;\n        }\n\n        if (numberingSystem) {\n          l += '-nu-' + numberingSystem;\n        }\n        return l;\n      });\n    }\n    return locale;\n  } else {\n    return [];\n  }\n}\n\nfunction mapMonths(f) {\n  const ms = [];\n  for (let i = 1; i <= 12; i++) {\n    const dt = DateTime.utc(2016, i, 1);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction mapWeekdays(f) {\n  const ms = [];\n  for (let i = 1; i <= 7; i++) {\n    const dt = DateTime.utc(2016, 11, 13 + i);\n    ms.push(f(dt));\n  }\n  return ms;\n}\n\nfunction listStuff(loc, length, defaultOK, englishFn, intlFn) {\n  const mode = loc.listingMode(defaultOK);\n\n  if (mode === 'error') {\n    return null;\n  } else if (mode === 'en') {\n    return englishFn(length);\n  } else {\n    return intlFn(length);\n  }\n}\n\n/**\n * @private\n */\n\nclass PolyNumberFormatter {\n  constructor(opts) {\n    this.padTo = opts.padTo || 0;\n    this.round = opts.round || false;\n  }\n\n  format(i) {\n    const maybeRounded = this.round ? Math.round(i) : i;\n    return Util.padStart(maybeRounded.toString(), this.padTo);\n  }\n}\n\nclass PolyDateFormatter {\n  constructor(dt, intl, opts) {\n    this.opts = opts;\n    this.hasIntl = Util.hasIntl();\n\n    let z;\n    if (dt.zone.universal) {\n      // if we have a fixed-offset zone that isn't actually UTC,\n      // (like UTC+8), we need to make do with just displaying\n      // the time in UTC; the formatter doesn't know how to handle UTC+8\n      this.dt = dt.offset === 0 ? dt : DateTime.fromMillis(dt.ts + dt.offset * 60 * 1000);\n      z = 'UTC';\n    } else if (dt.zone.type === 'local') {\n      this.dt = dt;\n    } else {\n      this.dt = dt;\n      z = dt.zone.name;\n    }\n\n    if (this.hasIntl) {\n      const realIntlOpts = Object.assign({}, this.opts);\n      if (z) {\n        realIntlOpts.timeZone = z;\n      }\n      this.dtf = new Intl.DateTimeFormat(intl, realIntlOpts);\n    }\n  }\n\n  format() {\n    if (this.hasIntl) {\n      return this.dtf.format(this.dt.toJSDate());\n    } else {\n      const tokenFormat = English.formatString(this.opts),\n        loc = Locale.create('en-US');\n      return Formatter.create(loc).formatDateTimeFromString(this.dt, tokenFormat);\n    }\n  }\n\n  formatToParts() {\n    if (this.hasIntl && Util.hasFormatToParts()) {\n      return this.dtf.formatToParts(this.dt.toJSDate());\n    } else {\n      // This is kind of a cop out. We actually could do this for English. However, we couldn't do it for intl strings\n      // and IMO it's too weird to have an uncanny valley like that\n      return [];\n    }\n  }\n\n  resolvedOptions() {\n    if (this.hasIntl) {\n      return this.dtf.resolvedOptions();\n    } else {\n      return {\n        locale: 'en-US',\n        numberingSystem: 'latn',\n        outputCalendar: 'gregory'\n      };\n    }\n  }\n}\n\n/**\n * @private\n */\n\nexport class Locale {\n  static fromOpts(opts) {\n    return Locale.create(opts.locale, opts.numberingSystem, opts.outputCalendar, opts.defaultToEN);\n  }\n\n  static create(locale, numberingSystem, outputCalendar, defaultToEN = false) {\n    const specifiedLocale = locale || Settings.defaultLocale,\n      // the system locale is useful for human readable strings but annoying for parsing/formatting known formats\n      localeR = specifiedLocale || (defaultToEN ? 'en-US' : systemLocale()),\n      numberingSystemR = numberingSystem || Settings.defaultNumberingSystem,\n      outputCalendarR = outputCalendar || Settings.defaultOutputCalendar;\n    return new Locale(localeR, numberingSystemR, outputCalendarR, specifiedLocale);\n  }\n\n  static resetCache() {\n    sysLocaleCache = null;\n  }\n\n  static fromObject({ locale, numberingSystem, outputCalendar } = {}) {\n    return Locale.create(locale, numberingSystem, outputCalendar);\n  }\n\n  constructor(locale, numbering, outputCalendar, specifiedLocale) {\n    this.locale = locale;\n    this.numberingSystem = numbering;\n    this.outputCalendar = outputCalendar;\n    this.intl = intlConfigString(this.locale, this.numberingSystem, this.outputCalendar);\n\n    this.weekdaysCache = { format: {}, standalone: {} };\n    this.monthsCache = { format: {}, standalone: {} };\n    this.meridiemCache = null;\n    this.eraCache = {};\n\n    this.specifiedLocale = specifiedLocale;\n  }\n\n  // todo: cache me\n  listingMode(defaultOk = true) {\n    const hasIntl = Util.hasIntl(),\n      hasFTP = hasIntl && Util.hasFormatToParts(),\n      isActuallyEn =\n        this.locale === 'en' ||\n        this.locale.toLowerCase() === 'en-us' ||\n        (hasIntl &&\n          Intl.DateTimeFormat(this.intl)\n            .resolvedOptions()\n            .locale.startsWith('en-us')),\n      hasNoWeirdness =\n        (this.numberingSystem === null || this.numberingSystem === 'latn') &&\n        (this.outputCalendar === null || this.outputCalendar === 'gregory');\n\n    if (!hasFTP && !(isActuallyEn && hasNoWeirdness) && !defaultOk) {\n      return 'error';\n    } else if (!hasFTP || (isActuallyEn && hasNoWeirdness)) {\n      return 'en';\n    } else {\n      return 'intl';\n    }\n  }\n\n  clone(alts) {\n    if (!alts || Object.getOwnPropertyNames(alts).length === 0) {\n      return this;\n    } else {\n      return Locale.create(\n        alts.locale || this.specifiedLocale,\n        alts.numberingSystem || this.numberingSystem,\n        alts.outputCalendar || this.outputCalendar,\n        alts.defaultToEN || false\n      );\n    }\n  }\n\n  redefaultToEN(alts = {}) {\n    return this.clone(Object.assign({}, alts, { defaultToEN: true }));\n  }\n\n  redefaultToSystem(alts = {}) {\n    return this.clone(Object.assign({}, alts, { defaultToEN: false }));\n  }\n\n  months(length, format = false, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.months, () => {\n      const intl = format ? { month: length, day: 'numeric' } : { month: length },\n        formatStr = format ? 'format' : 'standalone';\n      if (!this.monthsCache[formatStr][length]) {\n        this.monthsCache[formatStr][length] = mapMonths(dt => this.extract(dt, intl, 'month'));\n      }\n      return this.monthsCache[formatStr][length];\n    });\n  }\n\n  weekdays(length, format = false, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.weekdays, () => {\n      const intl = format\n          ? { weekday: length, year: 'numeric', month: 'long', day: 'numeric' }\n          : { weekday: length },\n        formatStr = format ? 'format' : 'standalone';\n      if (!this.weekdaysCache[formatStr][length]) {\n        this.weekdaysCache[formatStr][length] = mapWeekdays(dt =>\n          this.extract(dt, intl, 'weekday')\n        );\n      }\n      return this.weekdaysCache[formatStr][length];\n    });\n  }\n\n  meridiems(defaultOK = true) {\n    return listStuff(\n      this,\n      undefined,\n      defaultOK,\n      () => English.meridiems,\n      () => {\n        // In theory there could be aribitrary day periods. We're gonna assume there are exactly two\n        // for AM and PM. This is probably wrong, but it's makes parsing way easier.\n        if (!this.meridiemCache) {\n          const intl = { hour: 'numeric', hour12: true };\n          this.meridiemCache = [\n            DateTime.utc(2016, 11, 13, 9),\n            DateTime.utc(2016, 11, 13, 19)\n          ].map(dt => this.extract(dt, intl, 'dayperiod'));\n        }\n\n        return this.meridiemCache;\n      }\n    );\n  }\n\n  eras(length, defaultOK = true) {\n    return listStuff(this, length, defaultOK, English.eras, () => {\n      const intl = { era: length };\n\n      // This is utter bullshit. Different calendars are going to define eras totally differently. What I need is the minimum set of dates\n      // to definitely enumerate them.\n      if (!this.eraCache[length]) {\n        this.eraCache[length] = [DateTime.utc(-40, 1, 1), DateTime.utc(2017, 1, 1)].map(dt =>\n          this.extract(dt, intl, 'era')\n        );\n      }\n\n      return this.eraCache[length];\n    });\n  }\n\n  extract(dt, intlOpts, field) {\n    const df = this.dtFormatter(dt, intlOpts),\n      results = df.formatToParts(),\n      matching = results.find(m => m.type.toLowerCase() === field);\n\n    return matching ? matching.value : null;\n  }\n\n  numberFormatter(opts = {}, intlOpts = {}) {\n    if (Util.hasIntl()) {\n      const realIntlOpts = Object.assign({ useGrouping: false }, intlOpts);\n\n      if (opts.padTo > 0) {\n        realIntlOpts.minimumIntegerDigits = opts.padTo;\n      }\n\n      if (opts.round) {\n        realIntlOpts.maximumFractionDigits = 0;\n      }\n\n      return new Intl.NumberFormat(this.intl, realIntlOpts);\n    } else {\n      return new PolyNumberFormatter(opts);\n    }\n  }\n\n  dtFormatter(dt, intlOpts = {}) {\n    return new PolyDateFormatter(dt, this.intl, intlOpts);\n  }\n\n  equals(other) {\n    return (\n      this.locale === other.locale &&\n      this.numberingSystem === other.numberingSystem &&\n      this.outputCalendar === other.outputCalendar\n    );\n  }\n}\n","import { LocalZone } from './zones/localZone';\nimport { Util } from './impl/util';\nimport { Locale } from './impl/locale';\n\nlet now = () => new Date().valueOf(),\n  defaultZone = null, // not setting this directly to LocalZone.instance bc loading order issues\n  defaultLocale = null,\n  defaultNumberingSystem = null,\n  defaultOutputCalendar = null,\n  throwOnInvalid = false;\n\n/**\n * Settings contains static getters and setters that control Luxon's overall behavior. Luxon is a simple library with few options, but the ones it does have live here.\n */\nexport class Settings {\n  /**\n   * Get the callback for returning the current timestamp.\n   * @type {function}\n   */\n  static get now() {\n    return now;\n  }\n\n  /**\n   * Set the callback for returning the current timestamp.\n   * @type {function}\n   */\n  static set now(n) {\n    now = n;\n  }\n\n  /**\n   * Get the default time zone to create DateTimes in.\n   * @type {string}\n   */\n  static get defaultZoneName() {\n    return (defaultZone || LocalZone.instance).name;\n  }\n\n  /**\n   * Set the default time zone to create DateTimes in. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultZoneName(z) {\n    defaultZone = Util.normalizeZone(z);\n  }\n\n  /**\n   * Get the default time zone object to create DateTimes in. Does not affect existing instances.\n   * @type {Zone}\n   */\n  static get defaultZone() {\n    return defaultZone || LocalZone.instance;\n  }\n\n  /**\n   * Get the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultLocale() {\n    return defaultLocale;\n  }\n\n  /**\n   * Set the default locale to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultLocale(locale) {\n    defaultLocale = locale;\n  }\n\n  /**\n   * Get the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultNumberingSystem() {\n    return defaultNumberingSystem;\n  }\n\n  /**\n   * Set the default numbering system to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultNumberingSystem(numberingSystem) {\n    defaultNumberingSystem = numberingSystem;\n  }\n\n  /**\n   * Get the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static get defaultOutputCalendar() {\n    return defaultOutputCalendar;\n  }\n\n  /**\n   * Set the default output calendar to create DateTimes with. Does not affect existing instances.\n   * @type {string}\n   */\n  static set defaultOutputCalendar(outputCalendar) {\n    defaultOutputCalendar = outputCalendar;\n  }\n\n  /**\n   * Get whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {Zone}\n   */\n  static get throwOnInvalid() {\n    return throwOnInvalid;\n  }\n\n  /**\n   * Set whether Luxon will throw when it encounters invalid DateTimes, Durations, or Intervals\n   * @type {Zone}\n   */\n  static set throwOnInvalid(t) {\n    throwOnInvalid = t;\n  }\n\n  /**\n   * Reset Luxon's global caches. Should only be necessary in testing scenarios.\n   * @return {void}\n   */\n  static resetCaches() {\n    Locale.resetCache();\n  }\n}\n","import { Duration } from '../duration';\nimport { DateTime } from '../datetime';\nimport { Zone } from '../zone';\nimport { LocalZone } from '../zones/localZone';\nimport { IANAZone } from '../zones/IANAZone';\nimport { FixedOffsetZone } from '../zones/fixedOffsetZone';\nimport { Settings } from '../settings';\nimport { InvalidArgumentError } from '../errors';\n\n/*\n  This is just a junk drawer, containing anything used across multiple classes.\n  Because Luxon is small(ish), this should stay small and we won't worry about splitting\n  it up into, say, parsingUtil.js and basicUtil.js and so on. But they are divided up by feature area.\n*/\n\n/**\n * @private\n */\n\nexport class Util {\n  // TYPES\n\n  static isUndefined(o) {\n    return typeof o === 'undefined';\n  }\n\n  static isNumber(o) {\n    return typeof o === 'number';\n  }\n\n  static isString(o) {\n    return typeof o === 'string';\n  }\n\n  static isDate(o) {\n    return Object.prototype.toString.call(o) === '[object Date]';\n  }\n\n  // OBJECTS AND ARRAYS\n\n  static maybeArray(thing) {\n    return Array.isArray(thing) ? thing : [thing];\n  }\n\n  static bestBy(arr, by, compare) {\n    return arr.reduce((best, next) => {\n      const pair = [by(next), next];\n      if (!best) {\n        return pair;\n      } else if (compare.apply(null, [best[0], pair[0]]) === best[0]) {\n        return best;\n      } else {\n        return pair;\n      }\n    }, null)[1];\n  }\n\n  static pick(obj, keys) {\n    return keys.reduce((a, k) => {\n      a[k] = obj[k];\n      return a;\n    }, {});\n  }\n\n  // NUMBERS AND STRINGS\n\n  static numberBetween(thing, bottom, top) {\n    return Util.isNumber(thing) && thing >= bottom && thing <= top;\n  }\n\n  static padStart(input, n = 2) {\n    return ('0'.repeat(n) + input).slice(-n);\n  }\n\n  static parseMillis(fraction) {\n    if (fraction) {\n      const f = parseFloat('0.' + fraction) * 1000;\n      return Math.round(f);\n    } else {\n      return 0;\n    }\n  }\n\n  // DATE BASICS\n\n  static isLeapYear(year) {\n    return year % 4 === 0 && (year % 100 !== 0 || year % 400 === 0);\n  }\n\n  static daysInYear(year) {\n    return Util.isLeapYear(year) ? 366 : 365;\n  }\n\n  static daysInMonth(year, month) {\n    if (month === 2) {\n      return Util.isLeapYear(year) ? 29 : 28;\n    } else {\n      return [31, null, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][month - 1];\n    }\n  }\n\n  static untruncateYear(year) {\n    if (year > 99) {\n      return year;\n    } else return year > 60 ? 1900 + year : 2000 + year;\n  }\n\n  // PARSING\n\n  static parseZoneInfo(ts, offsetFormat, locale, timeZone = null) {\n    const date = new Date(ts),\n      intl = {\n        hour12: false,\n        year: 'numeric',\n        month: '2-digit',\n        day: '2-digit',\n        hour: '2-digit',\n        minute: '2-digit'\n      };\n\n    if (timeZone) {\n      intl.timeZone = timeZone;\n    }\n\n    const modified = Object.assign({ timeZoneName: offsetFormat }, intl),\n      hasIntl = Util.hasIntl();\n\n    if (hasIntl && Util.hasFormatToParts()) {\n      const parsed = new Intl.DateTimeFormat(locale, modified)\n        .formatToParts(date)\n        .find(m => m.type.toLowerCase() === 'timezonename');\n      return parsed ? parsed.value : null;\n    } else if (hasIntl) {\n      // this probably doesn't work for all locales\n      const without = new Intl.DateTimeFormat(locale, intl).format(date),\n        included = new Intl.DateTimeFormat(locale, modified).format(date),\n        diffed = included.substring(without.length),\n        trimmed = diffed.replace(/^[, ]+/, '');\n      return trimmed;\n    } else {\n      return null;\n    }\n  }\n\n  // signedOffset('-5', '30') -> -330\n  static signedOffset(offHourStr, offMinuteStr) {\n    const offHour = parseInt(offHourStr, 10) || 0,\n      offMin = parseInt(offMinuteStr, 10) || 0,\n      offMinSigned = offHour < 0 ? -offMin : offMin;\n    return offHour * 60 + offMinSigned;\n  }\n\n  // COERCION\n\n  static friendlyDuration(duration) {\n    if (Util.isNumber(duration)) {\n      return Duration.fromMillis(duration);\n    } else if (duration instanceof Duration) {\n      return duration;\n    } else if (duration instanceof Object) {\n      return Duration.fromObject(duration);\n    } else {\n      throw new InvalidArgumentError('Unknown duration argument');\n    }\n  }\n\n  static friendlyDateTime(dateTimeish) {\n    if (dateTimeish instanceof DateTime) {\n      return dateTimeish;\n    } else if (dateTimeish.valueOf && Util.isNumber(dateTimeish.valueOf())) {\n      return DateTime.fromJSDate(dateTimeish);\n    } else if (dateTimeish instanceof Object) {\n      return DateTime.fromObject(dateTimeish);\n    } else {\n      throw new InvalidArgumentError('Unknown datetime argument');\n    }\n  }\n\n  static normalizeZone(input) {\n    if (Util.isUndefined(input) || input === null) {\n      return LocalZone.instance;\n    } else if (input instanceof Zone) {\n      return input;\n    } else if (Util.isString(input)) {\n      const lowered = input.toLowerCase();\n      if (lowered === 'local') return LocalZone.instance;\n      else if (lowered === 'utc') return FixedOffsetZone.utcInstance;\n      else if (IANAZone.isValidSpecier(lowered)) return new IANAZone(input);\n      else return FixedOffsetZone.parseSpecifier(lowered) || Settings.defaultZone;\n    } else if (Util.isNumber(input)) {\n      return FixedOffsetZone.instance(input);\n    } else if (typeof input === 'object' && input.offset) {\n      // This is dumb, but the instanceof check above doesn't seem to really work\n      // so we're duck checking it\n      return input;\n    } else {\n      return Settings.defaultZone;\n    }\n  }\n\n  static normalizeObject(obj, normalizer, ignoreUnknown = false) {\n    const normalized = {};\n    for (const u in obj) {\n      if (obj.hasOwnProperty(u)) {\n        const v = obj[u];\n        if (v !== null && !Util.isUndefined(v) && !Number.isNaN(v)) {\n          const mapped = normalizer(u, ignoreUnknown);\n          if (mapped) {\n            normalized[mapped] = v;\n          }\n        }\n      }\n    }\n    return normalized;\n  }\n\n  static timeObject(obj) {\n    return Util.pick(obj, ['hour', 'minute', 'second', 'millisecond']);\n  }\n\n  // CAPABILITIES\n\n  static hasIntl() {\n    return typeof Intl !== 'undefined' && Intl.DateTimeFormat;\n  }\n\n  static hasFormatToParts() {\n    return !Util.isUndefined(Intl.DateTimeFormat.prototype.formatToParts);\n  }\n}\n","import { Util } from './util';\nimport { English } from './english';\nimport { FixedOffsetZone } from '../zones/fixedOffsetZone';\nimport { IANAZone } from '../zones/IANAZone';\n\n/*\nThis file handles parsing for well-specified formats. Here's how it works:\n * Two things go into parsing: a regex to match with and an extractor to take apart the groups in the match.\n * An extractor is just a function that takes a regex match array and returns a { year: ..., month: ... } object\n * parse() does the work of executing the regex and applying the extractor. It takes multiple regex/extractor pairs to try in sequence.\n * Extractors can take a \"cursor\" representing the offset in the match to look at. This makes it easy to combine extractors.\n * combineExtractors() does the work of combining them, keeping track of the cursor through multiple extractions.\n * Some extractions are super dumb and simpleParse and fromStrings help DRY them.\n*/\n\nfunction combineRegexes(...regexes) {\n  const full = regexes.reduce((f, r) => f + r.source, '');\n  return RegExp(`^${full}$`);\n}\n\nfunction combineExtractors(...extractors) {\n  return m =>\n    extractors\n      .reduce(\n        ([mergedVals, mergedZone, cursor], ex) => {\n          const [val, zone, next] = ex(m, cursor);\n          return [Object.assign(mergedVals, val), mergedZone || zone, next];\n        },\n        [{}, null, 1]\n      )\n      .slice(0, 2);\n}\n\nfunction parse(s, ...patterns) {\n  if (s == null) {\n    return [null, null];\n  }\n\n  for (const [regex, extractor] of patterns) {\n    const m = regex.exec(s);\n    if (m) {\n      return extractor(m);\n    }\n  }\n  return [null, null];\n}\n\nfunction simpleParse(...keys) {\n  return (match, cursor) => {\n    const ret = {};\n    let i;\n\n    for (i = 0; i < keys.length; i++) {\n      ret[keys[i]] = parseInt(match[cursor + i]);\n    }\n    return [ret, null, cursor + i];\n  };\n}\n\n// ISO and SQL parsing\nconst offsetRegex = /(?:(Z)|([+-]\\d\\d)(?::?(\\d\\d))?)/,\n  isoTimeBaseRegex = /(\\d\\d)(?::?(\\d\\d)(?::?(\\d\\d)(?:[.,](\\d{1,9}))?)?)?/,\n  isoTimeRegex = RegExp(`${isoTimeBaseRegex.source}${offsetRegex.source}?`),\n  isoTimeExtensionRegex = RegExp(`(?:T${isoTimeRegex.source})?`),\n  isoYmdRegex = /([+-]\\d{6}|\\d{4})(?:-?(\\d\\d)(?:-?(\\d\\d))?)?/,\n  isoWeekRegex = /(\\d{4})-?W(\\d\\d)-?(\\d)/,\n  isoOrdinalRegex = /(\\d{4})-?(\\d{3})/,\n  extractISOWeekData = simpleParse('weekYear', 'weekNumber', 'weekDay'),\n  extractISOOrdinalData = simpleParse('year', 'ordinal'),\n  sqlYmdRegex = /(\\d{4})-(\\d\\d)-(\\d\\d)/, // dumbed-down version of the ISO one\n  sqlTimeRegex = RegExp(\n    `${isoTimeBaseRegex.source} ?(?:${offsetRegex.source}|([a-zA-Z_]{1,256}/[a-zA-Z_]{1,256}))?`\n  ),\n  sqlTimeExtensionRegex = RegExp(`(?: ${sqlTimeRegex.source})?`);\n\nfunction extractISOYmd(match, cursor) {\n  const item = {\n    year: parseInt(match[cursor]),\n    month: parseInt(match[cursor + 1]) || 1,\n    day: parseInt(match[cursor + 2]) || 1\n  };\n\n  return [item, null, cursor + 3];\n}\n\nfunction extractISOTime(match, cursor) {\n  const item = {\n    hour: parseInt(match[cursor]) || 0,\n    minute: parseInt(match[cursor + 1]) || 0,\n    second: parseInt(match[cursor + 2]) || 0,\n    millisecond: Util.parseMillis(match[cursor + 3])\n  };\n\n  return [item, null, cursor + 4];\n}\n\nfunction extractISOOffset(match, cursor) {\n  const local = !match[cursor] && !match[cursor + 1],\n    fullOffset = Util.signedOffset(match[cursor + 1], match[cursor + 2]),\n    zone = local ? null : FixedOffsetZone.instance(fullOffset);\n  return [{}, zone, cursor + 3];\n}\n\nfunction extractIANAZone(match, cursor) {\n  const zone = match[cursor] ? new IANAZone(match[cursor]) : null;\n  return [{}, zone, cursor + 1];\n}\n\n// ISO duration parsing\n\nconst isoDuration = /^P(?:(?:(\\d{1,9})Y)?(?:(\\d{1,9})M)?(?:(\\d{1,9})D)?(?:T(?:(\\d{1,9})H)?(?:(\\d{1,9})M)?(?:(\\d{1,9})S)?)?|(\\d{1,9})W)$/;\n\nfunction extractISODuration(match) {\n  const [, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr, weekStr] = match;\n\n  return {\n    years: parseInt(yearStr),\n    months: parseInt(monthStr),\n    weeks: parseInt(weekStr),\n    days: parseInt(dayStr),\n    hours: parseInt(hourStr),\n    minutes: parseInt(minuteStr),\n    seconds: parseInt(secondStr)\n  };\n}\n\n// These are a little braindead. EDT *should* tell us that we're in, say, America/New_York\n// and not just that we're in -240 *right now*. But since I don't think these are used that often\n// I'm just going to ignore that\nconst obsOffsets = {\n  GMT: 0,\n  EDT: -4 * 60,\n  EST: -5 * 60,\n  CDT: -5 * 60,\n  CST: -6 * 60,\n  MDT: -6 * 60,\n  MST: -7 * 60,\n  PDT: -7 * 60,\n  PST: -8 * 60\n};\n\nfunction fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {\n  const result = {\n    year: yearStr.length === 2 ? Util.untruncateYear(parseInt(yearStr)) : parseInt(yearStr),\n    month:\n      monthStr.length === 2 ? parseInt(monthStr, 10) : English.monthsShort.indexOf(monthStr) + 1,\n    day: parseInt(dayStr),\n    hour: parseInt(hourStr),\n    minute: parseInt(minuteStr)\n  };\n\n  if (secondStr) result.second = parseInt(secondStr);\n  if (weekdayStr) {\n    result.weekday =\n      weekdayStr.length > 3\n        ? English.weekdaysLong.indexOf(weekdayStr) + 1\n        : English.weekdaysShort.indexOf(weekdayStr) + 1;\n  }\n\n  return result;\n}\n\n// RFC 2822/5322\nconst rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),\\s)?(\\d{1,2})\\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\s(\\d{2,4})\\s(\\d\\d):(\\d\\d)(?::(\\d\\d))?\\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|(?:([+-]\\d\\d)(\\d\\d)))$/;\n\nfunction extractRFC2822(match) {\n  const [\n      ,\n      weekdayStr,\n      dayStr,\n      monthStr,\n      yearStr,\n      hourStr,\n      minuteStr,\n      secondStr,\n      obsOffset,\n      milOffset,\n      offHourStr,\n      offMinuteStr\n    ] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n\n  let offset;\n  if (obsOffset) {\n    offset = obsOffsets[obsOffset];\n  } else if (milOffset) {\n    offset = 0;\n  } else {\n    offset = Util.signedOffset(offHourStr, offMinuteStr);\n  }\n\n  return [result, new FixedOffsetZone(offset)];\n}\n\nfunction preprocessRFC2822(s) {\n  // Remove comments and folding whitespace and replace multiple-spaces with a single space\n  return s\n    .replace(/\\([^)]*\\)|[\\n\\t]/g, ' ')\n    .replace(/(\\s\\s+)/g, ' ')\n    .trim();\n}\n\n// http date\n\nconst rfc1123 = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), (\\d\\d) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) (\\d{4}) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  rfc850 = /^(Monday|Tuesday|Wedsday|Thursday|Friday|Saturday|Sunday), (\\d\\d)-(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)-(\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) GMT$/,\n  ascii = /^(Mon|Tue|Wed|Thu|Fri|Sat|Sun) (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) ( \\d|\\d\\d) (\\d\\d):(\\d\\d):(\\d\\d) (\\d{4})$/;\n\nfunction extractRFC1123Or850(match) {\n  const [, weekdayStr, dayStr, monthStr, yearStr, hourStr, minuteStr, secondStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\nfunction extractASCII(match) {\n  const [, weekdayStr, monthStr, dayStr, hourStr, minuteStr, secondStr, yearStr] = match,\n    result = fromStrings(weekdayStr, yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr);\n  return [result, FixedOffsetZone.utcInstance];\n}\n\n/**\n * @private\n */\n\nexport class RegexParser {\n  static parseISODate(s) {\n    return parse(\n      s,\n      [\n        combineRegexes(isoYmdRegex, isoTimeExtensionRegex),\n        combineExtractors(extractISOYmd, extractISOTime, extractISOOffset)\n      ],\n      [\n        combineRegexes(isoWeekRegex, isoTimeExtensionRegex),\n        combineExtractors(extractISOWeekData, extractISOTime, extractISOOffset)\n      ],\n      [\n        combineRegexes(isoOrdinalRegex, isoTimeExtensionRegex),\n        combineExtractors(extractISOOrdinalData, extractISOTime)\n      ],\n      [combineRegexes(isoTimeRegex), combineExtractors(extractISOTime, extractISOOffset)]\n    );\n  }\n\n  static parseRFC2822Date(s) {\n    return parse(preprocessRFC2822(s), [rfc2822, extractRFC2822]);\n  }\n\n  static parseHTTPDate(s) {\n    return parse(\n      s,\n      [rfc1123, extractRFC1123Or850],\n      [rfc850, extractRFC1123Or850],\n      [ascii, extractASCII]\n    );\n  }\n\n  static parseISODuration(s) {\n    return parse(s, [isoDuration, extractISODuration]);\n  }\n\n  static parseSQL(s) {\n    return parse(\n      s,\n      [\n        combineRegexes(sqlYmdRegex, sqlTimeExtensionRegex),\n        combineExtractors(extractISOYmd, extractISOTime, extractISOOffset, extractIANAZone)\n      ],\n      [\n        combineRegexes(sqlTimeRegex),\n        combineExtractors(extractISOTime, extractISOOffset, extractIANAZone)\n      ]\n    );\n  }\n}\n","import { Util } from './impl/util';\nimport { Locale } from './impl/locale';\nimport { Formatter } from './impl/formatter';\nimport { RegexParser } from './impl/regexParser';\nimport { Settings } from './settings';\nimport { InvalidArgumentError, InvalidDurationError, InvalidUnitError } from './errors';\n\nconst INVALID = 'Invalid Duration';\n\n// unit conversion constants\nconst lowOrderMatrix = {\n    weeks: {\n      days: 7,\n      hours: 7 * 24,\n      minutes: 7 * 24 * 60,\n      seconds: 7 * 24 * 60 * 60,\n      milliseconds: 7 * 24 * 60 * 60 * 1000\n    },\n    days: {\n      hours: 24,\n      minutes: 24 * 60,\n      seconds: 24 * 60 * 60,\n      milliseconds: 24 * 60 * 60 * 1000\n    },\n    hours: { minutes: 60, seconds: 60 * 60, milliseconds: 60 * 60 * 1000 },\n    minutes: { seconds: 60, milliseconds: 60 * 1000 },\n    seconds: { milliseconds: 1000 }\n  },\n  casualMatrix = Object.assign(\n    {\n      years: {\n        months: 12,\n        weeks: 52,\n        days: 365,\n        hours: 365 * 24,\n        minutes: 365 * 24 * 60,\n        seconds: 365 * 24 * 60 * 60,\n        milliseconds: 365 * 24 * 60 * 60 * 1000\n      },\n      months: {\n        weeks: 4,\n        days: 30,\n        hours: 30 * 24,\n        minutes: 30 * 24 * 60,\n        seconds: 30 * 24 * 60 * 60,\n        milliseconds: 30 * 24 * 60 * 60 * 1000\n      }\n    },\n    lowOrderMatrix\n  ),\n  daysInYearAccurate = 146097.0 / 400,\n  daysInMonthAccurate = 146097.0 / 4800,\n  accurateMatrix = Object.assign(\n    {\n      years: {\n        months: 12,\n        weeks: daysInYearAccurate / 7,\n        days: daysInYearAccurate,\n        hours: daysInYearAccurate * 24,\n        minutes: daysInYearAccurate * 24 * 60,\n        seconds: daysInYearAccurate * 24 * 60 * 60,\n        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000\n      },\n      months: {\n        weeks: daysInMonthAccurate / 7,\n        days: daysInMonthAccurate,\n        hours: daysInYearAccurate * 24,\n        minutes: daysInYearAccurate * 24 * 60,\n        seconds: daysInYearAccurate * 24 * 60 * 60,\n        milliseconds: daysInYearAccurate * 24 * 60 * 60 * 1000\n      }\n    },\n    lowOrderMatrix\n  );\n\n// units ordered by size\nconst orderedUnits = [\n  'years',\n  'months',\n  'weeks',\n  'days',\n  'hours',\n  'minutes',\n  'seconds',\n  'milliseconds'\n];\n\n// clone really means \"create another instance just like this one, but with these changes\"\nfunction clone(dur, alts, clear = false) {\n  // deep merge for vals\n  const conf = {\n    values: clear ? alts.values : Object.assign(dur.values, alts.values || {}),\n    loc: dur.loc.clone(alts.loc),\n    conversionAccuracy: alts.conversionAccuracy || dur.conversionAccuracy\n  };\n  return new Duration(conf);\n}\n\n// some functions really care about the absolute value of a duration, so combined with\n// normalize() this tells us whether this duration is positive or negative\nfunction isHighOrderNegative(obj) {\n  // only rule is that the highest-order part must be non-negative\n  for (const k of orderedUnits) {\n    if (obj[k]) return obj[k] < 0;\n  }\n  return false;\n}\n\n/**\n * A Duration object represents a period of time, like \"2 months\" or \"1 day, 1 hour\". Conceptually, it's just a map of units to their quantities, accompanied by some additional configuration and methods for creating, parsing, interrogating, transforming, and formatting them. They can be used on their own or in conjunction with other Luxon types; for example, you can use {@link DateTime.plus} to add a Duration object to a DateTime, producing another DateTime.\n *\n * Here is a brief overview of commonly used methods and getters in Duration:\n *\n * * **Creation** To create a Duration, use {@link Duration#fromMillis}, {@link Duration#fromObject}, or {@link Duration#fromISO}.\n * * **Unit values** See the {@link years}, {@link months}, {@link weeks}, {@link days}, {@link hours}, {@link minutes}, {@link seconds}, {@link milliseconds} accessors.\n * * **Configuration** See  {@link locale} and {@link numberingSystem} accessors.\n * * **Transformation** To create new Durations out of old ones use {@link plus}, {@link minus}, {@link normalize}, {@link set}, {@link reconfigure}, {@link shiftTo}, and {@link negate}.\n * * **Output** To convert the Duration into other representations, see {@link as}, {@link toISO}, {@link toFormat}, and {@link toJSON}\n *\n * There's are more methods documented below. In addition, for more information on subtler topics like internationalization and validity, see the external documentation.\n */\nexport class Duration {\n  /**\n   * @private\n   */\n  constructor(config) {\n    const accurate = config.conversionAccuracy === 'longterm' || false;\n    /**\n     * @access private\n     */\n    this.values = config.values;\n    /**\n     * @access private\n     */\n    this.loc = config.loc || Locale.create();\n    /**\n     * @access private\n     */\n    this.conversionAccuracy = accurate ? 'longterm' : 'casual';\n    /**\n     * @access private\n     */\n    this.invalid = config.invalidReason || null;\n    /**\n     * @access private\n     */\n    this.matrix = accurate ? accurateMatrix : casualMatrix;\n  }\n\n  /**\n   * Create Duration from a number of milliseconds.\n   * @param {number} count of milliseconds\n   * @param {Object} opts - options for parsing\n   * @param {string} [obj.locale='en-US'] - the locale to use\n   * @param {string} obj.numberingSystem - the numbering system to use\n   * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  static fromMillis(count, opts) {\n    return Duration.fromObject(Object.assign({ milliseconds: count }, opts));\n  }\n\n  /**\n   * Create an DateTime from a Javascript object with keys like 'years' and 'hours'.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.years\n   * @param {number} obj.months\n   * @param {number} obj.weeks\n   * @param {number} obj.days\n   * @param {number} obj.hours\n   * @param {number} obj.minutes\n   * @param {number} obj.seconds\n   * @param {number} obj.milliseconds\n   * @param {string} [obj.locale='en-US'] - the locale to use\n   * @param {string} obj.numberingSystem - the numbering system to use\n   * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  static fromObject(obj) {\n    return new Duration({\n      values: Util.normalizeObject(obj, Duration.normalizeUnit, true),\n      loc: Locale.fromObject(obj),\n      conversionAccuracy: obj.conversionAccuracy\n    });\n  }\n\n  /**\n   * Create a DateTime from an ISO 8601 duration string.\n   * @param {string} text - text to parse\n   * @param {Object} opts - options for parsing\n   * @param {string} [obj.locale='en-US'] - the locale to use\n   * @param {string} obj.numberingSystem - the numbering system to use\n   * @param {string} [obj.conversionAccuracy='casual'] - the conversion system to use\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromISO('P3Y6M4DT12H30M5S').toObject() //=> { years: 3, months: 6, day: 4, hours: 12, minutes: 30, seconds: 5 }\n   * @example Duration.fromISO('PT23H').toObject() //=> { hours: 23 }\n   * @example Duration.fromISO('P5Y3M').toObject() //=> { years: 5, months: 3 }\n   * @return {Duration}\n   */\n  static fromISO(text, opts) {\n    const obj = Object.assign(RegexParser.parseISODuration(text), opts);\n    return Duration.fromObject(obj);\n  }\n\n  /**\n   * Create an invalid Duration.\n   * @param {string} reason - reason this is invalid\n   * @return {Duration}\n   */\n  static invalid(reason) {\n    if (!reason) {\n      throw new InvalidArgumentError('need to specify a reason the DateTime is invalid');\n    }\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDurationError(reason);\n    } else {\n      return new Duration({ invalidReason: reason });\n    }\n  }\n\n  /**\n   * @private\n   */\n  static normalizeUnit(unit, ignoreUnknown = false) {\n    const normalized = {\n      year: 'years',\n      years: 'years',\n      month: 'months',\n      months: 'months',\n      week: 'weeks',\n      weeks: 'weeks',\n      day: 'days',\n      days: 'days',\n      hour: 'hours',\n      hours: 'hours',\n      minute: 'minutes',\n      minutes: 'minutes',\n      second: 'seconds',\n      seconds: 'seconds',\n      millisecond: 'milliseconds',\n      milliseconds: 'milliseconds'\n    }[unit ? unit.toLowerCase() : unit];\n\n    if (!ignoreUnknown && !normalized) throw new InvalidUnitError(unit);\n\n    return normalized;\n  }\n\n  /**\n   * Get  the locale of a Duration, such 'en-GB'\n   * @return {string}\n   */\n  get locale() {\n    return this.loc.locale;\n  }\n\n  /**\n   * Get the numbering system of a Duration, such 'beng'. The numbering system is used when formatting the Duration\n   *\n   * @return {string}\n   */\n  get numberingSystem() {\n    return this.loc.numberingSystem;\n  }\n\n  /**\n   * Returns a string representation of this Duration formatted according to the specified format string.\n   * @param {string} fmt - the format string\n   * @param {object} opts - options\n   * @param {boolean} opts.round - round numerical values\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc, opts).formatDurationFromString(this, fmt)\n      : INVALID;\n  }\n\n  /**\n   * Returns a Javascript object with this Duration's values.\n   * @param opts - options for generating the object\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\n   * @example Duration.fromObject({ years: 1, days: 6, seconds: 2 }).toObject() //=> { years: 1, days: 6, seconds: 2 }\n   * @return {object}\n   */\n  toObject(opts = {}) {\n    if (!this.isValid) return {};\n\n    const base = Object.assign({}, this.values);\n\n    if (opts.includeConfig) {\n      base.conversionAccuracy = this.conversionAccuracy;\n      base.numberingSystem = this.loc.numberingSystem;\n      base.locale = this.loc.locale;\n    }\n    return base;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Duration.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Durations\n   * @example Duration.fromObject({ years: 3, seconds: 45 }).toISO() //=> 'P3YT45S'\n   * @example Duration.fromObject({ months: 4, seconds: 45 }).toISO() //=> 'P4MT45S'\n   * @example Duration.fromObject({ months: 5 }).toISO() //=> 'P5M'\n   * @example Duration.fromObject({ minutes: 5 }).toISO() //=> 'PT5M'\n   * @return {string}\n   */\n  toISO() {\n    // we could use the formatter, but this is an easier way to get the minimum string\n    if (!this.isValid) return null;\n\n    let s = 'P',\n      norm = this.normalize();\n\n    // ISO durations are always positive, so take the absolute value\n    norm = isHighOrderNegative(norm.values) ? norm.negate() : norm;\n\n    if (norm.years > 0) s += norm.years + 'Y';\n    if (norm.months > 0) s += norm.months + 'M';\n    if (norm.days > 0 || norm.weeks > 0) s += norm.days + norm.weeks * 7 + 'D';\n    if (norm.hours > 0 || norm.minutes > 0 || norm.seconds > 0 || norm.milliseconds > 0) s += 'T';\n    if (norm.hours > 0) s += norm.hours + 'H';\n    if (norm.minutes > 0) s += norm.minutes + 'M';\n    if (norm.seconds > 0) s += norm.seconds + 'S';\n    return s;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this Duration appropriate for use in debugging.\n   * @return {string}\n   */\n  toString() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns a string representation of this Duration appropriate for the REPL.\n   * @return {string}\n   */\n  inspect() {\n    if (this.isValid) {\n      return `Duration {\\n  values: ${this.toISO()},\\n  locale: ${this\n        .locale},\\n  conversionAccuracy: ${this.conversionAccuracy} }`;\n    } else {\n      return `Duration { Invalid, reason: ${this.invalidReason} }`;\n    }\n  }\n\n  /**\n   * Make this Duration longer by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|number|object} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = Util.friendlyDuration(duration),\n      result = {};\n\n    for (const k of orderedUnits) {\n      const val = dur.get(k) + this.get(k);\n      if (val !== 0) {\n        result[k] = val;\n      }\n    }\n\n    return clone(this, { values: result }, true);\n  }\n\n  /**\n   * Make this Duration shorter by the specified amount. Return a newly-constructed Duration.\n   * @param {Duration|number|object} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @return {Duration}\n   */\n  minus(duration) {\n    if (!this.isValid) return this;\n\n    const dur = Util.friendlyDuration(duration);\n    return this.plus(dur.negate());\n  }\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example Duration.fromObject({years: 2, days: 3}).years //=> 2\n   * @example Duration.fromObject({years: 2, days: 3}).months //=> 0\n   * @example Duration.fromObject({years: 2, days: 3}).days //=> 3\n   * @return {number}\n   */\n  get(unit) {\n    return this[Duration.normalizeUnit(unit)];\n  }\n\n  /**\n   * \"Set\" the values of specified units. Return a newly-constructed Duration.\n   * @param {object} values - a mapping of units to numbers\n   * @example dur.set({ years: 2017 })\n   * @example dur.set({ hours: 8, minutes: 30 })\n   * @return {Duration}\n   */\n  set(values) {\n    const mixed = Object.assign(this.values, Util.normalizeObject(values, Duration.normalizeUnit));\n    return clone(this, { values: mixed });\n  }\n\n  /**\n   * \"Set\" the locale and/or numberingSystem.  Returns a newly-constructed Duration.\n   * @example dur.reconfigure({ locale: 'en-GB' })\n   * @return {Duration}\n   */\n  reconfigure({ locale, numberingSystem, conversionAccuracy } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem }),\n      opts = { loc };\n\n    if (conversionAccuracy) {\n      opts.conversionAccuracy = conversionAccuracy;\n    }\n\n    return clone(this, opts);\n  }\n\n  /**\n   * Return the length of the duration in the specified unit.\n   * @param {string} unit - a unit such as 'minutes' or 'days'\n   * @example Duration.fromObject({years: 1}).as('days') //=> 365\n   * @example Duration.fromObject({years: 1}).as('months') //=> 12\n   * @example Duration.fromObject({hours: 60}).as('days') //=> 2.5\n   * @return {number}\n   */\n  as(unit) {\n    return this.isValid ? this.shiftTo(unit).get(unit) : NaN;\n  }\n\n  /**\n   * Reduce this Duration to its canonical representation in its current units.\n   * @example Duration.fromObject({ years: 2, days: 5000 }).normalize().toObject() //=> { years: 15, days: 255 }\n   * @example Duration.fromObject({ hours: 12, minutes: -45 }).normalize().toObject() //=> { hours: 11, minutes: 15 }\n   * @return {Duration}\n   */\n  normalize() {\n    if (!this.isValid) return this;\n\n    const neg = isHighOrderNegative(this.values),\n      dur = neg ? this.negate() : this,\n      shifted = dur.shiftTo(...Object.keys(this.values));\n    return neg ? shifted.negate() : shifted;\n  }\n\n  /**\n   * Convert this Duration into its representation in a different set of units.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).shiftTo('minutes', 'milliseconds').toObject() //=> { minutes: 60, milliseconds: 30000 }\n   * @return {Duration}\n   */\n  shiftTo(...units) {\n    if (!this.isValid) return this;\n\n    if (units.length === 0) {\n      return this;\n    }\n\n    units = units.map(u => Duration.normalizeUnit(u));\n\n    const built = {},\n      accumulated = {},\n      vals = this.toObject();\n    let lastUnit;\n\n    for (const k of orderedUnits) {\n      if (units.indexOf(k) >= 0) {\n        lastUnit = k;\n\n        let own = 0;\n\n        // anything we haven't boiled down yet should get boiled to this unit\n        for (const ak in accumulated) {\n          if (accumulated.hasOwnProperty(ak)) {\n            own += this.matrix[ak][k] * accumulated[ak];\n            accumulated[ak] = 0;\n          }\n        }\n\n        // plus anything that's already in this unit\n        if (Util.isNumber(vals[k])) {\n          own += vals[k];\n        }\n\n        const i = Math.trunc(own);\n        built[k] = i;\n        accumulated[k] = own - i;\n\n        // plus anything further down the chain that should be rolled up in to this\n        for (const down in vals) {\n          if (orderedUnits.indexOf(down) > orderedUnits.indexOf(k)) {\n            const conv = this.matrix[k][down],\n              added = Math.floor(vals[down] / conv);\n            built[k] += added;\n            vals[down] -= added * conv;\n          }\n        }\n        // otherwise, keep it in the wings to boil it later\n      } else if (Util.isNumber(vals[k])) {\n        accumulated[k] = vals[k];\n      }\n    }\n\n    // anything leftover becomes the decimal for the last unit\n    if (lastUnit) {\n      for (const key in accumulated) {\n        if (accumulated.hasOwnProperty(key)) {\n          if (accumulated[key] > 0) {\n            built[lastUnit] +=\n              key === lastUnit ? accumulated[key] : accumulated[key] / this.matrix[lastUnit][key];\n          }\n        }\n      }\n    }\n    return clone(this, { values: built }, true);\n  }\n\n  /**\n   * Return the negative of this Duration.\n   * @example Duration.fromObject({ hours: 1, seconds: 30 }).negate().toObject() //=> { hours: -1, seconds: -30 }\n   * @return {Duration}\n   */\n  negate() {\n    if (!this.isValid) return this;\n    const negated = {};\n    for (const k of Object.keys(this.values)) {\n      negated[k] = -this.values[k];\n    }\n    return clone(this, { values: negated });\n  }\n\n  /**\n   * Get the years.\n   * @return {number}\n   */\n  get years() {\n    return this.isValid ? this.values.years || 0 : NaN;\n  }\n\n  /**\n   * Get the months.\n   * @return {number}\n   */\n  get months() {\n    return this.isValid ? this.values.months || 0 : NaN;\n  }\n\n  /**\n   * Get the weeks\n   * @return {number}\n   */\n  get weeks() {\n    return this.isValid ? this.values.weeks || 0 : NaN;\n  }\n\n  /**\n   * Get the days.\n   * @return {number}\n   */\n  get days() {\n    return this.isValid ? this.values.days || 0 : NaN;\n  }\n\n  /**\n   * Get the hours.\n   * @return {number}\n   */\n  get hours() {\n    return this.isValid ? this.values.hours || 0 : NaN;\n  }\n\n  /**\n   * Get the minutes.\n   * @return {number}\n   */\n  get minutes() {\n    return this.isValid ? this.values.minutes || 0 : NaN;\n  }\n\n  /**\n   * Get the seconds.\n   * @return {number}\n   */\n  get seconds() {\n    return this.isValid ? this.values.seconds || 0 : NaN;\n  }\n\n  /**\n   * Get the milliseconds.\n   * @return {number}\n   */\n  get milliseconds() {\n    return this.isValid ? this.values.milliseconds || 0 : NaN;\n  }\n\n  /**\n   * Returns whether the Duration is invalid. Invalid durations are returned by diff operations\n   * on invalid DateTimes or Intervals.\n   * @return {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an explanation of why this Duration became invalid, or null if the Duration is valid\n   * @return {string}\n   */\n  get invalidReason() {\n    return this.invalid;\n  }\n\n  /**\n   * Equality check\n   * Two Durations are equal iff they have the same units and the same values for each unit.\n   * @param {Duration} other\n   * @return {boolean}\n   */\n  equals(other) {\n    if (!this.isValid || !other.isValid) {\n      return false;\n    }\n\n    if (!this.loc.equals(other.loc)) {\n      return false;\n    }\n\n    for (const u of orderedUnits) {\n      if (this.values[u] !== other.values[u]) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { Util } from './impl/util';\nimport { DateTime } from './datetime';\nimport { Duration } from './duration';\nimport { Settings } from './settings';\nimport { InvalidArgumentError, InvalidIntervalError } from './errors';\n\nconst INVALID = 'Invalid Interval';\n\n// checks if the start is equal to or before the end\nfunction validateStartEnd(start, end) {\n  return !!start && !!end && start.isValid && end.isValid && start <= end;\n}\n\n/**\n * An Interval object represents a half-open interval of time, where each endpoint is a {@link DateTime}. Conceptually, it's a container for those two endpoints, accompanied by methods for creating, parsing, interrogating, comparing, transforming, and formatting them.\n *\n * Here is a brief overview of the most commonly used methods and getters in Interval:\n *\n * * **Creation** To create an Interval, use {@link fromDateTimes}, {@link after}, {@link before}, or {@link fromISO}.\n * * **Accessors** Use {@link start} and {@link end} to get the start and end.\n * * **Interogation** To analyze the Interval, use {@link count}, {@link length}, {@link hasSame}, {@link contains}, {@link isAfter}, or {@link isBefore}.\n * * **Transformation** To create other Intervals out of this one, use {@link set}, {@link splitAt}, {@link splitBy}, {@link divideEqually}, {@link merge}, {@link xor}, {@link union}, {@link intersection}, or {@link difference}.\n * * **Comparison** To compare this Interval to another one, use {@link equals}, {@link overlaps}, {@link abutsStart}, {@link abutsEnd}, {@link engulfs}\n * * **Output*** To convert the Interval into other representations, see {@link toString}, {@link toISO}, {@link toFormat}, and {@link toDuration}.\n */\nexport class Interval {\n  /**\n   * @private\n   */\n  constructor(config) {\n    /**\n     * @access private\n     */\n    this.s = config.start;\n    /**\n     * @access private\n     */\n    this.e = config.end;\n    /**\n     * @access private\n     */\n    this.invalid = config.invalidReason || null;\n  }\n\n  /**\n   * Create an invalid Interval.\n   * @return {Interval}\n   */\n  static invalid(reason) {\n    if (!reason) {\n      throw new InvalidArgumentError('need to specify a reason the DateTime is invalid');\n    }\n    if (Settings.throwOnInvalid) {\n      throw new InvalidIntervalError(reason);\n    } else {\n      return new Interval({ invalidReason: reason });\n    }\n  }\n\n  /**\n   * Create an Interval from a start DateTime and an end DateTime. Inclusive of the start but not the end.\n   * @param {DateTime|object|Date} start\n   * @param {DateTime|object|Date} end\n   * @return {Interval}\n   */\n  static fromDateTimes(start, end) {\n    const builtStart = Util.friendlyDateTime(start),\n      builtEnd = Util.friendlyDateTime(end);\n\n    return new Interval({\n      start: builtStart,\n      end: builtEnd,\n      invalidReason: validateStartEnd(builtStart, builtEnd) ? null : 'invalid endpoints'\n    });\n  }\n\n  /**\n   * Create an Interval from a start DateTime and a Duration to extend to.\n   * @param {DateTime|object|Date} start\n   * @param {Duration|number|object} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static after(start, duration) {\n    const dur = Util.friendlyDuration(duration),\n      dt = Util.friendlyDateTime(start);\n    return Interval.fromDateTimes(dt, dt.plus(dur));\n  }\n\n  /**\n   * Create an Interval from an end DateTime and a Duration to extend backwards to.\n   * @param {DateTime|object|Date} end\n   * @param {Duration|number|object} duration - the length of the Interval.\n   * @return {Interval}\n   */\n  static before(end, duration) {\n    const dur = Util.friendlyDuration(duration),\n      dt = Util.friendlyDateTime(end);\n    return Interval.fromDateTimes(dt.minus(dur), dt);\n  }\n\n  /**\n   * Create an Interval from an ISO 8601 string\n   * @param {string} string - the ISO string to parse\n   * @param {object} opts - options to pass {@see DateTime.fromISO}\n   * @return {Interval}\n   */\n  static fromISO(string, opts) {\n    if (string) {\n      const [s, e] = string.split(/\\//);\n      if (s && e) {\n        return Interval.fromDateTimes(DateTime.fromISO(s, opts), DateTime.fromISO(e, opts));\n      }\n    }\n    return Interval.invalid('invalid ISO format');\n  }\n\n  /**\n   * Returns the start of the Interval\n   * @return {DateTime}\n   */\n  get start() {\n    return this.isValid ? this.s : null;\n  }\n\n  /**\n   * Returns the end of the Interval\n   * @return {DateTime}\n   */\n  get end() {\n    return this.isValid ? this.e : null;\n  }\n\n  /**\n   * Returns whether this Interval's end is at least its start, i.e. that the Interval isn't 'backwards'.\n   * @return {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an explanation of why this Interval became invalid, or null if the Interval is valid\n   * @return {string}\n   */\n  get invalidReason() {\n    return this.invalid;\n  }\n\n  /**\n   * Returns the length of the Interval in the specified unit.\n   * @param {string} unit - the unit (such as 'hours' or 'days') to return the length in.\n   * @return {number}\n   */\n  length(unit = 'milliseconds') {\n    return this.isValid ? this.toDuration(...[unit]).get(unit) : NaN;\n  }\n\n  /**\n   * Returns the count of minutes, hours, days, months, or years included in the Interval, even in part.\n   * Unlike {@link length} this counts sections of the calendar, not periods of time, e.g. specifying 'day'\n   * asks 'what dates are included in this interval?', not 'how many days long is this interval?'\n   * @param {string} [unit='milliseconds'] - the unit of time to count.\n   * @return {number}\n   */\n  count(unit = 'milliseconds') {\n    if (!this.isValid) return NaN;\n    const start = this.start.startOf(unit),\n      end = this.end.startOf(unit);\n    return Math.floor(end.diff(start, unit).get(unit)) + 1;\n  }\n\n  /**\n   * Returns whether this Interval's start and end are both in the same unit of time\n   * @param {string} unit - the unit of time to check sameness on\n   * @return {boolean}\n   */\n  hasSame(unit) {\n    return this.isValid ? this.e.minus(1).hasSame(this.s, unit) : false;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end DateTimes.\n   * @return {boolean}\n   */\n  isEmpty() {\n    return this.s.valueOf() === this.e.valueOf();\n  }\n\n  /**\n   * Return this Interval's start is after the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  isAfter(dateTime) {\n    if (!this.isValid) return false;\n    return this.s > dateTime;\n  }\n\n  /**\n   * Return this Interval's end is before the specified DateTime.\n   * @param {Datetime} dateTime\n   * @return {boolean}\n   */\n  isBefore(dateTime) {\n    if (!this.isValid) return false;\n    return this.e.plus(1) < dateTime;\n  }\n\n  /**\n   * Return this Interval contains the specified DateTime.\n   * @param {DateTime} dateTime\n   * @return {boolean}\n   */\n  contains(dateTime) {\n    if (!this.isValid) return false;\n    return this.s <= dateTime && this.e > dateTime;\n  }\n\n  /**\n   * \"Sets\" the start and/or end dates. Returns a newly-constructed Interval.\n   * @param {object} values - the values to set\n   * @param {DateTime} values.start - the starting DateTime\n   * @param {DateTime} values.end - the ending DateTime\n   * @return {Interval}\n   */\n  set({ start, end } = {}) {\n    if (!this.isValid) return this;\n    return Interval.fromDateTimes(start || this.s, end || this.e);\n  }\n\n  /**\n   * Split this Interval at each of the specified DateTimes\n   * @param {...DateTimes} dateTimes - the unit of time to count.\n   * @return {[Interval]}\n   */\n  splitAt(...dateTimes) {\n    if (!this.isValid) return [];\n    const sorted = dateTimes.map(Util.friendlyDateTime).sort(),\n      results = [];\n    let { s } = this,\n      i = 0;\n\n    while (s < this.e) {\n      const added = sorted[i] || this.e,\n        next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n      i += 1;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into smaller Intervals, each of the specified length.\n   * Left over time is grouped into a smaller interval\n   * @param {Duration|number|object} duration - The length of each resulting interval.\n   * @return {[Interval]}\n   */\n  splitBy(duration) {\n    if (!this.isValid) return [];\n    const dur = Util.friendlyDuration(duration),\n      results = [];\n    let { s } = this,\n      added,\n      next;\n\n    while (s < this.e) {\n      added = s.plus(dur);\n      next = +added > +this.e ? this.e : added;\n      results.push(Interval.fromDateTimes(s, next));\n      s = next;\n    }\n\n    return results;\n  }\n\n  /**\n   * Split this Interval into the specified number of smaller intervals.\n   * @param {number} numberOfParts - The number of Intervals to divide the Interval into.\n   * @return {[Interval]}\n   */\n  divideEqually(numberOfParts) {\n    if (!this.isValid) return [];\n    return this.splitBy(this.length() / numberOfParts).slice(0, numberOfParts);\n  }\n\n  /**\n   * Return whether this Interval overlaps with the specified Interval\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  overlaps(other) {\n    return this.e > other.s && this.s < other.e;\n  }\n\n  /**\n   * Return whether this Interval's end is adjacent to the specified Interval's start.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsStart(other) {\n    if (!this.isValid) return false;\n    return +this.e === +other.s;\n  }\n\n  /**\n   * Return whether this Interval's start is adjacent to the specified Interval's end.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  abutsEnd(other) {\n    if (!this.isValid) return false;\n    return +other.e === +this.s;\n  }\n\n  /**\n   * Return whether this Interval engulfs the start and end of the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  engulfs(other) {\n    if (!this.isValid) return false;\n    return this.s <= other.s && this.e >= other.e;\n  }\n\n  /**\n   * Return whether this Interval has the same start and end as the specified Interval.\n   * @param {Interval} other\n   * @return {boolean}\n   */\n  equals(other) {\n    return this.s.equals(other.s) && this.e.equals(other.e);\n  }\n\n  /**\n   * Return an Interval representing the intersection of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the maximum start time and the minimum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  intersection(other) {\n    if (!this.isValid) return this;\n    const s = this.s > other.s ? this.s : other.s,\n      e = this.e < other.e ? this.e : other.e;\n\n    if (s > e) {\n      return null;\n    } else {\n      return Interval.fromDateTimes(s, e);\n    }\n  }\n\n  /**\n   * Return an Interval representing the union of this Interval and the specified Interval.\n   * Specifically, the resulting Interval has the minimum start time and the maximum end time of the two Intervals.\n   * @param {Interval} other\n   * @return {Interval}\n   */\n  union(other) {\n    if (!this.isValid) return this;\n    const s = this.s < other.s ? this.s : other.s,\n      e = this.e > other.e ? this.e : other.e;\n    return Interval.fromDateTimes(s, e);\n  }\n\n  /**\n   * Merge an array of Intervals into a equivalent minimal set of Intervals.\n   * Combines overlapping and adjacent Intervals.\n   * @param {[Interval]} intervals\n   * @return {[Interval]}\n   */\n  static merge(intervals) {\n    const [found, final] = intervals.sort((a, b) => a.s - b.s).reduce(([sofar, current], item) => {\n      if (!current) {\n        return [sofar, item];\n      } else if (current.overlaps(item) || current.abutsStart(item)) {\n        return [sofar, current.union(item)];\n      } else {\n        return [sofar.concat([current]), item];\n      }\n    },\n    [[], null]);\n    if (final) {\n      found.push(final);\n    }\n    return found;\n  }\n\n  /**\n   * Return an array of Intervals representing the spans of time that only appear in one of the specified Intervals.\n   * @param {[Interval]} intervals\n   * @return {[Interval]}\n   */\n  static xor(intervals) {\n    let start = null,\n      currentCount = 0;\n    const results = [],\n      ends = intervals.map(i => [{ time: i.s, type: 's' }, { time: i.e, type: 'e' }]),\n      flattened = Array.prototype.concat(...ends),\n      arr = flattened.sort((a, b) => a.time - b.time);\n\n    for (const i of arr) {\n      currentCount += i.type === 's' ? 1 : -1;\n\n      if (currentCount === 1) {\n        start = i.time;\n      } else {\n        if (start && +start !== +i.time) {\n          results.push(Interval.fromDateTimes(start, i.time));\n        }\n\n        start = null;\n      }\n    }\n\n    return Interval.merge(results);\n  }\n\n  /**\n   * Return an Interval representing the span of time in this Interval that doesn't overlap with any of the specified Intervals.\n   * @param {...Interval} intervals\n   * @return {Interval}\n   */\n  difference(...intervals) {\n    return Interval.xor([this].concat(intervals))\n      .map(i => this.intersection(i))\n      .filter(i => i && !i.isEmpty());\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for debugging.\n   * @return {string}\n   */\n  toString() {\n    if (!this.isValid) return INVALID;\n    return `[${this.s.toISO()} – ${this.e.toISO()})`;\n  }\n\n  /**\n   * Returns a string representation of this Interval appropriate for the REPL.\n   * @return {string}\n   */\n  inspect() {\n    if (this.isValid) {\n      return `Interval {\\n  start: ${this.start.toISO()},\\n  end: ${this.end.toISO()},\\n  zone:   ${this\n        .start.zone.name},\\n  locale:   ${this.start.locale} }`;\n    } else {\n      return `Interval { Invalid, reason: ${this.invalidReason} }`;\n    }\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this Interval.\n   * @see https://en.wikipedia.org/wiki/ISO_8601#Time_intervals\n   * @param {object} opts - The same options as {@link DateTime.toISO}\n   * @return {string}\n   */\n  toISO(opts) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toISO(opts)}/${this.e.toISO(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this Interval formatted according to the specified format string.\n   * @param {string} dateFormat - the format string. This string formats the start and end time. See {@link DateTime.toFormat} for details.\n   * @param {object} opts - options\n   * @param {string} [opts.separator =  ' – '] - a separator to place between the start and end representations\n   * @return {string}\n   */\n  toFormat(dateFormat, { separator = ' – ' } = {}) {\n    if (!this.isValid) return INVALID;\n    return `${this.s.toFormat(dateFormat)}${separator}${this.e.toFormat(dateFormat)}`;\n  }\n\n  /**\n   * Return a Duration representing the time spanned by this interval.\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration().toObject() //=> { milliseconds: 88489257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('days').toObject() //=> { days: 1.0241812152777778 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes']).toObject() //=> { hours: 24, minutes: 34.82095 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration(['hours', 'minutes', 'seconds']).toObject() //=> { hours: 24, minutes: 34, seconds: 49.257 }\n   * @example Interval.fromDateTimes(dt1, dt2).toDuration('seconds').toObject() //=> { seconds: 88489.257 }\n   * @return {Duration}\n   */\n  toDuration(unit, opts) {\n    if (!this.isValid) {\n      return Duration.invalid(this.invalidReason);\n    }\n    return this.e.diff(this.s, unit, opts);\n  }\n}\n","import { DateTime } from './datetime';\nimport { Settings } from './settings';\nimport { Locale } from './impl/locale';\nimport { Util } from './impl/util';\n\n/**\n * The Info class contains static methods for retrieving general time and date related data. For example, it has methods for finding out if a time zone has a DST, for listing the months in any supported locale, and for discovering which of Luxon features are available in the current environment.\n */\nexport class Info {\n  /**\n   * Return whether the specified zone contains a DST.\n   * @param {string|Zone} [zone='local'] - Zone to check. Defaults to the environment's local zone.\n   * @return {boolean}\n   */\n  static hasDST(zone = Settings.defaultZone) {\n    const proto = DateTime.local()\n      .setZone(zone)\n      .set({ month: 12 });\n\n    return !zone.universal && proto.offset !== proto.set({ month: 6 }).offset;\n  }\n\n  /**\n   * Return an array of standalone month names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numberingSystem=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @example Info.months()[0] //=> 'January'\n   * @example Info.months('short')[0] //=> 'Jan'\n   * @example Info.months('numeric')[0] //=> '1'\n   * @example Info.months('short', { locale: 'fr-CA' } )[0] //=> 'janv.'\n   * @example Info.months('numeric', { locale: 'ar' })[0] //=> '١'\n   * @example Info.months('long', { outputCalendar: 'islamic' })[0] //=> 'Rabiʻ I'\n   * @return {[string]}\n   */\n  static months(\n    length = 'long',\n    { locale = null, numberingSystem = null, outputCalendar = 'gregory' } = {}\n  ) {\n    return Locale.create(locale, numberingSystem, outputCalendar).months(length);\n  }\n\n  /**\n   * Return an array of format month names.\n   * Format months differ from standalone months in that they're meant to appear next to the day of the month. In some languages, that\n   * changes the string.\n   * See {@link months}\n   * @param {string} [length='long'] - the length of the month representation, such as \"numeric\", \"2-digit\", \"narrow\", \"short\", \"long\"\n   * @param {object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numbering=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @return {[string]}\n   */\n  static monthsFormat(\n    length = 'long',\n    { locale = null, numberingSystem = null, outputCalendar = 'gregory' } = {}\n  ) {\n    return Locale.create(locale, numberingSystem, outputCalendar).months(length, true);\n  }\n\n  /**\n   * Return an array of standalone week names.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param {string} [length='long'] - the length of the month representation, such as \"narrow\", \"short\", \"long\".\n   * @param {object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @param {string} [opts.numbering=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @example Info.weekdays()[0] //=> 'Monday'\n   * @example Info.weekdays('short')[0] //=> 'Mon'\n   * @example Info.weekdays('short', { locale: 'fr-CA' })[0] //=> 'lun.'\n   * @example Info.weekdays('short', { locale: 'ar' })[0] //=> 'الاثنين'\n   * @return {[string]}\n   */\n  static weekdays(length = 'long', { locale = null, numberingSystem = null } = {}) {\n    return Locale.create(locale, numberingSystem, null).weekdays(length);\n  }\n\n  /**\n   * Return an array of format week names.\n   * Format weekdays differ from standalone weekdays in that they're meant to appear next to more date information. In some languages, that\n   * changes the string.\n   * See {@link weekdays}\n   * @param {string} [length='long'] - the length of the month representation, such as \"narrow\", \"short\", \"long\".\n   * @param {object} opts - options\n   * @param {string} [opts.locale=null] - the locale code\n   * @param {string} [opts.numbering=null] - the numbering system\n   * @param {string} [opts.outputCalendar='gregory'] - the calendar\n   * @return {[string]}\n   */\n  static weekdaysFormat(length = 'long', { locale = null, numberingSystem = null } = {}) {\n    return Locale.create(locale, numberingSystem, null).weekdays(length, true);\n  }\n\n  /**\n   * Return an array of meridiems.\n   * @param {object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @example Info.meridiems() //=> [ 'AM', 'PM' ]\n   * @example Info.meridiems({ locale: 'de' }) //=> [ 'vorm.', 'nachm.' ]\n   * @return {[string]}\n   */\n  static meridiems({ locale = null } = {}) {\n    return Locale.create(locale).meridiems();\n  }\n\n  /**\n   * Return an array of eras, such as ['BC', 'AD']. The locale can be specified, but the calendar system is always Gregorian.\n   * @param {string} [length='short'] - the length of the era representation, such as \"short\" or \"long\".\n   * @param {object} opts - options\n   * @param {string} [opts.locale] - the locale code\n   * @example Info.eras() //=> [ 'BC', 'AD' ]\n   * @example Info.eras('long') //=> [ 'Before Christ', 'Anno Domini' ]\n   * @example Info.eras('long', { locale: 'fr' }) //=> [ 'avant Jésus-Christ', 'après Jésus-Christ' ]\n   * @return {[string]}\n   */\n  static eras(length = 'short', { locale = null } = {}) {\n    return Locale.create(locale, null, 'gregory').eras(length);\n  }\n\n  /**\n   * Return the set of available features in this environment.\n   * Some features of Luxon are not available in all environments. For example, on older browsers, timezone support is not available. Use this function to figure out if that's the case.\n   * Keys:\n   * * `timezones`: whether this environment supports IANA timezones\n   * * `intlTokens`: whether this environment supports internationalized token-based formatting/parsing\n   * * `intl`: whether this environment supports general internationalization\n   * @example Info.feature() //=> { intl: true, intlTokens: false, timezones: true }\n   * @return {object}\n   */\n  static features() {\n    let intl = false,\n      intlTokens = false,\n      zones = false;\n\n    if (Util.hasIntl()) {\n      intl = true;\n      intlTokens = Util.hasFormatToParts();\n\n      try {\n        zones =\n          new Intl.DateTimeFormat('en', { timeZone: 'America/New_York' }).resolvedOptions()\n            .timeZone === 'America/New_York';\n      } catch (e) {\n        zones = false;\n      }\n    }\n\n    return { intl, intlTokens, zones };\n  }\n}\n","import { Util } from './util';\nimport { Formatter } from './formatter';\nimport { FixedOffsetZone } from '../zones/fixedOffsetZone';\nimport { IANAZone } from '../zones/IANAZone';\n\nconst MISSING_FTP = 'missing Intl.DateTimeFormat.formatToParts support';\n\nfunction intUnit(regex, post = i => i) {\n  return { regex, deser: ([s]) => post(parseInt(s)) };\n}\n\nfunction fixListRegex(s) {\n  // make dots optional and also make them literal\n  return s.replace(/\\./, '\\\\.?');\n}\n\nfunction stripInsensitivities(s) {\n  return s.replace(/\\./, '').toLowerCase();\n}\n\nfunction oneOf(strings, startIndex) {\n  if (strings === null) {\n    return null;\n  } else {\n    return {\n      regex: RegExp(strings.map(fixListRegex).join('|')),\n      deser: ([s]) =>\n        strings.findIndex(i => stripInsensitivities(s) === stripInsensitivities(i)) + startIndex\n    };\n  }\n}\n\nfunction offset(regex, groups) {\n  return { regex, deser: ([, h, m]) => Util.signedOffset(h, m), groups };\n}\n\nfunction simple(regex) {\n  return { regex, deser: ([s]) => s };\n}\n\nfunction unitForToken(token, loc) {\n  const one = /\\d/,\n    two = /\\d{2}/,\n    three = /\\d{3}/,\n    four = /\\d{4}/,\n    oneOrTwo = /\\d{1,2}/,\n    oneToThree = /\\d{1,3}/,\n    twoToFour = /\\d{2,4}/,\n    literal = t => ({ regex: RegExp(t.val), deser: ([s]) => s, literal: true }),\n    unitate = t => {\n      if (token.literal) {\n        return literal(t);\n      }\n      switch (t.val) {\n        // era\n        case 'G':\n          return oneOf(loc.eras('short', false), 0);\n        case 'GG':\n          return oneOf(loc.eras('long', false), 0);\n        // years\n        case 'y':\n          return intUnit(/\\d{1,6}/);\n        case 'yy':\n          return intUnit(twoToFour, Util.untruncateYear);\n        case 'yyyy':\n          return intUnit(four);\n        case 'yyyyy':\n          return intUnit(/\\d{4,6}/);\n        case 'yyyyyy':\n          return intUnit(/\\d{6}/);\n        // months\n        case 'M':\n          return intUnit(oneOrTwo);\n        case 'MM':\n          return intUnit(two);\n        case 'MMM':\n          return oneOf(loc.months('short', false, false), 1);\n        case 'MMMM':\n          return oneOf(loc.months('long', false, false), 1);\n        case 'L':\n          return intUnit(oneOrTwo);\n        case 'LL':\n          return intUnit(two);\n        case 'LLL':\n          return oneOf(loc.months('short', true, false), 1);\n        case 'LLLL':\n          return oneOf(loc.months('long', true, false), 1);\n        // dates\n        case 'd':\n          return intUnit(oneOrTwo);\n        case 'dd':\n          return intUnit(two);\n        // ordinals\n        case 'o':\n          return intUnit(oneToThree);\n        case 'ooo':\n          return intUnit(three);\n        // time\n        case 'HH':\n          return intUnit(two);\n        case 'H':\n          return intUnit(oneOrTwo);\n        case 'hh':\n          return intUnit(two);\n        case 'h':\n          return intUnit(oneOrTwo);\n        case 'mm':\n          return intUnit(two);\n        case 'm':\n          return intUnit(oneOrTwo);\n        case 's':\n          return intUnit(oneOrTwo);\n        case 'ss':\n          return intUnit(two);\n        case 'S':\n          return intUnit(oneToThree);\n        case 'SSS':\n          return intUnit(three);\n        case 'u':\n          return simple(/\\d{1,9}/);\n        // meridiem\n        case 'a':\n          return oneOf(loc.meridiems(), 0);\n        // weekYear (k)\n        case 'kkkk':\n          return intUnit(four);\n        case 'kk':\n          return intUnit(twoToFour, Util.untruncateYear);\n        // weekNumber (W)\n        case 'W':\n          return intUnit(oneOrTwo);\n        case 'WW':\n          return intUnit(two);\n        // weekdays\n        case 'E':\n        case 'c':\n          return intUnit(one);\n        case 'EEE':\n          return oneOf(loc.weekdays('short', false, false), 1);\n        case 'EEEE':\n          return oneOf(loc.weekdays('long', false, false), 1);\n        case 'ccc':\n          return oneOf(loc.weekdays('short', true, false), 1);\n        case 'cccc':\n          return oneOf(loc.weekdays('long', true, false), 1);\n        // offset/zone\n        case 'Z':\n        case 'ZZ':\n          return offset(/([+-]\\d{1,2})(?::(\\d{2}))?/, 2);\n        case 'ZZZ':\n          return offset(/([+-]\\d{1,2})(\\d{2})?/, 2);\n        // we don't support ZZZZ (PST) or ZZZZZ (Pacific Standard Time) in parsing\n        // because we don't have any way to figure out what they are\n        case 'z':\n          return simple(/[A-Za-z_]{1,256}\\/[A-Za-z_]{1,256}/);\n        default:\n          return literal(t);\n      }\n    };\n\n  const unit = unitate(token) || {\n    invalidReason: MISSING_FTP\n  };\n\n  unit.token = token;\n\n  return unit;\n}\n\nfunction buildRegex(units) {\n  const re = units.map(u => u.regex).reduce((f, r) => `${f}(${r.source})`, '');\n  return [`^${re}$`, units];\n}\n\nfunction match(input, regex, handlers) {\n  const matches = input.match(regex);\n\n  if (matches) {\n    const all = {};\n    let matchIndex = 1;\n    for (const i in handlers) {\n      if (handlers.hasOwnProperty(i)) {\n        const h = handlers[i],\n          groups = h.groups ? h.groups + 1 : 1;\n        if (!h.literal && h.token) {\n          all[h.token.val[0]] = h.deser(matches.slice(matchIndex, matchIndex + groups));\n        }\n        matchIndex += groups;\n      }\n    }\n    return [matches, all];\n  } else {\n    return [matches, {}];\n  }\n}\n\nfunction dateTimeFromMatches(matches) {\n  const toField = token => {\n    switch (token) {\n      case 'S':\n        return 'millisecond';\n      case 's':\n        return 'second';\n      case 'm':\n        return 'minute';\n      case 'h':\n      case 'H':\n        return 'hour';\n      case 'd':\n        return 'day';\n      case 'o':\n        return 'ordinal';\n      case 'L':\n      case 'M':\n        return 'month';\n      case 'y':\n        return 'year';\n      case 'E':\n      case 'c':\n        return 'weekday';\n      case 'W':\n        return 'weekNumber';\n      case 'k':\n        return 'weekYear';\n      default:\n        return null;\n    }\n  };\n\n  let zone;\n  if (!Util.isUndefined(matches.Z)) {\n    zone = new FixedOffsetZone(matches.Z);\n  } else if (!Util.isUndefined(matches.z)) {\n    zone = new IANAZone(matches.z);\n  } else {\n    zone = null;\n  }\n\n  if (!Util.isUndefined(matches.h)) {\n    if (matches.h < 12 && matches.a === 1) {\n      matches.h += 12;\n    } else if (matches.h === 12 && matches.a === 0) {\n      matches.h = 0;\n    }\n  }\n\n  if (matches.G === 0 && matches.y) {\n    matches.y = -matches.y;\n  }\n\n  if (!Util.isUndefined(matches.u)) {\n    matches.S = Util.parseMillis(matches.u);\n  }\n\n  const vals = Object.keys(matches).reduce((r, k) => {\n    const f = toField(k);\n    if (f) {\n      r[f] = matches[k];\n    }\n\n    return r;\n  }, {});\n\n  return [vals, zone];\n}\n\n/**\n * @private\n */\n\nexport class TokenParser {\n  constructor(loc) {\n    this.loc = loc;\n  }\n\n  explainParse(input, format) {\n    const tokens = Formatter.parseFormat(format),\n      units = tokens.map(t => unitForToken(t, this.loc)),\n      disqualifyingUnit = units.find(t => t.invalidReason);\n\n    if (disqualifyingUnit) {\n      return { input, tokens, invalidReason: disqualifyingUnit.invalidReason };\n    } else {\n      const [regexString, handlers] = buildRegex(units),\n        regex = RegExp(regexString, 'i'),\n        [rawMatches, matches] = match(input, regex, handlers),\n        [result, zone] = matches ? dateTimeFromMatches(matches) : [null, null];\n\n      return { input, tokens, regex, rawMatches, matches, result, zone };\n    }\n  }\n\n  parseDateTime(input, format) {\n    const { result, zone, invalidReason } = this.explainParse(input, format);\n    return [result, zone, invalidReason];\n  }\n}\n","import { Util } from './util';\n\nconst nonLeapLadder = [0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334],\n  leapLadder = [0, 31, 60, 91, 121, 152, 182, 213, 244, 274, 305, 335];\n\nfunction dayOfWeek(year, month, day) {\n  const js = new Date(Date.UTC(year, month - 1, day)).getUTCDay();\n  return js === 0 ? 7 : js;\n}\n\nfunction lastWeekNumber(weekYear) {\n  const p1 =\n      (weekYear +\n        Math.floor(weekYear / 4) -\n        Math.floor(weekYear / 100) +\n        Math.floor(weekYear / 400)) %\n      7,\n    last = weekYear - 1,\n    p2 = (last + Math.floor(last / 4) - Math.floor(last / 100) + Math.floor(last / 400)) % 7;\n  return p1 === 4 || p2 === 3 ? 53 : 52;\n}\n\nfunction computeOrdinal(year, month, day) {\n  return day + (Util.isLeapYear(year) ? leapLadder : nonLeapLadder)[month - 1];\n}\n\nfunction uncomputeOrdinal(year, ordinal) {\n  const table = Util.isLeapYear(year) ? leapLadder : nonLeapLadder,\n    month0 = table.findIndex(i => i < ordinal),\n    day = ordinal - table[month0];\n  return { month: month0 + 1, day };\n}\n\n/**\n * @private\n */\n\nexport class Conversions {\n  static gregorianToWeek(gregObj) {\n    const { year, month, day } = gregObj,\n      ordinal = computeOrdinal(year, month, day),\n      weekday = dayOfWeek(year, month, day);\n\n    let weekNumber = Math.floor((ordinal - weekday + 10) / 7),\n      weekYear;\n\n    if (weekNumber < 1) {\n      weekYear = year - 1;\n      weekNumber = lastWeekNumber(weekYear);\n    } else if (weekNumber > lastWeekNumber(year)) {\n      weekYear = year + 1;\n      weekNumber = 1;\n    } else {\n      weekYear = year;\n    }\n\n    return Object.assign({ weekYear, weekNumber, weekday }, Util.timeObject(gregObj));\n  }\n\n  static weekToGregorian(weekData) {\n    const { weekYear, weekNumber, weekday } = weekData,\n      weekdayOfJan4 = dayOfWeek(weekYear, 1, 4),\n      daysInYear = Util.daysInYear(weekYear);\n    let ordinal = weekNumber * 7 + weekday - weekdayOfJan4 - 3,\n      year;\n\n    if (ordinal < 1) {\n      year = weekYear - 1;\n      ordinal += Util.daysInYear(year);\n    } else if (ordinal > daysInYear) {\n      year = weekYear + 1;\n      ordinal -= Util.daysInYear(year);\n    } else {\n      year = weekYear;\n    }\n\n    const { month, day } = uncomputeOrdinal(year, ordinal);\n\n    return Object.assign({ year, month, day }, Util.timeObject(weekData));\n  }\n\n  static gregorianToOrdinal(gregData) {\n    const { year, month, day } = gregData,\n      ordinal = computeOrdinal(year, month, day);\n\n    return Object.assign({ year, ordinal }, Util.timeObject(gregData));\n  }\n\n  static ordinalToGregorian(ordinalData) {\n    const { year, ordinal } = ordinalData,\n      { month, day } = uncomputeOrdinal(year, ordinal);\n\n    return Object.assign({ year, month, day }, Util.timeObject(ordinalData));\n  }\n\n  static hasInvalidWeekData(obj) {\n    const validYear = Util.isNumber(obj.weekYear),\n      validWeek = Util.numberBetween(obj.weekNumber, 1, lastWeekNumber(obj.weekYear)),\n      validWeekday = Util.numberBetween(obj.weekday, 1, 7);\n\n    if (!validYear) {\n      return 'weekYear out of range';\n    } else if (!validWeek) {\n      return 'week out of range';\n    } else if (!validWeekday) {\n      return 'weekday out of range';\n    } else return false;\n  }\n\n  static hasInvalidOrdinalData(obj) {\n    const validYear = Util.isNumber(obj.year),\n      validOrdinal = Util.numberBetween(obj.ordinal, 1, Util.daysInYear(obj.year));\n\n    if (!validYear) {\n      return 'year out of range';\n    } else if (!validOrdinal) {\n      return 'ordinal out of range';\n    } else return false;\n  }\n\n  static hasInvalidGregorianData(obj) {\n    const validYear = Util.isNumber(obj.year),\n      validMonth = Util.numberBetween(obj.month, 1, 12),\n      validDay = Util.numberBetween(obj.day, 1, Util.daysInMonth(obj.year, obj.month));\n\n    if (!validYear) {\n      return 'year out of range';\n    } else if (!validMonth) {\n      return 'month out of range';\n    } else if (!validDay) {\n      return 'day out of range';\n    } else return false;\n  }\n\n  static hasInvalidTimeData(obj) {\n    const validHour = Util.numberBetween(obj.hour, 0, 23),\n      validMinute = Util.numberBetween(obj.minute, 0, 59),\n      validSecond = Util.numberBetween(obj.second, 0, 59),\n      validMillisecond = Util.numberBetween(obj.millisecond, 0, 999);\n\n    if (!validHour) {\n      return 'hour out of range';\n    } else if (!validMinute) {\n      return 'minute out of range';\n    } else if (!validSecond) {\n      return 'second out of range';\n    } else if (!validMillisecond) {\n      return 'millisecond out of range';\n    } else return false;\n  }\n}\n","import { Duration } from './duration';\nimport { Interval } from './interval';\nimport { Settings } from './settings';\nimport { Info } from './info';\nimport { Formatter } from './impl/formatter';\nimport { FixedOffsetZone } from './zones/fixedOffsetZone';\nimport { LocalZone } from './zones/localZone';\nimport { Locale } from './impl/locale';\nimport { Util } from './impl/util';\nimport { RegexParser } from './impl/regexParser';\nimport { TokenParser } from './impl/tokenParser';\nimport { Conversions } from './impl/conversions';\nimport { Formats } from './impl/formats';\nimport {\n  InvalidArgumentError,\n  ConflictingSpecificationError,\n  InvalidUnitError,\n  InvalidDateTimeError\n} from './errors';\n\nconst INVALID = 'Invalid DateTime',\n  INVALID_INPUT = 'invalid input',\n  UNSUPPORTED_ZONE = 'unsupported zone',\n  UNPARSABLE = 'unparsable';\n\n// we cache week data on the DT object and this intermediates the cache\nfunction possiblyCachedWeekData(dt) {\n  if (dt.weekData === null) {\n    dt.weekData = Conversions.gregorianToWeek(dt.c);\n  }\n  return dt.weekData;\n}\n\n// clone really means, \"make a new object with these modifications\". all \"setters\" really use this\n// to create a new object while only changing some of the properties\nfunction clone(inst, alts) {\n  const current = {\n    ts: inst.ts,\n    zone: inst.zone,\n    c: inst.c,\n    o: inst.o,\n    loc: inst.loc,\n    invalidReason: inst.invalidReason\n  };\n  return new DateTime(Object.assign({}, current, alts, { old: current }));\n}\n\n// find the right offset a given local time. The o input is our guess, which determines which\n// offset we'll pick in ambiguous cases (e.g. there are two 3 AMs b/c Fallback DST)\nfunction fixOffset(localTS, o, tz) {\n  // Our UTC time is just a guess because our offset is just a guess\n  let utcGuess = localTS - o * 60 * 1000;\n\n  // Test whether the zone matches the offset for this ts\n  const o2 = tz.offset(utcGuess);\n\n  // If so, offset didn't change and we're done\n  if (o === o2) {\n    return [utcGuess, o];\n  }\n\n  // If not, change the ts by the difference in the offset\n  utcGuess -= (o2 - o) * 60 * 1000;\n\n  // If that gives us the local time we want, we're done\n  const o3 = tz.offset(utcGuess);\n  if (o2 === o3) {\n    return [utcGuess, o2];\n  }\n\n  // If it's different, we're in a hole time. The offset has changed, but the we don't adjust the time\n  return [localTS - Math.min(o2, o3) * 60 * 1000, Math.max(o2, o3)];\n}\n\n// convert an epoch timestamp into a calendar object with the given offset\nfunction tsToObj(ts, offset) {\n  ts += offset * 60 * 1000;\n\n  const d = new Date(ts);\n\n  return {\n    year: d.getUTCFullYear(),\n    month: d.getUTCMonth() + 1,\n    day: d.getUTCDate(),\n    hour: d.getUTCHours(),\n    minute: d.getUTCMinutes(),\n    second: d.getUTCSeconds(),\n    millisecond: d.getUTCMilliseconds()\n  };\n}\n\n// covert a calendar object to a local timestamp (epoch, but with the offset baked in)\nfunction objToLocalTS(obj) {\n  let d = Date.UTC(\n    obj.year,\n    obj.month - 1,\n    obj.day,\n    obj.hour,\n    obj.minute,\n    obj.second,\n    obj.millisecond\n  );\n\n  // javascript is stupid and i hate it\n  if (obj.year < 100 && obj.year >= 0) {\n    d = new Date(d);\n    d.setUTCFullYear(obj.year);\n  }\n  return +d;\n}\n\n// convert a calendar object to a epoch timestamp\nfunction objToTS(obj, offset, zone) {\n  return fixOffset(objToLocalTS(obj), offset, zone);\n}\n\n// create a new DT instance by adding a duration, adjusting for DSTs\nfunction adjustTime(inst, dur) {\n  const oPre = inst.o,\n    c = Object.assign({}, inst.c, {\n      year: inst.c.year + dur.years,\n      month: inst.c.month + dur.months,\n      day: inst.c.day + dur.days + dur.weeks * 7\n    }),\n    millisToAdd = Duration.fromObject({\n      hours: dur.hours,\n      minutes: dur.minutes,\n      seconds: dur.seconds,\n      milliseconds: dur.milliseconds\n    }).as('milliseconds'),\n    localTS = objToLocalTS(c);\n\n  let [ts, o] = fixOffset(localTS, oPre, inst.zone);\n\n  if (millisToAdd !== 0) {\n    ts += millisToAdd;\n    // that could have changed the offset by going over a DST, but we want to keep the ts the same\n    o = inst.zone.offset(ts);\n  }\n\n  return { ts, o };\n}\n\n// helper useful in turning the results of parsing into real dates\n// by handling the zone options\nfunction parseDataToDateTime(parsed, parsedZone, opts) {\n  const { setZone, zone } = opts;\n  if (parsed && Object.keys(parsed).length !== 0) {\n    const interpretationZone = parsedZone || zone,\n      inst = DateTime.fromObject(\n        Object.assign(parsed, opts, {\n          zone: interpretationZone\n        })\n      );\n    return setZone ? inst : inst.setZone(zone);\n  } else {\n    return DateTime.invalid(UNPARSABLE);\n  }\n}\n\n// if you want to output a technical format (e.g. RFC 2822), this helper\n// helps handle the details\nfunction toTechFormat(dt, format) {\n  return dt.isValid\n    ? Formatter.create(Locale.create('en-US')).formatDateTimeFromString(dt, format)\n    : null;\n}\n\n// technical time formats (e.g. the time part of ISO 8601), take some options\n// and this commonizes their handling\nfunction toTechTimeFormat(\n  dt,\n  {\n    suppressSeconds = false,\n    suppressMilliseconds = false,\n    includeOffset = true,\n    includeZone = false,\n    spaceZone = false\n  }\n) {\n  let fmt = 'HH:mm';\n\n  if (!suppressSeconds || dt.second !== 0 || dt.millisecond !== 0) {\n    fmt += ':ss';\n    if (!suppressMilliseconds || dt.millisecond !== 0) {\n      fmt += '.SSS';\n    }\n  }\n\n  if ((includeZone || includeOffset) && spaceZone) {\n    fmt += ' ';\n  }\n\n  if (includeZone) {\n    fmt += 'z';\n  } else if (includeOffset) {\n    fmt += 'ZZ';\n  }\n\n  return toTechFormat(dt, fmt);\n}\n\n// defaults for unspecified units in the supported calendars\nconst defaultUnitValues = {\n    month: 1,\n    day: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  },\n  defaultWeekUnitValues = {\n    weekNumber: 1,\n    weekday: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  },\n  defaultOrdinalUnitValues = {\n    ordinal: 1,\n    hour: 0,\n    minute: 0,\n    second: 0,\n    millisecond: 0\n  };\n\n// Units in the supported calendars, sorted by bigness\nconst orderedUnits = ['year', 'month', 'day', 'hour', 'minute', 'second', 'millisecond'],\n  orderedWeekUnits = [\n    'weekYear',\n    'weekNumber',\n    'weekday',\n    'hour',\n    'minute',\n    'second',\n    'millisecond'\n  ],\n  orderedOrdinalUnits = ['year', 'ordinal', 'hour', 'minute', 'second', 'millisecond'];\n\n// standardize case and plurality in units\nfunction normalizeUnit(unit, ignoreUnknown = false) {\n  const normalized = {\n    year: 'year',\n    years: 'year',\n    month: 'month',\n    months: 'month',\n    day: 'day',\n    days: 'day',\n    hour: 'hour',\n    hours: 'hour',\n    minute: 'minute',\n    minutes: 'minute',\n    second: 'second',\n    seconds: 'second',\n    millisecond: 'millisecond',\n    milliseconds: 'millisecond',\n    weekday: 'weekday',\n    weekdays: 'weekday',\n    weeknumber: 'weekNumber',\n    weeksnumber: 'weekNumber',\n    weeknumbers: 'weekNumber',\n    weekyear: 'weekYear',\n    weekyears: 'weekYear',\n    ordinal: 'ordinal'\n  }[unit ? unit.toLowerCase() : unit];\n\n  if (!ignoreUnknown && !normalized) throw new InvalidUnitError(unit);\n\n  return normalized;\n}\n\n// this is a dumbed down version of fromObject() that runs about 60% faster\n// but doesn't do any validation, makes a bunch of assumptions about what units\n// are present, and so on.\nfunction quickDT(obj, zone) {\n  // assume we have the higher-order units\n  for (const u of orderedUnits) {\n    if (Util.isUndefined(obj[u])) {\n      obj[u] = defaultUnitValues[u];\n    }\n  }\n\n  const invalidReason =\n    Conversions.hasInvalidGregorianData(obj) || Conversions.hasInvalidTimeData(obj);\n  if (invalidReason) {\n    return DateTime.invalid(invalidReason);\n  }\n\n  const tsNow = Settings.now(),\n    offsetProvis = zone.offset(tsNow),\n    [ts, o] = objToTS(obj, offsetProvis, zone);\n\n  return new DateTime({\n    ts,\n    zone,\n    o\n  });\n}\n\n/**\n * A DateTime is an immutable data structure representing a specific date and time and accompanying methods. It contains class and instance methods for creating, parsing, interrogating, transforming, and formatting them.\n *\n * A DateTime comprises of:\n * * A timestamp. Each DateTime instance refers to a specific millisecond of the Unix epoch.\n * * A time zone. Each instance is considered in the context of a specific zone (by default the local system's zone).\n * * Configuration properties that effect how output strings are formatted, such as `locale`, `numberingSystem`, and `outputCalendar`.\n *\n * Here is a brief overview of the most commonly used functionality it provides:\n *\n * * **Creation**: To create a DateTime from its components, use one of its factory class methods: {@link local}, {@link utc}, and (most flexibly) {@link fromObject}. To create one from a standard string format, use {@link fromISO}, {@link fromHTTP}, and {@link fromRFC2822}. To create one from a custom string format, use {@link fromString}. To create one from a native JS date, use {@link fromJSDate}.\n * * **Gregorian calendar and time**: To examine the Gregorian properties of a DateTime individually (i.e as opposed to collectively through {@link toObject}), use the {@link year}, {@link month},\n * {@link day}, {@link hour}, {@link minute}, {@link second}, {@link millisecond} accessors.\n * * **Week calendar**: For ISO week calendar attributes, see the {@link weekYear}, {@link weekNumber}, and {@link weekday} accessors.\n * * **Configuration** See the {@link locale} and {@link numberingSystem} accessors.\n * * **Transformation**: To transform the DateTime into other DateTimes, use {@link set}, {@link reconfigure}, {@link setZone}, {@link setLocale}, {@link plus}, {@link minus}, {@link endOf}, {@link startOf}, {@link toUTC}, and {@link toLocal}.\n * * **Output**: To convert the DateTime to other representations, use the {@link toJSON}, {@link toISO}, {@link toHTTP}, {@link toObject}, {@link toRFC2822}, {@link toString}, {@link toLocaleString}, {@link toFormat}, {@link valueOf} and {@link toJSDate}.\n *\n * There's plenty others documented below. In addition, for more information on subtler topics like internationalization, time zones, alternative calendars, validity, and so on, see the external documentation.\n */\nexport class DateTime {\n  /**\n   * @access private\n   */\n  constructor(config) {\n    const zone = config.zone || Settings.defaultZone,\n      invalidReason =\n        config.invalidReason ||\n        (Number.isNaN(config.ts) ? INVALID_INPUT : null) ||\n        (!zone.isValid ? UNSUPPORTED_ZONE : null),\n      ts = config.ts || Settings.now();\n\n    let c = null,\n      o = null;\n    if (!invalidReason) {\n      const unchanged = config.old && config.old.ts === ts && config.old.zone.equals(zone);\n      c = unchanged ? config.old.c : tsToObj(ts, zone.offset(ts));\n      o = unchanged ? config.old.o : zone.offset(ts);\n    }\n\n    /**\n     * @access private\n     */\n    this.ts = config.ts || Settings.now();\n    /**\n     * @access private\n     */\n    this.zone = zone;\n    /**\n     * @access private\n     */\n    this.loc = config.loc || Locale.create();\n    /**\n     * @access private\n     */\n    this.invalid = invalidReason;\n    /**\n     * @access private\n     */\n    this.weekData = null;\n    /**\n     * @access private\n     */\n    this.c = c;\n    /**\n     * @access private\n     */\n    this.o = o;\n  }\n\n  // CONSTRUCT\n\n  /**\n   * Create a local DateTime\n   * @param {number} year - The calendar year. If omitted (as in, call `local()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, i.e. a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, i.e. a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, i.e. a number between 0 and 999\n   * @example DateTime.local()                            //~> now\n   * @example DateTime.local(2017)                        //~> 2017-01-01T00:00:00\n   * @example DateTime.local(2017, 3)                     //~> 2017-03-01T00:00:00\n   * @example DateTime.local(2017, 3, 12)                 //~> 2017-03-12T00:00:00\n   * @example DateTime.local(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00\n   * @example DateTime.local(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10\n   * @example DateTime.local(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.675\n   * @return {DateTime}\n   */\n  static local(year, month, day, hour, minute, second, millisecond) {\n    if (Util.isUndefined(year)) {\n      return new DateTime({ ts: Settings.now() });\n    } else {\n      return quickDT(\n        {\n          year,\n          month,\n          day,\n          hour,\n          minute,\n          second,\n          millisecond\n        },\n        Settings.defaultZone\n      );\n    }\n  }\n\n  /**\n   * Create a DateTime in UTC\n   * @param {number} year - The calendar year. If omitted (as in, call `utc()` with no arguments), the current time will be used\n   * @param {number} [month=1] - The month, 1-indexed\n   * @param {number} [day=1] - The day of the month\n   * @param {number} [hour=0] - The hour of the day, in 24-hour time\n   * @param {number} [minute=0] - The minute of the hour, i.e. a number between 0 and 59\n   * @param {number} [second=0] - The second of the minute, i.e. a number between 0 and 59\n   * @param {number} [millisecond=0] - The millisecond of the second, i.e. a number between 0 and 999\n   * @example DateTime.utc()                            //~> now\n   * @example DateTime.utc(2017)                        //~> 2017-01-01T00:00:00Z\n   * @example DateTime.utc(2017, 3)                     //~> 2017-03-01T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12)                 //~> 2017-03-12T00:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5)              //~> 2017-03-12T05:00:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45)          //~> 2017-03-12T05:45:00Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10)      //~> 2017-03-12T05:45:10Z\n   * @example DateTime.utc(2017, 3, 12, 5, 45, 10, 765) //~> 2017-03-12T05:45:10.675Z\n   * @return {DateTime}\n   */\n  static utc(year, month, day, hour, minute, second, millisecond) {\n    if (Util.isUndefined(year)) {\n      return new DateTime({\n        ts: Settings.now(),\n        zone: FixedOffsetZone.utcInstance\n      });\n    } else {\n      return quickDT(\n        {\n          year,\n          month,\n          day,\n          hour,\n          minute,\n          second,\n          millisecond\n        },\n        FixedOffsetZone.utcInstance\n      );\n    }\n  }\n\n  /**\n   * Create an DateTime from a Javascript Date object. Uses the default zone.\n   * @param {Date} date - a Javascript Date object\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @return {DateTime}\n   */\n  static fromJSDate(date, options = {}) {\n    return new DateTime({\n      ts: Util.isDate(date) ? date.valueOf() : NaN,\n      zone: Util.normalizeZone(options.zone),\n      loc: Locale.fromObject(options)\n    });\n  }\n\n  /**\n   * Create an DateTime from a count of epoch milliseconds. Uses the default zone.\n   * @param {number} milliseconds - a number of milliseconds since 1970 UTC\n   * @param {Object} options - configuration options for the DateTime\n   * @param {string|Zone} [options.zone='local'] - the zone to place the DateTime into\n   * @param {string} [options.locale] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromMillis(milliseconds, options = {}) {\n    return new DateTime({\n      ts: milliseconds,\n      zone: Util.normalizeZone(options.zone),\n      loc: Locale.fromObject(options)\n    });\n  }\n\n  /**\n   * Create an DateTime from a Javascript object with keys like 'year' and 'hour' with reasonable defaults.\n   * @param {Object} obj - the object to create the DateTime from\n   * @param {number} obj.year - a year, such as 1987\n   * @param {number} obj.month - a month, 1-12\n   * @param {number} obj.day - a day of the month, 1-31, depending on the month\n   * @param {number} obj.ordinal - day of the year, 1-365 or 366\n   * @param {number} obj.weekYear - an ISO week year\n   * @param {number} obj.weekNumber - an ISO week number, between 1 and 52 or 53, depending on the year\n   * @param {number} obj.weekday - an ISO weekday, 1-7, where 1 is Monday and 7 is Sunday\n   * @param {number} obj.hour - hour of the day, 0-23\n   * @param {number} obj.minute - minute of the hour, 0-59\n   * @param {number} obj.second - second of the minute, 0-59\n   * @param {number} obj.millisecond - millisecond of the second, 0-999\n   * @param {string|Zone} [obj.zone='local'] - interpret the numbers in the context of a particular zone. Can take any value taken as the first argument to setZone()\n   * @param {string} [obj.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} obj.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} obj.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromObject({ year: 1982, month: 5, day: 25}).toISODate() //=> '1982-05-25'\n   * @example DateTime.fromObject({ year: 1982 }).toISODate() //=> '1982-01-01T00'\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6 }) //~> today at 10:26:06\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'utc' }),\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'local' })\n   * @example DateTime.fromObject({ hour: 10, minute: 26, second: 6, zone: 'America/New_York' })\n   * @example DateTime.fromObject({ weekYear: 2016, weekNumber: 2, weekday: 3 }).toISODate() //=> '2016-01-13'\n   * @return {DateTime}\n   */\n  static fromObject(obj) {\n    const zoneToUse = Util.normalizeZone(obj.zone);\n    if (!zoneToUse.isValid) {\n      return DateTime.invalid(UNSUPPORTED_ZONE);\n    }\n\n    const tsNow = Settings.now(),\n      offsetProvis = zoneToUse.offset(tsNow),\n      normalized = Util.normalizeObject(obj, normalizeUnit, true),\n      containsOrdinal = !Util.isUndefined(normalized.ordinal),\n      containsGregorYear = !Util.isUndefined(normalized.year),\n      containsGregorMD = !Util.isUndefined(normalized.month) || !Util.isUndefined(normalized.day),\n      containsGregor = containsGregorYear || containsGregorMD,\n      definiteWeekDef = normalized.weekYear || normalized.weekNumber,\n      loc = Locale.fromObject(obj);\n\n    // cases:\n    // just a weekday -> this week's instance of that weekday, no worries\n    // (gregorian data or ordinal) + (weekYear or weekNumber) -> error\n    // (gregorian month or day) + ordinal -> error\n    // otherwise just use weeks or ordinals or gregorian, depending on what's specified\n\n    if ((containsGregor || containsOrdinal) && definiteWeekDef) {\n      throw new ConflictingSpecificationError(\n        \"Can't mix weekYear/weekNumber units with year/month/day or ordinals\"\n      );\n    }\n\n    if (containsGregorMD && containsOrdinal) {\n      throw new ConflictingSpecificationError(\"Can't mix ordinal dates with month/day\");\n    }\n\n    const useWeekData = definiteWeekDef || (normalized.weekday && !containsGregor);\n\n    // configure ourselves to deal with gregorian dates or week stuff\n    let units,\n      defaultValues,\n      objNow = tsToObj(tsNow, offsetProvis);\n    if (useWeekData) {\n      units = orderedWeekUnits;\n      defaultValues = defaultWeekUnitValues;\n      objNow = Conversions.gregorianToWeek(objNow);\n    } else if (containsOrdinal) {\n      units = orderedOrdinalUnits;\n      defaultValues = defaultOrdinalUnitValues;\n      objNow = Conversions.gregorianToOrdinal(objNow);\n    } else {\n      units = orderedUnits;\n      defaultValues = defaultUnitValues;\n    }\n\n    // set default values for missing stuff\n    let foundFirst = false;\n    for (const u of units) {\n      const v = normalized[u];\n      if (!Util.isUndefined(v)) {\n        foundFirst = true;\n      } else if (foundFirst) {\n        normalized[u] = defaultValues[u];\n      } else {\n        normalized[u] = objNow[u];\n      }\n    }\n\n    // make sure the values we have are in range\n    const higherOrderInvalid = useWeekData\n        ? Conversions.hasInvalidWeekData(normalized)\n        : containsOrdinal\n          ? Conversions.hasInvalidOrdinalData(normalized)\n          : Conversions.hasInvalidGregorianData(normalized),\n      invalidReason = higherOrderInvalid || Conversions.hasInvalidTimeData(normalized);\n\n    if (invalidReason) {\n      return DateTime.invalid(invalidReason);\n    }\n\n    // compute the actual time\n    const gregorian = useWeekData\n        ? Conversions.weekToGregorian(normalized)\n        : containsOrdinal ? Conversions.ordinalToGregorian(normalized) : normalized,\n      [tsFinal, offsetFinal] = objToTS(gregorian, offsetProvis, zoneToUse),\n      inst = new DateTime({\n        ts: tsFinal,\n        zone: zoneToUse,\n        o: offsetFinal,\n        loc\n      });\n\n    // gregorian data + weekday serves only to validate\n    if (normalized.weekday && containsGregor && obj.weekday !== inst.weekday) {\n      return DateTime.invalid('mismatched weekday');\n    }\n\n    return inst;\n  }\n\n  /**\n   * Create a DateTime from an ISO 8601 string\n   * @param {string} text - the ISO string\n   * @param {Object} opts - options to affect the creation\n   * @param {boolean} [opts.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the time to this zone\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00')\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123+06:00', {setZone: true})\n   * @example DateTime.fromISO('2016-05-25T09:08:34.123', {zone: 'utc')\n   * @example DateTime.fromISO('2016-W05-4')\n   * @return {DateTime}\n   */\n  static fromISO(text, opts = {}) {\n    const [vals, parsedZone] = RegexParser.parseISODate(text);\n    return parseDataToDateTime(vals, parsedZone, opts);\n  }\n\n  /**\n   * Create a DateTime from an RFC 2822 string\n   * @param {string} text - the RFC 2822 string\n   * @param {Object} opts - options to affect the creation\n   * @param {boolean} [opts.zone='local'] - convert the time to this zone. Since the offset is always specified in the string itself, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [opts.setZone=false] - override the zone with a fixed-offset zone specified in the string itself, if it specifies one\n   * @param {string} [opts.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} opts.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} opts.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23:12 GMT')\n   * @example DateTime.fromRFC2822('Tue, 25 Nov 2016 13:23:12 +0600')\n   * @example DateTime.fromRFC2822('25 Nov 2016 13:23 Z')\n   * @return {DateTime}\n   */\n  static fromRFC2822(text, opts = {}) {\n    const [vals, parsedZone] = RegexParser.parseRFC2822Date(text);\n    return parseDataToDateTime(vals, parsedZone, opts);\n  }\n\n  /**\n   * Create a DateTime from an HTTP header date\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @param {string} text - the HTTP header date\n   * @param {object} options - options to affect the creation\n   * @param {boolean} [options.zone='local'] - convert the time to this zone. Since HTTP dates are always in UTC, this has no effect on the interpretation of string, merely the zone the resulting DateTime is expressed in.\n   * @param {boolean} [options.setZone=false] - override the zone with the fixed-offset zone specified in the string. For HTTP dates, this is always UTC, so this option is equivalent to setting the `zone` option to 'utc', but this option is included for consistency with similar methods.\n   * @param {string} [options.locale='en-US'] - a locale to set on the resulting DateTime instance\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @param {string} options.numberingSystem - the numbering system to set on the resulting DateTime instance\n   * @example DateTime.fromHTTP('Sun, 06 Nov 1994 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sunday, 06-Nov-94 08:49:37 GMT')\n   * @example DateTime.fromHTTP('Sun Nov  6 08:49:37 1994')\n   * @return {DateTime}\n   */\n  static fromHTTP(text, options = {}) {\n    const [vals, parsedZone] = RegexParser.parseHTTPDate(text);\n    return parseDataToDateTime(vals, parsedZone, options);\n  }\n\n  /**\n   * Create a DateTime from an input string and format string\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see description)\n   * @param {Object} options - options to affect the creation\n   * @param {boolean} [options.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [options.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [options.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} options.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @return {DateTime}\n   */\n  static fromString(text, fmt, options = {}) {\n    if (Util.isUndefined(text) || Util.isUndefined(fmt)) {\n      throw new InvalidArgumentError('fromString requires an input string and a format');\n    }\n\n    const { locale = null, numberingSystem = null } = options,\n      parser = new TokenParser(Locale.fromOpts({ locale, numberingSystem, defaultToEN: true })),\n      [vals, parsedZone, invalidReason] = parser.parseDateTime(text, fmt);\n    if (invalidReason) {\n      return DateTime.invalid(invalidReason);\n    } else {\n      return parseDataToDateTime(vals, parsedZone, options);\n    }\n  }\n\n  /**\n   * Create a DateTime from a SQL date, time, or datetime\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale\n   * @param {string} text - the string to parse\n   * @param {Object} options - options to affect the creation\n   * @param {boolean} [options.zone='local'] - use this zone if no offset is specified in the input string itself. Will also convert the DateTime to this zone\n   * @param {boolean} [options.setZone=false] - override the zone with a zone specified in the string itself, if it specifies one\n   * @param {string} [options.locale='en-US'] - a locale string to use when parsing. Will also set the DateTime to this locale\n   * @param {string} options.numberingSystem - the numbering system to use when parsing. Will also set the resulting DateTime to this numbering system\n   * @param {string} options.outputCalendar - the output calendar to set on the resulting DateTime instance\n   * @example DateTime.fromSQL('2017-05-15')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342+06:00')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles')\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342 America/Los_Angeles', { setZone: true })\n   * @example DateTime.fromSQL('2017-05-15 09:12:34.342', { zone: 'America/Los_Angeles' })\n   * @example DateTime.fromSQL('09:12:34.342')\n   * @return {DateTime}\n   */\n  static fromSQL(text, options = {}) {\n    const [vals, parsedZone] = RegexParser.parseSQL(text);\n    return parseDataToDateTime(vals, parsedZone, options);\n  }\n\n  /**\n   * Create an invalid DateTime.\n   * @return {DateTime}\n   */\n  static invalid(reason) {\n    if (!reason) {\n      throw new InvalidArgumentError('need to specify a reason the DateTime is invalid');\n    }\n    if (Settings.throwOnInvalid) {\n      throw new InvalidDateTimeError(reason);\n    } else {\n      return new DateTime({ invalidReason: reason });\n    }\n  }\n\n  // INFO\n\n  /**\n   * Get the value of unit.\n   * @param {string} unit - a unit such as 'minute' or 'day'\n   * @example DateTime.local(2017, 7, 4).get('month'); //=> 7\n   * @example DateTime.local(2017, 7, 4).get('day'); //=> 4\n   * @return {number}\n   */\n  get(unit) {\n    return this[unit];\n  }\n\n  /**\n   * Returns whether the DateTime is valid. Invalid DateTimes occur when:\n   * * The DateTime was created from invalid calendar information, such as the 13th month or February 30\n   * * The DateTime was created by an operation on another invalid date\n   * @return {boolean}\n   */\n  get isValid() {\n    return this.invalidReason === null;\n  }\n\n  /**\n   * Returns an explanation of why this DateTime became invalid, or null if the DateTime is valid\n   * @return {string}\n   */\n  get invalidReason() {\n    return this.invalid;\n  }\n\n  /**\n   * Get the locale of a DateTime, such 'en-GB'. The locale is used when formatting the DateTime\n   *\n   * @return {string}\n   */\n  get locale() {\n    return this.loc.locale;\n  }\n\n  /**\n   * Get the numbering system of a DateTime, such 'beng'. The numbering system is used when formatting the DateTime\n   *\n   * @return {string}\n   */\n  get numberingSystem() {\n    return this.loc.numberingSystem;\n  }\n\n  /**\n   * Get the output calendar of a DateTime, such 'islamic'. The output calendar is used when formatting the DateTime\n   *\n   * @return {string}\n   */\n  get outputCalendar() {\n    return this.loc.outputCalendar;\n  }\n\n  /**\n   * Get the name of the time zone.\n   * @return {String}\n   */\n  get zoneName() {\n    return this.zone.name;\n  }\n\n  /**\n   * Get the year\n   * @example DateTime.local(2017, 5, 25).year //=> 2017\n   * @return {number}\n   */\n  get year() {\n    return this.isValid ? this.c.year : NaN;\n  }\n\n  /**\n   * Get the month (1-12).\n   * @example DateTime.local(2017, 5, 25).month //=> 5\n   * @return {number}\n   */\n  get month() {\n    return this.isValid ? this.c.month : NaN;\n  }\n\n  /**\n   * Get the day of the month (1-30ish).\n   * @example DateTime.local(2017, 5, 25).day //=> 25\n   * @return {number}\n   */\n  get day() {\n    return this.isValid ? this.c.day : NaN;\n  }\n\n  /**\n   * Get the hour of the day (0-23).\n   * @example DateTime.local(2017, 5, 25, 9).hour //=> 9\n   * @return {number}\n   */\n  get hour() {\n    return this.isValid ? this.c.hour : NaN;\n  }\n\n  /**\n   * Get the minute of the hour (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30).minute //=> 30\n   * @return {number}\n   */\n  get minute() {\n    return this.isValid ? this.c.minute : NaN;\n  }\n\n  /**\n   * Get the second of the minute (0-59).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52).second //=> 52\n   * @return {number}\n   */\n  get second() {\n    return this.isValid ? this.c.second : NaN;\n  }\n\n  /**\n   * Get the millisecond of the second (0-999).\n   * @example DateTime.local(2017, 5, 25, 9, 30, 52, 654).millisecond //=> 654\n   * @return {number}\n   */\n  get millisecond() {\n    return this.isValid ? this.c.millisecond : NaN;\n  }\n\n  /**\n   * Get the week year\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 11, 31).weekYear //=> 2015\n   * @return {number}\n   */\n  get weekYear() {\n    return this.isValid ? possiblyCachedWeekData(this).weekYear : NaN;\n  }\n\n  /**\n   * Get the week number of the week year (1-52ish).\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2017, 5, 25).weekNumber //=> 21\n   * @return {number}\n   */\n  get weekNumber() {\n    return this.isValid ? possiblyCachedWeekData(this).weekNumber : NaN;\n  }\n\n  /**\n   * Get the day of the week.\n   * 1 is Monday and 7 is Sunday\n   * @see https://en.wikipedia.org/wiki/ISO_week_date\n   * @example DateTime.local(2014, 11, 31).weekday //=> 4\n   * @return {number}\n   */\n  get weekday() {\n    return this.isValid ? possiblyCachedWeekData(this).weekday : NaN;\n  }\n\n  /**\n   * Get the ordinal (i.e. the day of the year)\n   * @example DateTime.local(2017, 5, 25).ordinal //=> 145\n   * @return {number|DateTime}\n   */\n  get ordinal() {\n    return this.isValid ? Conversions.gregorianToOrdinal(this.c).ordinal : NaN;\n  }\n\n  /**\n   * Get the human readable short month name, such as 'Oct'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).monthShort //=> Oct\n   * @return {string}\n   */\n  get monthShort() {\n    return this.isValid ? Info.months('short', { locale: this.locale })[this.month - 1] : null;\n  }\n\n  /**\n   * Get the human readable long month name, such as 'October'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).monthLong //=> October\n   * @return {string}\n   */\n  get monthLong() {\n    return this.isValid ? Info.months('long', { locale: this.locale })[this.month - 1] : null;\n  }\n\n  /**\n   * Get the human readable short weekday, such as 'Mon'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).weekdayShort //=> Mon\n   * @return {string}\n   */\n  get weekdayShort() {\n    return this.isValid ? Info.weekdays('short', { locale: this.locale })[this.weekday - 1] : null;\n  }\n\n  /**\n   * Get the human readable long weekday, such as 'Monday'.\n   * Defaults to the system's locale if no locale has been specified\n   * @example DateTime.local(2017, 10, 30).weekdayLong //=> Monday\n   * @return {string}\n   */\n  get weekdayLong() {\n    return this.isValid ? Info.weekdays('long', { locale: this.locale })[this.weekday - 1] : null;\n  }\n\n  /**\n   * Get the UTC offset of this DateTime in minutes\n   * @example DateTime.local().offset //=> -240\n   * @example DateTime.utc().offset //=> 0\n   * @return {number}\n   */\n  get offset() {\n    return this.isValid ? this.zone.offset(this.ts) : NaN;\n  }\n\n  /**\n   * Get the short human name for the zone's current offset, for example \"EST\" or \"EDT\".\n   * Defaults to the system's locale if no locale has been specified\n   * @return {String}\n   */\n  get offsetNameShort() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: 'short',\n        locale: this.locale\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the long human name for the zone's current offset, for example \"Eastern Standard Time\" or \"Eastern Daylight Time\".\n   * Defaults to the system's locale if no locale has been specified\n   * @return {String}\n   */\n  get offsetNameLong() {\n    if (this.isValid) {\n      return this.zone.offsetName(this.ts, {\n        format: 'long',\n        locale: this.locale\n      });\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get whether this zone's offset ever changes, as in a DST.\n   * @return {boolean}\n   */\n  get isOffsetFixed() {\n    return this.zone.universal;\n  }\n\n  /**\n   * Get whether the DateTime is in a DST.\n   * @return {boolean}\n   */\n  get isInDST() {\n    if (this.isOffsetFixed) {\n      return false;\n    } else {\n      return (\n        this.offset > this.set({ month: 1 }).offset || this.offset > this.set({ month: 5 }).offset\n      );\n    }\n  }\n\n  /**\n   * Returns true if this DateTime is in a leap year, false otherwise\n   * @example DateTime.local(2016).isInLeapYear //=> true\n   * @example DateTime.local(2013).isInLeapYear //=> false\n   * @return {boolean}\n   */\n  get isInLeapYear() {\n    return Util.isLeapYear(this.year);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's month\n   * @example DateTime.local(2016, 2).daysInMonth //=> 29\n   * @example DateTime.local(2016, 3).daysInMonth //=> 31\n   * @return {number}\n   */\n  get daysInMonth() {\n    return Util.daysInMonth(this.year, this.month);\n  }\n\n  /**\n   * Returns the number of days in this DateTime's year\n   * @example DateTime.local(2016).daysInYear //=> 366\n   * @example DateTime.local(2013).daysInYear //=> 365\n   * @return {number}\n   */\n  get daysInYear() {\n    return this.isValid ? Util.daysInYear(this.year) : NaN;\n  }\n\n  /**\n   * Returns the resolved Intl options for this DateTime.\n   * This is useful in understanding the behavior of formatting methods\n   * @param {object} opts - the same options as toLocaleString\n   * @return {object}\n   */\n  resolvedLocaleOpts(opts = {}) {\n    const { locale, numberingSystem, calendar } = Formatter.create(\n      this.loc.clone(opts),\n      opts\n    ).resolvedOptions(this);\n    return { locale, numberingSystem, outputCalendar: calendar };\n  }\n\n  // TRANSFORM\n\n  /**\n   * \"Set\" the DateTime's zone to UTC. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to {@link setZone}('utc')\n   * @param {number} [offset=0] - optionally, an offset from UTC in minutes\n   * @param {object} [opts={}] - options to pass to `setZone()`\n   * @return {DateTime}\n   */\n  toUTC(offset = 0, opts = {}) {\n    return this.setZone(FixedOffsetZone.instance(offset), opts);\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to the host's local zone. Returns a newly-constructed DateTime.\n   *\n   * Equivalent to `setZone('local')`\n   * @return {DateTime}\n   */\n  toLocal() {\n    return this.setZone(new LocalZone());\n  }\n\n  /**\n   * \"Set\" the DateTime's zone to specified zone. Returns a newly-constructed DateTime.\n   *\n   * By default, the setter keeps the underlying time the same (as in, the same UTC timestamp), but the new instance will report different local times and consider DSTs when making computations, as with {@link plus}. You may wish to use {@link toLocal} and {@link toUTC} which provide simple convenience wrappers for commonly used zones.\n   * @param {string|Zone} [zone='local'] - a zone identifier. As a string, that can be any IANA zone supported by the host environment, or a fixed-offset name of the form 'utc+3', or the strings 'local' or 'utc'. You may also supply an instance of a {@link Zone} class.\n   * @param {object} opts - options\n   * @param {boolean} [opts.keepCalendarTime=false] - If true, adjust the underlying time so that the local time stays the same, but in the target zone. You should rarely need this.\n   * @return {DateTime}\n   */\n  setZone(zone, { keepCalendarTime = false } = {}) {\n    zone = Util.normalizeZone(zone);\n    if (zone.equals(this.zone)) {\n      return this;\n    } else if (!zone.isValid) {\n      return DateTime.invalid(UNSUPPORTED_ZONE);\n    } else {\n      const newTS = keepCalendarTime\n        ? this.ts + (this.o - zone.offset(this.ts)) * 60 * 1000\n        : this.ts;\n      return clone(this, { ts: newTS, zone });\n    }\n  }\n\n  /**\n   * \"Set\" the locale, numberingSystem, or outputCalendar. Returns a newly-constructed DateTime.\n   * @param {object} properties - the properties to set\n   * @example DateTime.local(2017, 5, 25).reconfigure({ locale: 'en-GB' })\n   * @return {DateTime}\n   */\n  reconfigure({ locale, numberingSystem, outputCalendar } = {}) {\n    const loc = this.loc.clone({ locale, numberingSystem, outputCalendar });\n    return clone(this, { loc });\n  }\n\n  /**\n   * \"Set\" the locale. Returns a newly-constructed DateTime.\n   * Just a convenient alias for reconfigure({ locale })\n   * @example DateTime.local(2017, 5, 25).setLocale('en-GB')\n   * @return {DateTime}\n   */\n  setLocale(locale) {\n    return this.reconfigure({ locale });\n  }\n\n  /**\n   * \"Set\" the values of specified units. Returns a newly-constructed DateTime.\n   * @param {object} values - a mapping of units to numbers\n   * @example dt.set({ year: 2017 })\n   * @example dt.set({ hour: 8, minute: 30 })\n   * @example dt.set({ weekday: 5 })\n   * @example dt.set({ year: 2005, ordinal: 234 })\n   * @example dt.set({ outputCalendar: 'beng', zone: 'utc' })\n   * @return {DateTime}\n   */\n  set(values) {\n    if (!this.isValid) return this;\n\n    const normalized = Util.normalizeObject(values, normalizeUnit),\n      settingWeekStuff =\n        !Util.isUndefined(normalized.weekYear) ||\n        !Util.isUndefined(normalized.weekNumber) ||\n        !Util.isUndefined(normalized.weekday);\n\n    let mixed;\n    if (settingWeekStuff) {\n      mixed = Conversions.weekToGregorian(\n        Object.assign(Conversions.gregorianToWeek(this.c), normalized)\n      );\n    } else if (!Util.isUndefined(normalized.ordinal)) {\n      mixed = Conversions.ordinalToGregorian(\n        Object.assign(Conversions.gregorianToOrdinal(this.c), normalized)\n      );\n    } else {\n      mixed = Object.assign(this.toObject(), normalized);\n\n      // if we didn't set the day but we ended up on an overflow date,\n      // use the last day of the right month\n      if (Util.isUndefined(normalized.day)) {\n        mixed.day = Math.min(Util.daysInMonth(mixed.year, mixed.month), mixed.day);\n      }\n    }\n\n    const [ts, o] = objToTS(mixed, this.o, this.zone);\n    return clone(this, { ts, o });\n  }\n\n  /**\n   * Add a period of time to this DateTime and return the resulting DateTime\n   *\n   * Adding hours, minutes, seconds, or milliseconds increases the timestamp by the right number of milliseconds. Adding days, months, or years shifts the calendar, accounting for DSTs and leap years along the way. Thus, `dt.plus({ hours: 24 })` may result in a different time than `dt.plus({ days: 1 })` if there's a DST shift in between.\n   * @param {Duration|number|object} duration - The amount to add. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   * @example DateTime.local().plus(123) //~> in 123 milliseconds\n   * @example DateTime.local().plus({ minutes: 15 }) //~> in 15 minutes\n   * @example DateTime.local().plus({ days: 1 }) //~> this time tomorrow\n   * @example DateTime.local().plus({ days: -1 }) //~> this time yesterday\n   * @example DateTime.local().plus({ hours: 3, minutes: 13 }) //~> in 1 hr, 13 min\n   * @example DateTime.local().plus(Duration.fromObject({ hours: 3, minutes: 13 })) //~> in 1 hr, 13 min\n   * @return {DateTime}\n   */\n  plus(duration) {\n    if (!this.isValid) return this;\n    const dur = Util.friendlyDuration(duration);\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * Subtract a period of time to this DateTime and return the resulting DateTime\n   * See {@link plus}\n   * @param {Duration|number|object} duration - The amount to subtract. Either a Luxon Duration, a number of milliseconds, the object argument to Duration.fromObject()\n   @return {DateTime}\n  */\n  minus(duration) {\n    if (!this.isValid) return this;\n    const dur = Util.friendlyDuration(duration).negate();\n    return clone(this, adjustTime(this, dur));\n  }\n\n  /**\n   * \"Set\" this DateTime to the beginning of a unit of time.\n   * @param {string} unit - The unit to go to the beginning of. Can be 'year', 'month', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @example DateTime.local(2014, 3, 3).startOf('month').toISODate(); //=> '2014-03-01'\n   * @example DateTime.local(2014, 3, 3).startOf('year').toISODate(); //=> '2014-01-01'\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('day').toISOTime(); //=> '00:00.000-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).startOf('hour').toISOTime(); //=> '05:00:00.000-05:00'\n   * @return {DateTime}\n   */\n  startOf(unit) {\n    if (!this.isValid) return this;\n    const o = {},\n      normalizedUnit = Duration.normalizeUnit(unit);\n    switch (normalizedUnit) {\n      case 'years':\n        o.month = 1;\n      // falls through\n      case 'months':\n        o.day = 1;\n      // falls through\n      case 'weeks':\n      case 'days':\n        o.hour = 0;\n      // falls through\n      case 'hours':\n        o.minute = 0;\n      // falls through\n      case 'minutes':\n        o.second = 0;\n      // falls through\n      case 'seconds':\n        o.millisecond = 0;\n        break;\n      case 'milliseconds':\n        break;\n      default:\n        throw new InvalidUnitError(unit);\n    }\n\n    if (normalizedUnit === 'weeks') {\n      o.weekday = 1;\n    }\n\n    return this.set(o);\n  }\n\n  /**\n   * \"Set\" this DateTime to the end (i.e. the last millisecond) of a unit of time\n   * @param {string} unit - The unit to go to the end of. Can be 'year', 'month', 'day', 'hour', 'minute', 'second', or 'millisecond'.\n   * @example DateTime.local(2014, 3, 3).endOf('month').toISO(); //=> '2014-03-03T00:00:00.000-05:00'\n   * @example DateTime.local(2014, 3, 3).endOf('year').toISO(); //=> '2014-12-31T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('day').toISO(); //=> '2014-03-03T23:59:59.999-05:00'\n   * @example DateTime.local(2014, 3, 3, 5, 30).endOf('hour').toISO(); //=> '2014-03-03T05:59:59.999-05:00'\n   * @return {DateTime}\n   */\n  endOf(unit) {\n    return this.isValid\n      ? this.startOf(unit)\n          .plus({ [unit]: 1 })\n          .minus(1)\n      : this;\n  }\n\n  // OUTPUT\n\n  /**\n   * Returns a string representation of this DateTime formatted according to the specified format string.\n   * **You may not want this.** See {@link toLocaleString} for a more flexible formatting tool. See the documentation for the specific format tokens supported.\n   * Defaults to en-US if no locale has been specified, regardless of the system's locale\n   * @param {string} fmt - the format string\n   * @param {object} opts - options\n   * @param {boolean} opts.round - round numerical values\n   * @example DateTime.local().toFormat('yyyy LLL dd') //=> '2017 avr. 22'\n   * @example DateTime.local().setLocale('fr').toFormat('yyyy LLL dd') //=> '2017 Apr 22'\n   * @example DateTime.local().toFormat(\"HH 'hours and' mm 'minutes'\") //=> '20 hours and 55 minutes'\n   * @return {string}\n   */\n  toFormat(fmt, opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.redefaultToEN(), opts).formatDateTimeFromString(this, fmt)\n      : INVALID;\n  }\n\n  /**\n   * Returns a localized string representing this date. Accepts the same options as the Intl.DateTimeFormat constructor and any presets defined by Luxon, such as `DateTime.DATE_FULL` or `DateTime.TIME_SIMPLE`.\n   * The exact behavior of this method is browser-specific, but in general it will return an appropriate representation.\n   * of the DateTime in the assigned locale.\n   * Defaults to the system's locale if no locale has been specified\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat\n   * @param opts {object} - Intl.DateTimeFormat constructor options\n   * @example DateTime.local().toLocaleString(); //=> 4/20/2017\n   * @example DateTime.local().setLocale('en-gb').toLocaleString(); //=> '20/04/2017'\n   * @example DateTime.local().toLocaleString(DateTime.DATE_FULL); //=> 'April 20, 2017'\n   * @example DateTime.local().toLocaleString(DateTime.TIME_SIMPLE); //=> '11:32 AM'\n   * @example DateTime.local().toLocaleString(DateTime.DATETIME_SHORT); //=> '4/20/2017, 11:32 AM'\n   * @example DateTime.local().toLocaleString({weekday: 'long', month: 'long', day: '2-digit'}); //=> 'Thu, Apr 20'\n   * @example DateTime.local().toLocaleString({weekday: 'long', month: 'long', day: '2-digit', hour: '2-digit', minute: '2-digit'}); //=> 'Thu, Apr 20, 11:27'\n   * @example DateTime.local().toLocaleString({hour: '2-digit', minute: '2-digit'}); //=> '11:32'\n   * @return {string}\n   */\n  toLocaleString(opts = Formats.DATE_SHORT) {\n    return this.isValid\n      ? Formatter.create(this.loc.clone(opts), opts).formatDateTime(this)\n      : INVALID;\n  }\n\n  /**\n   * Returns an array of format \"parts\", i.e. individual tokens along with metadata. This is allows callers to post-process individual sections of the formatted output.\n   * Defaults to the system's locale if no locale has been specified\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DateTimeFormat/formatToParts\n   * @param opts {object} - Intl.DateTimeFormat constructor options, same as `toLocaleString`.\n   * @example DateTime.local().toLocaleString(); //=> [\n   *                                    //=>   { type: 'day', value: '25' },\n   *                                    //=>   { type: 'literal', value: '/' },\n   *                                    //=>   { type: 'month', value: '05' },\n   *                                    //=>   { type: 'literal', value: '/' },\n   *                                    //=>   { type: 'year', value: '1982' }\n   *                                    //=> ]\n   */\n  toLocaleParts(opts = {}) {\n    return this.isValid\n      ? Formatter.create(this.loc.clone(opts), opts).formatDateTimeParts(this)\n      : [];\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime\n   * @param {object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @example DateTime.utc(1982, 5, 25).toISO() //=> '1982-05-25T00:00:00.000Z'\n   * @example DateTime.local().toISO() //=> '2017-04-22T20:47:05.335-04:00'\n   * @example DateTime.local().toISO({ includeOffset: false }) //=> '2017-04-22T20:47:05.335'\n   * @return {string}\n   */\n  toISO(opts = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    return `${this.toISODate()}T${this.toISOTime(opts)}`;\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's date component\n   * @example DateTime.utc(1982, 5, 25).toISODate() //=> '07:34:19.361Z'\n   * @return {string}\n   */\n  toISODate() {\n    return toTechFormat(this, 'yyyy-MM-dd');\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's week date\n   * @example DateTime.utc(1982, 5, 25).toISOWeekDate() //=> '1982-W21-2'\n   * @return {string}\n   */\n  toISOWeekDate() {\n    return toTechFormat(this, \"kkkk-'W'WW-c\");\n  }\n\n  /**\n   * Returns an ISO 8601-compliant string representation of this DateTime's time component\n   * @param {object} opts - options\n   * @param {boolean} [opts.suppressMilliseconds=false] - exclude milliseconds from the format if they're 0\n   * @param {boolean} [opts.suppressSeconds=false] - exclude seconds from the format if they're 0\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @example DateTime.utc().hour(7).minute(34).toISOTime() //=> '07:34:19.361Z'\n   * @example DateTime.utc().hour(7).minute(34).toISOTime({ suppressSeconds: true }) //=> '07:34Z'\n   * @return {string}\n   */\n  toISOTime({ suppressMilliseconds = false, suppressSeconds = false, includeOffset = true } = {}) {\n    return toTechTimeFormat(this, { suppressSeconds, suppressMilliseconds, includeOffset });\n  }\n\n  /**\n   * Returns an RFC 2822-compatible string representation of this DateTime, always in UTC\n   * @example DateTime.utc(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 +0000'\n   * @example DateTime.local(2014, 7, 13).toRFC2822() //=> 'Sun, 13 Jul 2014 00:00:00 -0400'\n   * @return {string}\n   */\n  toRFC2822() {\n    return toTechFormat(this, 'EEE, dd LLL yyyy hh:mm:ss ZZZ');\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in HTTP headers.\n   * Specifically, the string conforms to RFC 1123.\n   * @see https://www.w3.org/Protocols/rfc2616/rfc2616-sec3.html#sec3.3.1\n   * @example DateTime.utc(2014, 7, 13).toHTTP() //=> 'Sun, 13 Jul 2014 00:00:00 GMT'\n   * @example DateTime.utc(2014, 7, 13, 19).toHTTP() //=> 'Sun, 13 Jul 2014 19:00:00 GMT'\n   * @return {string}\n   */\n  toHTTP() {\n    return toTechFormat(this.toUTC(), \"EEE, dd LLL yyyy HH:mm:ss 'GMT'\");\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL Date\n   * @example DateTime.utc(2014, 7, 13).toSQLDate() //=> '2014-07-13'\n   * @return {string}\n   */\n  toSQLDate() {\n    return toTechFormat(this, 'yyyy-MM-dd');\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL Time\n   * @param {object} opts - options\n   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overides includeOffset.\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @example DateTime.utc().toSQL() //=> '05:15:16.345'\n   * @example DateTime.local().toSQL() //=> '05:15:16.345 -04:00'\n   * @example DateTime.local().toSQL({ includeOffset: false }) //=> '05:15:16.345'\n   * @example DateTime.local().toSQL({ includeZone: false }) //=> '05:15:16.345 America/New_York'\n   * @return {string}\n   */\n  toSQLTime({ includeOffset = true, includeZone = false } = {}) {\n    return toTechTimeFormat(this, { includeOffset, includeZone, spaceZone: true });\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for use in SQL DateTime\n   * @param {object} opts - options\n   * @param {boolean} [opts.includeZone=false] - include the zone, such as 'America/New_York'. Overrides includeOffset.\n   * @param {boolean} [opts.includeOffset=true] - include the offset, such as 'Z' or '-04:00'\n   * @example DateTime.utc(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 Z'\n   * @example DateTime.local(2014, 7, 13).toSQL() //=> '2014-07-13 00:00:00.000 -04:00'\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeOffset: false }) //=> '2014-07-13 00:00:00.000'\n   * @example DateTime.local(2014, 7, 13).toSQL({ includeZone: false }) //=> '2014-07-13 00:00:00.000 America/New_York'\n   * @return {string}\n   */\n  toSQL(opts = {}) {\n    if (!this.isValid) {\n      return null;\n    }\n\n    return `${this.toSQLDate()} ${this.toSQLTime(opts)}`;\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for debugging\n   * @return {string}\n   */\n  toString() {\n    return this.isValid ? this.toISO() : INVALID;\n  }\n\n  /**\n   * Returns a string representation of this DateTime appropriate for the REPL.\n   * @return {string}\n   */\n  inspect() {\n    if (this.isValid) {\n      return `DateTime {\\n  ts: ${this.toISO()},\\n  zone: ${this.zone.name},\\n  locale: ${this\n        .locale} }`;\n    } else {\n      return `DateTime { Invalid, reason: ${this.invalidReason} }`;\n    }\n  }\n\n  /**\n   * Returns the epoch milliseconds of this DateTime\n   * @return {number}\n   */\n  valueOf() {\n    return this.isValid ? this.ts : NaN;\n  }\n\n  /**\n   * Returns an ISO 8601 representation of this DateTime appropriate for use in JSON.\n   * @return {string}\n   */\n  toJSON() {\n    return this.toISO();\n  }\n\n  /**\n   * Returns a Javascript object with this DateTime's year, month, day, and so on.\n   * @param opts - options for generating the object\n   * @param {boolean} [opts.includeConfig=false] - include configuration attributes in the output\n   * @example DateTime.local().toObject() //=> { year: 2017, month: 4, day: 22, hour: 20, minute: 49, second: 42, millisecond: 268 }\n   * @return {object}\n   */\n  toObject(opts = {}) {\n    if (!this.isValid) return {};\n\n    const base = Object.assign({}, this.c);\n\n    if (opts.includeConfig) {\n      base.outputCalendar = this.outputCalendar;\n      base.numberingSystem = this.loc.numberingSystem;\n      base.locale = this.loc.locale;\n    }\n    return base;\n  }\n\n  /**\n   * Returns a Javascript Date equivalent to this DateTime.\n   * @return {object}\n   */\n  toJSDate() {\n    return new Date(this.isValid ? this.ts : NaN);\n  }\n\n  // COMPARE\n\n  /**\n   * Return the difference between two DateTimes as a Duration.\n   * @param {DateTime} otherDateTime - the DateTime to compare this one to\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or array of units (such as 'hours' or 'days') to include in the duration.\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @example\n   * var i1 = DateTime.fromISO('1982-05-25T09:45'),\n   *     i2 = DateTime.fromISO('1983-10-14T10:30');\n   * i2.diff(i1).toObject() //=> { milliseconds: 43807500000 }\n   * i2.diff(i1, 'hours').toObject() //=> { hours: 12168.75 }\n   * i2.diff(i1, ['months', 'days']).toObject() //=> { months: 16, days: 19.03125 }\n   * i2.diff(i1, ['months', 'days', 'hours']).toObject() //=> { months: 16, days: 19, hours: 0.75 }\n   * @return {Duration}\n   */\n  diff(otherDateTime, unit = 'milliseconds', opts = {}) {\n    if (!this.isValid || !otherDateTime.isValid)\n      return Duration.invalid(this.invalidReason || otherDateTime.invalidReason);\n\n    const units = Util.maybeArray(unit).map(Duration.normalizeUnit);\n\n    const flipped = otherDateTime.valueOf() > this.valueOf(),\n      post = flipped ? otherDateTime : this,\n      accum = {};\n\n    let cursor = flipped ? this : otherDateTime,\n      lowestOrder = null;\n\n    if (units.indexOf('years') >= 0) {\n      let dYear = post.year - cursor.year;\n\n      cursor = cursor.set({ year: post.year });\n\n      if (cursor > post) {\n        cursor = cursor.minus({ years: 1 });\n        dYear -= 1;\n      }\n\n      accum.years = dYear;\n      lowestOrder = 'years';\n    }\n\n    if (units.indexOf('months') >= 0) {\n      const dYear = post.year - cursor.year;\n      let dMonth = post.month - cursor.month + dYear * 12;\n\n      cursor = cursor.set({ year: post.year, month: post.month });\n\n      if (cursor > post) {\n        cursor = cursor.minus({ months: 1 });\n        dMonth -= 1;\n      }\n\n      accum.months = dMonth;\n      lowestOrder = 'months';\n    }\n\n    const computeDayDelta = () => {\n      const utcDayStart = dt =>\n          dt\n            .toUTC(0, { keepCalendarTime: true })\n            .startOf('day')\n            .valueOf(),\n        ms = utcDayStart(post) - utcDayStart(cursor);\n      return Math.floor(Duration.fromMillis(ms, opts).shiftTo('days').days);\n    };\n\n    if (units.indexOf('weeks') >= 0) {\n      const days = computeDayDelta();\n      let weeks = (days - days % 7) / 7;\n      cursor = cursor.plus({ weeks });\n\n      if (cursor > post) {\n        cursor = cursor.minus({ weeks: 1 });\n        weeks -= 1;\n      }\n\n      accum.weeks = weeks;\n      lowestOrder = 'weeks';\n    }\n\n    if (units.indexOf('days') >= 0) {\n      let days = computeDayDelta();\n      cursor = cursor.set({\n        year: post.year,\n        month: post.month,\n        day: post.day\n      });\n\n      if (cursor > post) {\n        cursor = cursor.minus({ days: 1 });\n        days -= 1;\n      }\n\n      accum.days = days;\n      lowestOrder = 'days';\n    }\n\n    const remaining = Duration.fromMillis(post - cursor, opts),\n      moreUnits = units.filter(\n        u => ['hours', 'minutes', 'seconds', 'milliseconds'].indexOf(u) >= 0\n      ),\n      shiftTo = moreUnits.length > 0 ? moreUnits : [lowestOrder],\n      shifted = remaining.shiftTo(...shiftTo),\n      merged = shifted.plus(Duration.fromObject(Object.assign(accum, opts)));\n\n    return flipped ? merged.negate() : merged;\n  }\n\n  /**\n   * Return the difference between this DateTime and right now.\n   * See {@link diff}\n   * @param {string|string[]} [unit=['milliseconds']] - the unit or units units (such as 'hours' or 'days') to include in the duration\n   * @param {Object} opts - options that affect the creation of the Duration\n   * @param {string} [opts.conversionAccuracy='casual'] - the conversion system to use\n   * @return {Duration}\n   */\n  diffNow(unit = 'milliseconds', opts = {}) {\n    return this.diff(DateTime.local(), unit, opts);\n  }\n\n  /**\n   * Return an Interval spanning between this DateTime and another DateTime\n   * @param {DateTime} otherDateTime - the other end point of the Interval\n   * @return {Duration}\n   */\n  until(otherDateTime) {\n    return this.isValid ? Interval.fromDateTimes(this, otherDateTime) : this;\n  }\n\n  /**\n   * Return whether this DateTime is in the same unit of time as another DateTime\n   * @param {DateTime} otherDateTime - the other DateTime\n   * @param {string} unit - the unit of time to check sameness on\n   * @example DateTime.local().hasSame(otherDT, 'day'); //~> true if both the same calendar day\n   * @return {boolean}\n   */\n  hasSame(otherDateTime, unit) {\n    if (!this.isValid) return false;\n    if (unit === 'millisecond') {\n      return this.valueOf() === otherDateTime.valueOf();\n    } else {\n      const inputMs = otherDateTime.valueOf();\n      return this.startOf(unit) <= inputMs && inputMs <= this.endOf(unit);\n    }\n  }\n\n  /**\n   * Equality check\n   * Two DateTimes are equal iff they represent the same millisecond\n   * @param {DateTime} other - the other DateTime\n   * @return {boolean}\n   */\n  equals(other) {\n    return this.isValid && other.isValid\n      ? this.valueOf() === other.valueOf() &&\n          this.zone.equals(other.zone) &&\n          this.loc.equals(other.loc)\n      : false;\n  }\n\n  /**\n   * Return the min of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the minimum\n   * @return {DateTime}\n   */\n  static min(...dateTimes) {\n    return Util.bestBy(dateTimes, i => i.valueOf(), Math.min);\n  }\n\n  /**\n   * Return the max of several date times\n   * @param {...DateTime} dateTimes - the DateTimes from which to choose the maximum\n   * @return {DateTime}\n   */\n  static max(...dateTimes) {\n    return Util.bestBy(dateTimes, i => i.valueOf(), Math.max);\n  }\n\n  // MISC\n\n  /**\n   * Explain how a string would be parsed by fromString()\n   * @param {string} text - the string to parse\n   * @param {string} fmt - the format the string is expected to be in (see description)\n   * @param {object} options - options taken by fromString()\n   * @return {object}\n   */\n  static fromStringExplain(text, fmt, options = {}) {\n    const parser = new TokenParser(Locale.fromOpts(options));\n    return parser.explainParse(text, fmt);\n  }\n\n  // FORMAT PRESETS\n\n  /**\n   * {@link toLocaleString} format like 10/14/1983\n   */\n  static get DATE_SHORT() {\n    return Formats.DATE_SHORT;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Oct 14, 1983'\n   */\n  static get DATE_MED() {\n    return Formats.DATE_MED;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'October 14, 1983'\n   */\n  static get DATE_FULL() {\n    return Formats.DATE_FULL;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Tuesday, October 14, 1983'\n   */\n  static get DATE_HUGE() {\n    return Formats.DATE_HUGE;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30 AM'. Only 12-hour if the locale is.\n   */\n  static get TIME_SIMPLE() {\n    return Formats.TIME_SIMPLE;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 AM'. Only 12-hour if the locale is.\n   */\n  static get TIME_WITH_SECONDS() {\n    return Formats.TIME_WITH_SECONDS;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 AM EDT'. Only 12-hour if the locale is.\n   */\n  static get TIME_WITH_SHORT_OFFSET() {\n    return Formats.TIME_WITH_SHORT_OFFSET;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   */\n  static get TIME_WITH_LONG_OFFSET() {\n    return Formats.TIME_WITH_LONG_OFFSET;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30', always 24-hour.\n   */\n  static get TIME_24_SIMPLE() {\n    return Formats.TIME_24_SIMPLE;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23', always 24-hour.\n   */\n  static get TIME_24_WITH_SECONDS() {\n    return Formats.TIME_24_WITH_SECONDS;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 EDT', always 24-hour.\n   */\n  static get TIME_24_WITH_SHORT_OFFSET() {\n    return Formats.TIME_24_WITH_SHORT_OFFSET;\n  }\n\n  /**\n   * {@link toLocaleString} format like '09:30:23 Eastern Daylight Time', always 24-hour.\n   */\n  static get TIME_24_WITH_LONG_OFFSET() {\n    return Formats.TIME_24_WITH_LONG_OFFSET;\n  }\n\n  /**\n   * {@link toLocaleString} format like '10/14/1983, 9:30 AM'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_SHORT() {\n    return Formats.DATETIME_SHORT;\n  }\n\n  /**\n   * {@link toLocaleString} format like '10/14/1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_SHORT_WITH_SECONDS() {\n    return Formats.DATETIME_SHORT_WITH_SECONDS;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Oct 14, 1983, 9:30 AM'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_MED() {\n    return Formats.DATETIME_MED;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Oct 14, 1983, 9:30:33 AM'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_MED_WITH_SECONDS() {\n    return Formats.DATETIME_MED_WITH_SECONDS;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'October 14, 1983, 9:30 AM EDT'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_FULL() {\n    return Formats.DATETIME_FULL;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'October 14, 1983, 9:303 AM EDT'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_FULL_WITH_SECONDS() {\n    return Formats.DATETIME_FULL_WITH_SECONDS;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_HUGE() {\n    return Formats.DATETIME_HUGE;\n  }\n\n  /**\n   * {@link toLocaleString} format like 'Friday, October 14, 1983, 9:30:33 AM Eastern Daylight Time'. Only 12-hour if the locale is.\n   */\n  static get DATETIME_HUGE_WITH_SECONDS() {\n    return Formats.DATETIME_HUGE_WITH_SECONDS;\n  }\n}\n"],"names":["LuxonError","Error","InvalidDateTimeError","reason","InvalidIntervalError","InvalidDurationError","ConflictingSpecificationError","InvalidUnitError","unit","InvalidArgumentError","ZoneIsAbstractError","Zone","ts","otherZone","opts","singleton","LocalZone","format","locale","Util","parseZoneInfo","Date","getTimezoneOffset","type","hasIntl","Intl","DateTimeFormat","resolvedOptions","timeZone","typeToPos","hackyOffset","dtf","date","replace","parsed","exec","formatted","fMonth","fDay","fYear","fHour","fMinute","fSecond","partsOffset","formatToParts","filled","i","length","value","pos","isUndefined","parseInt","isValid","zone","e","IANAZone","s","match","name","zoneName","valid","asUTC","UTC","asTS","valueOf","hoursMinutesOffset","z","hours","Math","trunc","fixed","minutes","abs","sign","base","padStart","FixedOffsetZone","offset","utcInstance","r","signedOffset","Formats","DATE_SHORT","DATE_MED","DATE_FULL","DATE_HUGE","TIME_SIMPLE","TIME_WITH_SECONDS","TIME_WITH_SHORT_OFFSET","TIME_WITH_LONG_OFFSET","TIME_24_SIMPLE","TIME_24_WITH_SECONDS","TIME_24_WITH_SHORT_OFFSET","TIME_24_WITH_LONG_OFFSET","DATETIME_SHORT","DATETIME_SHORT_WITH_SECONDS","DATETIME_MED","DATETIME_MED_WITH_SECONDS","DATETIME_FULL","DATETIME_FULL_WITH_SECONDS","DATETIME_HUGE","DATETIME_HUGE_WITH_SECONDS","stringify","obj","JSON","Object","keys","sort","English","monthsNarrow","monthsShort","monthsLong","weekdaysNarrow","weekdaysShort","weekdaysLong","erasNarrow","erasShort","erasLong","dt","meridiems","hour","weekdays","weekday","months","month","eras","year","knownFormat","filtered","pick","key","dateTimeHuge","stringifyTokens","splits","tokenToString","token","literal","val","Formatter","formatOpts","assign","round","fmt","current","currentFull","bracketed","c","charAt","push","loc","systemLoc","redefaultToSystem","df","dtFormatter","n","p","padTo","numberFormatter","knownEnglish","listingMode","string","extract","formatOffset","isOffsetFixed","allowZ","num","RangeError","meridiem","meridiemForDateTime","hour12","standalone","monthForDateTime","day","weekdayForDateTime","era","eraForDateTime","outputCal","outputCalendar","millisecond","second","minute","offsetNameShort","offsetNameLong","toString","slice","weekYear","weekNumber","ordinal","formatWithSystemDefault","DateTime","parseFormat","dur","tokenToField","mapped","lildur","get","tokens","realTokens","reduce","found","concat","collapsed","shiftTo","map","filter","t","sysLocaleCache","systemLocale","intlConfigString","numberingSystem","Array","isArray","l","mapMonths","f","ms","utc","mapWeekdays","listStuff","defaultOK","englishFn","intlFn","mode","PolyNumberFormatter","maybeRounded","PolyDateFormatter","intl","universal","fromMillis","realIntlOpts","toJSDate","tokenFormat","formatString","Locale","create","formatDateTimeFromString","hasFormatToParts","defaultToEN","specifiedLocale","Settings","defaultLocale","numberingSystemR","defaultNumberingSystem","outputCalendarR","defaultOutputCalendar","localeR","numbering","weekdaysCache","monthsCache","meridiemCache","eraCache","defaultOk","hasFTP","isActuallyEn","toLowerCase","startsWith","hasNoWeirdness","alts","getOwnPropertyNames","clone","formatStr","undefined","intlOpts","field","results","matching","find","m","useGrouping","minimumIntegerDigits","maximumFractionDigits","NumberFormat","other","now","defaultZone","throwOnInvalid","resetCache","instance","normalizeZone","o","prototype","call","thing","arr","by","compare","best","next","pair","apply","a","k","bottom","top","isNumber","input","repeat","fraction","parseFloat","isLeapYear","offsetFormat","modified","timeZoneName","without","included","diffed","substring","trimmed","offHourStr","offMinuteStr","offHour","offMin","offMinSigned","duration","Duration","fromObject","dateTimeish","fromJSDate","isString","lowered","isValidSpecier","parseSpecifier","normalizer","ignoreUnknown","normalized","u","hasOwnProperty","v","Number","isNaN","combineRegexes","regexes","full","source","RegExp","combineExtractors","extractors","ex","mergedVals","mergedZone","cursor","parse","patterns","regex","extractor","simpleParse","ret","offsetRegex","isoTimeBaseRegex","isoTimeRegex","isoTimeExtensionRegex","isoYmdRegex","isoWeekRegex","isoOrdinalRegex","extractISOWeekData","extractISOOrdinalData","sqlYmdRegex","sqlTimeRegex","sqlTimeExtensionRegex","extractISOYmd","item","extractISOTime","parseMillis","extractISOOffset","local","fullOffset","extractIANAZone","isoDuration","extractISODuration","yearStr","monthStr","dayStr","hourStr","minuteStr","secondStr","weekStr","obsOffsets","fromStrings","weekdayStr","result","untruncateYear","indexOf","rfc2822","extractRFC2822","obsOffset","milOffset","preprocessRFC2822","trim","rfc1123","rfc850","ascii","extractRFC1123Or850","extractASCII","RegexParser","INVALID","lowOrderMatrix","seconds","milliseconds","casualMatrix","daysInYearAccurate","daysInMonthAccurate","accurateMatrix","orderedUnits","clear","conf","values","conversionAccuracy","isHighOrderNegative","config","accurate","invalid","invalidReason","matrix","formatDurationFromString","includeConfig","norm","normalize","negate","years","days","weeks","toISO","friendlyDuration","plus","normalizeUnit","mixed","normalizeObject","NaN","neg","shifted","units","built","accumulated","vals","toObject","lastUnit","own","ak","down","conv","added","floor","negated","equals","count","text","parseISODuration","validateStartEnd","start","end","Interval","toDuration","startOf","diff","minus","hasSame","dateTime","fromDateTimes","dateTimes","sorted","friendlyDateTime","numberOfParts","splitBy","intervals","xor","intersection","isEmpty","dateFormat","separator","toFormat","builtStart","builtEnd","split","fromISO","b","sofar","overlaps","abutsStart","union","final","currentCount","ends","time","flattened","merge","Info","proto","setZone","set","intlTokens","zones","MISSING_FTP","intUnit","post","deser","fixListRegex","stripInsensitivities","oneOf","strings","startIndex","join","findIndex","groups","h","simple","unitForToken","one","two","three","four","oneOrTwo","oneToThree","twoToFour","unitate","buildRegex","re","handlers","matches","all","matchIndex","dateTimeFromMatches","toField","Z","G","y","S","TokenParser","disqualifyingUnit","regexString","rawMatches","explainParse","nonLeapLadder","leapLadder","dayOfWeek","js","getUTCDay","lastWeekNumber","p1","last","p2","computeOrdinal","uncomputeOrdinal","table","month0","Conversions","gregObj","timeObject","weekData","weekdayOfJan4","daysInYear","gregData","ordinalData","validYear","validWeek","numberBetween","validWeekday","validOrdinal","validMonth","validDay","daysInMonth","validHour","validMinute","validSecond","validMillisecond","INVALID_INPUT","UNSUPPORTED_ZONE","UNPARSABLE","possiblyCachedWeekData","gregorianToWeek","inst","old","fixOffset","localTS","tz","utcGuess","o2","o3","min","max","tsToObj","d","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","objToLocalTS","setUTCFullYear","objToTS","adjustTime","oPre","millisToAdd","as","parseDataToDateTime","parsedZone","interpretationZone","toTechFormat","toTechTimeFormat","suppressSeconds","suppressMilliseconds","includeOffset","includeZone","spaceZone","defaultUnitValues","defaultWeekUnitValues","defaultOrdinalUnitValues","orderedWeekUnits","orderedOrdinalUnits","quickDT","hasInvalidGregorianData","hasInvalidTimeData","offsetProvis","tsNow","unchanged","calendar","keepCalendarTime","newTS","reconfigure","settingWeekStuff","weekToGregorian","ordinalToGregorian","gregorianToOrdinal","normalizedUnit","redefaultToEN","formatDateTime","formatDateTimeParts","toISODate","toISOTime","toUTC","toSQLDate","toSQLTime","otherDateTime","maybeArray","flipped","accum","lowestOrder","dYear","dMonth","computeDayDelta","utcDayStart","remaining","moreUnits","merged","inputMs","endOf","offsetName","options","isDate","zoneToUse","containsOrdinal","containsGregorYear","containsGregorMD","containsGregor","definiteWeekDef","useWeekData","defaultValues","objNow","foundFirst","higherOrderInvalid","hasInvalidWeekData","hasInvalidOrdinalData","gregorian","tsFinal","offsetFinal","parseISODate","parseRFC2822Date","parseHTTPDate","parser","fromOpts","parseDateTime","parseSQL","bestBy"],"mappings":"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","preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}